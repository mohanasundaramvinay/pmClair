using ClairTourTiny.Infrastructure.Dto.FileStorage;
using ClairTourTiny.Infrastructure.Dto.ProjectMaintenance;
using ClairTourTiny.Infrastructure.Dto.Projects;
using ClairTourTiny.Infrastructure.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;

namespace ClairTourTiny.Infrastructure;

public partial class ClairTourTinyContext : DbContext
{
    public ClairTourTinyContext()
    {
    }

    public ClairTourTinyContext(DbContextOptions<ClairTourTinyContext> options)
        : base(options)
    {
    }

    public async Task<List<T>> ExecuteStoredProcedureAsync<T>(string storedProcName, params SqlParameter[] parameters) where T : class
    {
        var paramList = parameters != null && parameters.Any()
            ? string.Join(", ", parameters.Select(p => p.ParameterName))
            : string.Empty;

        var sql = $"EXEC {storedProcName} {paramList}";

        return await Set<T>()
            .FromSqlRaw(sql, parameters)
            .ToListAsync();
    }

    public async Task<int> ExecuteStoredProcedureNonQueryAsync(string storedProcName, params SqlParameter[] parameters)
    {
        var paramList = parameters != null && parameters.Any()
            ? string.Join(", ", parameters.Select(p => p.ParameterName))
            : string.Empty;

        var sql = $"EXEC {storedProcName} {paramList}";

        return await Database.ExecuteSqlRawAsync(sql, parameters);
    }

    public async Task<List<T>> ExecuteSqlQueryAsync<T>(string sqlQuery, params SqlParameter[] parameters) where T : class
    {
        if (!sqlQuery.TrimEnd().EndsWith(";"))
        {
            sqlQuery += ";";
        }

        return await Set<T>()
            .FromSqlRaw(sqlQuery, parameters)
            .ToListAsync();
    }

    public async Task<int> ExecuteStoredProcedureNonQueryOutputParamAsync(string storedProcName, params SqlParameter[] parameters)
    {
        var paramList = parameters != null && parameters.Any()
            ? string.Join(", ", parameters.Select(p => p.ParameterName))
            : string.Empty;

        var sql = $"EXEC {storedProcName} {paramList} output";

        return await Database.ExecuteSqlRawAsync(sql, parameters);
    }

    public virtual DbSet<AbraHourlyPayCode> AbraHourlyPayCodes { get; set; }

    public virtual DbSet<AbraHourlyPayCodePrefix> AbraHourlyPayCodePrefixes { get; set; }

    public virtual DbSet<AccountFriendlyName> AccountFriendlyNames { get; set; }

    public virtual DbSet<ActiveBidProjectsWithOrderedPartsNotOnProjectCalendar> ActiveBidProjectsWithOrderedPartsNotOnProjectCalendars { get; set; }

    public virtual DbSet<ActiveDirectoryAddress> ActiveDirectoryAddresses { get; set; }

    public virtual DbSet<ActiveDirectoryContact> ActiveDirectoryContacts { get; set; }

    public virtual DbSet<ActiveDirectoryEmail> ActiveDirectoryEmails { get; set; }

    public virtual DbSet<ActiveDirectoryPhone> ActiveDirectoryPhones { get; set; }

    public virtual DbSet<AddressDataSourceFieldMap> AddressDataSourceFieldMaps { get; set; }

    public virtual DbSet<AgedReceivable> AgedReceivables { get; set; }

    public virtual DbSet<AgedReceivablesSummary> AgedReceivablesSummaries { get; set; }

    public virtual DbSet<AgedReceivablesSummaryForAccountExecutive> AgedReceivablesSummaryForAccountExecutives { get; set; }

    public virtual DbSet<AgedReceivablesSummaryForAdmin> AgedReceivablesSummaryForAdmins { get; set; }

    public virtual DbSet<AgedReceivablesSummaryForExecutive> AgedReceivablesSummaryForExecutives { get; set; }

    public virtual DbSet<AllPolarityMetrics20220901> AllPolarityMetrics20220901s { get; set; }

    public virtual DbSet<AllPolarityMetrics20220906> AllPolarityMetrics20220906s { get; set; }

    public virtual DbSet<AllPolarityMetrics20220909> AllPolarityMetrics20220909s { get; set; }

    public virtual DbSet<AllSpeakerMeasurement> AllSpeakerMeasurements { get; set; }

    public virtual DbSet<AllSysproPurchaseActivity> AllSysproPurchaseActivities { get; set; }

    public virtual DbSet<AllUserInfo> AllUserInfos { get; set; }

    public virtual DbSet<AllocatedDeviceIpAddress> AllocatedDeviceIpAddresses { get; set; }

    public virtual DbSet<AllocatedNewInvoiceNumber> AllocatedNewInvoiceNumbers { get; set; }

    public virtual DbSet<AllocatedNewInvoiceNumbers20230912> AllocatedNewInvoiceNumbers20230912s { get; set; }

    public virtual DbSet<AllocatedNewProjectNumber> AllocatedNewProjectNumbers { get; set; }

    public virtual DbSet<AllocatedNewPurchaseOrderNumber> AllocatedNewPurchaseOrderNumbers { get; set; }

    public virtual DbSet<AllocatedNewRequisitionNumber> AllocatedNewRequisitionNumbers { get; set; }

    public virtual DbSet<AllocatedUnifiedContactId> AllocatedUnifiedContactIds { get; set; }

    public virtual DbSet<AlreadyUsedProjectNumbers20200520> AlreadyUsedProjectNumbers20200520s { get; set; }

    public virtual DbSet<AmpChannelCorrectionCurf> AmpChannelCorrectionCurves { get; set; }

    public virtual DbSet<AmpOutput> AmpOutputs { get; set; }

    public virtual DbSet<AmpPosition> AmpPositions { get; set; }

    public virtual DbSet<Amplifier> Amplifiers { get; set; }

    public virtual DbSet<Apbank> Apbanks { get; set; }

    public virtual DbSet<Apexpcode> Apexpcodes { get; set; }

    public virtual DbSet<ApiKey> ApiKeys { get; set; }

    public virtual DbSet<AppConfig> AppConfigs { get; set; }

    public virtual DbSet<AppConfig1> AppConfigs1 { get; set; }

    public virtual DbSet<AppConfigA> AppConfigAs { get; set; }

    public virtual DbSet<AppConfigTemp> AppConfigTemps { get; set; }

    public virtual DbSet<AppleDevicePartNumber> AppleDevicePartNumbers { get; set; }

    public virtual DbSet<Apvndinq> Apvndinqs { get; set; }

    public virtual DbSet<Arcustinq> Arcustinqs { get; set; }

    public virtual DbSet<Area> Areas { get; set; }

    public virtual DbSet<AssignedCrewStartingToday> AssignedCrewStartingTodays { get; set; }

    public virtual DbSet<AttachmentCategory> AttachmentCategories { get; set; }

    public virtual DbSet<AttachmentType> AttachmentTypes { get; set; }

    public virtual DbSet<AttachmentTypeContactCategory> AttachmentTypeContactCategories { get; set; }

    public virtual DbSet<AttachmentTypeDatabaseRole> AttachmentTypeDatabaseRoles { get; set; }

    public virtual DbSet<AudioDeviceOutputChannel> AudioDeviceOutputChannels { get; set; }

    public virtual DbSet<AudioDeviceOutputPatchingMap> AudioDeviceOutputPatchingMaps { get; set; }

    public virtual DbSet<AudioOutputDevice> AudioOutputDevices { get; set; }

    public virtual DbSet<AudioOutputDevicePosition> AudioOutputDevicePositions { get; set; }

    public virtual DbSet<AudioOutputDeviceType> AudioOutputDeviceTypes { get; set; }

    public virtual DbSet<AuthenticationHistory> AuthenticationHistories { get; set; }

    public virtual DbSet<AutoInvoiceGeneration> AutoInvoiceGenerations { get; set; }

    public virtual DbSet<AvailMultipartGroup> AvailMultipartGroups { get; set; }

    public virtual DbSet<AvailMultipartGroup1> AvailMultipartGroups1 { get; set; }

    public virtual DbSet<AvailMultipartGroupsDesc> AvailMultipartGroupsDescs { get; set; }

    public virtual DbSet<AvailMultipartGroupsTemp> AvailMultipartGroupsTemps { get; set; }

    public virtual DbSet<BalDelete> BalDeletes { get; set; }

    public virtual DbSet<BankAccount> BankAccounts { get; set; }

    public virtual DbSet<BankAccountArchive> BankAccountArchives { get; set; }

    public virtual DbSet<BarcodeNumbersChangedToday> BarcodeNumbersChangedTodays { get; set; }

    public virtual DbSet<BatchTransferStaging> BatchTransferStagings { get; set; }

    public virtual DbSet<BatchTransferStagingV> BatchTransferStagingVs { get; set; }

    public virtual DbSet<BidProjectChange> BidProjectChanges { get; set; }

    public virtual DbSet<BidProjectCrewChange> BidProjectCrewChanges { get; set; }

    public virtual DbSet<BidProjectJobChange> BidProjectJobChanges { get; set; }

    public virtual DbSet<BidProjectPartChange> BidProjectPartChanges { get; set; }

    public virtual DbSet<BidProjectPartLatestChange> BidProjectPartLatestChanges { get; set; }

    public virtual DbSet<BillingAccount> BillingAccounts { get; set; }

    public virtual DbSet<BillingDaysBenchmark> BillingDaysBenchmarks { get; set; }

    public virtual DbSet<Billingperioditem> Billingperioditems { get; set; }

    public virtual DbSet<BillingperioditemsEquipment> BillingperioditemsEquipments { get; set; }

    public virtual DbSet<BillingperioditemsGroupsSummary> BillingperioditemsGroupsSummaries { get; set; }

    public virtual DbSet<BillingperioditemsSummary> BillingperioditemsSummaries { get; set; }

    public virtual DbSet<BinWeightValue> BinWeightValues { get; set; }

    public virtual DbSet<BrpDataImportPartTypeMatch> BrpDataImportPartTypeMatches { get; set; }

    public virtual DbSet<BudgetCategory> BudgetCategories { get; set; }

    public virtual DbSet<Cabinet> Cabinets { get; set; }

    public virtual DbSet<CabinetComponent> CabinetComponents { get; set; }

    public virtual DbSet<CabinetComponentTestMeasurement> CabinetComponentTestMeasurements { get; set; }

    public virtual DbSet<CabinetComponentTestMeasurementBulkSave> CabinetComponentTestMeasurementBulkSaves { get; set; }

    public virtual DbSet<CabinetComponentTestMeasurementUserEnteredFailure> CabinetComponentTestMeasurementUserEnteredFailures { get; set; }

    public virtual DbSet<CabinetComponentTestMeasurementUserEnteredFailureBulkSave> CabinetComponentTestMeasurementUserEnteredFailureBulkSaves { get; set; }

    public virtual DbSet<CabinetConfiguration> CabinetConfigurations { get; set; }

    public virtual DbSet<CabinetInput> CabinetInputs { get; set; }

    public virtual DbSet<CabinetNumber> CabinetNumbers { get; set; }

    public virtual DbSet<CabinetPosition> CabinetPositions { get; set; }

    public virtual DbSet<CabinetTestMeasurementUserEnteredFailure> CabinetTestMeasurementUserEnteredFailures { get; set; }

    public virtual DbSet<CabinetTestMeasurementUserEnteredFailureBulkSave> CabinetTestMeasurementUserEnteredFailureBulkSaves { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<CategoryGroup> CategoryGroups { get; set; }

    public virtual DbSet<CategoryName> CategoryNames { get; set; }

    public virtual DbSet<CategoryPart> CategoryParts { get; set; }

    public virtual DbSet<ChildPartsNotOnPartsList> ChildPartsNotOnPartsLists { get; set; }

    public virtual DbSet<ClairNewinpart> ClairNewinparts { get; set; }

    public virtual DbSet<ClairTourTaxCodesToSyproTaxCodesMapping> ClairTourTaxCodesToSyproTaxCodesMappings { get; set; }

    public virtual DbSet<CleanSolutionsCustomer> CleanSolutionsCustomers { get; set; }

    public virtual DbSet<CloudFileStoragGroupsToCoreTeam> CloudFileStoragGroupsToCoreTeams { get; set; }

    public virtual DbSet<CloudFileStorageFileRenameRequest> CloudFileStorageFileRenameRequests { get; set; }

    public virtual DbSet<CloudFileStorageFolderRenameRequest> CloudFileStorageFolderRenameRequests { get; set; }

    public virtual DbSet<CloudFileStorageGroup> CloudFileStorageGroups { get; set; }

    public virtual DbSet<CloudFileStoragePermissionFolderTemplate> CloudFileStoragePermissionFolderTemplates { get; set; }

    public virtual DbSet<CloudFileStorageShareRequest> CloudFileStorageShareRequests { get; set; }

    public virtual DbSet<CloudFileStorageShareRequestsA> CloudFileStorageShareRequestsAs { get; set; }

    public virtual DbSet<CloudFileStorageUploadedFile> CloudFileStorageUploadedFiles { get; set; }

    public virtual DbSet<CloudFileStorageUploadedFilesA> CloudFileStorageUploadedFilesAs { get; set; }

    public virtual DbSet<CloudFileStorageUploadedPartFile> CloudFileStorageUploadedPartFiles { get; set; }

    public virtual DbSet<Cm2Contact> Cm2Contacts { get; set; }

    public virtual DbSet<Cm2Customer> Cm2Customers { get; set; }

    public virtual DbSet<Cm2CustomersContactCategory> Cm2CustomersContactCategories { get; set; }

    public virtual DbSet<Cm2Vendor> Cm2Vendors { get; set; }

    public virtual DbSet<Cm2VendorsContactCategory> Cm2VendorsContactCategories { get; set; }

    public virtual DbSet<CommMethod> CommMethods { get; set; }

    public virtual DbSet<CommodityNotificationRecipient> CommodityNotificationRecipients { get; set; }

    public virtual DbSet<Company> Companies { get; set; }

    public virtual DbSet<CompanyExpenseTypesBillingAccount> CompanyExpenseTypesBillingAccounts { get; set; }

    public virtual DbSet<CompanyNewProjectNotification> CompanyNewProjectNotifications { get; set; }

    public virtual DbSet<CompanyQuoteMonthlyTotal> CompanyQuoteMonthlyTotals { get; set; }

    public virtual DbSet<CompanyShippingServiceType> CompanyShippingServiceTypes { get; set; }

    public virtual DbSet<ComplexCurve> ComplexCurves { get; set; }

    public virtual DbSet<ComplexCurveValue> ComplexCurveValues { get; set; }

    public virtual DbSet<ComplexCurveValueBulkSave> ComplexCurveValueBulkSaves { get; set; }

    public virtual DbSet<Component> Components { get; set; }

    public virtual DbSet<ComponentFailureCurve> ComponentFailureCurves { get; set; }

    public virtual DbSet<ComponentTest> ComponentTests { get; set; }

    public virtual DbSet<ComponentType> ComponentTypes { get; set; }

    public virtual DbSet<ComputerImagingLog> ComputerImagingLogs { get; set; }

    public virtual DbSet<ConnectionFailureLog> ConnectionFailureLogs { get; set; }

    public virtual DbSet<Contact> Contacts { get; set; }

    public virtual DbSet<ContactCategoriesCloudFileStorageGroup> ContactCategoriesCloudFileStorageGroups { get; set; }

    public virtual DbSet<ContactCategory> ContactCategories { get; set; }

    public virtual DbSet<ContactCustomerInfo> ContactCustomerInfos { get; set; }

    public virtual DbSet<ContactType> ContactTypes { get; set; }

    public virtual DbSet<ContactsStatesCountriesParsedGigme> ContactsStatesCountriesParsedGigmes { get; set; }

    public virtual DbSet<CostOfInternationalFreightMovement> CostOfInternationalFreightMovements { get; set; }

    public virtual DbSet<Country> Countries { get; set; }

    public virtual DbSet<CountryFedExCountryCode> CountryFedExCountryCodes { get; set; }

    public virtual DbSet<CrewBidValue> CrewBidValues { get; set; }

    public virtual DbSet<CrewDemandsAssignmentSummary> CrewDemandsAssignmentSummaries { get; set; }

    public virtual DbSet<CrewDemandsPartiallyAssigned> CrewDemandsPartiallyAssigneds { get; set; }

    public virtual DbSet<Culture> Cultures { get; set; }

    public virtual DbSet<Currency> Currencies { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<CustomerAddress> CustomerAddresses { get; set; }

    public virtual DbSet<CustomerContact> CustomerContacts { get; set; }

    public virtual DbSet<CustomerDocumentTaxInfo> CustomerDocumentTaxInfos { get; set; }

    public virtual DbSet<CustomerEmail> CustomerEmails { get; set; }

    public virtual DbSet<CustomerInfo> CustomerInfos { get; set; }

    public virtual DbSet<CustomerInfoAddress> CustomerInfoAddresses { get; set; }

    public virtual DbSet<CustomerInfoAddressCft> CustomerInfoAddressCfts { get; set; }

    public virtual DbSet<CustomerInfoAddressType> CustomerInfoAddressTypes { get; set; }

    public virtual DbSet<CustomerInfoContact> CustomerInfoContacts { get; set; }

    public virtual DbSet<CustomerInfoTab> CustomerInfoTabs { get; set; }

    public virtual DbSet<CustomerPhone> CustomerPhones { get; set; }

    public virtual DbSet<CustomerSearch> CustomerSearches { get; set; }

    public virtual DbSet<CustomersContactCategory> CustomersContactCategories { get; set; }

    public virtual DbSet<CycleCountUnitCostCategory> CycleCountUnitCostCategories { get; set; }

    public virtual DbSet<DataMetrics20220713> DataMetrics20220713s { get; set; }

    public virtual DbSet<DataSource> DataSources { get; set; }

    public virtual DbSet<DataType> DataTypes { get; set; }

    public virtual DbSet<DatabaseSchemaHistory> DatabaseSchemaHistories { get; set; }

    public virtual DbSet<Day> Days { get; set; }

    public virtual DbSet<DbRolePermission> DbRolePermissions { get; set; }

    public virtual DbSet<DbstatsProjectInformation> DbstatsProjectInformations { get; set; }

    public virtual DbSet<DelInpartsub> DelInpartsubs { get; set; }

    public virtual DbSet<DelInpartsubAr> DelInpartsubArs { get; set; }

    public virtual DbSet<DelInpartsubSyd> DelInpartsubSyds { get; set; }

    public virtual DbSet<DelQueue> DelQueues { get; set; }

    public virtual DbSet<DeleteEdsImport> DeleteEdsImports { get; set; }

    public virtual DbSet<DeletemeBal> DeletemeBals { get; set; }

    public virtual DbSet<DeviceAttachment> DeviceAttachments { get; set; }

    public virtual DbSet<DeviceMaintenanceType> DeviceMaintenanceTypes { get; set; }

    public virtual DbSet<DeviceMaintenanceTypesWarehouseReport> DeviceMaintenanceTypesWarehouseReports { get; set; }

    public virtual DbSet<DevicePropertiesA> DevicePropertiesAs { get; set; }

    public virtual DbSet<DevicePropertiesTemp> DevicePropertiesTemps { get; set; }

    public virtual DbSet<DevicePropertiesTemp2> DevicePropertiesTemp2s { get; set; }

    public virtual DbSet<DevicePropertiesTemp3> DevicePropertiesTemp3s { get; set; }

    public virtual DbSet<DeviceProperty> DeviceProperties { get; set; }

    public virtual DbSet<DeviceProperty1> DeviceProperties1 { get; set; }

    public virtual DbSet<DevicePropertyType> DevicePropertyTypes { get; set; }

    public virtual DbSet<DevicePropertyTypeCategory> DevicePropertyTypeCategories { get; set; }

    public virtual DbSet<DguvTestresult> DguvTestresults { get; set; }

    public virtual DbSet<DisassemblePart> DisassembleParts { get; set; }

    public virtual DbSet<DivisionBurdenRate> DivisionBurdenRates { get; set; }

    public virtual DbSet<DivisionPayrollTypeBurdenRate> DivisionPayrollTypeBurdenRates { get; set; }

    public virtual DbSet<Dpro> Dpros { get; set; }

    public virtual DbSet<DropboxCursor> DropboxCursors { get; set; }

    public virtual DbSet<Dropboxerror> Dropboxerrors { get; set; }

    public virtual DbSet<DryHireBillingDaysRate> DryHireBillingDaysRates { get; set; }

    public virtual DbSet<DuplicateBarcodes20211020> DuplicateBarcodes20211020s { get; set; }

    public virtual DbSet<EdsrebarcodedDevicesScanHistory> EdsrebarcodedDevicesScanHistories { get; set; }

    public virtual DbSet<EgnyePermissionsType> EgnyePermissionsTypes { get; set; }

    public virtual DbSet<EgnyteShareRequest> EgnyteShareRequests { get; set; }

    public virtual DbSet<EgnyteShareRequestsBulkSave> EgnyteShareRequestsBulkSaves { get; set; }

    public virtual DbSet<EgnyteSharingServer> EgnyteSharingServers { get; set; }

    public virtual DbSet<EjArJhCusArowningForFinesse> EjArJhCusArowningForFinesses { get; set; }

    public virtual DbSet<EjArJhInpartsubAllnbc> EjArJhInpartsubAllnbcs { get; set; }

    public virtual DbSet<EjArJhInpartsubBc> EjArJhInpartsubBcs { get; set; }

    public virtual DbSet<EjArJhTransAllnbcAddedRemovedTfr> EjArJhTransAllnbcAddedRemovedTfrs { get; set; }

    public virtual DbSet<EjArJhTransAllnbcMerged> EjArJhTransAllnbcMergeds { get; set; }

    public virtual DbSet<EjArJhTransAllnbcOnOrder> EjArJhTransAllnbcOnOrders { get; set; }

    public virtual DbSet<EjArJhTransBcAddedRemoved> EjArJhTransBcAddedRemoveds { get; set; }

    public virtual DbSet<EjArJhTransBcMergedForIntran> EjArJhTransBcMergedForIntrans { get; set; }

    public virtual DbSet<EjArJhTransBcOnOrder> EjArJhTransBcOnOrders { get; set; }

    public virtual DbSet<EjArJhTransBcOnWhTransfer> EjArJhTransBcOnWhTransfers { get; set; }

    public virtual DbSet<EjStockType2JobLog> EjStockType2JobLogs { get; set; }

    public virtual DbSet<EjUser> EjUsers { get; set; }

    public virtual DbSet<Em2CrewBidValue> Em2CrewBidValues { get; set; }

    public virtual DbSet<Em2EmpCompany> Em2EmpCompanies { get; set; }

    public virtual DbSet<Em2EmpReview> Em2EmpReviews { get; set; }

    public virtual DbSet<Em2Employee> Em2Employees { get; set; }

    public virtual DbSet<Em2EmployeeJobType> Em2EmployeeJobTypes { get; set; }

    public virtual DbSet<Em2EmployeePay> Em2EmployeePays { get; set; }

    public virtual DbSet<Em2JobType> Em2JobTypes { get; set; }

    public virtual DbSet<Em2JobTypeTranslation> Em2JobTypeTranslations { get; set; }

    public virtual DbSet<EmailDataSourceFieldMap> EmailDataSourceFieldMaps { get; set; }

    public virtual DbSet<Employee> Employees { get; set; }

    public virtual DbSet<EmployeeAddress> EmployeeAddresses { get; set; }

    public virtual DbSet<EmployeeAssignmentStatus> EmployeeAssignmentStatuses { get; set; }

    public virtual DbSet<EmployeeAttachment> EmployeeAttachments { get; set; }

    public virtual DbSet<EmployeeAttachmentBulkSave> EmployeeAttachmentBulkSaves { get; set; }

    public virtual DbSet<EmployeeCompanyStatus> EmployeeCompanyStatuses { get; set; }

    public virtual DbSet<EmployeeContact> EmployeeContacts { get; set; }

    public virtual DbSet<EmployeeCovidvaccineStatus> EmployeeCovidvaccineStatuses { get; set; }

    public virtual DbSet<EmployeeDataSheetPropertiesV> EmployeeDataSheetPropertiesVs { get; set; }

    public virtual DbSet<EmployeeDataSheetV> EmployeeDataSheetVs { get; set; }

    public virtual DbSet<EmployeeDepartment> EmployeeDepartments { get; set; }

    public virtual DbSet<EmployeeEmail> EmployeeEmails { get; set; }

    public virtual DbSet<EmployeeJobTypeQualification> EmployeeJobTypeQualifications { get; set; }

    public virtual DbSet<EmployeeJobTypeQualificationsCommaList> EmployeeJobTypeQualificationsCommaLists { get; set; }

    public virtual DbSet<EmployeeJobTypeQualificationsHistory> EmployeeJobTypeQualificationsHistories { get; set; }

    public virtual DbSet<EmployeeLanguagesBulkSave> EmployeeLanguagesBulkSaves { get; set; }

    public virtual DbSet<EmployeeLocation> EmployeeLocations { get; set; }

    public virtual DbSet<EmployeePayRate> EmployeePayRates { get; set; }

    public virtual DbSet<EmployeePayRateA> EmployeePayRateAs { get; set; }

    public virtual DbSet<EmployeePayRateHistory> EmployeePayRateHistories { get; set; }

    public virtual DbSet<EmployeePhone> EmployeePhones { get; set; }

    public virtual DbSet<EmployeePropertiesBulkSave> EmployeePropertiesBulkSaves { get; set; }

    public virtual DbSet<EmployeeProperty> EmployeeProperties { get; set; }

    public virtual DbSet<EmployeePropertyType> EmployeePropertyTypes { get; set; }

    public virtual DbSet<EmployeePropertyTypeCategory> EmployeePropertyTypeCategories { get; set; }

    public virtual DbSet<EmployeeStatus> EmployeeStatuses { get; set; }

    public virtual DbSet<EmployeeTrainingTopicsCompleted> EmployeeTrainingTopicsCompleteds { get; set; }

    public virtual DbSet<EmployeeTrainingTreeStructureCategoriesBulkSave> EmployeeTrainingTreeStructureCategoriesBulkSaves { get; set; }

    public virtual DbSet<EmployeeTrainingTreeStructureCategoriesBulkSave2> EmployeeTrainingTreeStructureCategoriesBulkSave2s { get; set; }

    public virtual DbSet<EmployeeTrainingTreeStructureCategory> EmployeeTrainingTreeStructureCategories { get; set; }

    public virtual DbSet<EmployeeUsageHistory> EmployeeUsageHistories { get; set; }

    public virtual DbSet<EmployeesInMyDivision> EmployeesInMyDivisions { get; set; }

    public virtual DbSet<EnglishWord> EnglishWords { get; set; }

    public virtual DbSet<EquipmentCheckedoutWDate> EquipmentCheckedoutWDates { get; set; }

    public virtual DbSet<EquipmentCheckoutSummary> EquipmentCheckoutSummaries { get; set; }

    public virtual DbSet<EquipmentOwner> EquipmentOwners { get; set; }

    public virtual DbSet<EquipmentSubhire> EquipmentSubhires { get; set; }

    public virtual DbSet<EquipmentSubhireStatus> EquipmentSubhireStatuses { get; set; }

    public virtual DbSet<EquipmentSubhiresA> EquipmentSubhiresAs { get; set; }

    public virtual DbSet<EquipmentSubhiresTemp> EquipmentSubhiresTemps { get; set; }

    public virtual DbSet<ErppartExistenceReference> ErppartExistenceReferences { get; set; }

    public virtual DbSet<ExchangeRateBook> ExchangeRateBooks { get; set; }

    public virtual DbSet<ExchangeRateDaily> ExchangeRateDailies { get; set; }

    public virtual DbSet<ExpenseCategory> ExpenseCategories { get; set; }

    public virtual DbSet<ExpensePeriodType> ExpensePeriodTypes { get; set; }

    public virtual DbSet<Failure> Failures { get; set; }

    public virtual DbSet<FedExLinkedAccountsNumber> FedExLinkedAccountsNumbers { get; set; }

    public virtual DbSet<FileAttachmentIndex> FileAttachmentIndices { get; set; }

    public virtual DbSet<FileAttachmentIndexStagingArea> FileAttachmentIndexStagingAreas { get; set; }

    public virtual DbSet<FilePermissionsGroup> FilePermissionsGroups { get; set; }

    public virtual DbSet<FileStorageEntityNumbersToRollup> FileStorageEntityNumbersToRollups { get; set; }

    public virtual DbSet<FileStoragePath> FileStoragePaths { get; set; }

    public virtual DbSet<FinesseApplicationDistributionFilesToIgnore> FinesseApplicationDistributionFilesToIgnores { get; set; }

    public virtual DbSet<FinesseCategoriesShopifyCollection> FinesseCategoriesShopifyCollections { get; set; }

    public virtual DbSet<FinesseInventoryReceiptMessage> FinesseInventoryReceiptMessages { get; set; }

    public virtual DbSet<Frequency> Frequencies { get; set; }

    public virtual DbSet<FrequencyVector> FrequencyVectors { get; set; }

    public virtual DbSet<FrequencyVectorValue> FrequencyVectorValues { get; set; }

    public virtual DbSet<FrequencyVectorValueBulkSave> FrequencyVectorValueBulkSaves { get; set; }

    public virtual DbSet<GenLedVoucherRow> GenLedVoucherRows { get; set; }

    public virtual DbSet<GenericPickerParameter> GenericPickerParameters { get; set; }

    public virtual DbSet<GeographicalRegion> GeographicalRegions { get; set; }

    public virtual DbSet<GetAllPersonnelQualificationsCodesAndDescriptionsGigmeV> GetAllPersonnelQualificationsCodesAndDescriptionsGigmeVs { get; set; }

    public virtual DbSet<GetAllPersonnelQualificationsCodesAndDescriptionsV> GetAllPersonnelQualificationsCodesAndDescriptionsVs { get; set; }

    public virtual DbSet<Glaccount> Glaccounts { get; set; }

    public virtual DbSet<Glcontrol> Glcontrols { get; set; }

    public virtual DbSet<Glcurrency> Glcurrencies { get; set; }

    public virtual DbSet<GlentitiesA> GlentitiesAs { get; set; }

    public virtual DbSet<GlentitiesCompare> GlentitiesCompares { get; set; }

    public virtual DbSet<GlentitiesIndexViewTable> GlentitiesIndexViewTables { get; set; }

    public virtual DbSet<GlentitiesIndexViewTableHighLatency> GlentitiesIndexViewTableHighLatencies { get; set; }

    public virtual DbSet<GlentitiesIndexViewTableStagingArea> GlentitiesIndexViewTableStagingAreas { get; set; }

    public virtual DbSet<GlentitiesNonPj> GlentitiesNonPjs { get; set; }

    public virtual DbSet<GlentitiesTemp> GlentitiesTemps { get; set; }

    public virtual DbSet<Glentity> Glentities { get; set; }

    public virtual DbSet<Glentitynote> Glentitynotes { get; set; }

    public virtual DbSet<GlentitynoteV> GlentitynoteVs { get; set; }

    public virtual DbSet<GlentitynoteVForHtml> GlentitynoteVForHtmls { get; set; }

    public virtual DbSet<Glentitytype> Glentitytypes { get; set; }

    public virtual DbSet<GlobalOpsMonitoredDocument> GlobalOpsMonitoredDocuments { get; set; }

    public virtual DbSet<GlobalOpsMonitoredFolder> GlobalOpsMonitoredFolders { get; set; }

    public virtual DbSet<GroupPermission> GroupPermissions { get; set; }

    public virtual DbSet<GuicolumnNamesFromSqlfield> GuicolumnNamesFromSqlfields { get; set; }

    public virtual DbSet<HtmlReportBlock> HtmlReportBlocks { get; set; }

    public virtual DbSet<HtmlReportBlocksArchive> HtmlReportBlocksArchives { get; set; }

    public virtual DbSet<HtmlReportBlocksDataFormat> HtmlReportBlocksDataFormats { get; set; }

    public virtual DbSet<HtmlReportBlocksGroupBy> HtmlReportBlocksGroupBies { get; set; }

    public virtual DbSet<HtmlReportBlocksSummary> HtmlReportBlocksSummaries { get; set; }

    public virtual DbSet<HtmlReportSectionType> HtmlReportSectionTypes { get; set; }

    public virtual DbSet<HtmlReportTemplate> HtmlReportTemplates { get; set; }

    public virtual DbSet<HtmlReportTemplateSection> HtmlReportTemplateSections { get; set; }

    public virtual DbSet<ISolvedAddress> ISolvedAddresses { get; set; }

    public virtual DbSet<ISolvedContact> ISolvedContacts { get; set; }

    public virtual DbSet<ISolvedEmail> ISolvedEmails { get; set; }

    public virtual DbSet<ISolvedPhone> ISolvedPhones { get; set; }

    public virtual DbSet<IdentityInvoiceInfo> IdentityInvoiceInfos { get; set; }

    public virtual DbSet<IdnumberSequence> IdnumberSequences { get; set; }

    public virtual DbSet<IdnumberSequenceType> IdnumberSequenceTypes { get; set; }

    public virtual DbSet<IfsexternalInvoiceFormat> IfsexternalInvoiceFormats { get; set; }

    public virtual DbSet<IfspaymentTerm> IfspaymentTerms { get; set; }

    public virtual DbSet<In2InvoiceSeries> In2InvoiceSeries { get; set; }

    public virtual DbSet<In2InvoiceSeriesGroup> In2InvoiceSeriesGroups { get; set; }

    public virtual DbSet<In2InvoiceSeriesGroupsV> In2InvoiceSeriesGroupsVs { get; set; }

    public virtual DbSet<In2InvoiceSeriesV> In2InvoiceSeriesVs { get; set; }

    public virtual DbSet<In2InvoiceSplit> In2InvoiceSplits { get; set; }

    public virtual DbSet<In2InvoiceSplitsV> In2InvoiceSplitsVs { get; set; }

    public virtual DbSet<In2InvoiceTax> In2InvoiceTaxes { get; set; }

    public virtual DbSet<In2InvoiceTaxV> In2InvoiceTaxVs { get; set; }

    public virtual DbSet<In2Rfi> In2Rfis { get; set; }

    public virtual DbSet<In2RfiV> In2RfiVs { get; set; }

    public virtual DbSet<InOutBoard> InOutBoards { get; set; }

    public virtual DbSet<InOutBoardUserNote> InOutBoardUserNotes { get; set; }

    public virtual DbSet<InStorageLocation> InStorageLocations { get; set; }

    public virtual DbSet<InUnitOfFrequency> InUnitOfFrequencies { get; set; }

    public virtual DbSet<InUnitOfLength> InUnitOfLengths { get; set; }

    public virtual DbSet<InUnitOfWeight> InUnitOfWeights { get; set; }

    public virtual DbSet<IncomingBarcodesFromAquiredCompany> IncomingBarcodesFromAquiredCompanies { get; set; }

    public virtual DbSet<Incommodity> Incommodities { get; set; }

    public virtual DbSet<IncommodityBulkSave> IncommodityBulkSaves { get; set; }

    public virtual DbSet<IncommodityHistory> IncommodityHistories { get; set; }

    public virtual DbSet<IncommodityMapping> IncommodityMappings { get; set; }

    public virtual DbSet<Incostinq> Incostinqs { get; set; }

    public virtual DbSet<Incostpart> Incostparts { get; set; }

    public virtual DbSet<IncostpartHistory> IncostpartHistories { get; set; }

    public virtual DbSet<Inmakepurchase> Inmakepurchases { get; set; }

    public virtual DbSet<Inordercode> Inordercodes { get; set; }

    public virtual DbSet<Inp2Part> Inp2Parts { get; set; }

    public virtual DbSet<Inp2PartAttachment> Inp2PartAttachments { get; set; }

    public virtual DbSet<Inp2PartBidValue> Inp2PartBidValues { get; set; }

    public virtual DbSet<Inp2PartMaintenanceInterval> Inp2PartMaintenanceIntervals { get; set; }

    public virtual DbSet<Inp2PartProperty> Inp2PartProperties { get; set; }

    public virtual DbSet<Inp2PartReference> Inp2PartReferences { get; set; }

    public virtual DbSet<Inp2PartSubhireNote> Inp2PartSubhireNotes { get; set; }

    public virtual DbSet<Inp2PartSubhireVendor> Inp2PartSubhireVendors { get; set; }

    public virtual DbSet<Inp2PartTranslation> Inp2PartTranslations { get; set; }

    public virtual DbSet<Inp2PartsA> Inp2PartsAs { get; set; }

    public virtual DbSet<Inp2ReplacementValue> Inp2ReplacementValues { get; set; }

    public virtual DbSet<InpNeedProtocol> InpNeedProtocols { get; set; }

    public virtual DbSet<Inpart> Inparts { get; set; }

    public virtual DbSet<Inpart2inq> Inpart2inqs { get; set; }

    public virtual DbSet<InpartEntityAccount> InpartEntityAccounts { get; set; }

    public virtual DbSet<InpartFixSyd> InpartFixSyds { get; set; }

    public virtual DbSet<InpartHistory> InpartHistories { get; set; }

    public virtual DbSet<InpartHistoryTemp> InpartHistoryTemps { get; set; }

    public virtual DbSet<InpartIndexViewTable> InpartIndexViewTables { get; set; }

    public virtual DbSet<InpartMaintenance> InpartMaintenances { get; set; }

    public virtual DbSet<InpartPartSecondaryCategoriesBackUp> InpartPartSecondaryCategoriesBackUps { get; set; }

    public virtual DbSet<InpartReference> InpartReferences { get; set; }

    public virtual DbSet<InpartReferenceType> InpartReferenceTypes { get; set; }

    public virtual DbSet<InpartTranslation> InpartTranslations { get; set; }

    public virtual DbSet<InpartTranslationsTemp> InpartTranslationsTemps { get; set; }

    public virtual DbSet<InpartUsedGearSalesInfo> InpartUsedGearSalesInfos { get; set; }

    public virtual DbSet<InpartUsedGearSalesInfoBulkSave> InpartUsedGearSalesInfoBulkSaves { get; set; }

    public virtual DbSet<InpartUsedGearSalesInfoStagingArea> InpartUsedGearSalesInfoStagingAreas { get; set; }

    public virtual DbSet<Inpartsub> Inpartsubs { get; set; }

    public virtual DbSet<InpartsubA> InpartsubAs { get; set; }

    public virtual DbSet<InpartsubChildPart> InpartsubChildParts { get; set; }

    public virtual DbSet<InpartsubCompare> InpartsubCompares { get; set; }

    public virtual DbSet<InpartsubCompareAr> InpartsubCompareArs { get; set; }

    public virtual DbSet<InpartsubCompareSyd> InpartsubCompareSyds { get; set; }

    public virtual DbSet<InpartsubConflicts20230926> InpartsubConflicts20230926s { get; set; }

    public virtual DbSet<InpartsubConflicts20231003> InpartsubConflicts20231003s { get; set; }

    public virtual DbSet<InpartsubConflicts20240325> InpartsubConflicts20240325s { get; set; }

    public virtual DbSet<InpartsubConflicts20240522> InpartsubConflicts20240522s { get; set; }

    public virtual DbSet<InpartsubDuplicatedBarcodes20210111> InpartsubDuplicatedBarcodes20210111s { get; set; }

    public virtual DbSet<InpartsubNonBarcodedProbablyDuplicatedAttached20210113> InpartsubNonBarcodedProbablyDuplicatedAttached20210113s { get; set; }

    public virtual DbSet<InpartsubParent> InpartsubParents { get; set; }

    public virtual DbSet<Inpartum> InpartAs { get; set; }

    public virtual DbSet<InpsAddInventory> InpsAddInventories { get; set; }

    public virtual DbSet<InpsAddInventoryV> InpsAddInventoryVs { get; set; }

    public virtual DbSet<InpsDevice> InpsDevices { get; set; }

    public virtual DbSet<InpsDeviceAttachment> InpsDeviceAttachments { get; set; }

    public virtual DbSet<InpsDeviceCheckinNotification> InpsDeviceCheckinNotifications { get; set; }

    public virtual DbSet<InpsDeviceProperty> InpsDeviceProperties { get; set; }

    public virtual DbSet<InpsDisassemblyPart> InpsDisassemblyParts { get; set; }

    public virtual DbSet<IntegrationProjectCostBucket> IntegrationProjectCostBuckets { get; set; }

    public virtual DbSet<IntegrationProjectExpenseGlCodeCostBucket> IntegrationProjectExpenseGlCodeCostBuckets { get; set; }

    public virtual DbSet<IntegrationProjectJobTypeCostBucket> IntegrationProjectJobTypeCostBuckets { get; set; }

    public virtual DbSet<IntercoCustomer> IntercoCustomers { get; set; }

    public virtual DbSet<IntercompanyBillingEquipValueAdjust> IntercompanyBillingEquipValueAdjusts { get; set; }

    public virtual DbSet<IntercompanyBillingEquipValueAdjust20171109> IntercompanyBillingEquipValueAdjust20171109s { get; set; }

    public virtual DbSet<IntercompanyBillingInstockExclusion> IntercompanyBillingInstockExclusions { get; set; }

    public virtual DbSet<IntercompanyBillingRevenueAccount> IntercompanyBillingRevenueAccounts { get; set; }

    public virtual DbSet<IntercompanyPrepFeeExclusion> IntercompanyPrepFeeExclusions { get; set; }

    public virtual DbSet<Intran> Intrans { get; set; }

    public virtual DbSet<Intrandesc> Intrandescs { get; set; }

    public virtual DbSet<IntransA> IntransAs { get; set; }

    public virtual DbSet<IntransDuplicates20171119> IntransDuplicates20171119s { get; set; }

    public virtual DbSet<Intransinq> Intransinqs { get; set; }

    public virtual DbSet<Intransref4> Intransref4s { get; set; }

    public virtual DbSet<InvInvoiceTaxToDeleteOnProduction> InvInvoiceTaxToDeleteOnProductions { get; set; }

    public virtual DbSet<InvInvoiceTaxV> InvInvoiceTaxVs { get; set; }

    public virtual DbSet<InventoryChildPartsConsolidated> InventoryChildPartsConsolidateds { get; set; }

    public virtual DbSet<InventoryChildPartsConsolidatedByLocationOwner> InventoryChildPartsConsolidatedByLocationOwners { get; set; }

    public virtual DbSet<InventoryConsolidatedByLocationOwner> InventoryConsolidatedByLocationOwners { get; set; }

    public virtual DbSet<InventoryParentsAndChild> InventoryParentsAndChildren { get; set; }

    public virtual DbSet<InventoryReceipt> InventoryReceipts { get; set; }

    public virtual DbSet<Invoice> Invoices { get; set; }

    public virtual DbSet<InvoiceCommonGroup> InvoiceCommonGroups { get; set; }

    public virtual DbSet<InvoicePiece> InvoicePieces { get; set; }

    public virtual DbSet<InvoicePieces1678891320250225> InvoicePieces1678891320250225s { get; set; }

    public virtual DbSet<InvoiceReservedNumber> InvoiceReservedNumbers { get; set; }

    public virtual DbSet<InvoiceReservedNumbersTracking> InvoiceReservedNumbersTrackings { get; set; }

    public virtual DbSet<InvoiceSeries> InvoiceSeries { get; set; }

    public virtual DbSet<InvoiceSeries20161221> InvoiceSeries20161221s { get; set; }

    public virtual DbSet<InvoiceSeriesA> InvoiceSeriesAs { get; set; }

    public virtual DbSet<InvoiceSeriesGroup> InvoiceSeriesGroups { get; set; }

    public virtual DbSet<InvoiceSeriesGroupsStagingVault> InvoiceSeriesGroupsStagingVaults { get; set; }

    public virtual DbSet<InvoiceSeriesStagingVault> InvoiceSeriesStagingVaults { get; set; }

    public virtual DbSet<InvoiceSplit> InvoiceSplits { get; set; }

    public virtual DbSet<InvoiceSplitTemplate> InvoiceSplitTemplates { get; set; }

    public virtual DbSet<InvoiceSplitTemplateItem> InvoiceSplitTemplateItems { get; set; }

    public virtual DbSet<InvoiceSplitType> InvoiceSplitTypes { get; set; }

    public virtual DbSet<InvoiceTax> InvoiceTaxes { get; set; }

    public virtual DbSet<InvoiceTaxStagingVault> InvoiceTaxStagingVaults { get; set; }

    public virtual DbSet<InvoiceTaxStagingVaultV> InvoiceTaxStagingVaultVs { get; set; }

    public virtual DbSet<InvoiceTemplateGroupsStagingVaultV> InvoiceTemplateGroupsStagingVaultVs { get; set; }

    public virtual DbSet<InvoiceTemplatesStagingVaultV> InvoiceTemplatesStagingVaultVs { get; set; }

    public virtual DbSet<Invoices1678891320250225> Invoices1678891320250225s { get; set; }

    public virtual DbSet<InvoicesUndone> InvoicesUndones { get; set; }

    public virtual DbSet<InvoicingTaxGroup> InvoicingTaxGroups { get; set; }

    public virtual DbSet<InvoicingTaxGroupType> InvoicingTaxGroupTypes { get; set; }

    public virtual DbSet<InvoicingTaxType> InvoicingTaxTypes { get; set; }

    public virtual DbSet<IpAddressRange> IpAddressRanges { get; set; }

    public virtual DbSet<Ippool> Ippools { get; set; }

    public virtual DbSet<IsPerDiemBillableStatusType> IsPerDiemBillableStatusTypes { get; set; }

    public virtual DbSet<IsoLanguageDef> IsoLanguageDefs { get; set; }

    public virtual DbSet<JdbWarehouseGear> JdbWarehouseGears { get; set; }

    public virtual DbSet<JobBudgetPartsCheckedOut> JobBudgetPartsCheckedOuts { get; set; }

    public virtual DbSet<JobBudgetsEmployeesTransaction> JobBudgetsEmployeesTransactions { get; set; }

    public virtual DbSet<JobBudgetsPartsTransaction> JobBudgetsPartsTransactions { get; set; }

    public virtual DbSet<JobBudgetsPartsTransactions2> JobBudgetsPartsTransactions2s { get; set; }

    public virtual DbSet<JobBudgetsPartsTransactionsLastDailyRefresh> JobBudgetsPartsTransactionsLastDailyRefreshes { get; set; }

    public virtual DbSet<JobBudgetsPartsTransactionsNeedingRefresh> JobBudgetsPartsTransactionsNeedingRefreshes { get; set; }

    public virtual DbSet<JobBudgetsPartsTransactionsTbl> JobBudgetsPartsTransactionsTbls { get; set; }

    public virtual DbSet<JobBudgetsPartsTransactionsTblTemp> JobBudgetsPartsTransactionsTblTemps { get; set; }

    public virtual DbSet<JobBudgetsPartsTransactionsWithTzDefunct> JobBudgetsPartsTransactionsWithTzDefuncts { get; set; }

    public virtual DbSet<JobCostingExtra> JobCostingExtras { get; set; }

    public virtual DbSet<JobCostingHighLevelDataTbl> JobCostingHighLevelDataTbls { get; set; }

    public virtual DbSet<JobTypesInMyDivision> JobTypesInMyDivisions { get; set; }

    public virtual DbSet<JpjinvoiceImport> JpjinvoiceImports { get; set; }

    public virtual DbSet<KanbanUsersPartsView> KanbanUsersPartsViews { get; set; }

    public virtual DbSet<KnownClairTourTestSchemaDifference> KnownClairTourTestSchemaDifferences { get; set; }

    public virtual DbSet<Language> Languages { get; set; }

    public virtual DbSet<LateReturn> LateReturns { get; set; }

    public virtual DbSet<LatestLogon> LatestLogons { get; set; }

    public virtual DbSet<LatestLogonApplication> LatestLogonApplications { get; set; }

    public virtual DbSet<LatestLogonApplicationsFilteredApplicationList> LatestLogonApplicationsFilteredApplicationLists { get; set; }

    public virtual DbSet<LatestUserActivity> LatestUserActivities { get; set; }

    public virtual DbSet<LatestWarehouseCycleCount> LatestWarehouseCycleCounts { get; set; }

    public virtual DbSet<Lessor> Lessors { get; set; }

    public virtual DbSet<LinkedPart> LinkedParts { get; set; }

    public virtual DbSet<LockedProject> LockedProjects { get; set; }

    public virtual DbSet<Manufacturer> Manufacturers { get; set; }

    public virtual DbSet<ManufacturerInfo> ManufacturerInfos { get; set; }

    public virtual DbSet<MassTransferStaging> MassTransferStagings { get; set; }

    public virtual DbSet<MassTransferStagingV> MassTransferStagingVs { get; set; }

    public virtual DbSet<MatchingNamedContact> MatchingNamedContacts { get; set; }

    public virtual DbSet<MeasurementPurpose> MeasurementPurposes { get; set; }

    public virtual DbSet<MergedJobBudgetsPartsTransactionsTbl> MergedJobBudgetsPartsTransactionsTbls { get; set; }

    public virtual DbSet<MetaDataVersion> MetaDataVersions { get; set; }

    public virtual DbSet<Month> Months { get; set; }

    public virtual DbSet<Mrperioddef> Mrperioddefs { get; set; }

    public virtual DbSet<Muapprole> Muapproles { get; set; }

    public virtual DbSet<Muaprform> Muaprforms { get; set; }

    public virtual DbSet<Mudbmsinfo> Mudbmsinfos { get; set; }

    public virtual DbSet<Muexcludecheckoutscanout20151203> Muexcludecheckoutscanout20151203s { get; set; }

    public virtual DbSet<Muformsecurity> Muformsecurities { get; set; }

    public virtual DbSet<Muhlpfld> Muhlpflds { get; set; }

    public virtual DbSet<Muhlpref> Muhlprefs { get; set; }

    public virtual DbSet<Muhlpscr> Muhlpscrs { get; set; }

    public virtual DbSet<Mulistvieworder> Mulistvieworders { get; set; }

    public virtual DbSet<Mulistviewsort> Mulistviewsorts { get; set; }

    public virtual DbSet<Mumenu> Mumenus { get; set; }

    public virtual DbSet<Mumessage> Mumessages { get; set; }

    public virtual DbSet<Muobject> Muobjects { get; set; }

    public virtual DbSet<Mupackage> Mupackages { get; set; }

    public virtual DbSet<Muprinter> Muprinters { get; set; }

    public virtual DbSet<Murunbatch> Murunbatches { get; set; }

    public virtual DbSet<Musubmit> Musubmits { get; set; }

    public virtual DbSet<Muuserprt> Muuserprts { get; set; }

    public virtual DbSet<Muusersub> Muusersubs { get; set; }

    public virtual DbSet<Muyesno> Muyesnos { get; set; }

    public virtual DbSet<MyCompanyVisible> MyCompanyVisibles { get; set; }

    public virtual DbSet<MyFinesseEmailNotification> MyFinesseEmailNotifications { get; set; }

    public virtual DbSet<MyFinesseEmailNotificationsSysproRelatedDeleted20250204> MyFinesseEmailNotificationsSysproRelatedDeleted20250204s { get; set; }

    public virtual DbSet<MyFinesseMultiGridConfig> MyFinesseMultiGridConfigs { get; set; }

    public virtual DbSet<MyFinesseNavigationCollapsedCategory> MyFinesseNavigationCollapsedCategories { get; set; }

    public virtual DbSet<MyFinesseNavigationCollapsedCategory1> MyFinesseNavigationCollapsedCategories1 { get; set; }

    public virtual DbSet<MyFinesseQueriesCategory> MyFinesseQueriesCategories { get; set; }

    public virtual DbSet<MyFinesseQueriesColumnMinWidth> MyFinesseQueriesColumnMinWidths { get; set; }

    public virtual DbSet<MyFinesseQuery> MyFinesseQueries { get; set; }

    public virtual DbSet<MyFinesseQueryRun> MyFinesseQueryRuns { get; set; }

    public virtual DbSet<MyFinesseQueryRunsAverage> MyFinesseQueryRunsAverages { get; set; }

    public virtual DbSet<MyFinesseTimelineViewColumn> MyFinesseTimelineViewColumns { get; set; }

    public virtual DbSet<MyFinesseTimelineViewType> MyFinesseTimelineViewTypes { get; set; }

    public virtual DbSet<MyFinesseUpdate> MyFinesseUpdates { get; set; }

    public virtual DbSet<MyFinesseUpdate2019> MyFinesseUpdate2019s { get; set; }

    public virtual DbSet<MyUserInfo> MyUserInfos { get; set; }

    public virtual DbSet<MyWarehouseVisible> MyWarehouseVisibles { get; set; }

    public virtual DbSet<NewElecCategory> NewElecCategories { get; set; }

    public virtual DbSet<NotDuplicate> NotDuplicates { get; set; }

    public virtual DbSet<NotificationWarehouseEmailRecipient> NotificationWarehouseEmailRecipients { get; set; }

    public virtual DbSet<OePayTermsNetDaysBaseDate> OePayTermsNetDaysBaseDates { get; set; }

    public virtual DbSet<Oeacctmatrix> Oeacctmatrices { get; set; }

    public virtual DbSet<Oearmove> Oearmoves { get; set; }

    public virtual DbSet<Oecustbill> Oecustbills { get; set; }

    public virtual DbSet<OecustbillOld> OecustbillOlds { get; set; }

    public virtual DbSet<Oecustomer> Oecustomers { get; set; }

    public virtual DbSet<OecustomerOld> OecustomerOlds { get; set; }

    public virtual DbSet<Oedeal> Oedeals { get; set; }

    public virtual DbSet<Oelocation> Oelocations { get; set; }

    public virtual DbSet<Oelogo> Oelogos { get; set; }

    public virtual DbSet<Oepayterm> Oepayterms { get; set; }

    public virtual DbSet<Oesalesman> Oesalesmen { get; set; }

    public virtual DbSet<Oeshipaddr> Oeshipaddrs { get; set; }

    public virtual DbSet<OetaxCode> OetaxCodes { get; set; }

    public virtual DbSet<OldAmpChannelCorrectionCurf> OldAmpChannelCorrectionCurves { get; set; }

    public virtual DbSet<OldCabinetComponentTestMeasurementUserEnteredFailure> OldCabinetComponentTestMeasurementUserEnteredFailures { get; set; }

    public virtual DbSet<OrderedPartsChangesStagingArea> OrderedPartsChangesStagingAreas { get; set; }

    public virtual DbSet<OrderedPartsListParentAndChild> OrderedPartsListParentAndChildren { get; set; }

    public virtual DbSet<Outcome> Outcomes { get; set; }

    public virtual DbSet<OutputPatching> OutputPatchings { get; set; }

    public virtual DbSet<OvertimeRate> OvertimeRates { get; set; }

    public virtual DbSet<ParentsWithChildrenWithMismatchedOwnership> ParentsWithChildrenWithMismatchedOwnerships { get; set; }

    public virtual DbSet<PartAttachment> PartAttachments { get; set; }

    public virtual DbSet<PartBidValue> PartBidValues { get; set; }

    public virtual DbSet<PartBidValueType> PartBidValueTypes { get; set; }

    public virtual DbSet<PartBidValuesHistory> PartBidValuesHistories { get; set; }

    public virtual DbSet<PartCatalog> PartCatalogs { get; set; }

    public virtual DbSet<PartCatalogTab> PartCatalogTabs { get; set; }

    public virtual DbSet<PartChangesToNotify> PartChangesToNotifies { get; set; }

    public virtual DbSet<PartCheckinNotification> PartCheckinNotifications { get; set; }

    public virtual DbSet<PartCommoditySubcategory> PartCommoditySubcategories { get; set; }

    public virtual DbSet<PartDemandsDirection> PartDemandsDirections { get; set; }

    public virtual DbSet<PartDemandsReturningLeavingInFuture> PartDemandsReturningLeavingInFutures { get; set; }

    public virtual DbSet<PartDemandsReturningLeftAlready> PartDemandsReturningLeftAlreadies { get; set; }

    public virtual DbSet<PartGroup> PartGroups { get; set; }

    public virtual DbSet<PartGroupsBulkSave> PartGroupsBulkSaves { get; set; }

    public virtual DbSet<PartGroupsPart> PartGroupsParts { get; set; }

    public virtual DbSet<PartGroupsPartsBulkSave> PartGroupsPartsBulkSaves { get; set; }

    public virtual DbSet<PartLocationHistory> PartLocationHistories { get; set; }

    public virtual DbSet<PartLocationHistoryRollupDay> PartLocationHistoryRollupDays { get; set; }

    public virtual DbSet<PartLocationHistoryRollupTable> PartLocationHistoryRollupTables { get; set; }

    public virtual DbSet<PartManufacturer> PartManufacturers { get; set; }

    public virtual DbSet<PartNoComparison> PartNoComparisons { get; set; }

    public virtual DbSet<PartNumberExistenceReference> PartNumberExistenceReferences { get; set; }

    public virtual DbSet<PartPriceUpdateBulkSave> PartPriceUpdateBulkSaves { get; set; }

    public virtual DbSet<PartPrimaryCategory> PartPrimaryCategories { get; set; }

    public virtual DbSet<PartPrimaryToSecondaryCategory> PartPrimaryToSecondaryCategories { get; set; }

    public virtual DbSet<PartProperty> PartProperties { get; set; }

    public virtual DbSet<PartProperty1> PartProperties1 { get; set; }

    public virtual DbSet<PartPropertyType> PartPropertyTypes { get; set; }

    public virtual DbSet<PartPropertyTypeCategory> PartPropertyTypeCategories { get; set; }

    public virtual DbSet<PartSecondaryCategoriesBackUp> PartSecondaryCategoriesBackUps { get; set; }

    public virtual DbSet<PartSecondaryCategoriesBulkSave> PartSecondaryCategoriesBulkSaves { get; set; }

    public virtual DbSet<PartSecondaryCategory> PartSecondaryCategories { get; set; }

    public virtual DbSet<PartSubhireNote> PartSubhireNotes { get; set; }

    public virtual DbSet<PartSubhireVendor> PartSubhireVendors { get; set; }

    public virtual DbSet<PartTagIdea> PartTagIdeas { get; set; }

    public virtual DbSet<PartTagIdeasHistory> PartTagIdeasHistories { get; set; }

    public virtual DbSet<PartTransactionsExternal> PartTransactionsExternals { get; set; }

    public virtual DbSet<PartsDemandsLeavingInFuture> PartsDemandsLeavingInFutures { get; set; }

    public virtual DbSet<PartsDemandsLeftAlready> PartsDemandsLeftAlreadies { get; set; }

    public virtual DbSet<PartsDemandsLeftEarly> PartsDemandsLeftEarlies { get; set; }

    public virtual DbSet<PartsImportedFromPlus420250307> PartsImportedFromPlus420250307s { get; set; }

    public virtual DbSet<PartsListWeightsValue> PartsListWeightsValues { get; set; }

    public virtual DbSet<PartsMergeHistory> PartsMergeHistories { get; set; }

    public virtual DbSet<PartsOutCountByProject> PartsOutCountByProjects { get; set; }

    public virtual DbSet<PartsThatHadPricesUpdate> PartsThatHadPricesUpdates { get; set; }

    public virtual DbSet<PartsThatNeedFilesZipped> PartsThatNeedFilesZippeds { get; set; }

    public virtual DbSet<PartsToCheckIn> PartsToCheckIns { get; set; }

    public virtual DbSet<PartsWithOpenRepairTicket> PartsWithOpenRepairTickets { get; set; }

    public virtual DbSet<PatTestDevice> PatTestDevices { get; set; }

    public virtual DbSet<PatTestResult> PatTestResults { get; set; }

    public virtual DbSet<PatTestType> PatTestTypes { get; set; }

    public virtual DbSet<Patching> Patchings { get; set; }

    public virtual DbSet<PayingPerDiemStatusType> PayingPerDiemStatusTypes { get; set; }

    public virtual DbSet<PaylocityAddress> PaylocityAddresses { get; set; }

    public virtual DbSet<PaylocityContact> PaylocityContacts { get; set; }

    public virtual DbSet<PaylocityEmail> PaylocityEmails { get; set; }

    public virtual DbSet<PaylocityPhone> PaylocityPhones { get; set; }

    public virtual DbSet<PeEmployeeDuplicateMap> PeEmployeeDuplicateMaps { get; set; }

    public virtual DbSet<PeEmployeeTraining> PeEmployeeTrainings { get; set; }

    public virtual DbSet<PeEmployeeTrainingTopic> PeEmployeeTrainingTopics { get; set; }

    public virtual DbSet<PeEmployeeTrainingTopicsBulkSave> PeEmployeeTrainingTopicsBulkSaves { get; set; }

    public virtual DbSet<PePayPeriod> PePayPeriods { get; set; }

    public virtual DbSet<PePayrollRun> PePayrollRuns { get; set; }

    public virtual DbSet<PePayrollRunDatum> PePayrollRunData { get; set; }

    public virtual DbSet<PeTrainingClass> PeTrainingClasses { get; set; }

    public virtual DbSet<PeTrainingClassBulkSave> PeTrainingClassBulkSaves { get; set; }

    public virtual DbSet<PeTrainingClassBulkSave2> PeTrainingClassBulkSave2s { get; set; }

    public virtual DbSet<PeTrainingClassStudent> PeTrainingClassStudents { get; set; }

    public virtual DbSet<PeTrainingClassStudentsBulkSave> PeTrainingClassStudentsBulkSaves { get; set; }

    public virtual DbSet<PeTrainingClassTopic> PeTrainingClassTopics { get; set; }

    public virtual DbSet<PeTrainingClassTopicsBulkSave> PeTrainingClassTopicsBulkSaves { get; set; }

    public virtual DbSet<PeTrainingTopic> PeTrainingTopics { get; set; }

    public virtual DbSet<PeTrainingTopicsBulkSave> PeTrainingTopicsBulkSaves { get; set; }

    public virtual DbSet<PeTrainingTopicsBulkSave2> PeTrainingTopicsBulkSave2s { get; set; }

    public virtual DbSet<PeTrainingTopicsDevice> PeTrainingTopicsDevices { get; set; }

    public virtual DbSet<PeTrainingTopicsDevicesBulkSave> PeTrainingTopicsDevicesBulkSaves { get; set; }

    public virtual DbSet<Pebank> Pebanks { get; set; }

    public virtual DbSet<Pebankvw> Pebankvws { get; set; }

    public virtual DbSet<Pedivision> Pedivisions { get; set; }

    public virtual DbSet<PedivisionVisible> PedivisionVisibles { get; set; }

    public virtual DbSet<Peeeoc> Peeeocs { get; set; }

    public virtual DbSet<PeemVisibleDivision> PeemVisibleDivisions { get; set; }

    public virtual DbSet<PeemVisibleDivisionsA> PeemVisibleDivisionsAs { get; set; }

    public virtual DbSet<PeempReview> PeempReviews { get; set; }

    public virtual DbSet<Peempacct> Peempaccts { get; set; }

    public virtual DbSet<Peempcompany> Peempcompanies { get; set; }

    public virtual DbSet<Peemployee> Peemployees { get; set; }

    public virtual DbSet<PeemployeeA> PeemployeeAs { get; set; }

    public virtual DbSet<PeemployeeHistory> PeemployeeHistories { get; set; }

    public virtual DbSet<PeemployeeHistoryTemp> PeemployeeHistoryTemps { get; set; }

    public virtual DbSet<PeemployeeRef4> PeemployeeRef4s { get; set; }

    public virtual DbSet<PeemployeeTemp> PeemployeeTemps { get; set; }

    public virtual DbSet<Peempmisc> Peempmiscs { get; set; }

    public virtual DbSet<Peempnote> Peempnotes { get; set; }

    public virtual DbSet<Peemptran> Peemptrans { get; set; }

    public virtual DbSet<Pejob> Pejobs { get; set; }

    public virtual DbSet<PejobTranslation> PejobTranslations { get; set; }

    public virtual DbSet<Pejobsub> Pejobsubs { get; set; }

    public virtual DbSet<Pemilitary> Pemilitaries { get; set; }

    public virtual DbSet<Pepay> Pepays { get; set; }

    public virtual DbSet<Pepayjobtypevw> Pepayjobtypevws { get; set; }

    public virtual DbSet<Peposition> Pepositions { get; set; }

    public virtual DbSet<PerDiemPayer> PerDiemPayers { get; set; }

    public virtual DbSet<PermissionGroup> PermissionGroups { get; set; }

    public virtual DbSet<Person> People { get; set; }

    public virtual DbSet<PersonInfo> PersonInfos { get; set; }

    public virtual DbSet<PersonInfoTab> PersonInfoTabs { get; set; }

    public virtual DbSet<Peskill> Peskills { get; set; }

    public virtual DbSet<Pestate> Pestates { get; set; }

    public virtual DbSet<Petermcode> Petermcodes { get; set; }

    public virtual DbSet<Pew2emp> Pew2emps { get; set; }

    public virtual DbSet<PhoneDataSourceFieldMap> PhoneDataSourceFieldMaps { get; set; }

    public virtual DbSet<PjBillSchedule> PjBillSchedules { get; set; }

    public virtual DbSet<Pjbdgtpick> Pjbdgtpicks { get; set; }

    public virtual DbSet<Pjcarnet> Pjcarnets { get; set; }

    public virtual DbSet<Pjempassign> Pjempassigns { get; set; }

    public virtual DbSet<PjempassignA> PjempassignAs { get; set; }

    public virtual DbSet<PjempassignDtl> PjempassignDtls { get; set; }

    public virtual DbSet<PjempassignHistory> PjempassignHistories { get; set; }

    public virtual DbSet<PjempassignTemp> PjempassignTemps { get; set; }

    public virtual DbSet<Pjinvratetype> Pjinvratetypes { get; set; }

    public virtual DbSet<Pjjobbudexp> Pjjobbudexps { get; set; }

    public virtual DbSet<PjjobbudexpA> PjjobbudexpAs { get; set; }

    public virtual DbSet<PjjobbudexpHistory> PjjobbudexpHistories { get; set; }

    public virtual DbSet<PjjobbudexpHistoryRecentlyChangedProject> PjjobbudexpHistoryRecentlyChangedProjects { get; set; }

    public virtual DbSet<PjjobbudexpIndexViewTable> PjjobbudexpIndexViewTables { get; set; }

    public virtual DbSet<PjjobbudexpIndexViewTableStagingArea> PjjobbudexpIndexViewTableStagingAreas { get; set; }

    public virtual DbSet<PjjobbudexpQtyFix> PjjobbudexpQtyFixes { get; set; }

    public virtual DbSet<PjjobbudexpTemp> PjjobbudexpTemps { get; set; }

    public virtual DbSet<Pjjobbudexpfix> Pjjobbudexpfixes { get; set; }

    public virtual DbSet<Pjjobbudget> Pjjobbudgets { get; set; }

    public virtual DbSet<PjjobbudgetTemp> PjjobbudgetTemps { get; set; }

    public virtual DbSet<Pjjobbudgetum> PjjobbudgetAs { get; set; }

    public virtual DbSet<Pjjobbudinfo> Pjjobbudinfos { get; set; }

    public virtual DbSet<Pjjobbudsch> Pjjobbudsches { get; set; }

    public virtual DbSet<Pjjobexpense> Pjjobexpenses { get; set; }

    public virtual DbSet<Pjjobrevenue> Pjjobrevenues { get; set; }

    public virtual DbSet<PjjobrevenueHistory> PjjobrevenueHistories { get; set; }

    public virtual DbSet<Pjproptype> Pjproptypes { get; set; }

    public virtual DbSet<PjproptypeIndexViewTable> PjproptypeIndexViewTables { get; set; }

    public virtual DbSet<Pjtfrusr> Pjtfrusrs { get; set; }

    public virtual DbSet<Plus4BarcodesToBeCreated20250307> Plus4BarcodesToBeCreated20250307s { get; set; }

    public virtual DbSet<Pm2AssignedCrew> Pm2AssignedCrews { get; set; }

    public virtual DbSet<Pm2BidExpense> Pm2BidExpenses { get; set; }

    public virtual DbSet<Pm2BidRevenue> Pm2BidRevenues { get; set; }

    public virtual DbSet<Pm2Crew> Pm2Crews { get; set; }

    public virtual DbSet<Pm2Equipment> Pm2Equipments { get; set; }

    public virtual DbSet<Pm2EquipmentSubhire> Pm2EquipmentSubhires { get; set; }

    public virtual DbSet<Pm2FavoriteProjects> Pm2FavoriteProjects { get; set; }
    //public virtual DbSet<Pm2FavoriteProjects> FavoriteProjects { get; set; }

    public virtual DbSet<Pm2GetProjectBillingPeriodItems2V> Pm2GetProjectBillingPeriodItems2Vs { get; set; }

    public virtual DbSet<Pm2GetProjectBillingPeriodItemsV> Pm2GetProjectBillingPeriodItemsVs { get; set; }

    public virtual DbSet<Pm2GetProjectBillingPeriodItemsV07feb2025> Pm2GetProjectBillingPeriodItemsV07feb2025s { get; set; }

    public virtual DbSet<Pm2Project> Pm2Projects { get; set; }

    public virtual DbSet<Pm2ProjectBillingItem> Pm2ProjectBillingItems { get; set; }

    public virtual DbSet<Pm2ProjectBillingPeriod> Pm2ProjectBillingPeriods { get; set; }

    public virtual DbSet<Pm2ProjectBillingPeriodItem> Pm2ProjectBillingPeriodItems { get; set; }

    public virtual DbSet<Pm2ProjectClientContact> Pm2ProjectClientContacts { get; set; }

    public virtual DbSet<Pm2ProjectEmployeeOvertimeRate> Pm2ProjectEmployeeOvertimeRates { get; set; }

    public virtual DbSet<Pm2ProjectNote> Pm2ProjectNotes { get; set; }

    public virtual DbSet<Pm2ProjectProductionSchedule> Pm2ProjectProductionSchedules { get; set; }

    public virtual DbSet<Pm2Rfi> Pm2Rfis { get; set; }

    public virtual DbSet<PmmachdistHist> PmmachdistHists { get; set; }

    public virtual DbSet<Pocontrol> Pocontrols { get; set; }

    public virtual DbSet<PodioAddress> PodioAddresses { get; set; }

    public virtual DbSet<PodioContact> PodioContacts { get; set; }

    public virtual DbSet<PodioEmail> PodioEmails { get; set; }

    public virtual DbSet<PodioPhone> PodioPhones { get; set; }

    public virtual DbSet<PollstarArtist> PollstarArtists { get; set; }

    public virtual DbSet<PollstarArtistLegacyIdtranslation> PollstarArtistLegacyIdtranslations { get; set; }

    public virtual DbSet<PollstarArtistsBulkSave> PollstarArtistsBulkSaves { get; set; }

    public virtual DbSet<PollstarArtistsEventsDateRangesInRegion> PollstarArtistsEventsDateRangesInRegions { get; set; }

    public virtual DbSet<PollstarArtistsEventsPerYearMonthInRegion> PollstarArtistsEventsPerYearMonthInRegions { get; set; }

    public virtual DbSet<PollstarCity> PollstarCities { get; set; }

    public virtual DbSet<PollstarEvent> PollstarEvents { get; set; }

    public virtual DbSet<PollstarEventsBulkSave> PollstarEventsBulkSaves { get; set; }

    public virtual DbSet<PollstarNewVenueTypeConversion> PollstarNewVenueTypeConversions { get; set; }

    public virtual DbSet<PollstarQtyArtistsPerVenueType> PollstarQtyArtistsPerVenueTypes { get; set; }

    public virtual DbSet<PollstarReaderHideArtistUntil> PollstarReaderHideArtistUntils { get; set; }

    public virtual DbSet<PollstarReaderHideArtistUntil1> PollstarReaderHideArtistUntils1 { get; set; }

    public virtual DbSet<PollstarSongkickArtist> PollstarSongkickArtists { get; set; }

    public virtual DbSet<PollstarSongkickEvent> PollstarSongkickEvents { get; set; }

    public virtual DbSet<PollstarSongkickEventDetail> PollstarSongkickEventDetails { get; set; }

    public virtual DbSet<PollstarSongkickNewMatchingVenue> PollstarSongkickNewMatchingVenues { get; set; }

    public virtual DbSet<PollstarSongkickVenue> PollstarSongkickVenues { get; set; }

    public virtual DbSet<PollstarSongkickVenueLink> PollstarSongkickVenueLinks { get; set; }

    public virtual DbSet<PollstarStateProvince> PollstarStateProvinces { get; set; }

    public virtual DbSet<PollstarTempVenueType> PollstarTempVenueTypes { get; set; }

    public virtual DbSet<PollstarTopArtist> PollstarTopArtists { get; set; }

    public virtual DbSet<PollstarVenue> PollstarVenues { get; set; }

    public virtual DbSet<PollstarVenueLegacyIdtranslation> PollstarVenueLegacyIdtranslations { get; set; }

    public virtual DbSet<PollstarVenuesBulkSave> PollstarVenuesBulkSaves { get; set; }

    public virtual DbSet<PollstarVenuesVenueType> PollstarVenuesVenueTypes { get; set; }

    public virtual DbSet<Popayterm> Popayterms { get; set; }

    public virtual DbSet<Povendor> Povendors { get; set; }

    public virtual DbSet<Povendsite> Povendsites { get; set; }

    public virtual DbSet<PrepBayAndDockList> PrepBayAndDockLists { get; set; }

    public virtual DbSet<Probqueue> Probqueues { get; set; }

    public virtual DbSet<ProductionScheduleEventType> ProductionScheduleEventTypes { get; set; }

    public virtual DbSet<ProjCalNotesProj> ProjCalNotesProjs { get; set; }

    public virtual DbSet<ProjCalNotesWarehouse> ProjCalNotesWarehouses { get; set; }

    public virtual DbSet<ProjcalPartTodateException> ProjcalPartTodateExceptions { get; set; }

    public virtual DbSet<ProjcalPartTrandateException> ProjcalPartTrandateExceptions { get; set; }

    public virtual DbSet<ProjectBillingCompany> ProjectBillingCompanies { get; set; }

    public virtual DbSet<ProjectBillingItem> ProjectBillingItems { get; set; }

    public virtual DbSet<ProjectBillingItemsA> ProjectBillingItemsAs { get; set; }

    public virtual DbSet<ProjectBillingItemsDuration> ProjectBillingItemsDurations { get; set; }

    public virtual DbSet<ProjectBillingItemsRate> ProjectBillingItemsRates { get; set; }

    public virtual DbSet<ProjectBillingPeriod> ProjectBillingPeriods { get; set; }

    public virtual DbSet<ProjectBillingPeriodActiveItem> ProjectBillingPeriodActiveItems { get; set; }

    public virtual DbSet<ProjectBillingPeriodItem> ProjectBillingPeriodItems { get; set; }

    public virtual DbSet<ProjectBillingPeriodItem1> ProjectBillingPeriodItems1 { get; set; }

    public virtual DbSet<ProjectBillingPeriodItemsA> ProjectBillingPeriodItemsAs { get; set; }

    public virtual DbSet<ProjectBillingPeriodsA> ProjectBillingPeriodsAs { get; set; }

    public virtual DbSet<ProjectChargesStatusTemp> ProjectChargesStatusTemps { get; set; }

    public virtual DbSet<ProjectChecklistCategory> ProjectChecklistCategories { get; set; }

    public virtual DbSet<ProjectChecklistItem> ProjectChecklistItems { get; set; }

    public virtual DbSet<ProjectChecklistSubCategory> ProjectChecklistSubCategories { get; set; }

    public virtual DbSet<ProjectChecklistValue> ProjectChecklistValues { get; set; }

    public virtual DbSet<ProjectClientContact> ProjectClientContacts { get; set; }

    public virtual DbSet<ProjectDefaultSuffix> ProjectDefaultSuffixes { get; set; }

    public virtual DbSet<ProjectEmployeeOvertimeRate> ProjectEmployeeOvertimeRates { get; set; }

    public virtual DbSet<ProjectEquipmentBenchmark> ProjectEquipmentBenchmarks { get; set; }

    public virtual DbSet<ProjectPriceLevel> ProjectPriceLevels { get; set; }

    public virtual DbSet<ProjectProductionSchedule> ProjectProductionSchedules { get; set; }

    public virtual DbSet<ProjectQuoteMonthlyTotal> ProjectQuoteMonthlyTotals { get; set; }

    public virtual DbSet<ProjectQuoteMonthlyTotalsHistory> ProjectQuoteMonthlyTotalsHistories { get; set; }

    public virtual DbSet<ProjectQuotedVsBenchmark> ProjectQuotedVsBenchmarks { get; set; }

    public virtual DbSet<ProjectStatus> ProjectStatuses { get; set; }

    public virtual DbSet<ProjectsAttachmentTypesToCloudStorageFolder> ProjectsAttachmentTypesToCloudStorageFolders { get; set; }

    public virtual DbSet<ProjectsByValueCheckedOut> ProjectsByValueCheckedOuts { get; set; }

    public virtual DbSet<ProjectsCurrentlyHavingAvailabilityCalcuated> ProjectsCurrentlyHavingAvailabilityCalcuateds { get; set; }

    public virtual DbSet<ProjectsExceedingInsuranceThresholdAlreadyReported> ProjectsExceedingInsuranceThresholdAlreadyReporteds { get; set; }

    public virtual DbSet<ProjectsHistory> ProjectsHistories { get; set; }

    public virtual DbSet<ProjectsHistoryConflict20230120> ProjectsHistoryConflict20230120s { get; set; }

    public virtual DbSet<ProjectsHistoryTemp> ProjectsHistoryTemps { get; set; }

    public virtual DbSet<ProjectsPartsOrderedAndCheckedOut> ProjectsPartsOrderedAndCheckedOuts { get; set; }

    public virtual DbSet<ProjectsPartsOrderedAndCheckedOutByInDateWh> ProjectsPartsOrderedAndCheckedOutByInDateWhs { get; set; }

    public virtual DbSet<ProjectsPartsOrderedAndCheckedOutByOutDateWh> ProjectsPartsOrderedAndCheckedOutByOutDateWhs { get; set; }

    public virtual DbSet<ProjectsUsersFoldersToCloudStorageFolder> ProjectsUsersFoldersToCloudStorageFolders { get; set; }

    public virtual DbSet<PurchaseOrder1> PurchaseOrders { get; set; }

   // public virtual DbSet<PurchaseOrder1> PurchaseOrders1 { get; set; }

   // public virtual DbSet<PurchaseOrderA> PurchaseOrderAs { get; set; }

    public virtual DbSet<PurchaseOrderInvoice> PurchaseOrderInvoices { get; set; }

    public virtual DbSet<PurchaseOrderInvoicesA> PurchaseOrderInvoicesAs { get; set; }

    public virtual DbSet<PurchaseOrderInvoicesSaveDatum> PurchaseOrderInvoicesSaveData { get; set; }

    public virtual DbSet<PurchaseOrderLineItems> PurchaseOrderLineItems { get; set; }

    public virtual DbSet<PurchaseOrderLineItemsA> PurchaseOrderLineItemsAs { get; set; }

    public virtual DbSet<PurchaseOrderLineItemsReceipt> PurchaseOrderLineItemsReceipts { get; set; }

    public virtual DbSet<PurchaseOrderLineItemsSaveDatum> PurchaseOrderLineItemsSaveData { get; set; }

    public virtual DbSet<PurchaseOrderSaveDatum> PurchaseOrderSaveData { get; set; }

    public virtual DbSet<PurchasingAccount> PurchasingAccounts { get; set; }

    public virtual DbSet<PushToAccountingProject> PushToAccountingProjects { get; set; }

    public virtual DbSet<QuickReportInventoryMigration20250416> QuickReportInventoryMigration20250416s { get; set; }

    public virtual DbSet<QuickReportMigration20250416> QuickReportMigration20250416s { get; set; }

    public virtual DbSet<QuickReportMigration20250421> QuickReportMigration20250421s { get; set; }

    public virtual DbSet<QuickReportMigration20250429> QuickReportMigration20250429s { get; set; }

    public virtual DbSet<QuickReportMigration20250505> QuickReportMigration20250505s { get; set; }

    public virtual DbSet<QuickReportMigration20250508> QuickReportMigration20250508s { get; set; }

    public virtual DbSet<QuickSearchQuery> QuickSearchQueries { get; set; }

    public virtual DbSet<QuoteExpenseResponsibility> QuoteExpenseResponsibilities { get; set; }

    public virtual DbSet<QuoteReportHtmlBlock> QuoteReportHtmlBlocks { get; set; }

    public virtual DbSet<QuoteReportHtmlBlocksDataFormat> QuoteReportHtmlBlocksDataFormats { get; set; }

    public virtual DbSet<QuoteReportHtmlBlocksGroupBy> QuoteReportHtmlBlocksGroupBies { get; set; }

    public virtual DbSet<QuoteReportHtmlBlocksSummary> QuoteReportHtmlBlocksSummaries { get; set; }

    public virtual DbSet<QuoteReportSectionType> QuoteReportSectionTypes { get; set; }

    public virtual DbSet<QuoteReportTemplate> QuoteReportTemplates { get; set; }

    public virtual DbSet<QuoteReportTemplate1> QuoteReportTemplates1 { get; set; }

    public virtual DbSet<QuoteReportTemplateSection> QuoteReportTemplateSections { get; set; }

    public virtual DbSet<QuoteReportType> QuoteReportTypes { get; set; }

    public virtual DbSet<QuoteReportVault> QuoteReportVaults { get; set; }

    public virtual DbSet<QuoteReportVaultExpenseResponsibility> QuoteReportVaultExpenseResponsibilities { get; set; }

    public virtual DbSet<QuoteReportVaultHtmlelement> QuoteReportVaultHtmlelements { get; set; }

    public virtual DbSet<RackConfigurator> RackConfigurators { get; set; }

    public virtual DbSet<RackConfiguratorA> RackConfiguratorAs { get; set; }

    public virtual DbSet<RackConfiguratorHistory> RackConfiguratorHistories { get; set; }

    public virtual DbSet<RackConfiguratorInfectiousPartno419902> RackConfiguratorInfectiousPartno419902s { get; set; }

    public virtual DbSet<RackConfiguratorPartsToDelete> RackConfiguratorPartsToDeletes { get; set; }

    public virtual DbSet<RackConfiguratorPhaseDetail> RackConfiguratorPhaseDetails { get; set; }

    public virtual DbSet<Ratiogroup> Ratiogroups { get; set; }

    public virtual DbSet<RatiogroupsFormula> RatiogroupsFormulas { get; set; }

    public virtual DbSet<RealCurve> RealCurves { get; set; }

    public virtual DbSet<RealCurveValue> RealCurveValues { get; set; }

    public virtual DbSet<ReceiptInvLocation> ReceiptInvLocations { get; set; }

    public virtual DbSet<Receiptsperson> Receiptspeople { get; set; }

    public virtual DbSet<RecentMultiCompanyView> RecentMultiCompanyViews { get; set; }

    public virtual DbSet<RecentMultiWarehouseView> RecentMultiWarehouseViews { get; set; }

    public virtual DbSet<RecentProject> RecentProjects { get; set; }

    public virtual DbSet<ReferenceSet> ReferenceSets { get; set; }

    public virtual DbSet<ReferenceSet1> ReferenceSets1 { get; set; }

    public virtual DbSet<ReferenceSetCurve> ReferenceSetCurves { get; set; }

    public virtual DbSet<ReferenceSetDetermination> ReferenceSetDeterminations { get; set; }

    public virtual DbSet<ReferenceSetParameter> ReferenceSetParameters { get; set; }

    public virtual DbSet<ReferralProgram> ReferralPrograms { get; set; }

    public virtual DbSet<Region> Regions { get; set; }

    public virtual DbSet<RepairActivitiesAttachment> RepairActivitiesAttachments { get; set; }

    public virtual DbSet<RepairActivitiesAttachmentsBulkSave> RepairActivitiesAttachmentsBulkSaves { get; set; }

    public virtual DbSet<RepairActivitiesBulkSave> RepairActivitiesBulkSaves { get; set; }

    public virtual DbSet<RepairActivitiesRequisition> RepairActivitiesRequisitions { get; set; }

    public virtual DbSet<RepairActivity> RepairActivities { get; set; }

    public virtual DbSet<RepairActivityType> RepairActivityTypes { get; set; }

    public virtual DbSet<RepairTicket> RepairTickets { get; set; }

    public virtual DbSet<RepairTicketsBulkSave> RepairTicketsBulkSaves { get; set; }

    public virtual DbSet<RepairTicketsNextId> RepairTicketsNextIds { get; set; }

    public virtual DbSet<RepairTicketsRebarcoded20220509> RepairTicketsRebarcoded20220509s { get; set; }

    public virtual DbSet<ReplicatedObject> ReplicatedObjects { get; set; }

    public virtual DbSet<ReplicationFixInpartSubAllCurrentPartsOnMissingSydphasesDataFromPaSql03> ReplicationFixInpartSubAllCurrentPartsOnMissingSydphasesDataFromPaSql03s { get; set; }

    public virtual DbSet<ReplicationFixInpartSubAllCurrentPartsOnMissingSydphasesDataFromSydSql01> ReplicationFixInpartSubAllCurrentPartsOnMissingSydphasesDataFromSydSql01s { get; set; }

    public virtual DbSet<ReplicationFixInpartSubCurrentPabarcodesOnMissingPhase> ReplicationFixInpartSubCurrentPabarcodesOnMissingPhases { get; set; }

    public virtual DbSet<ReplicationFixInpartSubCurrentSyddataFromMissingPhase> ReplicationFixInpartSubCurrentSyddataFromMissingPhases { get; set; }

    public virtual DbSet<ReportFieldTranslation> ReportFieldTranslations { get; set; }

    public virtual DbSet<RevRecActualInvoiceHistory> RevRecActualInvoiceHistories { get; set; }

    public virtual DbSet<RevRecCategory> RevRecCategories { get; set; }

    public virtual DbSet<RevRecCategoryMapping> RevRecCategoryMappings { get; set; }

    public virtual DbSet<RevRecInvoicingDetail> RevRecInvoicingDetails { get; set; }

    public virtual DbSet<RevRecLocked> RevRecLockeds { get; set; }

    public virtual DbSet<RevRecProcessingHistory> RevRecProcessingHistories { get; set; }

    public virtual DbSet<RevRecProjectAccountBalance> RevRecProjectAccountBalances { get; set; }

    public virtual DbSet<RevRecProjectBillingDatum> RevRecProjectBillingData { get; set; }

    public virtual DbSet<RevRecProjectHistory> RevRecProjectHistories { get; set; }

    public virtual DbSet<RevRecProjectHistoryV> RevRecProjectHistoryVs { get; set; }

    public virtual DbSet<RevRecRevenueAccountBalance> RevRecRevenueAccountBalances { get; set; }

    public virtual DbSet<RevRecTempCurrentProject> RevRecTempCurrentProjects { get; set; }

    public virtual DbSet<RevRecTempCurrentProjectsWithoutNull> RevRecTempCurrentProjectsWithoutNulls { get; set; }

    public virtual DbSet<RevRecTempProjectAccountBalance> RevRecTempProjectAccountBalances { get; set; }

    public virtual DbSet<RevRecTempProjectAccountBalancesRounded> RevRecTempProjectAccountBalancesRoundeds { get; set; }

    public virtual DbSet<RevRecTempProjectCategoryValueBreakdown> RevRecTempProjectCategoryValueBreakdowns { get; set; }

    public virtual DbSet<RevRecTempProjectRevenueSummaryToCategorySummary> RevRecTempProjectRevenueSummaryToCategorySummaries { get; set; }

    public virtual DbSet<RevRecTempProjectSummaryToCategorySummary> RevRecTempProjectSummaryToCategorySummaries { get; set; }

    public virtual DbSet<Rfi> Rfis { get; set; }

    public virtual DbSet<Rfi1678891320250225> Rfi1678891320250225s { get; set; }

    public virtual DbSet<RfiInProcessSplitSummary> RfiInProcessSplitSummaries { get; set; }

    public virtual DbSet<RfiIncorrectTotalInvoiced20210202> RfiIncorrectTotalInvoiced20210202s { get; set; }

    public virtual DbSet<RfiStagingVault> RfiStagingVaults { get; set; }

    public virtual DbSet<RfiStagingVaultV> RfiStagingVaultVs { get; set; }

    public virtual DbSet<RiggingInspectionLocation> RiggingInspectionLocations { get; set; }

    public virtual DbSet<SalesForecastGroup> SalesForecastGroups { get; set; }

    public virtual DbSet<SalesForecastGroupOverride> SalesForecastGroupOverrides { get; set; }

    public virtual DbSet<SalesForecastRun> SalesForecastRuns { get; set; }

    public virtual DbSet<ServiceModel> ServiceModels { get; set; }

    public virtual DbSet<ShippingContainerAverageDaysDoorToDoor> ShippingContainerAverageDaysDoorToDoors { get; set; }

    public virtual DbSet<ShippingDestination> ShippingDestinations { get; set; }

    public virtual DbSet<ShippingDestinationType> ShippingDestinationTypes { get; set; }

    public virtual DbSet<ShippingExpenseType> ShippingExpenseTypes { get; set; }

    public virtual DbSet<ShippingExpenseTypeDetail> ShippingExpenseTypeDetails { get; set; }

    public virtual DbSet<ShippingHarmonizedCodeUom> ShippingHarmonizedCodeUoms { get; set; }

    public virtual DbSet<ShippingMethod> ShippingMethods { get; set; }

    public virtual DbSet<ShippingNetCostCode> ShippingNetCostCodes { get; set; }

    public virtual DbSet<ShippingPackage> ShippingPackages { get; set; }

    public virtual DbSet<ShippingPackageType> ShippingPackageTypes { get; set; }

    public virtual DbSet<ShippingPackagesForFedExShipManager> ShippingPackagesForFedExShipManagers { get; set; }

    public virtual DbSet<ShippingPackagesShipped> ShippingPackagesShippeds { get; set; }

    public virtual DbSet<ShippingPreferenceCriterionCode> ShippingPreferenceCriterionCodes { get; set; }

    public virtual DbSet<ShippingPricePerPound> ShippingPricePerPounds { get; set; }

    public virtual DbSet<ShippingProducerCode> ShippingProducerCodes { get; set; }

    public virtual DbSet<ShippingRecipient> ShippingRecipients { get; set; }

    public virtual DbSet<ShippingRequestForShipmentVault> ShippingRequestForShipmentVaults { get; set; }

    public virtual DbSet<ShippingServiceType> ShippingServiceTypes { get; set; }

    public virtual DbSet<ShopifyApiInfo> ShopifyApiInfos { get; set; }

    public virtual DbSet<ShopifyConsoleAppMyFinesseReport> ShopifyConsoleAppMyFinesseReports { get; set; }

    public virtual DbSet<ShopifyProductsType> ShopifyProductsTypes { get; set; }

    public virtual DbSet<SignalLevel> SignalLevels { get; set; }

    public virtual DbSet<SkanFixedAssetRegister202209> SkanFixedAssetRegister202209s { get; set; }

    public virtual DbSet<SongkickArtist> SongkickArtists { get; set; }

    public virtual DbSet<SongkickArtistsBulkSave> SongkickArtistsBulkSaves { get; set; }

    public virtual DbSet<SongkickEvent> SongkickEvents { get; set; }

    public virtual DbSet<SongkickEventsBulkSave> SongkickEventsBulkSaves { get; set; }

    public virtual DbSet<SongkickMetroArea> SongkickMetroAreas { get; set; }

    public virtual DbSet<SongkickMetroAreasBulkSave> SongkickMetroAreasBulkSaves { get; set; }

    public virtual DbSet<SongkickVenue> SongkickVenues { get; set; }

    public virtual DbSet<SongkickVenuesBulkSave> SongkickVenuesBulkSaves { get; set; }

    public virtual DbSet<SongkickVenuesVenueType> SongkickVenuesVenueTypes { get; set; }

    public virtual DbSet<SoundImageAsset> SoundImageAssets { get; set; }

    public virtual DbSet<SoundImageRackIdtoEntitynoMapping> SoundImageRackIdtoEntitynoMappings { get; set; }

    public virtual DbSet<SoundImageTourIdtoEntitynoMapping> SoundImageTourIdtoEntitynoMappings { get; set; }

    public virtual DbSet<SoundTrackRackType> SoundTrackRackTypes { get; set; }

    public virtual DbSet<SoundTrackerBarcodesImport> SoundTrackerBarcodesImports { get; set; }

    public virtual DbSet<SoundTrackerIocardOrderedGearImport> SoundTrackerIocardOrderedGearImports { get; set; }

    public virtual DbSet<SoundcheckLogging> SoundcheckLoggings { get; set; }

    public virtual DbSet<SoundcheckSequence> SoundcheckSequences { get; set; }

    public virtual DbSet<SqlresultType> SqlresultTypes { get; set; }

    public virtual DbSet<StackTest> StackTests { get; set; }

    public virtual DbSet<StackTestDevice> StackTestDevices { get; set; }

    public virtual DbSet<StagedUnifiedAddress> StagedUnifiedAddresses { get; set; }

    public virtual DbSet<StagedUnifiedContact> StagedUnifiedContacts { get; set; }

    public virtual DbSet<StagedUnifiedEmail> StagedUnifiedEmails { get; set; }

    public virtual DbSet<StagedUnifiedPhone> StagedUnifiedPhones { get; set; }

    public virtual DbSet<StagedUnunifiedContact> StagedUnunifiedContacts { get; set; }

    public virtual DbSet<State> States { get; set; }

    public virtual DbSet<Station> Stations { get; set; }

    public virtual DbSet<StationDevice> StationDevices { get; set; }

    public virtual DbSet<Status> Statuses { get; set; }

    public virtual DbSet<StatutoryFee> StatutoryFees { get; set; }

    public virtual DbSet<StorageLocationNotificationRecipient> StorageLocationNotificationRecipients { get; set; }

    public virtual DbSet<SubcontractCrewExpenseAccount> SubcontractCrewExpenseAccounts { get; set; }

    public virtual DbSet<SubrentedEquipmentExpenseAccount> SubrentedEquipmentExpenseAccounts { get; set; }

    public virtual DbSet<SuggestedDuplicate> SuggestedDuplicates { get; set; }

    public virtual DbSet<Supplier> Suppliers { get; set; }

    public virtual DbSet<SupplierInfo> SupplierInfos { get; set; }

    public virtual DbSet<SupplierInfoAddress> SupplierInfoAddresses { get; set; }

    public virtual DbSet<SupplierInfoGeneral> SupplierInfoGenerals { get; set; }

    public virtual DbSet<SysConfig> SysConfigs { get; set; }

    public virtual DbSet<SysproCompany> SysproCompanies { get; set; }

    public virtual DbSet<SysproFileStorageAttachmentGuid> SysproFileStorageAttachmentGuids { get; set; }

    public virtual DbSet<SysproInvoicePusherInvoiceErrorMessage> SysproInvoicePusherInvoiceErrorMessages { get; set; }

    public virtual DbSet<SysproPart> SysproParts { get; set; }

    public virtual DbSet<SysproProjectCashFlow> SysproProjectCashFlows { get; set; }

    public virtual DbSet<SysproProjectExpense> SysproProjectExpenses { get; set; }

    public virtual DbSet<SysproPurchaseActivity> SysproPurchaseActivities { get; set; }

    public virtual DbSet<SysproTransferPurchaseOrderQuantity> SysproTransferPurchaseOrderQuantities { get; set; }

    public virtual DbSet<SysproTransferSalesOrderQuantity> SysproTransferSalesOrderQuantities { get; set; }

    public virtual DbSet<SysproTransfersSalesOrder> SysproTransfersSalesOrders { get; set; }

    public virtual DbSet<TargetOutputGainFrequencyRegion> TargetOutputGainFrequencyRegions { get; set; }

    public virtual DbSet<TaxAccount> TaxAccounts { get; set; }

    public virtual DbSet<TaxType> TaxTypes { get; set; }

    public virtual DbSet<Temp2> Temp2s { get; set; }

    public virtual DbSet<TempInventoryPartInStock> TempInventoryPartInStocks { get; set; }

    public virtual DbSet<TempPoLine> TempPoLines { get; set; }

    public virtual DbSet<TempQuickReportPoLine> TempQuickReportPoLines { get; set; }

    public virtual DbSet<TempQuickReportPoLine20250401> TempQuickReportPoLine20250401s { get; set; }

    public virtual DbSet<TempTransactionsReceievedFrom02012025> TempTransactionsReceievedFrom02012025s { get; set; }

    public virtual DbSet<TempVendorUpdates20180817> TempVendorUpdates20180817s { get; set; }

    public virtual DbSet<Test> Tests { get; set; }

    public virtual DbSet<TestFrequencyRegion> TestFrequencyRegions { get; set; }

    public virtual DbSet<Tmp2025TransferOrder> Tmp2025TransferOrders { get; set; }

    public virtual DbSet<Tmp4mArtistEvent> Tmp4mArtistEvents { get; set; }

    public virtual DbSet<Tmp4mentitynoArtist> Tmp4mentitynoArtists { get; set; }

    public virtual DbSet<TmpAccountExecPrimarySecondary> TmpAccountExecPrimarySecondaries { get; set; }

    public virtual DbSet<TmpAedpartPricingImport> TmpAedpartPricingImports { get; set; }

    public virtual DbSet<TmpAmpsPriceListImport> TmpAmpsPriceListImports { get; set; }

    public virtual DbSet<TmpAngelfishAutoSearchResult> TmpAngelfishAutoSearchResults { get; set; }

    public virtual DbSet<TmpAngelfishClaudeChosenPart> TmpAngelfishClaudeChosenParts { get; set; }

    public virtual DbSet<TmpAngelfishClaudeName> TmpAngelfishClaudeNames { get; set; }

    public virtual DbSet<TmpAngelfishPart> TmpAngelfishParts { get; set; }

    public virtual DbSet<TmpAngelfishPartsMapping> TmpAngelfishPartsMappings { get; set; }

    public virtual DbSet<TmpAngelfishPartsView> TmpAngelfishPartsViews { get; set; }

    public virtual DbSet<TmpApinvoiceImport> TmpApinvoiceImports { get; set; }

    public virtual DbSet<TmpAr201206Ubsinvestment> TmpAr201206Ubsinvestments { get; set; }

    public virtual DbSet<TmpAr201212ArctoClairSale> TmpAr201212ArctoClairSales { get; set; }

    public virtual DbSet<TmpAr201212ClairtoUbsArc> TmpAr201212ClairtoUbsArcs { get; set; }

    public virtual DbSet<TmpAr201307ArctoClairSale> TmpAr201307ArctoClairSales { get; set; }

    public virtual DbSet<TmpAr201409ClairtoUbsArc> TmpAr201409ClairtoUbsArcs { get; set; }

    public virtual DbSet<TmpAr201505ClairtoUbsArc> TmpAr201505ClairtoUbsArcs { get; set; }

    public virtual DbSet<TmpAr201912ArctoClairSale> TmpAr201912ArctoClairSales { get; set; }

    public virtual DbSet<TmpArAddress> TmpArAddresses { get; set; }

    public virtual DbSet<TmpArAddress2AddressType> TmpArAddress2AddressTypes { get; set; }

    public virtual DbSet<TmpArAddressType> TmpArAddressTypes { get; set; }

    public virtual DbSet<TmpArContact> TmpArContacts { get; set; }

    public virtual DbSet<TmpArCountry> TmpArCountries { get; set; }

    public virtual DbSet<TmpArCrewDemandsAssignments0227> TmpArCrewDemandsAssignments0227s { get; set; }

    public virtual DbSet<TmpArCrewDemandsToImportToPjjobbudget0227> TmpArCrewDemandsToImportToPjjobbudget0227s { get; set; }

    public virtual DbSet<TmpArCrewDemandsWithAssignment> TmpArCrewDemandsWithAssignments { get; set; }

    public virtual DbSet<TmpArCrewDemandsWithoutAssignment> TmpArCrewDemandsWithoutAssignments { get; set; }

    public virtual DbSet<TmpArCrewEmpAssignments0227> TmpArCrewEmpAssignments0227s { get; set; }

    public virtual DbSet<TmpArCrewEmpNonduplicateAssignments0227> TmpArCrewEmpNonduplicateAssignments0227s { get; set; }

    public virtual DbSet<TmpArCrewEmpcompany0227> TmpArCrewEmpcompany0227s { get; set; }

    public virtual DbSet<TmpArCrewEmpsToAdd0227> TmpArCrewEmpsToAdd0227s { get; set; }

    public virtual DbSet<TmpArCrewResourceUnavailability0227> TmpArCrewResourceUnavailability0227s { get; set; }

    public virtual DbSet<TmpArCrewResourceUnavailabilityStateType> TmpArCrewResourceUnavailabilityStateTypes { get; set; }

    public virtual DbSet<TmpArEmp> TmpArEmps { get; set; }

    public virtual DbSet<TmpArMiaHalfHudson20110509> TmpArMiaHalfHudson20110509s { get; set; }

    public virtual DbSet<TmpArMotorServiceFromEj> TmpArMotorServiceFromEjs { get; set; }

    public virtual DbSet<TmpArPartsupdate021511> TmpArPartsupdate021511s { get; set; }

    public virtual DbSet<TmpArProjects0227> TmpArProjects0227s { get; set; }

    public virtual DbSet<TmpArTransaction> TmpArTransactions { get; set; }

    public virtual DbSet<TmpArXProjects0227> TmpArXProjects0227s { get; set; }

    public virtual DbSet<TmpArcCostUpdate> TmpArcCostUpdates { get; set; }

    public virtual DbSet<TmpArcSaleToCgc20181231> TmpArcSaleToCgc20181231s { get; set; }

    public virtual DbSet<TmpArentcuksaleToClair20131231> TmpArentcuksaleToClair20131231s { get; set; }

    public virtual DbSet<TmpArentcuksaleToClair20140922> TmpArentcuksaleToClair20140922s { get; set; }

    public virtual DbSet<TmpArentcuksaleToClair20150726> TmpArentcuksaleToClair20150726s { get; set; }

    public virtual DbSet<TmpArlightingPricesUpdate20170926> TmpArlightingPricesUpdate20170926s { get; set; }

    public virtual DbSet<TmpArtistEquipmentValueByDay> TmpArtistEquipmentValueByDays { get; set; }

    public virtual DbSet<TmpAsatestParameters20241010> TmpAsatestParameters20241010s { get; set; }

    public virtual DbSet<TmpAtkCategoryMapping> TmpAtkCategoryMappings { get; set; }

    public virtual DbSet<TmpAtkPartTypeMapping> TmpAtkPartTypeMappings { get; set; }

    public virtual DbSet<TmpAtkPartTypes20211004> TmpAtkPartTypes20211004s { get; set; }

    public virtual DbSet<TmpAtkVersacomCategoryMapping> TmpAtkVersacomCategoryMappings { get; set; }

    public virtual DbSet<TmpAtkVersacomPartTypeMapping> TmpAtkVersacomPartTypeMappings { get; set; }

    public virtual DbSet<TmpAtkVersacomPartTypes20211004> TmpAtkVersacomPartTypes20211004s { get; set; }

    public virtual DbSet<TmpBarcodePartNoficiation> TmpBarcodePartNoficiations { get; set; }

    public virtual DbSet<TmpBarcodesNeedingMotorInspection> TmpBarcodesNeedingMotorInspections { get; set; }

    public virtual DbSet<TmpBarcodesNeedingMotorInspection2> TmpBarcodesNeedingMotorInspection2s { get; set; }

    public virtual DbSet<TmpBbmBarcodes20220302> TmpBbmBarcodes20220302s { get; set; }

    public virtual DbSet<TmpBbmContainerSerials20220302> TmpBbmContainerSerials20220302s { get; set; }

    public virtual DbSet<TmpBbmFinalAssetList> TmpBbmFinalAssetLists { get; set; }

    public virtual DbSet<TmpBbmJob> TmpBbmJobs { get; set; }

    public virtual DbSet<TmpBbmJobPart> TmpBbmJobParts { get; set; }

    public virtual DbSet<TmpBbmPackagePartUpdate> TmpBbmPackagePartUpdates { get; set; }

    public virtual DbSet<TmpBbmPartMapping> TmpBbmPartMappings { get; set; }

    public virtual DbSet<TmpBbmPartNumber> TmpBbmPartNumbers { get; set; }

    public virtual DbSet<TmpBbmPartNumbersCreated20220420> TmpBbmPartNumbersCreated20220420s { get; set; }

    public virtual DbSet<TmpBbmPartNumbersView> TmpBbmPartNumbersViews { get; set; }

    public virtual DbSet<TmpBbmStockItem> TmpBbmStockItems { get; set; }

    public virtual DbSet<TmpBbmStockItem2Job> TmpBbmStockItem2Jobs { get; set; }

    public virtual DbSet<TmpBbmStockType> TmpBbmStockTypes { get; set; }

    public virtual DbSet<TmpBbmStockType2Job> TmpBbmStockType2Jobs { get; set; }

    public virtual DbSet<TmpBbmStockTypeCategory> TmpBbmStockTypeCategories { get; set; }

    public virtual DbSet<TmpBbmStockTypeCategoryParent> TmpBbmStockTypeCategoryParents { get; set; }

    public virtual DbSet<TmpBbmStockTypeExtension> TmpBbmStockTypeExtensions { get; set; }

    public virtual DbSet<TmpBbmStockTypePrice> TmpBbmStockTypePrices { get; set; }

    public virtual DbSet<TmpBbmopenAp> TmpBbmopenAps { get; set; }

    public virtual DbSet<TmpBbmopenAr> TmpBbmopenArs { get; set; }

    public virtual DbSet<TmpBillingDaysBenchmarkUpdate> TmpBillingDaysBenchmarkUpdates { get; set; }

    public virtual DbSet<TmpBrittDupBarcodeDatum> TmpBrittDupBarcodeData { get; set; }

    public virtual DbSet<TmpBrpAccountsCustomer> TmpBrpAccountsCustomers { get; set; }

    public virtual DbSet<TmpBrpAccountsCustomerAddress> TmpBrpAccountsCustomerAddresses { get; set; }

    public virtual DbSet<TmpBrpAccountsVendor> TmpBrpAccountsVendors { get; set; }

    public virtual DbSet<TmpBrpAccountsVendorAddress> TmpBrpAccountsVendorAddresses { get; set; }

    public virtual DbSet<TmpBrpBarcodeRegister20170721> TmpBrpBarcodeRegister20170721s { get; set; }

    public virtual DbSet<TmpBrpBarcodeRegisterFixedAssets20170214> TmpBrpBarcodeRegisterFixedAssets20170214s { get; set; }

    public virtual DbSet<TmpBrpBarcodeRegisterFixedAssets20170314> TmpBrpBarcodeRegisterFixedAssets20170314s { get; set; }

    public virtual DbSet<TmpBrpBarcodeRegisterFixedAssets20170329> TmpBrpBarcodeRegisterFixedAssets20170329s { get; set; }

    public virtual DbSet<TmpBrpNotificationRecips20130911> TmpBrpNotificationRecips20130911s { get; set; }

    public virtual DbSet<TmpBrpPurchasingAccountsImport> TmpBrpPurchasingAccountsImports { get; set; }

    public virtual DbSet<TmpBrpUpdateExtensionList> TmpBrpUpdateExtensionLists { get; set; }

    public virtual DbSet<TmpBrpcrewRates20220430> TmpBrpcrewRates20220430s { get; set; }

    public virtual DbSet<TmpBrptrainingMatrixImport> TmpBrptrainingMatrixImports { get; set; }

    public virtual DbSet<TmpCabinetComponentTestMeasurementBulkSave> TmpCabinetComponentTestMeasurementBulkSaves { get; set; }

    public virtual DbSet<TmpCableTestPath> TmpCableTestPaths { get; set; }

    public virtual DbSet<TmpCableTestPathsAutoSearchResult> TmpCableTestPathsAutoSearchResults { get; set; }

    public virtual DbSet<TmpCableTestPathsPartsMapping> TmpCableTestPathsPartsMappings { get; set; }

    public virtual DbSet<TmpCableTestPathsPartsView> TmpCableTestPathsPartsViews { get; set; }

    public virtual DbSet<TmpCalFrequencyVectorValue> TmpCalFrequencyVectorValues { get; set; }

    public virtual DbSet<TmpCheeseBarcodes20200214> TmpCheeseBarcodes20200214s { get; set; }

    public virtual DbSet<TmpCheesePartMapping> TmpCheesePartMappings { get; set; }

    public virtual DbSet<TmpCheeseParts20191120> TmpCheeseParts20191120s { get; set; }

    public virtual DbSet<TmpCheeseParts20191120b> TmpCheeseParts20191120bs { get; set; }

    public virtual DbSet<TmpClairSolutionsProject> TmpClairSolutionsProjects { get; set; }

    public virtual DbSet<TmpClairSolutionsRfiaccount> TmpClairSolutionsRfiaccounts { get; set; }

    public virtual DbSet<TmpClairTourValueUpdates20170127> TmpClairTourValueUpdates20170127s { get; set; }

    public virtual DbSet<TmpCohesionInversion> TmpCohesionInversions { get; set; }

    public virtual DbSet<TmpConsoleTransactionsByShopin2023> TmpConsoleTransactionsByShopin2023s { get; set; }

    public virtual DbSet<TmpCorrectionCurveDataValue> TmpCorrectionCurveDataValues { get; set; }

    public virtual DbSet<TmpCorrectionCurveMetaDatum> TmpCorrectionCurveMetaData { get; set; }

    public virtual DbSet<TmpCountryCodeOrg> TmpCountryCodeOrgs { get; set; }

    public virtual DbSet<TmpCrawledPhotoFiles20250328> TmpCrawledPhotoFiles20250328s { get; set; }

    public virtual DbSet<TmpCrewTrainingImport> TmpCrewTrainingImports { get; set; }

    public virtual DbSet<TmpCustomerToMerge> TmpCustomerToMerges { get; set; }

    public virtual DbSet<TmpDaveComptonProjectBillingItems13356808Bid> TmpDaveComptonProjectBillingItems13356808Bids { get; set; }

    public virtual DbSet<TmpDeviceFiles1708391Bm> TmpDeviceFiles1708391Bms { get; set; }

    public virtual DbSet<TmpEasyJobPartNo> TmpEasyJobPartNos { get; set; }

    public virtual DbSet<TmpEdsContract> TmpEdsContracts { get; set; }

    public virtual DbSet<TmpEdsRentalContract> TmpEdsRentalContracts { get; set; }

    public virtual DbSet<TmpEdsaddInventoryPermissionsAudit> TmpEdsaddInventoryPermissionsAudits { get; set; }

    public virtual DbSet<TmpEdsbarcodes20200724> TmpEdsbarcodes20200724s { get; set; }

    public virtual DbSet<TmpEdsbarcodesConflicts20201213> TmpEdsbarcodesConflicts20201213s { get; set; }

    public virtual DbSet<TmpEdsbarcodesImport> TmpEdsbarcodesImports { get; set; }

    public virtual DbSet<TmpEdsbarcodesImported20201213> TmpEdsbarcodesImported20201213s { get; set; }

    public virtual DbSet<TmpEdsbarcodesToRipOffNotify> TmpEdsbarcodesToRipOffNotifies { get; set; }

    public virtual DbSet<TmpEdsbarcodesTransfer> TmpEdsbarcodesTransfers { get; set; }

    public virtual DbSet<TmpEdsbarcodesTransferFromClairTourTest> TmpEdsbarcodesTransferFromClairTourTests { get; set; }

    public virtual DbSet<TmpEdsbcscan> TmpEdsbcscans { get; set; }

    public virtual DbSet<TmpEdscateogoriesMapping> TmpEdscateogoriesMappings { get; set; }

    public virtual DbSet<TmpEdsclairBarcodesRenumbered> TmpEdsclairBarcodesRenumbereds { get; set; }

    public virtual DbSet<TmpEdscontractsNestedToContractsImport> TmpEdscontractsNestedToContractsImports { get; set; }

    public virtual DbSet<TmpEdscontractsNestedToContractsImportGreenDay> TmpEdscontractsNestedToContractsImportGreenDays { get; set; }

    public virtual DbSet<TmpEdscontractsWithEventsAsProjectIdsImport> TmpEdscontractsWithEventsAsProjectIdsImports { get; set; }

    public virtual DbSet<TmpEdscontractsWithEventsImport> TmpEdscontractsWithEventsImports { get; set; }

    public virtual DbSet<TmpEdscontractsWithEventsImportGreenDay> TmpEdscontractsWithEventsImportGreenDays { get; set; }

    public virtual DbSet<TmpEdscontractsWithOnlyProjectsImport> TmpEdscontractsWithOnlyProjectsImports { get; set; }

    public virtual DbSet<TmpEdscontractsWithOnlyProjectsImportDumbProjectRecode> TmpEdscontractsWithOnlyProjectsImportDumbProjectRecodes { get; set; }

    public virtual DbSet<TmpEdscontractsWithOnlyProjectsImportGreenDay> TmpEdscontractsWithOnlyProjectsImportGreenDays { get; set; }

    public virtual DbSet<TmpEdscontractsWithoutEventsOrProjectsImport> TmpEdscontractsWithoutEventsOrProjectsImports { get; set; }

    public virtual DbSet<TmpEdscontractsWithoutEventsOrProjectsImportGreenDay> TmpEdscontractsWithoutEventsOrProjectsImportGreenDays { get; set; }

    public virtual DbSet<TmpEdscontractsWithoutProjectsOrEventsImport> TmpEdscontractsWithoutProjectsOrEventsImports { get; set; }

    public virtual DbSet<TmpEdscrewDetailsUpdate> TmpEdscrewDetailsUpdates { get; set; }

    public virtual DbSet<TmpEdscrewImport> TmpEdscrewImports { get; set; }

    public virtual DbSet<TmpEdscrewImportFeb0121> TmpEdscrewImportFeb0121s { get; set; }

    public virtual DbSet<TmpEdseventTypesMapping> TmpEdseventTypesMappings { get; set; }

    public virtual DbSet<TmpEdseventsWithProjectsImport> TmpEdseventsWithProjectsImports { get; set; }

    public virtual DbSet<TmpEdseventsWithoutProjectsImport> TmpEdseventsWithoutProjectsImports { get; set; }

    public virtual DbSet<TmpEdsitemSitesMapping> TmpEdsitemSitesMappings { get; set; }

    public virtual DbSet<TmpEdsitemStatusMapping> TmpEdsitemStatusMappings { get; set; }

    public virtual DbSet<TmpEdsjobTypesMapping> TmpEdsjobTypesMappings { get; set; }

    public virtual DbSet<TmpEdskitDetail> TmpEdskitDetails { get; set; }

    public virtual DbSet<TmpEdsmanufacturerMapping> TmpEdsmanufacturerMappings { get; set; }

    public virtual DbSet<TmpEdsnonBarcodesTransfer> TmpEdsnonBarcodesTransfers { get; set; }

    public virtual DbSet<TmpEdsnonBarcodesTransferMassTransferCurrentRecord> TmpEdsnonBarcodesTransferMassTransferCurrentRecords { get; set; }

    public virtual DbSet<TmpEdsnonBarcodesTransferMassTransferLoop> TmpEdsnonBarcodesTransferMassTransferLoops { get; set; }

    public virtual DbSet<TmpEdsorderedPartsImportGreenDay> TmpEdsorderedPartsImportGreenDays { get; set; }

    public virtual DbSet<TmpEdsorderedPartsOnContractsNestedToContractsImport> TmpEdsorderedPartsOnContractsNestedToContractsImports { get; set; }

    public virtual DbSet<TmpEdsorderedPartsOnContractsNestedToContractsImportGreenDay> TmpEdsorderedPartsOnContractsNestedToContractsImportGreenDays { get; set; }

    public virtual DbSet<TmpEdsorderedPartsOnContractsWithEventsAsProjectIdsImport> TmpEdsorderedPartsOnContractsWithEventsAsProjectIdsImports { get; set; }

    public virtual DbSet<TmpEdsorderedPartsOnContractsWithEventsImport> TmpEdsorderedPartsOnContractsWithEventsImports { get; set; }

    public virtual DbSet<TmpEdsorderedPartsOnContractsWithEventsImportGreenDay> TmpEdsorderedPartsOnContractsWithEventsImportGreenDays { get; set; }

    public virtual DbSet<TmpEdsorderedPartsOnContractsWithOnlyProjectsImport> TmpEdsorderedPartsOnContractsWithOnlyProjectsImports { get; set; }

    public virtual DbSet<TmpEdsorderedPartsOnContractsWithOnlyProjectsImportDumbProjectRecode> TmpEdsorderedPartsOnContractsWithOnlyProjectsImportDumbProjectRecodes { get; set; }

    public virtual DbSet<TmpEdsorderedPartsOnContractsWithOnlyProjectsImportGreenDay> TmpEdsorderedPartsOnContractsWithOnlyProjectsImportGreenDays { get; set; }

    public virtual DbSet<TmpEdsorderedPartsOnContractsWithoutEventsOrProjectsImport> TmpEdsorderedPartsOnContractsWithoutEventsOrProjectsImports { get; set; }

    public virtual DbSet<TmpEdsorderedPartsOnContractsWithoutEventsOrProjectsImportGreenDay> TmpEdsorderedPartsOnContractsWithoutEventsOrProjectsImportGreenDays { get; set; }

    public virtual DbSet<TmpEdsparTypeMappingBak20201213> TmpEdsparTypeMappingBak20201213s { get; set; }

    public virtual DbSet<TmpEdspartType> TmpEdspartTypes { get; set; }

    public virtual DbSet<TmpEdspartTypeMapping> TmpEdspartTypeMappings { get; set; }

    public virtual DbSet<TmpEdspartTypes2020oct> TmpEdspartTypes2020octs { get; set; }

    public virtual DbSet<TmpEdspartTypesImport> TmpEdspartTypesImports { get; set; }

    public virtual DbSet<TmpEdspiscan> TmpEdspiscans { get; set; }

    public virtual DbSet<TmpEdsprojectImport> TmpEdsprojectImports { get; set; }

    public virtual DbSet<TmpEdsprojectStatusMapping> TmpEdsprojectStatusMappings { get; set; }

    public virtual DbSet<TmpEdsprojectsIgnoreProjectLevel> TmpEdsprojectsIgnoreProjectLevels { get; set; }

    public virtual DbSet<TmpEdsrebarcodedDevicesScanHistory> TmpEdsrebarcodedDevicesScanHistories { get; set; }

    public virtual DbSet<TmpEdsrebarcodedDevicesStatus> TmpEdsrebarcodedDevicesStatuses { get; set; }

    public virtual DbSet<TmpEdsrebarcodedDevicesStatusSyd0220220909> TmpEdsrebarcodedDevicesStatusSyd0220220909s { get; set; }

    public virtual DbSet<TmpEdsrebarcodedDevicesVerified> TmpEdsrebarcodedDevicesVerifieds { get; set; }

    public virtual DbSet<TmpEdsserialNumberTransfer> TmpEdsserialNumberTransfers { get; set; }

    public virtual DbSet<TmpEdssitesMapping> TmpEdssitesMappings { get; set; }

    public virtual DbSet<TmpEdsstatusLookup> TmpEdsstatusLookups { get; set; }

    public virtual DbSet<TmpEdssubCategoryManufacturerPartGroupMapping> TmpEdssubCategoryManufacturerPartGroupMappings { get; set; }

    public virtual DbSet<TmpEdssubcategoryMapping> TmpEdssubcategoryMappings { get; set; }

    public virtual DbSet<TmpEdstemplate> TmpEdstemplates { get; set; }

    public virtual DbSet<TmpEgnyteDevices20240110> TmpEgnyteDevices20240110s { get; set; }

    public virtual DbSet<TmpEntitiesThatMightNeedToGetPutBack> TmpEntitiesThatMightNeedToGetPutBacks { get; set; }

    public virtual DbSet<TmpGetWarehouseTransferValueForLastNWeeksResultsPreupdate> TmpGetWarehouseTransferValueForLastNWeeksResultsPreupdates { get; set; }

    public virtual DbSet<TmpGoldfishCommodityMapping> TmpGoldfishCommodityMappings { get; set; }

    public virtual DbSet<TmpGoldfishManufacturer> TmpGoldfishManufacturers { get; set; }

    public virtual DbSet<TmpGoldfishMappingCategory> TmpGoldfishMappingCategories { get; set; }

    public virtual DbSet<TmpGoldfishMappingCommodity> TmpGoldfishMappingCommodities { get; set; }

    public virtual DbSet<TmpGoldfishMappingCountry> TmpGoldfishMappingCountries { get; set; }

    public virtual DbSet<TmpGoldfishPartsView> TmpGoldfishPartsViews { get; set; }

    public virtual DbSet<TmpGoldfishPartsWithoutTheirPartNumber> TmpGoldfishPartsWithoutTheirPartNumbers { get; set; }

    public virtual DbSet<TmpGoldfishRemoveSiDupforClairMia20230805> TmpGoldfishRemoveSiDupforClairMia20230805s { get; set; }

    public virtual DbSet<TmpGtobensalemNewPart> TmpGtobensalemNewParts { get; set; }

    public virtual DbSet<TmpGtobensalemPartsInventory20110524> TmpGtobensalemPartsInventory20110524s { get; set; }

    public virtual DbSet<TmpGtonybarcode> TmpGtonybarcodes { get; set; }

    public virtual DbSet<TmpGtonynewPart> TmpGtonynewParts { get; set; }

    public virtual DbSet<TmpHarmonizedCodesImport> TmpHarmonizedCodesImports { get; set; }

    public virtual DbSet<TmpHaywardBarcodeImport> TmpHaywardBarcodeImports { get; set; }

    public virtual DbSet<TmpHaywardBarcodeImportWithSerialNo> TmpHaywardBarcodeImportWithSerialNos { get; set; }

    public virtual DbSet<TmpHaywardBillingTermsMapping> TmpHaywardBillingTermsMappings { get; set; }

    public virtual DbSet<TmpHaywardCustomerImport> TmpHaywardCustomerImports { get; set; }

    public virtual DbSet<TmpHaywardParentChildImport> TmpHaywardParentChildImports { get; set; }

    public virtual DbSet<TmpHaywardPartCategoiresMapping> TmpHaywardPartCategoiresMappings { get; set; }

    public virtual DbSet<TmpHaywardPartImport> TmpHaywardPartImports { get; set; }

    public virtual DbSet<TmpHaywardVenueImport> TmpHaywardVenueImports { get; set; }

    public virtual DbSet<TmpHazelAutoSearchResult> TmpHazelAutoSearchResults { get; set; }

    public virtual DbSet<TmpHazelPart> TmpHazelParts { get; set; }

    public virtual DbSet<TmpHazelPartMapping> TmpHazelPartMappings { get; set; }

    public virtual DbSet<TmpHazelParts241113> TmpHazelParts241113s { get; set; }

    public virtual DbSet<TmpHazelPartsView> TmpHazelPartsViews { get; set; }

    public virtual DbSet<TmpHazelPlus4PartMapping20250307> TmpHazelPlus4PartMapping20250307s { get; set; }

    public virtual DbSet<TmpHazelPlus4PartMappingPricing20250307> TmpHazelPlus4PartMappingPricing20250307s { get; set; }

    public virtual DbSet<TmpHiFrequencyVectorValue> TmpHiFrequencyVectorValues { get; set; }

    public virtual DbSet<TmpIfspaymentTerms20250311> TmpIfspaymentTerms20250311s { get; set; }

    public virtual DbSet<TmpIfsprdperson> TmpIfsprdpersons { get; set; }

    public virtual DbSet<TmpInitalIfsvoucherRowsLoad> TmpInitalIfsvoucherRowsLoads { get; set; }

    public virtual DbSet<TmpInlineTrue1PartNoFlag2024> TmpInlineTrue1PartNoFlag2024s { get; set; }

    public virtual DbSet<TmpInpsubPjqtyVw> TmpInpsubPjqtyVws { get; set; }

    public virtual DbSet<TmpInpsubvw> TmpInpsubvws { get; set; }

    public virtual DbSet<TmpInterCompanyShipping> TmpInterCompanyShippings { get; set; }

    public virtual DbSet<TmpInterCompanyShippingFedExpart> TmpInterCompanyShippingFedExparts { get; set; }

    public virtual DbSet<TmpIsolvedActiveEmployeeDatum> TmpIsolvedActiveEmployeeData { get; set; }

    public virtual DbSet<TmpJobTypes20220105> TmpJobTypes20220105s { get; set; }

    public virtual DbSet<TmpJpjBarcodeConflictsTestData20161223> TmpJpjBarcodeConflictsTestData20161223s { get; set; }

    public virtual DbSet<TmpJpjCategoriesMapping> TmpJpjCategoriesMappings { get; set; }

    public virtual DbSet<TmpJpjClairDevice> TmpJpjClairDevices { get; set; }

    public virtual DbSet<TmpJpjCustomer> TmpJpjCustomers { get; set; }

    public virtual DbSet<TmpJpjCustomerImport20170828> TmpJpjCustomerImport20170828s { get; set; }

    public virtual DbSet<TmpJpjCustomerName> TmpJpjCustomerNames { get; set; }

    public virtual DbSet<TmpJpjDailyPriceOverride> TmpJpjDailyPriceOverrides { get; set; }

    public virtual DbSet<TmpJpjDevice> TmpJpjDevices { get; set; }

    public virtual DbSet<TmpJpjEquipmentLocationsMapping> TmpJpjEquipmentLocationsMappings { get; set; }

    public virtual DbSet<TmpJpjInventoryImported> TmpJpjInventoryImporteds { get; set; }

    public virtual DbSet<TmpJpjInventoryImportedLeftsRight> TmpJpjInventoryImportedLeftsRights { get; set; }

    public virtual DbSet<TmpJpjInventoryImportedMium> TmpJpjInventoryImportedMia { get; set; }

    public virtual DbSet<TmpJpjItem> TmpJpjItems { get; set; }

    public virtual DbSet<TmpJpjItemsMapping> TmpJpjItemsMappings { get; set; }

    public virtual DbSet<TmpJpjJfmdevice> TmpJpjJfmdevices { get; set; }

    public virtual DbSet<TmpJpjJfmitem> TmpJpjJfmitems { get; set; }

    public virtual DbSet<TmpJpjJob> TmpJpjJobs { get; set; }

    public virtual DbSet<TmpJpjJobStatusMapping> TmpJpjJobStatusMappings { get; set; }

    public virtual DbSet<TmpJpjJobTypeMapping> TmpJpjJobTypeMappings { get; set; }

    public virtual DbSet<TmpJpjJobs20161228> TmpJpjJobs20161228s { get; set; }

    public virtual DbSet<TmpJpjJobsBad> TmpJpjJobsBads { get; set; }

    public virtual DbSet<TmpJpjLinkedInventoryToMoveToStagingArea> TmpJpjLinkedInventoryToMoveToStagingAreas { get; set; }

    public virtual DbSet<TmpJpjLinkedPartsImported> TmpJpjLinkedPartsImporteds { get; set; }

    public virtual DbSet<TmpJpjMoveNonbarcodedLinkedPart> TmpJpjMoveNonbarcodedLinkedParts { get; set; }

    public virtual DbSet<TmpJpjPartsListDataFromAvgChildBarcodeQty> TmpJpjPartsListDataFromAvgChildBarcodeQtys { get; set; }

    public virtual DbSet<TmpJpjProposalTypeMapping> TmpJpjProposalTypeMappings { get; set; }

    public virtual DbSet<TmpJpjStaff> TmpJpjStaffs { get; set; }

    public virtual DbSet<TmpJpjSupplierName> TmpJpjSupplierNames { get; set; }

    public virtual DbSet<TmpJpjUserPhoneExt> TmpJpjUserPhoneExts { get; set; }

    public virtual DbSet<TmpJpjVendor> TmpJpjVendors { get; set; }

    public virtual DbSet<TmpJpjinventoryAndPurchasePrice> TmpJpjinventoryAndPurchasePrices { get; set; }

    public virtual DbSet<TmpJpjinventoryRawDatum> TmpJpjinventoryRawData { get; set; }

    public virtual DbSet<TmpJpjpartNumber> TmpJpjpartNumbers { get; set; }

    public virtual DbSet<TmpJpspartsValues20150915> TmpJpspartsValues20150915s { get; set; }

    public virtual DbSet<TmpLdsystemsAutoSearchResult> TmpLdsystemsAutoSearchResults { get; set; }

    public virtual DbSet<TmpLdsystemsClaudeChosenPart> TmpLdsystemsClaudeChosenParts { get; set; }

    public virtual DbSet<TmpLdsystemsClaudeName> TmpLdsystemsClaudeNames { get; set; }

    public virtual DbSet<TmpLdsystemsPart> TmpLdsystemsParts { get; set; }

    public virtual DbSet<TmpLdsystemsPartsMapping> TmpLdsystemsPartsMappings { get; set; }

    public virtual DbSet<TmpLdsystemsPartsView> TmpLdsystemsPartsViews { get; set; }

    public virtual DbSet<TmpLegacyLimitConversionFactor> TmpLegacyLimitConversionFactors { get; set; }

    public virtual DbSet<TmpLegacyLimitDiff> TmpLegacyLimitDiffs { get; set; }

    public virtual DbSet<TmpLoFrequencyVectorValue> TmpLoFrequencyVectorValues { get; set; }

    public virtual DbSet<TmpLoudSpeakerImport> TmpLoudSpeakerImports { get; set; }

    public virtual DbSet<TmpMfgbuilds2024> TmpMfgbuilds2024s { get; set; }

    public virtual DbSet<TmpMfgbuilds24> TmpMfgbuilds24s { get; set; }

    public virtual DbSet<TmpMiSysPartnoDeGackMap> TmpMiSysPartnoDeGackMaps { get; set; }

    public virtual DbSet<TmpMicFrequencyVectorValue> TmpMicFrequencyVectorValues { get; set; }

    public virtual DbSet<TmpOnstagePart> TmpOnstageParts { get; set; }

    public virtual DbSet<TmpOnstagePartExport> TmpOnstagePartExports { get; set; }

    public virtual DbSet<TmpPacificoBarcode> TmpPacificoBarcodes { get; set; }

    public virtual DbSet<TmpPacificoCostAnalysisJbo> TmpPacificoCostAnalysisJbos { get; set; }

    public virtual DbSet<TmpPacificoCostAnalysisJf> TmpPacificoCostAnalysisJfs { get; set; }

    public virtual DbSet<TmpPartDescImport20161010Subcategory> TmpPartDescImport20161010Subcategories { get; set; }

    public virtual DbSet<TmpPartMaintenancePermissionsImport> TmpPartMaintenancePermissionsImports { get; set; }

    public virtual DbSet<TmpPartOperatingVoltage> TmpPartOperatingVoltages { get; set; }

    public virtual DbSet<TmpPartPricingUpdate20250214> TmpPartPricingUpdate20250214s { get; set; }

    public virtual DbSet<TmpPartSecondaryCategoriesImportFromClairTourTest> TmpPartSecondaryCategoriesImportFromClairTourTests { get; set; }

    public virtual DbSet<TmpPartValueUpdate> TmpPartValueUpdates { get; set; }

    public virtual DbSet<TmpPartdescImport20161010> TmpPartdescImport20161010s { get; set; }

    public virtual DbSet<TmpPartdescImport20161010Category> TmpPartdescImport20161010Categories { get; set; }

    public virtual DbSet<TmpPartdescImport20161010Mapping> TmpPartdescImport20161010Mappings { get; set; }

    public virtual DbSet<TmpPartdescImport20161010V> TmpPartdescImport20161010Vs { get; set; }

    public virtual DbSet<TmpPayTermsCodeUpdate20150701> TmpPayTermsCodeUpdate20150701s { get; set; }

    public virtual DbSet<TmpPePayPeriodsWeekly> TmpPePayPeriodsWeeklies { get; set; }

    public virtual DbSet<TmpPePayrollRunDataWeekly> TmpPePayrollRunDataWeeklies { get; set; }

    public virtual DbSet<TmpPePayrollRunsWeekly> TmpPePayrollRunsWeeklies { get; set; }

    public virtual DbSet<TmpPjjobChkqtyVw> TmpPjjobChkqtyVws { get; set; }

    public virtual DbSet<TmpPlus4AccountExecMapping> TmpPlus4AccountExecMappings { get; set; }

    public virtual DbSet<TmpPlus4DocumentPhaseMapping> TmpPlus4DocumentPhaseMappings { get; set; }

    public virtual DbSet<TmpPlus4PackagePart> TmpPlus4PackageParts { get; set; }

    public virtual DbSet<TmpPlus4ProjectsMapping> TmpPlus4ProjectsMappings { get; set; }

    public virtual DbSet<TmpPlus4StatusMapping> TmpPlus4StatusMappings { get; set; }

    public virtual DbSet<TmpPolaritySyntheticFailures20230209> TmpPolaritySyntheticFailures20230209s { get; set; }

    public virtual DbSet<TmpPolaritySyntheticFailuresCo1020230419> TmpPolaritySyntheticFailuresCo1020230419s { get; set; }

    public virtual DbSet<TmpPolaritySyntheticFailuresCo1220230419> TmpPolaritySyntheticFailuresCo1220230419s { get; set; }

    public virtual DbSet<TmpPpeinstallations20150406> TmpPpeinstallations20150406s { get; set; }

    public virtual DbSet<TmpPpelxinstalls20150406> TmpPpelxinstalls20150406s { get; set; }

    public virtual DbSet<TmpPpewarehouse20150406> TmpPpewarehouse20150406s { get; set; }

    public virtual DbSet<TmpPpewarehouseInstallProjects20150406> TmpPpewarehouseInstallProjects20150406s { get; set; }

    public virtual DbSet<TmpRecInterfacesByShopin2023> TmpRecInterfacesByShopin2023s { get; set; }

    public virtual DbSet<TmpRegionFromArtistAndDate> TmpRegionFromArtistAndDates { get; set; }

    public virtual DbSet<TmpRfideletedForExpediencyThatMightNeedToBePutBack> TmpRfideletedForExpediencyThatMightNeedToBePutBacks { get; set; }

    public virtual DbSet<TmpRoadApandSwitch> TmpRoadApandSwitches { get; set; }

    public virtual DbSet<TmpRockfishPart> TmpRockfishParts { get; set; }

    public virtual DbSet<TmpRootProjectEquipmentHistory> TmpRootProjectEquipmentHistories { get; set; }

    public virtual DbSet<TmpRootProjectEquipmentValueByDay> TmpRootProjectEquipmentValueByDays { get; set; }

    public virtual DbSet<TmpRootProjectUsaequipmentHistory> TmpRootProjectUsaequipmentHistories { get; set; }

    public virtual DbSet<TmpRootProjectUsaequipmentValueByDay> TmpRootProjectUsaequipmentValueByDays { get; set; }

    public virtual DbSet<TmpRootProjectsWithOpenRfis20250307> TmpRootProjectsWithOpenRfis20250307s { get; set; }

    public virtual DbSet<TmpShippingCommodityCodeImport> TmpShippingCommodityCodeImports { get; set; }

    public virtual DbSet<TmpSiassetDetail> TmpSiassetDetails { get; set; }

    public virtual DbSet<TmpSidataImportMergedPart> TmpSidataImportMergedParts { get; set; }

    public virtual DbSet<TmpSipartValueUpdate> TmpSipartValueUpdates { get; set; }

    public virtual DbSet<TmpSkanAssets20220712> TmpSkanAssets20220712s { get; set; }

    public virtual DbSet<TmpSkanBarcodesCheckOutImport> TmpSkanBarcodesCheckOutImports { get; set; }

    public virtual DbSet<TmpSkanBarcodesToImport> TmpSkanBarcodesToImports { get; set; }

    public virtual DbSet<TmpSkanDevicePropertiesBulkUpdate> TmpSkanDevicePropertiesBulkUpdates { get; set; }

    public virtual DbSet<TmpSkanEmployeesImport> TmpSkanEmployeesImports { get; set; }

    public virtual DbSet<TmpSkanNonBarcodedInventoryToImport> TmpSkanNonBarcodedInventoryToImports { get; set; }

    public virtual DbSet<TmpSkanNonBarcodesCheckOutImport> TmpSkanNonBarcodesCheckOutImports { get; set; }

    public virtual DbSet<TmpSkanParentChildBarcodesImport> TmpSkanParentChildBarcodesImports { get; set; }

    public virtual DbSet<TmpSkanPartCategoryMapping> TmpSkanPartCategoryMappings { get; set; }

    public virtual DbSet<TmpSkanPartMapping> TmpSkanPartMappings { get; set; }

    public virtual DbSet<TmpSkanPartNumbersToImport> TmpSkanPartNumbersToImports { get; set; }

    public virtual DbSet<TmpSkanPartNumbersView> TmpSkanPartNumbersViews { get; set; }

    public virtual DbSet<TmpSkanPartsOnProjectsToImport> TmpSkanPartsOnProjectsToImports { get; set; }

    public virtual DbSet<TmpSkanPartsOnProjectsToImportReseq> TmpSkanPartsOnProjectsToImportReseqs { get; set; }

    public virtual DbSet<TmpSkanPartsOnProjectsToImportStaging> TmpSkanPartsOnProjectsToImportStagings { get; set; }

    public virtual DbSet<TmpSkanProjectBidSubphasesImport> TmpSkanProjectBidSubphasesImports { get; set; }

    public virtual DbSet<TmpSkanProjectSubphasesImport> TmpSkanProjectSubphasesImports { get; set; }

    public virtual DbSet<TmpSkanProjectsL7> TmpSkanProjectsL7s { get; set; }

    public virtual DbSet<TmpSkanProjectsToImport> TmpSkanProjectsToImports { get; set; }

    public virtual DbSet<TmpSkanRepairActivitiesClosedImport> TmpSkanRepairActivitiesClosedImports { get; set; }

    public virtual DbSet<TmpSkanRepairActivitiesOpenedImport> TmpSkanRepairActivitiesOpenedImports { get; set; }

    public virtual DbSet<TmpSkanRepairTicketsImport> TmpSkanRepairTicketsImports { get; set; }

    public virtual DbSet<TmpSkanTransactionsToImport> TmpSkanTransactionsToImports { get; set; }

    public virtual DbSet<TmpSkanTruckRackUpdate> TmpSkanTruckRackUpdates { get; set; }

    public virtual DbSet<TmpSkanUser> TmpSkanUsers { get; set; }

    public virtual DbSet<TmpSkanUsersMapping> TmpSkanUsersMappings { get; set; }

    public virtual DbSet<TmpSolutionsProjectExpense> TmpSolutionsProjectExpenses { get; set; }

    public virtual DbSet<TmpSoundImagePartMappingHey> TmpSoundImagePartMappingHeys { get; set; }

    public virtual DbSet<TmpSoundImageProjectsImport> TmpSoundImageProjectsImports { get; set; }

    public virtual DbSet<TmpSpeakerComponentFailureDatum> TmpSpeakerComponentFailureData { get; set; }

    public virtual DbSet<TmpSpeakerComponentImpedanceDatum> TmpSpeakerComponentImpedanceData { get; set; }

    public virtual DbSet<TmpSpeakerTestConfigurationsFromXml20210723> TmpSpeakerTestConfigurationsFromXml20210723s { get; set; }

    public virtual DbSet<TmpSubUnique> TmpSubUniques { get; set; }

    public virtual DbSet<TmpSurfhireInventory20190423> TmpSurfhireInventory20190423s { get; set; }

    public virtual DbSet<TmpSysproAvailabilityTransaction> TmpSysproAvailabilityTransactions { get; set; }

    public virtual DbSet<TmpSysproConflictMove20250122> TmpSysproConflictMove20250122s { get; set; }

    public virtual DbSet<TmpTdaAccountExecsCreated> TmpTdaAccountExecsCreateds { get; set; }

    public virtual DbSet<TmpTdaBarcodesCheckedOutToJob> TmpTdaBarcodesCheckedOutToJobs { get; set; }

    public virtual DbSet<TmpTdaBarcodesToConvertToNonbarcode> TmpTdaBarcodesToConvertToNonbarcodes { get; set; }

    public virtual DbSet<TmpTdaBidSubphasesCreated> TmpTdaBidSubphasesCreateds { get; set; }

    public virtual DbSet<TmpTdaCountryMapping> TmpTdaCountryMappings { get; set; }

    public virtual DbSet<TmpTdaCrewOrderedOnFinesseProject> TmpTdaCrewOrderedOnFinesseProjects { get; set; }

    public virtual DbSet<TmpTdaDeletedPayRatesFromTodayOnward20230321> TmpTdaDeletedPayRatesFromTodayOnward20230321s { get; set; }

    public virtual DbSet<TmpTdaDguvBarcodesMovedFromJobsToInstock> TmpTdaDguvBarcodesMovedFromJobsToInstocks { get; set; }

    public virtual DbSet<TmpTdaEquipmentCheckOut> TmpTdaEquipmentCheckOuts { get; set; }

    public virtual DbSet<TmpTdaJobStateMapping> TmpTdaJobStateMappings { get; set; }

    public virtual DbSet<TmpTdaNextEntitynoForImport> TmpTdaNextEntitynoForImports { get; set; }

    public virtual DbSet<TmpTdaNonBarcodedDguvItemsToCheckOutToJob> TmpTdaNonBarcodedDguvItemsToCheckOutToJobs { get; set; }

    public virtual DbSet<TmpTdaNonBarcodedInventoryToAdd> TmpTdaNonBarcodedInventoryToAdds { get; set; }

    public virtual DbSet<TmpTdaPackagesList> TmpTdaPackagesLists { get; set; }

    public virtual DbSet<TmpTdaPartMapping> TmpTdaPartMappings { get; set; }

    public virtual DbSet<TmpTdaPartNumber> TmpTdaPartNumbers { get; set; }

    public virtual DbSet<TmpTdaPartNumberFixesPostImport> TmpTdaPartNumberFixesPostImports { get; set; }

    public virtual DbSet<TmpTdaPartNumbersCreated> TmpTdaPartNumbersCreateds { get; set; }

    public virtual DbSet<TmpTdaPartNumbersForDguvTesting> TmpTdaPartNumbersForDguvTestings { get; set; }

    public virtual DbSet<TmpTdaPartNumbersView> TmpTdaPartNumbersViews { get; set; }

    public virtual DbSet<TmpTdaPartsList> TmpTdaPartsLists { get; set; }

    public virtual DbSet<TmpTdaPartsList1> TmpTdaPartsLists1 { get; set; }

    public virtual DbSet<TmpTdaPartsOnOrder> TmpTdaPartsOnOrders { get; set; }

    public virtual DbSet<TmpTdaPartsOnOrderFixMismappedPart> TmpTdaPartsOnOrderFixMismappedParts { get; set; }

    public virtual DbSet<TmpTdaPhaseHeadersCreated> TmpTdaPhaseHeadersCreateds { get; set; }

    public virtual DbSet<TmpTdaProjectBidsCreated> TmpTdaProjectBidsCreateds { get; set; }

    public virtual DbSet<TmpTdaProjectLegsCreated> TmpTdaProjectLegsCreateds { get; set; }

    public virtual DbSet<TmpTdaProjectPhasesCreated> TmpTdaProjectPhasesCreateds { get; set; }

    public virtual DbSet<TmpTdaProjectStateMapping> TmpTdaProjectStateMappings { get; set; }

    public virtual DbSet<TmpTdaRackConfigUpdate> TmpTdaRackConfigUpdates { get; set; }

    public virtual DbSet<TmpTdaResourceAllocation> TmpTdaResourceAllocations { get; set; }

    public virtual DbSet<TmpTdaResourceAllocationStateMapping> TmpTdaResourceAllocationStateMappings { get; set; }

    public virtual DbSet<TmpTdaResourceFunctionMapping> TmpTdaResourceFunctionMappings { get; set; }

    public virtual DbSet<TmpTdaStockTypeCategoryMapping> TmpTdaStockTypeCategoryMappings { get; set; }

    public virtual DbSet<TmpTdaStockTypeCategoryParentMapping> TmpTdaStockTypeCategoryParentMappings { get; set; }

    public virtual DbSet<TmpTdaSubhirePart> TmpTdaSubhireParts { get; set; }

    public virtual DbSet<TmpTdaSubhireVendor> TmpTdaSubhireVendors { get; set; }

    public virtual DbSet<TmpTdaSubhireVendorAddress> TmpTdaSubhireVendorAddresses { get; set; }

    public virtual DbSet<TmpTdaSubhireVendorMapping> TmpTdaSubhireVendorMappings { get; set; }

    public virtual DbSet<TmpTdaTruckPackItemUpdate> TmpTdaTruckPackItemUpdates { get; set; }

    public virtual DbSet<TmpTdaVehicleAllocation> TmpTdaVehicleAllocations { get; set; }

    public virtual DbSet<TmpTdacrewDemand> TmpTdacrewDemands { get; set; }

    public virtual DbSet<TmpTdacrewDemandsBak> TmpTdacrewDemandsBaks { get; set; }

    public virtual DbSet<TmpTdaopenAp> TmpTdaopenAps { get; set; }

    public virtual DbSet<TmpTdaopenAr> TmpTdaopenArs { get; set; }

    public virtual DbSet<TmpTransferOrderMatrix> TmpTransferOrderMatrices { get; set; }

    public virtual DbSet<TmpTransferorderCoreTeam> TmpTransferorderCoreTeams { get; set; }

    public virtual DbSet<TmpTsctoCbaownershipChange20150127> TmpTsctoCbaownershipChange20150127s { get; set; }

    public virtual DbSet<TmpUpdateDeviceProperty> TmpUpdateDeviceProperties { get; set; }

    public virtual DbSet<TmpVersacomPartTypeMapping> TmpVersacomPartTypeMappings { get; set; }

    public virtual DbSet<TmpVersacomPartTypes20211004> TmpVersacomPartTypes20211004s { get; set; }

    public virtual DbSet<TmpVideoCapEx20140414> TmpVideoCapEx20140414s { get; set; }

    public virtual DbSet<TmpWarehouseTransVolume> TmpWarehouseTransVolumes { get; set; }

    public virtual DbSet<TmpWexlerBarcodesRentedByClair> TmpWexlerBarcodesRentedByClairs { get; set; }

    public virtual DbSet<TmpWexlerBarcodesRentedByClair20121030> TmpWexlerBarcodesRentedByClair20121030s { get; set; }

    public virtual DbSet<TmpWexlerClairAcqAssetsOnRent20121030> TmpWexlerClairAcqAssetsOnRent20121030s { get; set; }

    public virtual DbSet<TmpWexlerFinessePartNoMapping> TmpWexlerFinessePartNoMappings { get; set; }

    public virtual DbSet<TmpWexlerInventory20121018> TmpWexlerInventory20121018s { get; set; }

    public virtual DbSet<TmpWexlerInventoryOnKitchen20121119> TmpWexlerInventoryOnKitchen20121119s { get; set; }

    public virtual DbSet<TmpWexlerInventoryOnRace20121112> TmpWexlerInventoryOnRace20121112s { get; set; }

    public virtual DbSet<TmpWexlerNonSalesClaim> TmpWexlerNonSalesClaims { get; set; }

    public virtual DbSet<TmpWexlerPart> TmpWexlerParts { get; set; }

    public virtual DbSet<TmpWexlerPostAssetsToRemove> TmpWexlerPostAssetsToRemoves { get; set; }

    public virtual DbSet<TmpWexlerSanfordFinal> TmpWexlerSanfordFinals { get; set; }

    public virtual DbSet<TmpWexlerSanfordFinalCheeseEdit> TmpWexlerSanfordFinalCheeseEdits { get; set; }

    public virtual DbSet<TmpWexlerVideoAssetListValuation> TmpWexlerVideoAssetListValuations { get; set; }

    public virtual DbSet<TmpWexlerXytechExitScans20121214> TmpWexlerXytechExitScans20121214s { get; set; }

    public virtual DbSet<TmpWipeMeOut> TmpWipeMeOuts { get; set; }

    public virtual DbSet<TmpWirelessFirstBarcode> TmpWirelessFirstBarcodes { get; set; }

    public virtual DbSet<TmpWirelessFirstNewPart> TmpWirelessFirstNewParts { get; set; }

    public virtual DbSet<TmpWirelessFirstNonBarcode> TmpWirelessFirstNonBarcodes { get; set; }

    public virtual DbSet<TmpZtesterDropPacketMetric> TmpZtesterDropPacketMetrics { get; set; }

    public virtual DbSet<TodayInTimeZone> TodayInTimeZones { get; set; }

    public virtual DbSet<TodayTable> TodayTables { get; set; }

    public virtual DbSet<TouringRevenueGroup> TouringRevenueGroups { get; set; }

    public virtual DbSet<TrainingTopicsUser> TrainingTopicsUsers { get; set; }

    public virtual DbSet<TransferOrderWarehouseToAndFrom> TransferOrderWarehouseToAndFroms { get; set; }

    public virtual DbSet<TransferToolsGetPart> TransferToolsGetParts { get; set; }

    public virtual DbSet<TransferToolsGetPartsRealTime> TransferToolsGetPartsRealTimes { get; set; }

    public virtual DbSet<TransferToolsMobileCheckInOutLog> TransferToolsMobileCheckInOutLogs { get; set; }

    public virtual DbSet<TransferToolsMobileDisplayMode> TransferToolsMobileDisplayModes { get; set; }

    public virtual DbSet<TransferToolsMobileLoginLog> TransferToolsMobileLoginLogs { get; set; }

    public virtual DbSet<TransferToolsPhase> TransferToolsPhases { get; set; }

    public virtual DbSet<Transport> Transports { get; set; }

    public virtual DbSet<TruckingCompany> TruckingCompanies { get; set; }

    public virtual DbSet<TruckingCompany1> TruckingCompanies1 { get; set; }

    public virtual DbSet<U1572969290> U1572969290s { get; set; }

    public virtual DbSet<UnifiedAddress> UnifiedAddresses { get; set; }

    public virtual DbSet<UnifiedContact> UnifiedContacts { get; set; }

    public virtual DbSet<UnifiedContactBrokerExecutionError> UnifiedContactBrokerExecutionErrors { get; set; }

    public virtual DbSet<UnifiedContactBrokerExecutionLog> UnifiedContactBrokerExecutionLogs { get; set; }

    public virtual DbSet<UnifiedContactum> UnifiedContactAs { get; set; }

    public virtual DbSet<UnifiedEmail> UnifiedEmails { get; set; }

    public virtual DbSet<UnifiedPhone> UnifiedPhones { get; set; }

    public virtual DbSet<UnplannedTransfersStagingArea> UnplannedTransfersStagingAreas { get; set; }

    public virtual DbSet<UseLogger> UseLoggers { get; set; }

    public virtual DbSet<UsedEquipmentSalesRevenueAccount> UsedEquipmentSalesRevenueAccounts { get; set; }

    public virtual DbSet<UsedGearSalesCollection> UsedGearSalesCollections { get; set; }

    public virtual DbSet<UsedGearSalesPartCollection> UsedGearSalesPartCollections { get; set; }

    public virtual DbSet<UsedGearSalesPartCollectionsBulkSave> UsedGearSalesPartCollectionsBulkSaves { get; set; }

    public virtual DbSet<UsedGearSalesSelectedGearImage> UsedGearSalesSelectedGearImages { get; set; }

    public virtual DbSet<UsedGearSalesSelectedGearImagesBulkSave> UsedGearSalesSelectedGearImagesBulkSaves { get; set; }

    public virtual DbSet<UsedGearSalesStatusType> UsedGearSalesStatusTypes { get; set; }

    public virtual DbSet<UserMenuInclusion> UserMenuInclusions { get; set; }

    public virtual DbSet<UserPermission> UserPermissions { get; set; }

    public virtual DbSet<UserPreference> UserPreferences { get; set; }

    public virtual DbSet<UserRole> UserRoles { get; set; }

    public virtual DbSet<UserWarehouseGroup> UserWarehouseGroups { get; set; }

    public virtual DbSet<UserWarehouseGroupsBulkSave> UserWarehouseGroupsBulkSaves { get; set; }

    public virtual DbSet<UserWarehouseGroupsWarehouse> UserWarehouseGroupsWarehouses { get; set; }

    public virtual DbSet<UserWarehouseGroupsWarehousesBulkSave> UserWarehouseGroupsWarehousesBulkSaves { get; set; }

    public virtual DbSet<UsrPurchActivityTemp> UsrPurchActivityTemps { get; set; }

    public virtual DbSet<VPollstarEventsWithSongkickLink> VPollstarEventsWithSongkickLinks { get; set; }

    public virtual DbSet<VPollstarSongkickEvent> VPollstarSongkickEvents { get; set; }

    public virtual DbSet<VPollstarSongkickLinkedEvent> VPollstarSongkickLinkedEvents { get; set; }

    public virtual DbSet<VSongkickEventsWithPollstarLink> VSongkickEventsWithPollstarLinks { get; set; }

    public virtual DbSet<Vatstatus> Vatstatuses { get; set; }

    public virtual DbSet<Vehicle> Vehicles { get; set; }

    public virtual DbSet<Vendor> Vendors { get; set; }

    public virtual DbSet<VendorAddress> VendorAddresses { get; set; }

    public virtual DbSet<VendorAddress1> VendorAddresses1 { get; set; }

    public virtual DbSet<VendorContact> VendorContacts { get; set; }

    public virtual DbSet<VendorEmail> VendorEmails { get; set; }

    public virtual DbSet<VendorPhone> VendorPhones { get; set; }

    public virtual DbSet<VenueType> VenueTypes { get; set; }

    public virtual DbSet<VenuesAndShippingDestination> VenuesAndShippingDestinations { get; set; }

    public virtual DbSet<Warehouse> Warehouses { get; set; }

    public virtual DbSet<Warehouse1> Warehouses1 { get; set; }

    public virtual DbSet<WarehouseCycleCount> WarehouseCycleCounts { get; set; }

    public virtual DbSet<WarehouseCycleCountsV> WarehouseCycleCountsVs { get; set; }

    public virtual DbSet<WarehouseHoliday> WarehouseHolidays { get; set; }

    public virtual DbSet<WarehouseLateReturnsLastNotification> WarehouseLateReturnsLastNotifications { get; set; }

    public virtual DbSet<WarehousePartQty> WarehousePartQties { get; set; }

    public virtual DbSet<WarehouseTransVolume> WarehouseTransVolumes { get; set; }

    public virtual DbSet<WarehouseTransactionVolume> WarehouseTransactionVolumes { get; set; }

    public virtual DbSet<WarehouseTransferShipment> WarehouseTransferShipments { get; set; }

    public virtual DbSet<Warehouseregion> Warehouseregions { get; set; }

    public virtual DbSet<WavStat> WavStats { get; set; }

    public virtual DbSet<WeekendCrewPrep> WeekendCrewPreps { get; set; }

    public virtual DbSet<WhiteListedUrl> WhiteListedUrls { get; set; }

    public virtual DbSet<XlatLanguage> XlatLanguages { get; set; }

    public virtual DbSet<ZebraPrinter> ZebraPrinters { get; set; }

    public virtual DbSet<ZipCode> ZipCodes { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<ProjectFavouriteDto>().HasNoKey().ToView(null);
        modelBuilder.Entity<UploadedFileDto>().HasNoKey().ToView(null);
        modelBuilder.Entity<AttachmentCategoryDto>().HasNoKey().ToView(null);
        modelBuilder.Entity<CloudFolderTemplateResultDto>().HasNoKey().ToView(null);
        modelBuilder.Entity<CloudFolderTemplateDto>().HasNoKey().ToView(null);
        modelBuilder.Entity<FolderTypeDto>().HasNoKey().ToView(null);
        modelBuilder.Entity<AvailableUserDto>().HasNoKey().ToView(null);
        modelBuilder.Entity<MappedUserDto>().HasNoKey().ToView(null);
        modelBuilder.Entity<UserFolderDto>().HasNoKey().ToView(null);
        modelBuilder.Entity<AttachmentTypeDto>().HasNoKey().ToView(null);
        modelBuilder.Entity<ProjectRecentDto>().HasNoKey().ToView(null);
        modelBuilder.Entity<ProjectSearchDto>().HasNoKey().ToView(null);
        modelBuilder.Entity<PhaseDto>().HasNoKey().ToView(null);
        modelBuilder.Entity<EquipmentDto>().HasNoKey().ToView(null);
        modelBuilder.Entity<ShipmentDto>().HasNoKey().ToView(null);
        modelBuilder.Entity<EquipmentSubhireDto>().HasNoKey().ToView(null);
        modelBuilder.Entity<BidExpenseDto>().HasNoKey().ToView(null);
        modelBuilder.Entity<RfiDto>().HasNoKey().ToView(null);
        modelBuilder.Entity<NoteDto>().HasNoKey().ToView(null);
        modelBuilder.Entity<AssignedCrewOtDto>().HasNoKey().ToView(null);
        modelBuilder.Entity<BillingItemDto>().HasNoKey().ToView(null);
        modelBuilder.Entity<PartBidValueDto>().HasNoKey().ToView(null);
        modelBuilder.Entity<ProductionScheduleDto>().HasNoKey().ToView(null);
        modelBuilder.Entity<AssignedCrewDto>().HasNoKey().ToView(null);
        modelBuilder.Entity<CrewDto>().HasNoKey().ToView(null);
        modelBuilder.Entity<BillingPeriodDto>().HasNoKey().ToView(null);
        modelBuilder.Entity<BillingPeriodItemDto>().HasNoKey().ToView(null);
        modelBuilder.Entity<ClientShippingAddressDto>().HasNoKey().ToView(null);
        modelBuilder.Entity<PartDto>().HasNoKey().ToView(null);
        modelBuilder.Entity<ClientContactDto>().HasNoKey().ToView(null);
        modelBuilder.Entity<ClientAddressDto>().HasNoKey().ToView(null);
        modelBuilder.Entity<PurchaseDto>().HasNoKey().ToView(null);
        modelBuilder.Entity<AbraHourlyPayCode>(entity =>
        {
            entity.HasKey(e => e.Code);

            entity.ToTable("AbraHourlyPayCode");

            entity.Property(e => e.Code)
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AbraHourlyPayCodePrefix>(entity =>
        {
            entity.HasKey(e => e.Prefix);

            entity.ToTable("AbraHourlyPayCodePrefix");

            entity.Property(e => e.Prefix)
                .HasMaxLength(2)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AccountFriendlyName>(entity =>
        {
            entity.HasKey(e => e.FriendlyNameId);

            entity.Property(e => e.FriendlyNameId)
                .ValueGeneratedNever()
                .HasColumnName("FriendlyNameID");
            entity.Property(e => e.FriendlyName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ActiveBidProjectsWithOrderedPartsNotOnProjectCalendar>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("active_bid_projects_with_ordered_parts_not_on_ProjectCalendar");

            entity.Property(e => e.Agency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("agency");
            entity.Property(e => e.CBig).HasColumnName("cBig");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Entitydesc)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("entitydesc");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Opsmgr)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("opsmgr");
            entity.Property(e => e.Respempno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("respempno");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
        });

        modelBuilder.Entity<ActiveDirectoryAddress>(entity =>
        {
            entity.HasKey(e => new { e.ActiveDirectoryId, e.Type }).HasName("PK_ActiveDirectory_Address");

            entity.ToTable("ActiveDirectoryAddress", "Contact", tb => tb.HasTrigger("TR_ActiveDirectory_sync_UnifiedAddress"));

            entity.Property(e => e.ActiveDirectoryId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ActiveDirectoryID");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.AddressLine1)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AddressLine2)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AddressLine3)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AddressLine4)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Country)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PostalCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StateProvince)
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.ActiveDirectory).WithMany(p => p.ActiveDirectoryAddresses)
                .HasForeignKey(d => d.ActiveDirectoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ActiveDirectoryAddress_Contact");
        });

        modelBuilder.Entity<ActiveDirectoryContact>(entity =>
        {
            entity.HasKey(e => e.ActiveDirectoryId).HasName("PK_ActiveDirectory");

            entity.ToTable("ActiveDirectoryContact", "Contact", tb => tb.HasTrigger("TR_ActiveDirectory_update_UnifiedContact"));

            entity.Property(e => e.ActiveDirectoryId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ActiveDirectoryID");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(2)
                .IsUnicode(false);

            entity.HasOne(d => d.StatusNavigation).WithMany(p => p.ActiveDirectoryContacts)
                .HasForeignKey(d => d.Status)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ActiveDirectCont_Status");
        });

        modelBuilder.Entity<ActiveDirectoryEmail>(entity =>
        {
            entity.HasKey(e => new { e.ActiveDirectoryId, e.Type }).HasName("PK_ActiveDirectory_Email");

            entity.ToTable("ActiveDirectoryEmail", "Contact", tb => tb.HasTrigger("TR_ActiveDirectory_sync_UnifiedEmail"));

            entity.Property(e => e.ActiveDirectoryId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ActiveDirectoryID");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.EmailAddress)
                .HasMaxLength(200)
                .IsUnicode(false);

            entity.HasOne(d => d.ActiveDirectory).WithMany(p => p.ActiveDirectoryEmails)
                .HasForeignKey(d => d.ActiveDirectoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ActiveDirectoryEmail_Contact");
        });

        modelBuilder.Entity<ActiveDirectoryPhone>(entity =>
        {
            entity.HasKey(e => new { e.ActiveDirectoryId, e.Type }).HasName("PK_ActiveDirectory_Phone");

            entity.ToTable("ActiveDirectoryPhone", "Contact", tb => tb.HasTrigger("TR_ActiveDirectory_sync_UnifiedPhone"));

            entity.Property(e => e.ActiveDirectoryId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ActiveDirectoryID");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.ActiveDirectory).WithMany(p => p.ActiveDirectoryPhones)
                .HasForeignKey(d => d.ActiveDirectoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ActiveDirectory_Phone_Contact");
        });

        modelBuilder.Entity<AddressDataSourceFieldMap>(entity =>
        {
            entity.HasKey(e => new { e.Source, e.Type }).HasName("PK_AddressData_SourceFieldMap");

            entity.ToTable("AddressDataSourceFieldMap", "Contact");

            entity.Property(e => e.Source)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MultipleAllowed).HasDefaultValue(true);
            entity.Property(e => e.Value)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.SourceNavigation).WithMany(p => p.AddressDataSourceFieldMaps)
                .HasForeignKey(d => d.Source)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AddressDataSourceFieldMap_Source");

            entity.HasOne(d => d.TypeNavigation).WithMany(p => p.AddressDataSourceFieldMaps)
                .HasForeignKey(d => d.Type)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AddressDataSourceFieldMap_Type");
        });

        modelBuilder.Entity<AgedReceivable>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("aged_receivables");

            entity.Property(e => e.AgedTotal).HasColumnType("numeric(19, 4)");
            entity.Property(e => e.Current)
                .HasColumnType("numeric(19, 4)")
                .HasColumnName("current");
            entity.Property(e => e.CustName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cust_name");
            entity.Property(e => e.Custno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("custno");
            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.Entitydesc)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("entitydesc");
            entity.Property(e => e.Invdate)
                .HasColumnType("datetime")
                .HasColumnName("invdate");
            entity.Property(e => e.Invno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("invno");
            entity.Property(e => e.Invoicer)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Numdays).HasColumnName("numdays");
            entity.Property(e => e.Over120)
                .HasColumnType("numeric(19, 4)")
                .HasColumnName("over120");
            entity.Property(e => e.Over30)
                .HasColumnType("numeric(19, 4)")
                .HasColumnName("over30");
            entity.Property(e => e.Over60)
                .HasColumnType("numeric(19, 4)")
                .HasColumnName("over60");
            entity.Property(e => e.Over90)
                .HasColumnType("numeric(19, 4)")
                .HasColumnName("over90");
            entity.Property(e => e.Total)
                .HasColumnType("money")
                .HasColumnName("total");
        });

        modelBuilder.Entity<AgedReceivablesSummary>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("aged_receivables_summary");

            entity.Property(e => e.Agedtotal)
                .HasColumnType("numeric(38, 4)")
                .HasColumnName("agedtotal");
            entity.Property(e => e.Current)
                .HasColumnType("numeric(38, 4)")
                .HasColumnName("current");
            entity.Property(e => e.CustName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cust_name");
            entity.Property(e => e.Custno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("custno");
            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.Invdate).HasColumnName("invdate");
            entity.Property(e => e.Invno).HasColumnName("invno");
            entity.Property(e => e.Istotal).HasColumnName("istotal");
            entity.Property(e => e.LastInvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Numdays).HasColumnName("numdays");
            entity.Property(e => e.Over120)
                .HasColumnType("numeric(38, 4)")
                .HasColumnName("over120");
            entity.Property(e => e.Over30)
                .HasColumnType("numeric(38, 4)")
                .HasColumnName("over30");
            entity.Property(e => e.Over60)
                .HasColumnType("numeric(38, 4)")
                .HasColumnName("over60");
            entity.Property(e => e.Over90)
                .HasColumnType("numeric(38, 4)")
                .HasColumnName("over90");
            entity.Property(e => e.Total)
                .HasColumnType("money")
                .HasColumnName("total");
        });

        modelBuilder.Entity<AgedReceivablesSummaryForAccountExecutive>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("aged_receivables_summary_for_account_executives");

            entity.Property(e => e.Aeempno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AEEmpno");
            entity.Property(e => e.AgedTotal).HasColumnType("numeric(38, 4)");
            entity.Property(e => e.Amempno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AMEmpno");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Current)
                .HasColumnType("numeric(38, 4)")
                .HasColumnName("current");
            entity.Property(e => e.CustName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cust_name");
            entity.Property(e => e.Custno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("custno");
            entity.Property(e => e.Invdate).HasColumnName("invdate");
            entity.Property(e => e.Invno).HasColumnName("invno");
            entity.Property(e => e.Istotal).HasColumnName("istotal");
            entity.Property(e => e.LastInvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Numdays).HasColumnName("numdays");
            entity.Property(e => e.Over120)
                .HasColumnType("numeric(38, 4)")
                .HasColumnName("over120");
            entity.Property(e => e.Over30)
                .HasColumnType("numeric(38, 4)")
                .HasColumnName("over30");
            entity.Property(e => e.Over60)
                .HasColumnType("numeric(38, 4)")
                .HasColumnName("over60");
            entity.Property(e => e.Over90)
                .HasColumnType("numeric(38, 4)")
                .HasColumnName("over90");
            entity.Property(e => e.Smempno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SMEmpno");
            entity.Property(e => e.Total)
                .HasColumnType("money")
                .HasColumnName("total");
        });

        modelBuilder.Entity<AgedReceivablesSummaryForAdmin>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("aged_receivables_summary_for_admin");

            entity.Property(e => e.Aeempno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AEEmpno");
            entity.Property(e => e.AgedTotal).HasColumnType("numeric(38, 4)");
            entity.Property(e => e.Amempno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AMEmpno");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Current)
                .HasColumnType("numeric(38, 4)")
                .HasColumnName("current");
            entity.Property(e => e.CustName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cust_name");
            entity.Property(e => e.Custno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("custno");
            entity.Property(e => e.Invdate).HasColumnName("invdate");
            entity.Property(e => e.Invno).HasColumnName("invno");
            entity.Property(e => e.Istotal).HasColumnName("istotal");
            entity.Property(e => e.LastInvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Numdays).HasColumnName("numdays");
            entity.Property(e => e.Over120)
                .HasColumnType("numeric(38, 4)")
                .HasColumnName("over120");
            entity.Property(e => e.Over30)
                .HasColumnType("numeric(38, 4)")
                .HasColumnName("over30");
            entity.Property(e => e.Over60)
                .HasColumnType("numeric(38, 4)")
                .HasColumnName("over60");
            entity.Property(e => e.Over90)
                .HasColumnType("numeric(38, 4)")
                .HasColumnName("over90");
            entity.Property(e => e.Smempno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SMEmpno");
            entity.Property(e => e.Total)
                .HasColumnType("money")
                .HasColumnName("total");
        });

        modelBuilder.Entity<AgedReceivablesSummaryForExecutive>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("aged_receivables_summary_for_executives");

            entity.Property(e => e.Aeempno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AEEmpno");
            entity.Property(e => e.AgedTotal).HasColumnType("numeric(38, 4)");
            entity.Property(e => e.Amempno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AMEmpno");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Current)
                .HasColumnType("numeric(38, 4)")
                .HasColumnName("current");
            entity.Property(e => e.CustName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cust_name");
            entity.Property(e => e.Custno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("custno");
            entity.Property(e => e.Invdate).HasColumnName("invdate");
            entity.Property(e => e.Invno).HasColumnName("invno");
            entity.Property(e => e.Istotal).HasColumnName("istotal");
            entity.Property(e => e.LastInvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Numdays).HasColumnName("numdays");
            entity.Property(e => e.Over120)
                .HasColumnType("numeric(38, 4)")
                .HasColumnName("over120");
            entity.Property(e => e.Over30)
                .HasColumnType("numeric(38, 4)")
                .HasColumnName("over30");
            entity.Property(e => e.Over60)
                .HasColumnType("numeric(38, 4)")
                .HasColumnName("over60");
            entity.Property(e => e.Over90)
                .HasColumnType("numeric(38, 4)")
                .HasColumnName("over90");
            entity.Property(e => e.Smempno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SMEmpno");
            entity.Property(e => e.Total)
                .HasColumnType("money")
                .HasColumnName("total");
        });

        modelBuilder.Entity<AllPolarityMetrics20220901>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("allPolarityMetrics_20220901");

            entity.Property(e => e.Cabinet)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CabinetPosition)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Component)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Configuration)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ExpectedPolaritySign)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InputNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PolaritySign)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PolarityWavFilePath)
                .HasMaxLength(260)
                .IsUnicode(false);
            entity.Property(e => e.PolarityXcorrTrailingSpikeIndex).HasColumnName("PolarityXCorrTrailingSpikeIndex");
            entity.Property(e => e.PolarityXcorrTrailingSpikeValue).HasColumnName("PolarityXCorrTrailingSpikeValue");
            entity.Property(e => e.ResultCurveId).HasColumnName("ResultCurveID");
            entity.Property(e => e.StackTestId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StackTestID");
            entity.Property(e => e.StationDescription)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AllPolarityMetrics20220906>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("allPolarityMetrics_20220906");

            entity.Property(e => e.Cabinet)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CabinetPosition)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Component)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Configuration)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ExpectedPolaritySign)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InputNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PolaritySign)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PolarityWavFilePath)
                .HasMaxLength(260)
                .IsUnicode(false);
            entity.Property(e => e.PolarityXcorrTrailingSpikeIndex).HasColumnName("PolarityXCorrTrailingSpikeIndex");
            entity.Property(e => e.PolarityXcorrTrailingSpikeValue).HasColumnName("PolarityXCorrTrailingSpikeValue");
            entity.Property(e => e.ResultCurveId).HasColumnName("ResultCurveID");
            entity.Property(e => e.StackTestId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StackTestID");
            entity.Property(e => e.StationDescription)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AllPolarityMetrics20220909>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("allPolarityMetrics_20220909");

            entity.Property(e => e.Cabinet)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CabinetPosition)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Component)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Configuration)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ExpectedPolaritySign)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InputNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PolaritySign)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PolarityWavFilePath)
                .HasMaxLength(260)
                .IsUnicode(false);
            entity.Property(e => e.PolarityXcorrLeadingSpikeIndex).HasColumnName("PolarityXCorrLeadingSpikeIndex");
            entity.Property(e => e.PolarityXcorrLeadingSpikeValue).HasColumnName("PolarityXCorrLeadingSpikeValue");
            entity.Property(e => e.ResultCurveId).HasColumnName("ResultCurveID");
            entity.Property(e => e.StackTestId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StackTestID");
            entity.Property(e => e.StationDescription)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AllSpeakerMeasurement>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("all_speaker_measurements", "SpeakerTest");

            entity.Property(e => e.BestMatchCurveId).HasColumnName("BestMatchCurveID");
            entity.Property(e => e.Configuration)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CurrentWavFilePath)
                .HasMaxLength(260)
                .IsUnicode(false);
            entity.Property(e => e.FrequencyVectorId).HasColumnName("FrequencyVectorID");
            entity.Property(e => e.GroupGuid).HasColumnName("GroupGUID");
            entity.Property(e => e.Hostname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("hostname");
            entity.Property(e => e.LoginName).HasMaxLength(128);
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.PolarityAbsoluteExtremaToRmsvalueRatio).HasColumnName("PolarityAbsoluteExtremaToRMSValueRatio");
            entity.Property(e => e.PolarityRmsvalue).HasColumnName("PolarityRMSValue");
            entity.Property(e => e.PolarityWavFilePath)
                .HasMaxLength(260)
                .IsUnicode(false);
            entity.Property(e => e.PolarityXcorrLeadingSpikeIndex).HasColumnName("PolarityXCorrLeadingSpikeIndex");
            entity.Property(e => e.PolarityXcorrLeadingSpikeValue).HasColumnName("PolarityXCorrLeadingSpikeValue");
            entity.Property(e => e.Purpose)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.ResultCurveId).HasColumnName("ResultCurveID");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.StackTestId).HasColumnName("StackTestID");
            entity.Property(e => e.StationDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Test)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TestDirectory)
                .HasMaxLength(260)
                .IsUnicode(false);
            entity.Property(e => e.TestGuid)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("TestGUID");
            entity.Property(e => e.TestSaveDate).HasPrecision(1);
            entity.Property(e => e.TestStartDate).HasPrecision(1);
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.UserCabinetNote)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UserComponentNote)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.VoltageNdiffFractionOfIdeal).HasColumnName("VoltageNDiffFractionOfIdeal");
            entity.Property(e => e.VoltageWavFilePath)
                .HasMaxLength(260)
                .IsUnicode(false);
            entity.Property(e => e.VoltageXcorrAbsoluteExtremum).HasColumnName("VoltageXCorrAbsoluteExtremum");
            entity.Property(e => e.XmlFilePath)
                .HasMaxLength(260)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AllSysproPurchaseActivity>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AllSysproPurchaseActivity");

            entity.Property(e => e.BuyExchangeRate).HasColumnType("numeric(12, 6)");
            entity.Property(e => e.BuyerName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_BIN");
            entity.Property(e => e.Company)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.CustomerPoNumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("Latin1_General_BIN");
            entity.Property(e => e.DueQty).HasColumnType("numeric(19, 6)");
            entity.Property(e => e.Glcode)
                .HasMaxLength(35)
                .IsUnicode(false)
                .UseCollation("Latin1_General_BIN")
                .HasColumnName("GLCode");
            entity.Property(e => e.Line).HasColumnType("numeric(4, 0)");
            entity.Property(e => e.MlastReceiptDat)
                .HasColumnType("datetime")
                .HasColumnName("MLastReceiptDat");
            entity.Property(e => e.MlatestDueDate)
                .HasColumnType("datetime")
                .HasColumnName("MLatestDueDate");
            entity.Property(e => e.Mprice)
                .HasColumnType("numeric(15, 5)")
                .HasColumnName("MPrice");
            entity.Property(e => e.MsalesOrder)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("Latin1_General_BIN")
                .HasColumnName("MSalesOrder");
            entity.Property(e => e.MstockCode)
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("Latin1_General_BIN")
                .HasColumnName("MStockCode");
            entity.Property(e => e.MstockDes)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_BIN")
                .HasColumnName("MStockDes");
            entity.Property(e => e.OrderEntryDate).HasColumnType("datetime");
            entity.Property(e => e.OrderQty).HasColumnType("numeric(18, 6)");
            entity.Property(e => e.OrderStatus)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.OutstandingCost).HasColumnType("numeric(38, 9)");
            entity.Property(e => e.Pocurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_BIN")
                .HasColumnName("POCurrency");
            entity.Property(e => e.ProductClassDesc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("Latin1_General_BIN");
            entity.Property(e => e.PurchaseOrder)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("Latin1_General_BIN");
            entity.Property(e => e.QtyReceivedInYear).HasColumnType("numeric(38, 13)");
            entity.Property(e => e.ReceivedValueInYear).HasColumnType("numeric(38, 6)");
            entity.Property(e => e.ReceivedYear).HasColumnType("numeric(10, 0)");
            entity.Property(e => e.SupplierName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_BIN");
            entity.Property(e => e.TotalReceivedQty).HasColumnType("numeric(18, 6)");
            entity.Property(e => e.UsditemPrice)
                .HasColumnType("money")
                .HasColumnName("USDItemPrice");
            entity.Property(e => e.Warehouse)
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("Latin1_General_BIN");
        });

        modelBuilder.Entity<AllUserInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("all_user_info");

            entity.Property(e => e.AvailabilityEstoffsetHours).HasColumnName("AvailabilityESTOffsetHours");
            entity.Property(e => e.CompanyCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConversionFactorFromInches).HasColumnName("conversionFactorFromInches");
            entity.Property(e => e.ConversionFactorFromPounds).HasColumnName("conversionFactorFromPounds");
            entity.Property(e => e.Culture)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("culture");
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.DefaultBillingCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DefaultDivision)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DefaultPrinterPaperSize)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DefaultPropType)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.DoubleclickProgramNoProject)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("doubleclick_program_NoProject");
            entity.Property(e => e.DoubleclickProgramProject)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("doubleclick_program_Project");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.Empname)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("empname");
            entity.Property(e => e.FirstDayOfWeek)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.IdLanguage).HasColumnName("id_language");
            entity.Property(e => e.OwnerEntity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("owner_entity");
            entity.Property(e => e.SalesForecastGroup)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SqlFirstDayOfWeek).HasColumnName("SQL_FirstDayOfWeek");
            entity.Property(e => e.StartupProgram)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("startup_program");
            entity.Property(e => e.TimezoneName).HasMaxLength(128);
            entity.Property(e => e.TourEntity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tour_entity");
            entity.Property(e => e.Unitoflength)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("unitoflength");
            entity.Property(e => e.Unitofweight)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("unitofweight");
            entity.Property(e => e.UserName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("user_name");
            entity.Property(e => e.WarehouseEntity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("warehouse_entity");
        });

        modelBuilder.Entity<AllocatedDeviceIpAddress>(entity =>
        {
            entity.HasKey(e => new { e.IpaddressBinary, e.Subnet });

            entity.Property(e => e.IpaddressBinary)
                .HasMaxLength(4)
                .IsFixedLength()
                .HasColumnName("IPAddressBinary");
            entity.Property(e => e.Subnet)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CanBeSelected)
                .HasDefaultValue(true)
                .HasColumnName("canBeSelected");
            entity.Property(e => e.RangeType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ServerName).HasMaxLength(128);

            entity.HasOne(d => d.RangeTypeNavigation).WithMany(p => p.AllocatedDeviceIpAddresses)
                .HasForeignKey(d => d.RangeType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AllocatedDeviceIpAddresses_ipAddressRanges");
        });

        modelBuilder.Entity<AllocatedNewInvoiceNumber>(entity =>
        {
            entity.HasKey(e => new { e.Locationcd, e.InvoiceNumber });

            entity.ToTable(tb => tb.HasTrigger("TR_remove_and_replace_allocated_invoice_numbers"));

            entity.Property(e => e.Locationcd)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("locationcd");
            entity.Property(e => e.OwningSessionId).HasColumnName("OwningSessionID");
            entity.Property(e => e.ServerName).HasMaxLength(128);

            entity.HasOne(d => d.LocationcdNavigation).WithMany(p => p.AllocatedNewInvoiceNumbers)
                .HasPrincipalKey(p => p.Locationcd)
                .HasForeignKey(d => d.Locationcd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AllocatedNewInvoiceNumbers");
        });

        modelBuilder.Entity<AllocatedNewInvoiceNumbers20230912>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AllocatedNewInvoiceNumbers_20230912");

            entity.Property(e => e.Locationcd)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("locationcd");
            entity.Property(e => e.OwningSessionId).HasColumnName("OwningSessionID");
            entity.Property(e => e.ServerName).HasMaxLength(128);
        });

        modelBuilder.Entity<AllocatedNewProjectNumber>(entity =>
        {
            entity.HasKey(e => e.ProjectNumber).HasName("PK_AllocatedProjectNumbers");

            entity.ToTable(tb => tb.HasTrigger("TR_remove_and_replace_allocated_project_numbers"));

            entity.Property(e => e.ProjectNumber).ValueGeneratedNever();
            entity.Property(e => e.OwningSessionId).HasColumnName("OwningSessionID");
            entity.Property(e => e.ServerName).HasMaxLength(128);
        });

        modelBuilder.Entity<AllocatedNewPurchaseOrderNumber>(entity =>
        {
            entity.HasKey(e => e.Ponumber);

            entity.ToTable(tb => tb.HasTrigger("TR_AllocatedNewPurchaseOrderNumbers_remove_and_replace_allocated_purchase_order_numbers"));

            entity.Property(e => e.Ponumber)
                .ValueGeneratedNever()
                .HasColumnName("POnumber");
            entity.Property(e => e.OwningSessionId).HasColumnName("OwningSessionID");
            entity.Property(e => e.ServerName).HasMaxLength(128);
        });

        modelBuilder.Entity<AllocatedNewRequisitionNumber>(entity =>
        {
            entity.HasKey(e => e.Reqno);

            entity.ToTable(tb => tb.HasTrigger("TR_AllocatedNewRequisitionNumbers_remove_and_replace_allocated_requisition_numbers"));

            entity.Property(e => e.Reqno)
                .ValueGeneratedNever()
                .HasColumnName("reqno");
            entity.Property(e => e.OwningSessionId).HasColumnName("OwningSessionID");
            entity.Property(e => e.ServerName).HasMaxLength(128);
        });

        modelBuilder.Entity<AllocatedUnifiedContactId>(entity =>
        {
            entity.HasKey(e => e.UnifiedContactId);

            entity.ToTable("AllocatedUnifiedContactIDs", "Contact", tb => tb.HasTrigger("TR_Remove_and_Replace_Allocated_UnifiedContactIDs"));

            entity.Property(e => e.UnifiedContactId)
                .ValueGeneratedNever()
                .HasColumnName("UnifiedContactID");
            entity.Property(e => e.OwningSessionId).HasColumnName("OwningSessionID");
            entity.Property(e => e.ServerName).HasMaxLength(128);
        });

        modelBuilder.Entity<AlreadyUsedProjectNumbers20200520>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AlreadyUsedProjectNumbers20200520");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.OwningSessionId).HasColumnName("OwningSessionID");
            entity.Property(e => e.ServerName).HasMaxLength(128);
        });

        modelBuilder.Entity<AmpChannelCorrectionCurf>(entity =>
        {
            entity.HasKey(e => new { e.FrameLow, e.FrameHigh, e.AmpOutputNumber });

            entity.ToTable("AmpChannelCorrectionCurves", "SpeakerTest");

            entity.Property(e => e.FrameLow)
                .HasMaxLength(4)
                .IsFixedLength();
            entity.Property(e => e.FrameHigh)
                .HasMaxLength(4)
                .IsFixedLength();
            entity.Property(e => e.AmpPowerChannelIrid).HasColumnName("AmpPowerChannelIRID");
            entity.Property(e => e.BreakInCurrentCorrectionIrid).HasColumnName("BreakInCurrentCorrectionIRID");
            entity.Property(e => e.BreakInVoltageCorrectionIrid).HasColumnName("BreakInVoltageCorrectionIRID");

            entity.HasOne(d => d.AmpOutputNumberNavigation).WithMany(p => p.AmpChannelCorrectionCurves)
                .HasForeignKey(d => d.AmpOutputNumber)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AmpChannelCorrectionCurves_AmpOutput");

            entity.HasOne(d => d.AmpPowerChannelIr).WithMany(p => p.AmpChannelCorrectionCurfAmpPowerChannelIrs)
                .HasForeignKey(d => d.AmpPowerChannelIrid)
                .HasConstraintName("FK_AmpChannelCorrectionCurvesAmpPowerChannelIRID_RealCurve");

            entity.HasOne(d => d.BreakInCurrentCorrectionIr).WithMany(p => p.AmpChannelCorrectionCurfBreakInCurrentCorrectionIrs)
                .HasForeignKey(d => d.BreakInCurrentCorrectionIrid)
                .HasConstraintName("FK_AmpChannelCorrectionCurvesBreakInCurrentCorrectionIRID_RealCurve");

            entity.HasOne(d => d.BreakInVoltageCorrectionIr).WithMany(p => p.AmpChannelCorrectionCurfBreakInVoltageCorrectionIrs)
                .HasForeignKey(d => d.BreakInVoltageCorrectionIrid)
                .HasConstraintName("FK_AmpChannelCorrectionCurvesBreakInVoltageCorrectionIRID_RealCurve");
        });

        modelBuilder.Entity<AmpOutput>(entity =>
        {
            entity.HasKey(e => e.AmpOutputNumber).HasName("PK_SpeakerTestAmpOutput");

            entity.ToTable("AmpOutput", "SpeakerTest");

            entity.Property(e => e.AmpOutputNumber).ValueGeneratedNever();
        });

        modelBuilder.Entity<AmpPosition>(entity =>
        {
            entity.HasKey(e => e.AmpPosition1).HasName("PK_SpeakerTestAmpPosition");

            entity.ToTable("AmpPosition", "SpeakerTest");

            entity.Property(e => e.AmpPosition1)
                .ValueGeneratedNever()
                .HasColumnName("AmpPosition");
        });

        modelBuilder.Entity<Amplifier>(entity =>
        {
            entity.HasKey(e => new { e.FrameLow, e.FrameHigh }).HasName("PK_SpeakerTest_Amplifier");

            entity.ToTable("Amplifier", "SpeakerTest");

            entity.Property(e => e.FrameLow)
                .HasMaxLength(4)
                .IsFixedLength();
            entity.Property(e => e.FrameHigh)
                .HasMaxLength(4)
                .IsFixedLength();
            entity.Property(e => e.Barcode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Apbank>(entity =>
        {
            entity.HasKey(e => e.Primekey)
                .IsClustered(false)
                .HasFillFactor(90);

            entity.ToTable("apbanks");

            entity.HasIndex(e => e.Bankno, "apbankspk")
                .IsUnique()
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("primekey");
            entity.Property(e => e.Acctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("acctcd");
            entity.Property(e => e.Addr1)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("addr1");
            entity.Property(e => e.Addr2)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("addr2");
            entity.Property(e => e.BankAcctcd)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bank_acctcd");
            entity.Property(e => e.Bankno)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bankno");
            entity.Property(e => e.Chklineup).HasColumnName("chklineup");
            entity.Property(e => e.Chkrpt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("chkrpt");
            entity.Property(e => e.Invperchk).HasColumnName("invperchk");
            entity.Property(e => e.Maxcheck).HasColumnName("maxcheck");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Name)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("name");
            entity.Property(e => e.RouterNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("router_no");
        });

        modelBuilder.Entity<Apexpcode>(entity =>
        {
            entity.HasKey(e => e.Expcd).HasFillFactor(90);

            entity.ToTable("apexpcode");

            entity.Property(e => e.Expcd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("expcd");
            entity.Property(e => e.BudgetCategoryCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Expdesc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("expdesc");

            entity.HasOne(d => d.BudgetCategoryCodeNavigation).WithMany(p => p.Apexpcodes)
                .HasForeignKey(d => d.BudgetCategoryCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_apexpcode_BudgetCategories");
        });

        modelBuilder.Entity<ApiKey>(entity =>
        {
            entity.HasKey(e => e.ApiKey1);

            entity.ToTable("ApiKeys", "ApiGateway");

            entity.HasIndex(e => e.ServiceName, "IX_ApiKeys_ServiceName");

            entity.Property(e => e.ApiKey1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("api_key");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.ExpirationDate)
                .HasDefaultValueSql("(dateadd(year,(1),getdate()))")
                .HasColumnType("datetime")
                .HasColumnName("expiration_date");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasColumnName("is_active");
            entity.Property(e => e.IsPublic)
                .HasDefaultValue(false)
                .HasColumnName("is_public");
            entity.Property(e => e.Scope)
                .HasMaxLength(128)
                .HasColumnName("scope");
            entity.Property(e => e.ServiceName)
                .HasMaxLength(255)
                .HasColumnName("service_name");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updated_at");
        });

        modelBuilder.Entity<AppConfig>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("App_Config");

            entity.Property(e => e.Cmndsel)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cmndsel");
            entity.Property(e => e.Tag)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Value).HasColumnType("sql_variant");
        });

        modelBuilder.Entity<AppConfig1>(entity =>
        {
            entity.HasKey(e => new { e.UserName, e.Cmndsel, e.Tag });

            entity.ToTable("AppConfig", tb => tb.HasTrigger("x_AuditAppConfig"));

            entity.Property(e => e.UserName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("user_name");
            entity.Property(e => e.Cmndsel)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cmndsel");
            entity.Property(e => e.Tag)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Value).HasColumnType("sql_variant");
        });

        modelBuilder.Entity<AppConfigA>(entity =>
        {
            entity.HasKey(e => e.AtransactionId).IsClustered(false);

            entity.ToTable("AppConfigA");

            entity.Property(e => e.AtransactionId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ATransactionID");
            entity.Property(e => e.AdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnName("ADateTime");
            entity.Property(e => e.ArecordAction).HasColumnName("ARecordAction");
            entity.Property(e => e.Atransaction).HasColumnName("ATransaction");
            entity.Property(e => e.AuserId)
                .IsUnicode(false)
                .HasColumnName("AUserID");
            entity.Property(e => e.Cmndsel)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cmndsel");
            entity.Property(e => e.Tag)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("user_name");
            entity.Property(e => e.Value).HasColumnType("sql_variant");
        });

        modelBuilder.Entity<AppConfigTemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AppConfig_Temp");

            entity.Property(e => e.Cmndsel)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cmndsel");
            entity.Property(e => e.Tag)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("user_name");
            entity.Property(e => e.Value).HasColumnType("sql_variant");
        });

        modelBuilder.Entity<AppleDevicePartNumber>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Partdesc).HasColumnName("partdesc");
            entity.Property(e => e.Partno).HasColumnName("partno");
        });

        modelBuilder.Entity<Apvndinq>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("apvndinq");

            entity.Property(e => e.Acctid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("acctid");
            entity.Property(e => e.AchYn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ach_yn");
            entity.Property(e => e.Activeind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("activeind");
            entity.Property(e => e.Ap1099Ind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ap1099_ind");
            entity.Property(e => e.ApproveStat)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("approve_stat");
            entity.Property(e => e.Bank)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("bank");
            entity.Property(e => e.Bankid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("bankid");
            entity.Property(e => e.Bankname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bankname");
            entity.Property(e => e.BusinessCd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("business_cd");
            entity.Property(e => e.BuyerCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("buyer_code");
            entity.Property(e => e.Caseregister)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("caseregister");
            entity.Property(e => e.ChkSavCd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("chk_sav_cd");
            entity.Property(e => e.Commodity1)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("commodity1");
            entity.Property(e => e.Commodity2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("commodity2");
            entity.Property(e => e.CompCertify)
                .HasColumnType("datetime")
                .HasColumnName("comp_certify");
            entity.Property(e => e.CompRating)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("comp_rating");
            entity.Property(e => e.CorporationInd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("corporation_ind");
            entity.Property(e => e.CurYrPo)
                .HasColumnType("money")
                .HasColumnName("cur_yr_po");
            entity.Property(e => e.DBRating)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("d_b_rating");
            entity.Property(e => e.EeocCertify)
                .HasColumnType("datetime")
                .HasColumnName("eeoc_certify");
            entity.Property(e => e.EeocType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("eeoc_type");
            entity.Property(e => e.Employeecnt).HasColumnName("employeecnt");
            entity.Property(e => e.Employeeind)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("employeeind");
            entity.Property(e => e.InsrCertify)
                .HasColumnType("datetime")
                .HasColumnName("insr_certify");
            entity.Property(e => e.LaborSurplus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("labor_surplus");
            entity.Property(e => e.LastSurvey)
                .HasColumnType("datetime")
                .HasColumnName("last_survey");
            entity.Property(e => e.LastYrAp)
                .HasColumnType("money")
                .HasColumnName("last_yr_ap");
            entity.Property(e => e.LastYrDisc)
                .HasColumnType("money")
                .HasColumnName("last_yr_disc");
            entity.Property(e => e.LastYrPo)
                .HasColumnType("money")
                .HasColumnName("last_yr_po");
            entity.Property(e => e.LastYrSale)
                .HasColumnType("money")
                .HasColumnName("last_yr_sale");
            entity.Property(e => e.Lastactivity)
                .HasColumnType("datetime")
                .HasColumnName("lastactivity");
            entity.Property(e => e.Lastyrnet)
                .HasColumnType("money")
                .HasColumnName("lastyrnet");
            entity.Property(e => e.MsreplTranVersion).HasColumnName("msrepl_tran_version");
            entity.Property(e => e.MtdAp)
                .HasColumnType("money")
                .HasColumnName("mtd_ap");
            entity.Property(e => e.MtdDisc)
                .HasColumnType("money")
                .HasColumnName("mtd_disc");
            entity.Property(e => e.Mtdnet)
                .HasColumnType("money")
                .HasColumnName("mtdnet");
            entity.Property(e => e.Parent)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("parent");
            entity.Property(e => e.Paytermscd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("paytermscd");
            entity.Property(e => e.PrevYrSale)
                .HasColumnType("money")
                .HasColumnName("prev_yr_sale");
            entity.Property(e => e.PrimUnion)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("prim_union");
            entity.Property(e => e.Primekey).HasColumnName("primekey");
            entity.Property(e => e.Problemcd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("problemcd");
            entity.Property(e => e.PublicInd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("public_ind");
            entity.Property(e => e.QcApproval)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("qc_approval");
            entity.Property(e => e.Ref1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ref1");
            entity.Property(e => e.Ref2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ref2");
            entity.Property(e => e.Ref3)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ref3");
            entity.Property(e => e.Ref4)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ref5");
            entity.Property(e => e.Ref6)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ref6");
            entity.Property(e => e.Ref7)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ref7");
            entity.Property(e => e.Ref8)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ref8");
            entity.Property(e => e.SecondUnion)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("second_union");
            entity.Property(e => e.Taxid)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("taxid");
            entity.Property(e => e.Unioncontend)
                .HasColumnType("datetime")
                .HasColumnName("unioncontend");
            entity.Property(e => e.VendCustno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("vend_custno");
            entity.Property(e => e.VendReprom).HasColumnName("vend_reprom");
            entity.Property(e => e.Vendno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("vendno");
            entity.Property(e => e.VendorAbbr)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("vendor_abbr");
            entity.Property(e => e.VendorName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("vendor_name");
            entity.Property(e => e.YearFormed)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("year_formed");
            entity.Property(e => e.YtdAp)
                .HasColumnType("money")
                .HasColumnName("ytd_ap");
            entity.Property(e => e.YtdDisc)
                .HasColumnType("money")
                .HasColumnName("ytd_disc");
            entity.Property(e => e.Ytdnet)
                .HasColumnType("money")
                .HasColumnName("ytdnet");
        });

        modelBuilder.Entity<Arcustinq>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("arcustinq");

            entity.Property(e => e.Activeind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("activeind");
            entity.Property(e => e.Arcurr)
                .HasColumnType("money")
                .HasColumnName("arcurr");
            entity.Property(e => e.Arover120)
                .HasColumnType("money")
                .HasColumnName("arover120");
            entity.Property(e => e.Arover30)
                .HasColumnType("money")
                .HasColumnName("arover30");
            entity.Property(e => e.Arover60)
                .HasColumnType("money")
                .HasColumnName("arover60");
            entity.Property(e => e.Arover90)
                .HasColumnType("money")
                .HasColumnName("arover90");
            entity.Property(e => e.Available)
                .HasColumnType("money")
                .HasColumnName("available");
            entity.Property(e => e.BoAllow)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("bo_allow");
            entity.Property(e => e.CompRating)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("comp_rating");
            entity.Property(e => e.CompanySize)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("company_size");
            entity.Property(e => e.Credithold)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("credithold");
            entity.Property(e => e.Creditlmt)
                .HasColumnType("money")
                .HasColumnName("creditlmt");
            entity.Property(e => e.Custclass)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("custclass");
            entity.Property(e => e.Custno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("custno");
            entity.Property(e => e.DBRating)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("d_b_rating");
            entity.Property(e => e.Dunningcnt).HasColumnName("dunningcnt");
            entity.Property(e => e.Enterdate)
                .HasColumnType("datetime")
                .HasColumnName("enterdate");
            entity.Property(e => e.FscmCage)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fscm_cage");
            entity.Property(e => e.Highbal)
                .HasColumnType("money")
                .HasColumnName("highbal");
            entity.Property(e => e.IndustryType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("industry_type");
            entity.Property(e => e.LastContact)
                .HasColumnType("datetime")
                .HasColumnName("last_contact");
            entity.Property(e => e.LastDunning)
                .HasColumnType("datetime")
                .HasColumnName("last_dunning");
            entity.Property(e => e.LastYrSale)
                .HasColumnType("money")
                .HasColumnName("last_yr_sale");
            entity.Property(e => e.Lastactivity)
                .HasColumnType("datetime")
                .HasColumnName("lastactivity");
            entity.Property(e => e.Lastyrcosts)
                .HasColumnType("money")
                .HasColumnName("lastyrcosts");
            entity.Property(e => e.Lastyrother)
                .HasColumnType("money")
                .HasColumnName("lastyrother");
            entity.Property(e => e.Lastyrrtrn)
                .HasColumnType("money")
                .HasColumnName("lastyrrtrn");
            entity.Property(e => e.Lastyrsales)
                .HasColumnType("money")
                .HasColumnName("lastyrsales");
            entity.Property(e => e.Matrixcd)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("matrixcd");
            entity.Property(e => e.Misc)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("misc");
            entity.Property(e => e.MsreplTranVersion).HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Mtdcosts)
                .HasColumnType("money")
                .HasColumnName("mtdcosts");
            entity.Property(e => e.Mtdother)
                .HasColumnType("money")
                .HasColumnName("mtdother");
            entity.Property(e => e.Mtdrtrn)
                .HasColumnType("money")
                .HasColumnName("mtdrtrn");
            entity.Property(e => e.Mtdsales)
                .HasColumnType("money")
                .HasColumnName("mtdsales");
            entity.Property(e => e.Name)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.NextContact)
                .HasColumnType("datetime")
                .HasColumnName("next_contact");
            entity.Property(e => e.NextObjective)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("next_objective");
            entity.Property(e => e.Oeused)
                .HasColumnType("money")
                .HasColumnName("oeused");
            entity.Property(e => e.PrevYrSale)
                .HasColumnType("money")
                .HasColumnName("prev_yr_sale");
            entity.Property(e => e.Primekey).HasColumnName("primekey");
            entity.Property(e => e.Probability).HasColumnName("probability");
            entity.Property(e => e.Ref1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ref1");
            entity.Property(e => e.Ref2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ref2");
            entity.Property(e => e.Ref3)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ref3");
            entity.Property(e => e.Ref4)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ref5");
            entity.Property(e => e.Ref6)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ref6");
            entity.Property(e => e.Ref7)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ref7");
            entity.Property(e => e.Ref8)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ref8");
            entity.Property(e => e.ReferredBy)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("referred_by");
            entity.Property(e => e.Reminder)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("reminder");
            entity.Property(e => e.Rptform)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("rptform");
            entity.Property(e => e.Totalar)
                .HasColumnType("money")
                .HasColumnName("totalar");
            entity.Property(e => e.Ytdcosts)
                .HasColumnType("money")
                .HasColumnName("ytdcosts");
            entity.Property(e => e.Ytdother)
                .HasColumnType("money")
                .HasColumnName("ytdother");
            entity.Property(e => e.Ytdrtrn)
                .HasColumnType("money")
                .HasColumnName("ytdrtrn");
            entity.Property(e => e.Ytdsales)
                .HasColumnType("money")
                .HasColumnName("ytdsales");
        });

        modelBuilder.Entity<Area>(entity =>
        {
            entity.HasKey(e => e.AreaCode);

            entity.ToTable("Area");

            entity.Property(e => e.AreaCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.AreaDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AssignedCrewStartingToday>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Assigned_Crew_Starting_Today");

            entity.Property(e => e.CanceledDate).HasColumnType("datetime");
            entity.Property(e => e.Company)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Division)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.EmpName)
                .HasMaxLength(51)
                .IsUnicode(false)
                .HasColumnName("emp_name");
            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Entitydesc)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("entitydesc");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.OrderedDate).HasColumnType("datetime");
            entity.Property(e => e.Ponumber).HasColumnName("PONumber");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.Status)
                .HasMaxLength(51)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AttachmentCategory>(entity =>
        {
            entity.HasKey(e => e.AttachmentCategory1).HasName("PK__Attachme__B94EA80FD54FB778");

            entity.ToTable("AttachmentCategory");

            entity.Property(e => e.AttachmentCategory1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AttachmentCategory");
            entity.Property(e => e.AttachmentsCanBeInKnowledgeBase).HasColumnName("attachmentsCanBeInKnowledgeBase");
            entity.Property(e => e.DefaultRootFolderPath)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("defaultRootFolderPath");

            entity.HasMany(d => d.AttachmentTypes).WithMany(p => p.AttachmentCategories)
                .UsingEntity<Dictionary<string, object>>(
                    "AttachmentCategoryType",
                    r => r.HasOne<AttachmentType>().WithMany()
                        .HasForeignKey("AttachmentType")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AttachmentCategoryTypes_AttachmentTypes"),
                    l => l.HasOne<AttachmentCategory>().WithMany()
                        .HasForeignKey("AttachmentCategory")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AttachmentCategory"),
                    j =>
                    {
                        j.HasKey("AttachmentCategory", "AttachmentType");
                        j.ToTable("AttachmentCategoryTypes");
                        j.IndexerProperty<string>("AttachmentCategory")
                            .HasMaxLength(50)
                            .IsUnicode(false)
                            .HasDefaultValue("");
                        j.IndexerProperty<string>("AttachmentType")
                            .HasMaxLength(50)
                            .IsUnicode(false);
                    });
        });

        modelBuilder.Entity<AttachmentType>(entity =>
        {
            entity.HasKey(e => e.AttachmentType1);

            entity.Property(e => e.AttachmentType1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AttachmentType");
            entity.Property(e => e.AttachmentTypeDescription).IsUnicode(false);
            entity.Property(e => e.IsCompanyAttachment).HasColumnName("isCompanyAttachment");
            entity.Property(e => e.IsDeviceAttachment).HasColumnName("isDeviceAttachment");
            entity.Property(e => e.IsEmployeeAttachment).HasColumnName("isEmployeeAttachment");
            entity.Property(e => e.IsInternal).HasColumnName("isInternal");
            entity.Property(e => e.IsPartAttachment).HasColumnName("isPartAttachment");
            entity.Property(e => e.IsShareable).HasDefaultValue(true);
            entity.Property(e => e.Parent)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasMany(d => d.CloudFolderTemplates).WithMany(p => p.AttachmentTypes)
                .UsingEntity<Dictionary<string, object>>(
                    "CloudFileStorageGroupsToAttachmentType",
                    r => r.HasOne<CloudFileStoragePermissionFolderTemplate>().WithMany()
                        .HasForeignKey("CloudFolderTemplate")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CloudFileStorageGroupsToAttachmentTypes_CloudFileStoragePermissionFolderTemplate"),
                    l => l.HasOne<AttachmentType>().WithMany()
                        .HasForeignKey("AttachmentType")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CloudFileStorageGroupsToAttachmentTypes_AttachmentTypes"),
                    j =>
                    {
                        j.HasKey("AttachmentType", "CloudFolderTemplate");
                        j.ToTable("CloudFileStorageGroupsToAttachmentTypes");
                        j.IndexerProperty<string>("AttachmentType")
                            .HasMaxLength(50)
                            .IsUnicode(false);
                        j.IndexerProperty<string>("CloudFolderTemplate")
                            .HasMaxLength(50)
                            .IsUnicode(false)
                            .HasDefaultValue("");
                    });
        });

        modelBuilder.Entity<AttachmentTypeContactCategory>(entity =>
        {
            entity.HasKey(e => new { e.AttachmentType, e.IdContactCategory });

            entity.Property(e => e.AttachmentType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdContactCategory).HasColumnName("id_ContactCategory");
            entity.Property(e => e.CanEdit).HasColumnName("canEdit");

            entity.HasOne(d => d.AttachmentTypeNavigation).WithMany(p => p.AttachmentTypeContactCategories)
                .HasForeignKey(d => d.AttachmentType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AttachmentTypeContactCategories");

            entity.HasOne(d => d.IdContactCategoryNavigation).WithMany(p => p.AttachmentTypeContactCategories)
                .HasForeignKey(d => d.IdContactCategory)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AttachmentTypeContactCategories_ContactCategory");
        });

        modelBuilder.Entity<AttachmentTypeDatabaseRole>(entity =>
        {
            entity.HasKey(e => new { e.AttachmentType, e.DatabaseRole });

            entity.Property(e => e.AttachmentType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DatabaseRole)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.AttachmentTypeNavigation).WithMany(p => p.AttachmentTypeDatabaseRoles)
                .HasForeignKey(d => d.AttachmentType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AttachmentTypeDatabaseRoles_AttachmentTypes");
        });

        modelBuilder.Entity<AudioDeviceOutputChannel>(entity =>
        {
            entity.HasKey(e => new { e.DeviceType, e.OutputChannelNumber });

            entity.ToTable("AudioDeviceOutputChannel", "SpeakerTest");

            entity.Property(e => e.DeviceType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SignalLevel)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.DeviceTypeNavigation).WithMany(p => p.AudioDeviceOutputChannels)
                .HasForeignKey(d => d.DeviceType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AudioDeviceOutputChannel_DeviceType");

            entity.HasOne(d => d.SignalLevelNavigation).WithMany(p => p.AudioDeviceOutputChannels)
                .HasForeignKey(d => d.SignalLevel)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AudioDeviceOutputChannel_SignalLevel");
        });

        modelBuilder.Entity<AudioDeviceOutputPatchingMap>(entity =>
        {
            entity.HasKey(e => new { e.OutputPatching, e.DeviceType, e.DevicePosition, e.OutputChannelNumber });

            entity.ToTable("AudioDeviceOutputPatchingMap", "SpeakerTest");

            entity.HasIndex(e => new { e.OutputPatching, e.DeviceType, e.CabinetPosition, e.CabinetInputNumber }, "UC_AudioDeviceOutputPatchingMap_CabinetInputs").IsUnique();

            entity.Property(e => e.OutputPatching)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DeviceType)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.CabinetInputNumberNavigation).WithMany(p => p.AudioDeviceOutputPatchingMaps)
                .HasForeignKey(d => d.CabinetInputNumber)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AudioDeviceOutputPatchingMap_CabinetInputNumber");

            entity.HasOne(d => d.CabinetPositionNavigation).WithMany(p => p.AudioDeviceOutputPatchingMaps)
                .HasForeignKey(d => d.CabinetPosition)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AudioDeviceOutputPatchingMap_CabinetPosition");

            entity.HasOne(d => d.OutputPatchingNavigation).WithMany(p => p.AudioDeviceOutputPatchingMaps)
                .HasForeignKey(d => d.OutputPatching)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AudioDeviceOutputPatchingMap_OutputPatching");

            entity.HasOne(d => d.AudioOutputDevicePosition).WithMany(p => p.AudioDeviceOutputPatchingMaps)
                .HasForeignKey(d => new { d.DeviceType, d.DevicePosition })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AudioDeviceOutputPatchingMap_AudioOutputDevicePosition");

            entity.HasOne(d => d.AudioDeviceOutputChannel).WithMany(p => p.AudioDeviceOutputPatchingMaps)
                .HasForeignKey(d => new { d.DeviceType, d.OutputChannelNumber })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AudioDeviceOutputPatchingMap_AudioDeviceOutputChannel");
        });

        modelBuilder.Entity<AudioOutputDevice>(entity =>
        {
            entity.HasKey(e => new { e.DeviceType, e.DeviceInstanceNumber }).HasName("PK_AudioOutputDeviceInstance");

            entity.ToTable("AudioOutputDevice", "SpeakerTest");

            entity.HasIndex(e => e.Macaddress, "UC_AudioOutputDevice_DPRO")
                .IsUnique()
                .HasFilter("([MACAddress] IS NOT NULL)");

            entity.HasIndex(e => new { e.FrameLow, e.FrameHigh }, "UC_AudioOutputDevice_PLM20000Q")
                .IsUnique()
                .HasFilter("([FrameLow] IS NOT NULL)");

            entity.Property(e => e.DeviceType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Barcode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FrameHigh)
                .HasMaxLength(4)
                .IsFixedLength();
            entity.Property(e => e.FrameLow)
                .HasMaxLength(4)
                .IsFixedLength();
            entity.Property(e => e.Macaddress)
                .HasMaxLength(6)
                .IsFixedLength()
                .HasColumnName("MACAddress");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.DeviceTypeNavigation).WithMany(p => p.AudioOutputDevices)
                .HasForeignKey(d => d.DeviceType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AudioOutputDevice_DeviceType");
        });

        modelBuilder.Entity<AudioOutputDevicePosition>(entity =>
        {
            entity.HasKey(e => new { e.DeviceType, e.DevicePosition });

            entity.ToTable("AudioOutputDevicePosition", "SpeakerTest");

            entity.Property(e => e.DeviceType)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.DeviceTypeNavigation).WithMany(p => p.AudioOutputDevicePositions)
                .HasForeignKey(d => d.DeviceType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AudioOutputDevicePosition_AudioOutputDeviceType");
        });

        modelBuilder.Entity<AudioOutputDeviceType>(entity =>
        {
            entity.HasKey(e => e.DeviceType);

            entity.ToTable("AudioOutputDeviceType", "SpeakerTest");

            entity.Property(e => e.DeviceType)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AuthenticationHistory>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.CreatedAt });

            entity.ToTable("AuthenticationHistory", "ApiGateway");

            entity.HasIndex(e => e.UserId, "IDX_AuthenticationHistory_UserId");

            entity.Property(e => e.UserId).HasMaxLength(100);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AppName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AppVersion)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AuthenticationType).HasMaxLength(128);
            entity.Property(e => e.ComputerName).HasMaxLength(255);
            entity.Property(e => e.IpAddress).HasMaxLength(45);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.TraceId)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UpdateddAt)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UserAgent).HasMaxLength(500);
        });

        modelBuilder.Entity<AutoInvoiceGeneration>(entity =>
        {
            entity.HasKey(e => e.AutoInvoiceGenerationCd);

            entity.ToTable("AutoInvoiceGeneration");

            entity.Property(e => e.AutoInvoiceGenerationCd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("AutoInvoiceGenerationCD");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AvailMultipartGroup>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Avail_Multipart_Groups");

            entity.Property(e => e.Partactive).HasColumnName("partactive");
            entity.Property(e => e.Partgroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partgroup");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Partseq).HasColumnName("partseq");
        });

        modelBuilder.Entity<AvailMultipartGroup1>(entity =>
        {
            entity.HasKey(e => new { e.Userid, e.Partgroup, e.Partno });

            entity.ToTable("AvailMultipartGroups");

            entity.HasIndex(e => new { e.Userid, e.Partgroup, e.Partno }, "UC_AvailMultipartGroups").IsUnique();

            entity.Property(e => e.Userid)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("userid");
            entity.Property(e => e.Partgroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partgroup");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Partactive)
                .IsRequired()
                .HasDefaultValueSql("('1')")
                .HasColumnName("partactive");
            entity.Property(e => e.Partseq).HasColumnName("partseq");

            entity.HasOne(d => d.PartnoNavigation).WithMany(p => p.AvailMultipartGroup1s)
                .HasForeignKey(d => d.Partno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AvailMultipartGroups_inpart");

            entity.HasOne(d => d.User).WithMany(p => p.AvailMultipartGroup1s)
                .HasForeignKey(d => d.Userid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AvailMultiPartGroups_pjtfrusr");
        });

        modelBuilder.Entity<AvailMultipartGroupsDesc>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Avail_Multipart_Groups_Desc");

            entity.Property(e => e.Partactive).HasColumnName("partactive");
            entity.Property(e => e.Partdesc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partgroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partgroup");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Partseq).HasColumnName("partseq");
        });

        modelBuilder.Entity<AvailMultipartGroupsTemp>(entity =>
        {
            entity.HasKey(e => new { e.Userid, e.Partgroup, e.Partno });

            entity.ToTable("AvailMultipartGroups_Temp");

            entity.Property(e => e.Userid)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("userid");
            entity.Property(e => e.Partgroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partgroup");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Partactive).HasColumnName("partactive");
            entity.Property(e => e.Partseq).HasColumnName("partseq");
        });

        modelBuilder.Entity<BalDelete>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("bal_delete");

            entity.Property(e => e.AcctExecEmpno).HasColumnName("acctExecEmpno");
            entity.Property(e => e.Agency).HasColumnName("agency");
            entity.Property(e => e.Bidmarkup).HasColumnName("bidmarkup");
            entity.Property(e => e.Bidroot).HasColumnName("bidroot");
            entity.Property(e => e.Country).HasColumnName("country");
            entity.Property(e => e.CrewOpsEmpno).HasColumnName("crewOpsEmpno");
            entity.Property(e => e.CrmleadUrl).HasColumnName("CRMLeadURL");
            entity.Property(e => e.Currency).HasColumnName("currency");
            entity.Property(e => e.Custno).HasColumnName("custno");
            entity.Property(e => e.Enddate).HasColumnName("enddate");
            entity.Property(e => e.Engactivecd).HasColumnName("engactivecd");
            entity.Property(e => e.EngrEmpno).HasColumnName("engrEmpno");
            entity.Property(e => e.Entitydesc).HasColumnName("entitydesc");
            entity.Property(e => e.Entityno).HasColumnName("entityno");
            entity.Property(e => e.Entitytype).HasColumnName("entitytype");
            entity.Property(e => e.Finactivecd).HasColumnName("finactivecd");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.Industry).HasColumnName("industry");
            entity.Property(e => e.InternalOrg).HasColumnName("internal_org");
            entity.Property(e => e.LeadTime).HasColumnName("leadTime");
            entity.Property(e => e.Locationcd).HasColumnName("locationcd");
            entity.Property(e => e.Matrixcd).HasColumnName("matrixcd");
            entity.Property(e => e.OeOrderno).HasColumnName("oe_orderno");
            entity.Property(e => e.Opsmgr).HasColumnName("opsmgr");
            entity.Property(e => e.P2pid).HasColumnName("p2pid");
            entity.Property(e => e.Plactivecd).HasColumnName("plactivecd");
            entity.Property(e => e.PollstarArtistId).HasColumnName("PollstarArtistID");
            entity.Property(e => e.Probability).HasColumnName("probability");
            entity.Property(e => e.Propduedate).HasColumnName("propduedate");
            entity.Property(e => e.Proptype).HasColumnName("proptype");
            entity.Property(e => e.Readytopack).HasColumnName("readytopack");
            entity.Property(e => e.ReferralProgramId).HasColumnName("ReferralProgramID");
            entity.Property(e => e.Respempno).HasColumnName("respempno");
            entity.Property(e => e.Rfplempno).HasColumnName("RFPLEmpno");
            entity.Property(e => e.RootEntityno).HasColumnName("rootEntityno");
            entity.Property(e => e.SecondaryOpsEmpno).HasColumnName("secondaryOpsEmpno");
            entity.Property(e => e.Sfactivecd).HasColumnName("sfactivecd");
            entity.Property(e => e.Shipno).HasColumnName("shipno");
            entity.Property(e => e.Startdate).HasColumnName("startdate");
            entity.Property(e => e.Subcontract).HasColumnName("subcontract");
            entity.Property(e => e.Subno).HasColumnName("subno");
            entity.Property(e => e.TaxCode).HasColumnName("tax_code");
        });

        modelBuilder.Entity<BankAccount>(entity =>
        {
            entity.HasKey(e => e.BankAccountId).HasName("PK_CompanyBankAccount");

            entity.ToTable("BankAccount");

            entity.HasIndex(e => new { e.BillingCompany, e.Currency }, "IX_BillingCompany_Currency").IsUnique();

            entity.Property(e => e.BankAccountId)
                .ValueGeneratedNever()
                .HasColumnName("BankAccountID");
            entity.Property(e => e.AccountNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankAccountDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Bic)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BIC");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Iban)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IBAN");
            entity.Property(e => e.InvoiceText)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RoutingNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SortCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.SwiftCode)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.BillingCompanyNavigation).WithMany(p => p.BankAccounts)
                .HasForeignKey(d => d.BillingCompany)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BankAccount_Company");

            entity.HasOne(d => d.CurrencyNavigation).WithMany(p => p.BankAccounts)
                .HasForeignKey(d => d.Currency)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BankAccount_Currency");
        });

        modelBuilder.Entity<BankAccountArchive>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BankAccount_Archive");

            entity.Property(e => e.AccountNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankAccountDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.BankAccountId).HasColumnName("BankAccountID");
            entity.Property(e => e.Bic)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BIC");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Iban)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IBAN");
            entity.Property(e => e.InvoiceText)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RoutingNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SortCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.SwiftCode)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BarcodeNumbersChangedToday>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Barcode_Numbers_Changed_Today");

            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.EnterDateUtc).HasColumnName("EnterDateUTC");
            entity.Property(e => e.Entitydesc)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("entitydesc");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.NewBarcode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OldBarcode)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Partdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.Userid)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("userid");
        });

        modelBuilder.Entity<BatchTransferStaging>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BatchTransferStaging");

            entity.Property(e => e.FromBatchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("from_batchno");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.ToBatchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("to_batchno");
            entity.Property(e => e.ToBld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("to_bld");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");

            entity.HasOne(d => d.FromBatchnoNavigation).WithMany()
                .HasForeignKey(d => d.FromBatchno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BatchTransferStaging_glentities_from");

            entity.HasOne(d => d.PartnoNavigation).WithMany()
                .HasForeignKey(d => d.Partno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BatchTransferStaging_inpart");

            entity.HasOne(d => d.ToBatchnoNavigation).WithMany()
                .HasForeignKey(d => d.ToBatchno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BatchTransferStaging_glentities_to");
        });

        modelBuilder.Entity<BatchTransferStagingV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("BatchTransferStaging_v");

            entity.Property(e => e.FromBatchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("from_batchno");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.SessionId).HasColumnName("session_id");
            entity.Property(e => e.ToBatchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("to_batchno");
            entity.Property(e => e.ToBld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("to_bld");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<BidProjectChange>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.ChangeDate });

            entity.ToTable(tb => tb.HasTrigger("TR_BidProjectChanges_start_notification_timer"));

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.ChangeDate)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnType("datetime")
                .HasColumnName("changeDate");
            entity.Property(e => e.NewEngactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("new_engactivecd");
            entity.Property(e => e.NewProjectEnddate)
                .HasColumnType("datetime")
                .HasColumnName("new_project_enddate");
            entity.Property(e => e.NewProjectStartdate)
                .HasColumnType("datetime")
                .HasColumnName("new_project_startdate");
            entity.Property(e => e.OldEngactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("old_engactivecd");
            entity.Property(e => e.OldProjectEnddate)
                .HasColumnType("datetime")
                .HasColumnName("old_project_enddate");
            entity.Property(e => e.OldProjectStartdate)
                .HasColumnType("datetime")
                .HasColumnName("old_project_startdate");
            entity.Property(e => e.ProjectWarehouse)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("project_warehouse");
            entity.Property(e => e.Userid)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("userid");
        });

        modelBuilder.Entity<BidProjectCrewChange>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.Empno, e.ChangeDate });

            entity.ToTable(tb => tb.HasTrigger("TR_BidProjectCrewChanges_start_notification_timer"));

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Empno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.ChangeDate)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnType("datetime")
                .HasColumnName("changeDate");
            entity.Property(e => e.DisplayEndDate)
                .HasComputedColumnSql("(case when [project_enddate]<>[new_end_date] then [new_end_date]  end)", false)
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayStartDate)
                .HasComputedColumnSql("(case when [project_startdate]<>[new_start_date] then [new_start_date]  end)", false)
                .HasColumnType("datetime");
            entity.Property(e => e.Empname)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("empname");
            entity.Property(e => e.NewEndDate)
                .HasColumnType("datetime")
                .HasColumnName("new_end_date");
            entity.Property(e => e.NewEstHours).HasColumnName("new_est_hours");
            entity.Property(e => e.NewHoursPerDay).HasColumnName("new_HoursPerDay");
            entity.Property(e => e.NewJobType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("new_JobType");
            entity.Property(e => e.NewStartDate)
                .HasColumnType("datetime")
                .HasColumnName("new_start_date");
            entity.Property(e => e.NewStatusCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("new_StatusCode");
            entity.Property(e => e.OldEndDate)
                .HasColumnType("datetime")
                .HasColumnName("old_end_date");
            entity.Property(e => e.OldEstHours).HasColumnName("old_est_hours");
            entity.Property(e => e.OldHoursPerDay).HasColumnName("old_HoursPerDay");
            entity.Property(e => e.OldJobType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("old_JobType");
            entity.Property(e => e.OldStartDate)
                .HasColumnType("datetime")
                .HasColumnName("old_start_date");
            entity.Property(e => e.OldStatusCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("old_StatusCode");
            entity.Property(e => e.ProjectEnddate)
                .HasColumnType("datetime")
                .HasColumnName("project_enddate");
            entity.Property(e => e.ProjectStartdate)
                .HasColumnType("datetime")
                .HasColumnName("project_startdate");
            entity.Property(e => e.ProjectWarehouse)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("project_warehouse");
            entity.Property(e => e.Userid)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("userid");
        });

        modelBuilder.Entity<BidProjectJobChange>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.EmplineNo, e.ChangeDate });

            entity.ToTable(tb => tb.HasTrigger("TR_BidProjectJobChanges_start_notification_timer"));

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.EmplineNo)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("empline_no");
            entity.Property(e => e.ChangeDate)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnType("datetime")
                .HasColumnName("changeDate");
            entity.Property(e => e.DisplayEndDate)
                .HasComputedColumnSql("(case when [project_enddate]<>[new_end_date] then [new_end_date]  end)", false)
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayStartDate)
                .HasComputedColumnSql("(case when [project_startdate]<>[new_start_date] then [new_start_date]  end)", false)
                .HasColumnType("datetime");
            entity.Property(e => e.NewEndDate)
                .HasColumnType("datetime")
                .HasColumnName("new_end_date");
            entity.Property(e => e.NewEstHours).HasColumnName("new_est_hours");
            entity.Property(e => e.NewHoursPerDay).HasColumnName("new_HoursPerDay");
            entity.Property(e => e.NewJobType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("new_JobType");
            entity.Property(e => e.NewStartDate)
                .HasColumnType("datetime")
                .HasColumnName("new_start_date");
            entity.Property(e => e.NewStatusCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("new_StatusCode");
            entity.Property(e => e.OldEndDate)
                .HasColumnType("datetime")
                .HasColumnName("old_end_date");
            entity.Property(e => e.OldEstHours).HasColumnName("old_est_hours");
            entity.Property(e => e.OldJobType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("old_JobType");
            entity.Property(e => e.OldStartDate)
                .HasColumnType("datetime")
                .HasColumnName("old_start_date");
            entity.Property(e => e.ProjectEnddate)
                .HasColumnType("datetime")
                .HasColumnName("project_enddate");
            entity.Property(e => e.ProjectStartdate)
                .HasColumnType("datetime")
                .HasColumnName("project_startdate");
            entity.Property(e => e.ProjectWarehouse)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("project_warehouse");
            entity.Property(e => e.Userid)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("userid");
        });

        modelBuilder.Entity<BidProjectPartChange>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.Partno, e.ChangeDate });

            entity.ToTable(tb => tb.HasTrigger("TR_BidProjectPartChanges_start_notification_timer"));

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.ChangeDate)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnType("datetime")
                .HasColumnName("changeDate");
            entity.Property(e => e.DisplayEndDate)
                .HasComputedColumnSql("(case when [project_enddate]<>[new_end_date] then [new_end_date]  end)", false)
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayStartDate)
                .HasComputedColumnSql("(case when [project_startdate]<>[new_start_date] then [new_start_date]  end)", false)
                .HasColumnType("datetime");
            entity.Property(e => e.NewEndDate)
                .HasColumnType("datetime")
                .HasColumnName("new_end_date");
            entity.Property(e => e.NewQty).HasColumnName("new_qty");
            entity.Property(e => e.NewStartDate)
                .HasColumnType("datetime")
                .HasColumnName("new_start_date");
            entity.Property(e => e.OldEndDate)
                .HasColumnType("datetime")
                .HasColumnName("old_end_date");
            entity.Property(e => e.OldQty).HasColumnName("old_qty");
            entity.Property(e => e.OldStartDate)
                .HasColumnType("datetime")
                .HasColumnName("old_start_date");
            entity.Property(e => e.Partdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.ProjectEnddate)
                .HasColumnType("datetime")
                .HasColumnName("project_enddate");
            entity.Property(e => e.ProjectStartdate)
                .HasColumnType("datetime")
                .HasColumnName("project_startdate");
            entity.Property(e => e.ProjectWarehouse)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("project_warehouse");
            entity.Property(e => e.Userid)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("userid");
        });

        modelBuilder.Entity<BidProjectPartLatestChange>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Bid_Project_Part_Latest_Changes");

            entity.Property(e => e.Changedate)
                .HasColumnType("datetime")
                .HasColumnName("changedate");
            entity.Property(e => e.DisplayEndDate).HasColumnType("datetime");
            entity.Property(e => e.DisplayStartDate).HasColumnType("datetime");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.NewEndDate)
                .HasColumnType("datetime")
                .HasColumnName("new_end_date");
            entity.Property(e => e.NewQty).HasColumnName("new_qty");
            entity.Property(e => e.NewStartDate)
                .HasColumnType("datetime")
                .HasColumnName("new_start_date");
            entity.Property(e => e.OldEndDate)
                .HasColumnType("datetime")
                .HasColumnName("old_end_date");
            entity.Property(e => e.OldQty).HasColumnName("old_qty");
            entity.Property(e => e.OldStartDate)
                .HasColumnType("datetime")
                .HasColumnName("old_start_date");
            entity.Property(e => e.Partdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.ProjectWarehouse)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("project_warehouse");
            entity.Property(e => e.Userid)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("userid");
        });

        modelBuilder.Entity<BillingAccount>(entity =>
        {
            entity.HasKey(e => new { e.Companyno, e.Acctcd });

            entity.HasIndex(e => new { e.Companyno, e.FriendlyName }, "IX_FriendlyDesc").IsUnique();

            entity.Property(e => e.Companyno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("companyno");
            entity.Property(e => e.Acctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("acctcd");
            entity.Property(e => e.Expcd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("expcd");
            entity.Property(e => e.FriendlyName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IfsinterCompanyCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IFSInterCompanyCode");
            entity.Property(e => e.UseShowDatesInsteadOfRfidatesForRevrec).HasColumnName("UseShowDatesInsteadOfRFIDatesForREVREC");
            entity.Property(e => e.Visible).HasDefaultValue(true);

            entity.HasOne(d => d.AcctcdNavigation).WithMany(p => p.BillingAccounts)
                .HasPrincipalKey(p => p.Acctcd)
                .HasForeignKey(d => d.Acctcd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BillingAccounts_glaccounts");

            entity.HasOne(d => d.CompanynoNavigation).WithMany(p => p.BillingAccounts)
                .HasForeignKey(d => d.Companyno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BillingAccounts_Company");

            entity.HasOne(d => d.ExpcdNavigation).WithMany(p => p.BillingAccounts)
                .HasForeignKey(d => d.Expcd)
                .HasConstraintName("FK_BillingAccounts_apexpcode");
        });

        modelBuilder.Entity<BillingDaysBenchmark>(entity =>
        {
            entity.HasKey(e => new { e.Company, e.Daysused, e.Proptype });

            entity.ToTable("BillingDaysBenchmark");

            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("company");
            entity.Property(e => e.Daysused).HasColumnName("daysused");
            entity.Property(e => e.Proptype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("proptype");
            entity.Property(e => e.Daysbilled).HasColumnName("daysbilled");

            entity.HasOne(d => d.CompanyNavigation).WithMany(p => p.BillingDaysBenchmarks)
                .HasForeignKey(d => d.Company)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BillingDaysBenchmark_Company");
        });

        modelBuilder.Entity<Billingperioditem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("billingperioditems");

            entity.Property(e => e.AdjustedWeekly).HasColumnName("adjustedWeekly");
            entity.Property(e => e.BidEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bid_entityno");
            entity.Property(e => e.Billingdays).HasColumnName("billingdays");
            entity.Property(e => e.CrewEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("crew_entityno");
            entity.Property(e => e.CrewJobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("crew_jobtype");
            entity.Property(e => e.CrewSeqno).HasColumnName("crew_seqno");
            entity.Property(e => e.EndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.EquipmentEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("equipment_entityno");
            entity.Property(e => e.ExpenseEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("expense_entityno");
            entity.Property(e => e.ExpenseSeqno).HasColumnName("expense_seqno");
            entity.Property(e => e.ItemDesc)
                .HasMaxLength(1053)
                .IsUnicode(false)
                .HasColumnName("item_desc");
            entity.Property(e => e.Itemdays).HasColumnName("itemdays");
            entity.Property(e => e.Itemno).HasColumnName("itemno");
            entity.Property(e => e.PeriodDisplayOrder).HasColumnName("period_DisplayOrder");
            entity.Property(e => e.PeriodEnddate)
                .HasColumnType("smalldatetime")
                .HasColumnName("period_enddate");
            entity.Property(e => e.PeriodStartdate)
                .HasColumnType("smalldatetime")
                .HasColumnName("period_startdate");
            entity.Property(e => e.PeriodTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PeriodTotal).HasColumnName("period_total");
            entity.Property(e => e.Periodno).HasColumnName("periodno");
            entity.Property(e => e.Rate).HasColumnName("rate");
            entity.Property(e => e.StartDate).HasColumnType("smalldatetime");
        });

        modelBuilder.Entity<BillingperioditemsEquipment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("billingperioditems_equipment");

            entity.Property(e => e.BidEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bid_entityno");
            entity.Property(e => e.DaysBilled).HasColumnName("daysBilled");
            entity.Property(e => e.Entitydesc)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("entitydesc");
            entity.Property(e => e.EquipmentEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("equipment_entityno");
            entity.Property(e => e.EstUnitAmount)
                .HasColumnType("money")
                .HasColumnName("est_unit_amount");
            entity.Property(e => e.IdLanguage).HasColumnName("id_language");
            entity.Property(e => e.Isbold).HasColumnName("isbold");
            entity.Property(e => e.Markup).HasColumnName("markup");
            entity.Property(e => e.Notes)
                .HasMaxLength(250)
                .HasColumnName("notes");
            entity.Property(e => e.Partdesc)
                .HasMaxLength(4000)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.TotalAmount)
                .HasColumnType("money")
                .HasColumnName("total_amount");
        });

        modelBuilder.Entity<BillingperioditemsGroupsSummary>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("billingperioditems_groups_summary");

            entity.Property(e => e.BidEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bid_entityno");
            entity.Property(e => e.Enddate)
                .HasColumnType("smalldatetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Grouptype)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("grouptype");
            entity.Property(e => e.PeriodTotal).HasColumnName("period_total");
            entity.Property(e => e.Sortorder).HasColumnName("sortorder");
            entity.Property(e => e.Startdate)
                .HasColumnType("smalldatetime")
                .HasColumnName("startdate");
        });

        modelBuilder.Entity<BillingperioditemsSummary>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("billingperioditems_summary");

            entity.Property(e => e.AdjustedWeekly).HasColumnName("adjustedWeekly");
            entity.Property(e => e.BidEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bid_entityno");
            entity.Property(e => e.CrewEmplineNo).HasColumnName("crew_empline_no");
            entity.Property(e => e.CrewEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("crew_entityno");
            entity.Property(e => e.EquipmentEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("equipment_entityno");
            entity.Property(e => e.ExpenseEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("expense_entityno");
            entity.Property(e => e.ExpenseSeqno).HasColumnName("expense_seqno");
            entity.Property(e => e.ItemDesc)
                .HasMaxLength(1052)
                .IsUnicode(false)
                .HasColumnName("item_desc");
            entity.Property(e => e.PeriodTotal).HasColumnName("period_total");
            entity.Property(e => e.TotalDays).HasColumnName("total_days");
        });

        modelBuilder.Entity<BinWeightValue>(entity =>
        {
            entity.HasKey(e => new { e.BinWeightId, e.BinIndex });

            entity.ToTable("BinWeightValue", "SpeakerTest");

            entity.Property(e => e.BinWeightId).HasColumnName("BinWeightID");
            entity.Property(e => e.StandardDeviationPerBin).HasComputedColumnSql("((1)/[FactorFromBinVariation])", false);

            entity.HasOne(d => d.BinWeight).WithMany(p => p.BinWeightValues)
                .HasPrincipalKey(p => p.BinWeightId)
                .HasForeignKey(d => d.BinWeightId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<BrpDataImportPartTypeMatch>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Category).IsUnicode(false);
            entity.Property(e => e.Cost).HasColumnName("cost");
            entity.Property(e => e.Country).IsUnicode(false);
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.FCategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fCategory");
            entity.Property(e => e.FCountry)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("fCountry");
            entity.Property(e => e.FDesription)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("fDesription");
            entity.Property(e => e.FHeight).HasColumnName("fHeight");
            entity.Property(e => e.FLength).HasColumnName("fLength");
            entity.Property(e => e.FPartNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fPartNo");
            entity.Property(e => e.FValue).HasColumnName("fValue");
            entity.Property(e => e.FWeight).HasColumnName("fWeight");
            entity.Property(e => e.FWidth).HasColumnName("fWidth");
            entity.Property(e => e.GbpvalueBrp)
                .IsUnicode(false)
                .HasColumnName("GBPValueBRP");
            entity.Property(e => e.GbpvalueClair).HasColumnName("GBPValueClair");
            entity.Property(e => e.Height).HasColumnName("height");
            entity.Property(e => e.Length).HasColumnName("length");
            entity.Property(e => e.UsdvalueBrp).HasColumnName("USDValueBRP");
            entity.Property(e => e.UsdvalueClair).HasColumnName("USDValueClair");
            entity.Property(e => e.Weight).HasColumnName("weight");
            entity.Property(e => e.Width).HasColumnName("width");
        });

        modelBuilder.Entity<BudgetCategory>(entity =>
        {
            entity.HasKey(e => e.CategoryCode);

            entity.Property(e => e.CategoryCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CategoryDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Cabinet>(entity =>
        {
            entity.HasKey(e => e.Partno);

            entity.ToTable("Cabinet", "SpeakerTest");

            entity.HasIndex(e => e.ShortName, "UC_SpeakerTestCabinet_ShortName").IsUnique();

            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.DisplayColor)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ShortName)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SignalLevel)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Visualize).HasDefaultValue(true);

            entity.HasOne(d => d.PartnoNavigation).WithOne(p => p.Cabinet)
                .HasForeignKey<Cabinet>(d => d.Partno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Cabinet_inpart");

            entity.HasOne(d => d.SignalLevelNavigation).WithMany(p => p.Cabinets)
                .HasForeignKey(d => d.SignalLevel)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Cabinet_SignalLevel");

            entity.HasMany(d => d.Failures).WithMany(p => p.Partnos)
                .UsingEntity<Dictionary<string, object>>(
                    "CabinetFailure",
                    r => r.HasOne<Failure>().WithMany()
                        .HasForeignKey("FailureId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CabinetFailure_Failures"),
                    l => l.HasOne<Cabinet>().WithMany()
                        .HasForeignKey("Partno")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CabinetFailure_Cabinet"),
                    j =>
                    {
                        j.HasKey("Partno", "FailureId");
                        j.ToTable("CabinetFailure", "SpeakerTest");
                        j.IndexerProperty<string>("Partno")
                            .HasMaxLength(50)
                            .IsUnicode(false)
                            .HasColumnName("partno");
                        j.IndexerProperty<int>("FailureId").HasColumnName("FailureID");
                    });
        });

        modelBuilder.Entity<CabinetComponent>(entity =>
        {
            entity.HasKey(e => new { e.Partno, e.InputNumber });

            entity.ToTable("CabinetComponent", "SpeakerTest");

            entity.HasIndex(e => new { e.Partno, e.DisplayOrder }, "UC_SpeakerTestCabinetComponent_DisplayOrder").IsUnique();

            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Component)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DisplayDescription)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SignalLevel)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.ComponentNavigation).WithMany(p => p.CabinetComponents)
                .HasForeignKey(d => d.Component)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CabinetComponent_Component");

            entity.HasOne(d => d.PartnoNavigation).WithMany(p => p.CabinetComponents)
                .HasForeignKey(d => d.Partno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CabinetComponent_Cabinet");

            entity.HasOne(d => d.SignalLevelNavigation).WithMany(p => p.CabinetComponents)
                .HasForeignKey(d => d.SignalLevel)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CabinetComponentSpeakerLevel");

            entity.HasMany(d => d.Failures).WithMany(p => p.CabinetComponents)
                .UsingEntity<Dictionary<string, object>>(
                    "CabinetComponentFailure",
                    r => r.HasOne<Failure>().WithMany()
                        .HasForeignKey("FailureId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CabinetComponentFailures_Failures"),
                    l => l.HasOne<CabinetComponent>().WithMany()
                        .HasForeignKey("Partno", "InputNumber")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CabinetComponentFailure_CabinetComponent"),
                    j =>
                    {
                        j.HasKey("Partno", "InputNumber", "FailureId");
                        j.ToTable("CabinetComponentFailure", "SpeakerTest");
                        j.IndexerProperty<string>("Partno")
                            .HasMaxLength(50)
                            .IsUnicode(false)
                            .HasColumnName("partno");
                        j.IndexerProperty<int>("FailureId").HasColumnName("FailureID");
                    });
        });

        modelBuilder.Entity<CabinetComponentTestMeasurement>(entity =>
        {
            entity.HasKey(e => new { e.StackTestId, e.UniqueNo, e.InputNumber });

            entity.ToTable("CabinetComponentTestMeasurement", "SpeakerTest");

            entity.HasIndex(e => new { e.StackTestId, e.ResultCurveId }, "UC_CabinetComponentTestMeasurementUserEnteredFailure_StackTestCurve").IsUnique();

            entity.HasIndex(e => e.CurrentWavFilePath, "UC_CabinetComponentTestMeasurement_CurrentWavFilePath").IsUnique();

            entity.HasIndex(e => e.ResultCurveId, "UC_CabinetComponentTestMeasurement_CurveID").IsUnique();

            entity.HasIndex(e => e.VoltageWavFilePath, "UC_CabinetComponentTestMeasurement_VoltageWavFilePath").IsUnique();

            entity.Property(e => e.StackTestId).HasColumnName("StackTestID");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.BestMatchCurveId).HasColumnName("BestMatchCurveID");
            entity.Property(e => e.BestMatchMaxBadness).HasComputedColumnSql("(case when [BestMatchWholeCurveBadness]>=[BestMatchWorstBinBadness] then [BestMatchWholeCurveBadness] else coalesce([BestMatchWorstBinBadness],[BestMatchWholeCurveBadness],NULL) end)", false);
            entity.Property(e => e.CurrentWavFilePath)
                .HasMaxLength(260)
                .IsUnicode(false);
            entity.Property(e => e.FrequencyVectorId).HasColumnName("FrequencyVectorID");
            entity.Property(e => e.IsDisconnected).HasComputedColumnSql("(case when [MaxImpedanceMagnitude]>=(200) then (1) else (0) end)", false);
            entity.Property(e => e.IsPassed).HasComputedColumnSql("(case when case when [KnownGoodWholeCurveBadness]>=[KnownGoodWorstBinBadness] then [KnownGoodWholeCurveBadness] else coalesce([KnownGoodWorstBinBadness],[KnownGoodWholeCurveBadness],NULL) end<=(4) then (1) else (0) end)", false);
            entity.Property(e => e.IsUncertainResult).HasComputedColumnSql("(case when [MaxImpedanceMagnitude]<(200) AND case when [KnownGoodWholeCurveBadness]>=[KnownGoodWorstBinBadness] then [KnownGoodWholeCurveBadness] else coalesce([KnownGoodWorstBinBadness],[KnownGoodWholeCurveBadness],NULL) end>(4) AND case when [KnownGoodWholeCurveBadness]>=[KnownGoodWorstBinBadness] then [KnownGoodWholeCurveBadness] else coalesce([KnownGoodWorstBinBadness],[KnownGoodWholeCurveBadness],NULL) end<(7) then (1) else (0) end)", false);
            entity.Property(e => e.IsUnknownFailure).HasComputedColumnSql("(case when [MaxImpedanceMagnitude]<(200) AND case when [KnownGoodWholeCurveBadness]>=[KnownGoodWorstBinBadness] then [KnownGoodWholeCurveBadness] else coalesce([KnownGoodWorstBinBadness],[KnownGoodWholeCurveBadness],NULL) end>=(7) AND case when [BestMatchWholeCurveBadness]>=[BestMatchWorstBinBadness] then [BestMatchWholeCurveBadness] else coalesce([BestMatchWorstBinBadness],[BestMatchWholeCurveBadness],NULL) end>=(7) then (1) else (0) end)", false);
            entity.Property(e => e.KnownGoodMaxBadness).HasComputedColumnSql("(case when [KnownGoodWholeCurveBadness]>=[KnownGoodWorstBinBadness] then [KnownGoodWholeCurveBadness] else coalesce([KnownGoodWorstBinBadness],[KnownGoodWholeCurveBadness],NULL) end)", false);
            entity.Property(e => e.PolarityAbsoluteExtremaToRmsvalueRatio)
                .HasComputedColumnSql("(abs([PolarityAbsoluteExtremumValue]/[PolarityRMSValue]))", false)
                .HasColumnName("PolarityAbsoluteExtremaToRMSValueRatio");
            entity.Property(e => e.PolarityRelativeOpposingExtremaToAbsoluteExtremaRatio).HasComputedColumnSql("(abs([PolarityRelativeOpposingExtremumValue]/[PolarityAbsoluteExtremumValue]))", false);
            entity.Property(e => e.PolarityRmsvalue).HasColumnName("PolarityRMSValue");
            entity.Property(e => e.PolaritySign).HasComputedColumnSql("(sign([PolarityXCorrLeadingSpikeValue]))", false);
            entity.Property(e => e.PolarityWavFilePath)
                .HasMaxLength(260)
                .IsUnicode(false);
            entity.Property(e => e.PolarityXcorrLeadingSpikeIndex).HasColumnName("PolarityXCorrLeadingSpikeIndex");
            entity.Property(e => e.PolarityXcorrLeadingSpikeValue).HasColumnName("PolarityXCorrLeadingSpikeValue");
            entity.Property(e => e.Purpose)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.ResultCurveId).HasColumnName("ResultCurveID");
            entity.Property(e => e.Test)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserCabinetNote)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UserComponentNote)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.VoltageNdiffFractionOfIdeal).HasColumnName("VoltageNDiffFractionOfIdeal");
            entity.Property(e => e.VoltageWavFilePath)
                .HasMaxLength(260)
                .IsUnicode(false);
            entity.Property(e => e.VoltageXcorrAbsoluteExtremum).HasColumnName("VoltageXCorrAbsoluteExtremum");

            entity.HasOne(d => d.FrequencyVector).WithMany(p => p.CabinetComponentTestMeasurements)
                .HasForeignKey(d => d.FrequencyVectorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CabinetComponentTestMeasurement_FrequencyVectorID");

            entity.HasOne(d => d.PurposeNavigation).WithMany(p => p.CabinetComponentTestMeasurements)
                .HasForeignKey(d => d.Purpose)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CabinetComponentTestMeasurementPurpose_MeasurementPurpose");

            entity.HasOne(d => d.ResultCurve).WithOne(p => p.CabinetComponentTestMeasurement)
                .HasForeignKey<CabinetComponentTestMeasurement>(d => d.ResultCurveId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CabinetComponentTestMeasurement_ResultCurveID");

            entity.HasOne(d => d.TestNavigation).WithMany(p => p.CabinetComponentTestMeasurements)
                .HasForeignKey(d => d.Test)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CabinetComponentTestMeasurement_Test");

            entity.HasOne(d => d.StackTestDevice).WithMany(p => p.CabinetComponentTestMeasurements)
                .HasForeignKey(d => new { d.StackTestId, d.UniqueNo })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CabinetComponentTestMeasurement_StackTestDevice");
        });

        modelBuilder.Entity<CabinetComponentTestMeasurementBulkSave>(entity =>
        {
            entity.HasKey(e => new { e.SessionId, e.UniqueNo, e.InputNumber });

            entity.ToTable("CabinetComponentTestMeasurementBulkSave", "SpeakerTest");

            entity.HasIndex(e => new { e.SessionId, e.ResultCurveFakeId }, "UC_CabinetComponentTestMeasurementBulkSave_Curve").IsUnique();

            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.BestMatchCurveId).HasColumnName("BestMatchCurveID");
            entity.Property(e => e.Configuration)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CurrentWavFilePath)
                .HasMaxLength(260)
                .IsUnicode(false);
            entity.Property(e => e.FrequencyVectorId).HasColumnName("FrequencyVectorID");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.PolarityRmsvalue).HasColumnName("PolarityRMSValue");
            entity.Property(e => e.PolarityWavFilePath)
                .HasMaxLength(260)
                .IsUnicode(false);
            entity.Property(e => e.PolarityXcorrLeadingSpikeIndex).HasColumnName("PolarityXCorrLeadingSpikeIndex");
            entity.Property(e => e.PolarityXcorrLeadingSpikeValue).HasColumnName("PolarityXCorrLeadingSpikeValue");
            entity.Property(e => e.Purpose)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.ResultCurveFakeId).HasColumnName("ResultCurveFakeID");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.Test)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserCabinetNote)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UserComponentNote)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.VoltageNdiffFractionOfIdeal).HasColumnName("VoltageNDiffFractionOfIdeal");
            entity.Property(e => e.VoltageWavFilePath)
                .HasMaxLength(260)
                .IsUnicode(false);
            entity.Property(e => e.VoltageXcorrAbsoluteExtremum).HasColumnName("VoltageXCorrAbsoluteExtremum");
        });

        modelBuilder.Entity<CabinetComponentTestMeasurementUserEnteredFailure>(entity =>
        {
            entity.HasKey(e => new { e.StackTestId, e.UniqueNo, e.InputNumber });

            entity.ToTable("CabinetComponentTestMeasurementUserEnteredFailure", "SpeakerTest");

            entity.Property(e => e.StackTestId).HasColumnName("StackTestID");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FailureDescription)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.CabinetComponentTestMeasurement).WithOne(p => p.CabinetComponentTestMeasurementUserEnteredFailure)
                .HasForeignKey<CabinetComponentTestMeasurementUserEnteredFailure>(d => new { d.StackTestId, d.UniqueNo, d.InputNumber })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CabinetComponentTestMeasurementUserEnteredFailure_CabinetComponentTestMeasurement");
        });

        modelBuilder.Entity<CabinetComponentTestMeasurementUserEnteredFailureBulkSave>(entity =>
        {
            entity.HasKey(e => new { e.SessionId, e.CurveFakeId });

            entity.ToTable("CabinetComponentTestMeasurementUserEnteredFailureBulkSave", "SpeakerTest");

            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.CurveFakeId).HasColumnName("CurveFakeID");
            entity.Property(e => e.FailureDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<CabinetConfiguration>(entity =>
        {
            entity.HasKey(e => new { e.Partno, e.Configuration });

            entity.ToTable("CabinetConfiguration", "SpeakerTest");

            entity.HasIndex(e => new { e.Partno, e.DisplayOrder }, "UC_SpeakerTestCabinetConfiguration_DisplayOrder").IsUnique();

            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Configuration)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.PartnoNavigation).WithMany(p => p.CabinetConfigurations)
                .HasForeignKey(d => d.Partno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CabinetConfiguration_Cabinet");
        });

        modelBuilder.Entity<CabinetInput>(entity =>
        {
            entity.HasKey(e => e.CabinetInputNumber).HasName("PK_SpeakerTestCabinetInput");

            entity.ToTable("CabinetInput", "SpeakerTest");

            entity.Property(e => e.CabinetInputNumber).ValueGeneratedNever();
        });

        modelBuilder.Entity<CabinetNumber>(entity =>
        {
            entity.HasKey(e => e.CabinetNumber1).HasName("PK_SpeakerTestCabinetNumber");

            entity.ToTable("CabinetNumber", "SpeakerTest");

            entity.Property(e => e.CabinetNumber1)
                .ValueGeneratedNever()
                .HasColumnName("CabinetNumber");
        });

        modelBuilder.Entity<CabinetPosition>(entity =>
        {
            entity.HasKey(e => e.CabinetPosition1);

            entity.ToTable("CabinetPosition", "SpeakerTest");

            entity.Property(e => e.CabinetPosition1)
                .ValueGeneratedNever()
                .HasColumnName("CabinetPosition");
        });

        modelBuilder.Entity<CabinetTestMeasurementUserEnteredFailure>(entity =>
        {
            entity.HasKey(e => new { e.StackTestId, e.UniqueNo });

            entity.ToTable("CabinetTestMeasurementUserEnteredFailure", "SpeakerTest");

            entity.HasIndex(e => new { e.StackTestId, e.UniqueNo }, "UC_CabinetTestMeasurementUserEnteredFailure_StackTestCabinet").IsUnique();

            entity.Property(e => e.StackTestId).HasColumnName("StackTestID");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FailureDescription)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.StackTest).WithMany(p => p.CabinetTestMeasurementUserEnteredFailures)
                .HasForeignKey(d => d.StackTestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CabinetTestMeasurementUserEnteredFailure_CurveID");
        });

        modelBuilder.Entity<CabinetTestMeasurementUserEnteredFailureBulkSave>(entity =>
        {
            entity.HasKey(e => new { e.SessionId, e.UniqueNo });

            entity.ToTable("CabinetTestMeasurementUserEnteredFailureBulkSave", "SpeakerTest");

            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.FailureDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Category>(entity =>
        {
            entity.Property(e => e.CategoryId)
                .ValueGeneratedNever()
                .HasColumnName("CategoryID");
            entity.Property(e => e.Active).HasDefaultValue(true);
            entity.Property(e => e.CategoryNameId).HasColumnName("CategoryNameID");
            entity.Property(e => e.CreatedBy).IsUnicode(false);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.LastModifiedBy).IsUnicode(false);
            entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.ParentCategoryId).HasColumnName("ParentCategoryID");
            entity.Property(e => e.SubGroupId).HasColumnName("SubGroupID");

            entity.HasOne(d => d.CategoryName).WithMany(p => p.Categories)
                .HasForeignKey(d => d.CategoryNameId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Categories_CategoryNames");

            entity.HasOne(d => d.CategoryGroup).WithMany(p => p.Categories)
                .HasForeignKey(d => new { d.GroupId, d.SubGroupId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Categories_CategoryGroups");
        });

        modelBuilder.Entity<CategoryGroup>(entity =>
        {
            entity.HasKey(e => new { e.GroupId, e.SubGroupId });

            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.SubGroupId).HasColumnName("SubGroupID");
            entity.Property(e => e.Active).HasDefaultValue(true);
            entity.Property(e => e.CreatedBy).IsUnicode(false);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.GroupName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.LastModifiedBy).IsUnicode(false);
            entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<CategoryName>(entity =>
        {
            entity.Property(e => e.CategoryNameId)
                .ValueGeneratedNever()
                .HasColumnName("CategoryNameID");
            entity.Property(e => e.Active).HasDefaultValue(true);
            entity.Property(e => e.CategoryName1)
                .IsUnicode(false)
                .HasColumnName("CategoryName");
            entity.Property(e => e.ColumnNameIdtemp).HasColumnName("ColumnNameIDTemp");
            entity.Property(e => e.CreatedBy).IsUnicode(false);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LastModifiedBy).IsUnicode(false);
            entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<CategoryPart>(entity =>
        {
            entity.Property(e => e.CategoryPartId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("CategoryPartID");
            entity.Property(e => e.Active).HasDefaultValue(true);
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.CreatedBy).IsUnicode(false);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LastModifiedBy).IsUnicode(false);
            entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.PartNo)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Category).WithMany(p => p.CategoryParts)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CategoryParts_Temp_Categories");
        });

        modelBuilder.Entity<ChildPartsNotOnPartsList>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Child_Parts_Not_On_Parts_List");

            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.ChildPartDesc)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.ChildPartNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ParentPartDesc)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.ParentPartNo)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ClairNewinpart>(entity =>
        {
            entity.HasKey(e => new { e.Partno, e.Partrev, e.Partentityno }).HasName("PK_ClairNewInpart");

            entity.ToTable("ClairNewinpart");

            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("partno");
            entity.Property(e => e.Partrev)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("partrev");
            entity.Property(e => e.Partentityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("partentityno");
            entity.Property(e => e.Acctno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("acctno");
            entity.Property(e => e.Accttype)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("accttype");
            entity.Property(e => e.Accumlt).HasColumnName("accumlt");
            entity.Property(e => e.Actcutoff).HasColumnName("actcutoff");
            entity.Property(e => e.Allocated).HasColumnName("allocated");
            entity.Property(e => e.Backorder).HasColumnName("backorder");
            entity.Property(e => e.Begperonhand).HasColumnName("begperonhand");
            entity.Property(e => e.Bomind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bomind");
            entity.Property(e => e.Carrying).HasColumnName("carrying");
            entity.Property(e => e.Chglevel)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("chglevel");
            entity.Property(e => e.Chgno)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("chgno");
            entity.Property(e => e.Class)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("class");
            entity.Property(e => e.ClassifyCd)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("classify_cd");
            entity.Property(e => e.Commmodity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("commmodity");
            entity.Property(e => e.Commodity1)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("commodity1");
            entity.Property(e => e.Commodity2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("commodity2");
            entity.Property(e => e.Countamt).HasColumnName("countamt");
            entity.Property(e => e.Cstacctno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("cstacctno");
            entity.Property(e => e.Cstaccttp)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("cstaccttp");
            entity.Property(e => e.Custapproval)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("custapproval");
            entity.Property(e => e.Custsubmit)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("custsubmit");
            entity.Property(e => e.Cyclecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("cyclecd");
            entity.Property(e => e.Cycleper).HasColumnName("cycleper");
            entity.Property(e => e.DepthUom)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("depth_uom");
            entity.Property(e => e.DmsRating)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dms_rating");
            entity.Property(e => e.DrawInd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("draw_ind");
            entity.Property(e => e.Drawref)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("drawref");
            entity.Property(e => e.Drawsize)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("drawsize");
            entity.Property(e => e.Eoqcategory)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("eoqcategory");
            entity.Property(e => e.Estpriceflag)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("estpriceflag");
            entity.Property(e => e.FedStockNo)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fed_stock_no");
            entity.Property(e => e.Freeze)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("freeze");
            entity.Property(e => e.FreezeCosts)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("N")
                .IsFixedLength();
            entity.Property(e => e.FscmCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fscm_code");
            entity.Property(e => e.Grossprojfac).HasColumnName("grossprojfac");
            entity.Property(e => e.Grossprojind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("grossprojind");
            entity.Property(e => e.Inqc).HasColumnName("inqc");
            entity.Property(e => e.Invactdate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("invactdate");
            entity.Property(e => e.Kanbanboard).HasColumnName("kanbanboard");
            entity.Property(e => e.Kanbanloc)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kanbanloc");
            entity.Property(e => e.Kanbanprevloc)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kanbanprevloc");
            entity.Property(e => e.Kanbanuom)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("kanbanuom");
            entity.Property(e => e.Lastactivity)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("lastactivity");
            entity.Property(e => e.Lastcount)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("lastcount");
            entity.Property(e => e.Lastcountvar).HasColumnName("lastcountvar");
            entity.Property(e => e.LeadSource)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("lead_source");
            entity.Property(e => e.LengthUom)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("length_uom");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("locationcd");
            entity.Property(e => e.LotTrackCd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("lot_track_cd");
            entity.Property(e => e.Lotsize).HasColumnName("lotsize");
            entity.Property(e => e.LowLevel).HasColumnName("low_level");
            entity.Property(e => e.Lvl1)
                .HasComputedColumnSql("((((([lvlmatcost1]+[lvllabcost1])+[lvloutside1])+[lvloh1cost1])+[lvloh2cost1])+[lvlacq1])", false)
                .HasColumnName("lvl1");
            entity.Property(e => e.Lvl2)
                .HasComputedColumnSql("((((([lvlmatcost2]+[lvllabcost2])+[lvloutside2])+[lvloh1cost2])+[lvloh2cost2])+[lvlacq2])", false)
                .HasColumnName("lvl2");
            entity.Property(e => e.Lvl3)
                .HasComputedColumnSql("((((([lvlmatcost3]+[lvllabcost3])+[lvloutside3])+[lvloh1cost3])+[lvloh2cost3])+[lvlacq3])", false)
                .HasColumnName("lvl3");
            entity.Property(e => e.Lvl4)
                .HasComputedColumnSql("((((([lvlmatcost4]+[lvllabcost4])+[lvloutside4])+[lvloh1cost4])+[lvloh2cost4])+[lvlacq4])", false)
                .HasColumnName("lvl4");
            entity.Property(e => e.Lvlacq1).HasColumnName("lvlacq1");
            entity.Property(e => e.Lvlacq2).HasColumnName("lvlacq2");
            entity.Property(e => e.Lvlacq3).HasColumnName("lvlacq3");
            entity.Property(e => e.Lvlacq4).HasColumnName("lvlacq4");
            entity.Property(e => e.Lvllabcost1).HasColumnName("lvllabcost1");
            entity.Property(e => e.Lvllabcost2).HasColumnName("lvllabcost2");
            entity.Property(e => e.Lvllabcost3).HasColumnName("lvllabcost3");
            entity.Property(e => e.Lvllabcost4).HasColumnName("lvllabcost4");
            entity.Property(e => e.Lvlmatcost1).HasColumnName("lvlmatcost1");
            entity.Property(e => e.Lvlmatcost2).HasColumnName("lvlmatcost2");
            entity.Property(e => e.Lvlmatcost3).HasColumnName("lvlmatcost3");
            entity.Property(e => e.Lvlmatcost4).HasColumnName("lvlmatcost4");
            entity.Property(e => e.Lvloh1cost1).HasColumnName("lvloh1cost1");
            entity.Property(e => e.Lvloh1cost2).HasColumnName("lvloh1cost2");
            entity.Property(e => e.Lvloh1cost3).HasColumnName("lvloh1cost3");
            entity.Property(e => e.Lvloh1cost4).HasColumnName("lvloh1cost4");
            entity.Property(e => e.Lvloh2cost1).HasColumnName("lvloh2cost1");
            entity.Property(e => e.Lvloh2cost2).HasColumnName("lvloh2cost2");
            entity.Property(e => e.Lvloh2cost3).HasColumnName("lvloh2cost3");
            entity.Property(e => e.Lvloh2cost4).HasColumnName("lvloh2cost4");
            entity.Property(e => e.Lvloutside1).HasColumnName("lvloutside1");
            entity.Property(e => e.Lvloutside2).HasColumnName("lvloutside2");
            entity.Property(e => e.Lvloutside3).HasColumnName("lvloutside3");
            entity.Property(e => e.Lvloutside4).HasColumnName("lvloutside4");
            entity.Property(e => e.Lyradj).HasColumnName("lyradj");
            entity.Property(e => e.Lyrbackorder).HasColumnName("lyrbackorder");
            entity.Property(e => e.Lyrdemands).HasColumnName("lyrdemands");
            entity.Property(e => e.Lyrissue).HasColumnName("lyrissue");
            entity.Property(e => e.Lyrrec).HasColumnName("lyrrec");
            entity.Property(e => e.Lyservice).HasColumnName("lyservice");
            entity.Property(e => e.MaterialDesc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("material_desc");
            entity.Property(e => e.MaterialSpecs)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("material_specs");
            entity.Property(e => e.Maxdays).HasColumnName("maxdays");
            entity.Property(e => e.Maxorder).HasColumnName("maxorder");
            entity.Property(e => e.Mfglt).HasColumnName("mfglt");
            entity.Property(e => e.Minorder).HasColumnName("minorder");
            entity.Property(e => e.Movequeue).HasColumnName("movequeue");
            entity.Property(e => e.Mrpdate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("mrpdate");
            entity.Property(e => e.Msds)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("msds");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Mtdadj).HasColumnName("mtdadj");
            entity.Property(e => e.Mtdbackorder).HasColumnName("mtdbackorder");
            entity.Property(e => e.Mtddemands).HasColumnName("mtddemands");
            entity.Property(e => e.Mtdissue).HasColumnName("mtdissue");
            entity.Property(e => e.Mtdrec).HasColumnName("mtdrec");
            entity.Property(e => e.Multorder).HasColumnName("multorder");
            entity.Property(e => e.Needcompletionreport)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("N")
                .HasColumnName("needcompletionreport");
            entity.Property(e => e.Needkanbancard)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("N")
                .HasColumnName("needkanbancard");
            entity.Property(e => e.Nextcount)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("nextcount");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.Ordercust).HasColumnName("ordercust");
            entity.Property(e => e.Ordermfg).HasColumnName("ordermfg");
            entity.Property(e => e.Orderpoint).HasColumnName("orderpoint");
            entity.Property(e => e.Orderpolcd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("orderpolcd");
            entity.Property(e => e.Orderpurch).HasColumnName("orderpurch");
            entity.Property(e => e.Orderreqstn).HasColumnName("orderreqstn");
            entity.Property(e => e.Ordersched).HasColumnName("ordersched");
            entity.Property(e => e.Ordersize).HasColumnName("ordersize");
            entity.Property(e => e.Package)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("package");
            entity.Property(e => e.Partdesc)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("partdesc");
            entity.Property(e => e.Planned).HasColumnName("planned");
            entity.Property(e => e.Planner)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("planner");
            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("primekey");
            entity.Property(e => e.Prodplangrp)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("prodplangrp");
            entity.Property(e => e.Profile)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("profile");
            entity.Property(e => e.Projpercent).HasColumnName("projpercent");
            entity.Property(e => e.Purchaselt).HasColumnName("purchaselt");
            entity.Property(e => e.Purchaseuom)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("purchaseuom");
            entity.Property(e => e.Qcacctno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("qcacctno");
            entity.Property(e => e.Qcaccttp)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("qcaccttp");
            entity.Property(e => e.Ref1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref1");
            entity.Property(e => e.Ref2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref2");
            entity.Property(e => e.Ref3)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref3");
            entity.Property(e => e.Ref4)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref4");
            entity.Property(e => e.Rejected).HasColumnName("rejected");
            entity.Property(e => e.Reserved).HasColumnName("reserved");
            entity.Property(e => e.Resistance).HasColumnName("resistance");
            entity.Property(e => e.Rtgind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("rtgind");
            entity.Property(e => e.Runtime).HasColumnName("runtime");
            entity.Property(e => e.Safetystk).HasColumnName("safetystk");
            entity.Property(e => e.ScrapValue).HasColumnName("scrap_value");
            entity.Property(e => e.Scrapped).HasColumnName("scrapped");
            entity.Property(e => e.SecureClass)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("secure_class");
            entity.Property(e => e.SerialFlag)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("serial_flag");
            entity.Property(e => e.Setupcost).HasColumnName("setupcost");
            entity.Property(e => e.Setuptime).HasColumnName("setuptime");
            entity.Property(e => e.Shortqty).HasColumnName("shortqty");
            entity.Property(e => e.Shrinkage).HasColumnName("shrinkage");
            entity.Property(e => e.Source)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("source");
            entity.Property(e => e.Stndorderqty).HasColumnName("stndorderqty");
            entity.Property(e => e.StockSize)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("stock_size");
            entity.Property(e => e.Supersededby)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("supersededby");
            entity.Property(e => e.Supersedes)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("supersedes");
            entity.Property(e => e.Toolfunction)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("toolfunction");
            entity.Property(e => e.Tot1)
                .HasComputedColumnSql("((((([totmatcost1]+[totlabcost1])+[totoutside1])+[totoh1cost1])+[totoh2cost1])+[totacq1])", false)
                .HasColumnName("tot1");
            entity.Property(e => e.Tot2)
                .HasComputedColumnSql("((((([totmatcost2]+[totlabcost2])+[totoutside2])+[totoh1cost2])+[totoh2cost2])+[totacq2])", false)
                .HasColumnName("tot2");
            entity.Property(e => e.Tot3)
                .HasComputedColumnSql("((((([totmatcost3]+[totlabcost3])+[totoutside3])+[totoh1cost3])+[totoh2cost3])+[totacq3])", false)
                .HasColumnName("tot3");
            entity.Property(e => e.Tot4)
                .HasComputedColumnSql("((((([totmatcost4]+[totlabcost4])+[totoutside4])+[totoh1cost4])+[totoh2cost4])+[totacq4])", false)
                .HasColumnName("tot4");
            entity.Property(e => e.Totacq1).HasColumnName("totacq1");
            entity.Property(e => e.Totacq2).HasColumnName("totacq2");
            entity.Property(e => e.Totacq3).HasColumnName("totacq3");
            entity.Property(e => e.Totacq4).HasColumnName("totacq4");
            entity.Property(e => e.Totlabcost1).HasColumnName("totlabcost1");
            entity.Property(e => e.Totlabcost2).HasColumnName("totlabcost2");
            entity.Property(e => e.Totlabcost3).HasColumnName("totlabcost3");
            entity.Property(e => e.Totlabcost4).HasColumnName("totlabcost4");
            entity.Property(e => e.Totmatcost1).HasColumnName("totmatcost1");
            entity.Property(e => e.Totmatcost2).HasColumnName("totmatcost2");
            entity.Property(e => e.Totmatcost3).HasColumnName("totmatcost3");
            entity.Property(e => e.Totmatcost4).HasColumnName("totmatcost4");
            entity.Property(e => e.Totoh1cost1).HasColumnName("totoh1cost1");
            entity.Property(e => e.Totoh1cost2).HasColumnName("totoh1cost2");
            entity.Property(e => e.Totoh1cost3).HasColumnName("totoh1cost3");
            entity.Property(e => e.Totoh1cost4).HasColumnName("totoh1cost4");
            entity.Property(e => e.Totoh2cost1).HasColumnName("totoh2cost1");
            entity.Property(e => e.Totoh2cost2).HasColumnName("totoh2cost2");
            entity.Property(e => e.Totoh2cost3).HasColumnName("totoh2cost3");
            entity.Property(e => e.Totoh2cost4).HasColumnName("totoh2cost4");
            entity.Property(e => e.Totoutside1).HasColumnName("totoutside1");
            entity.Property(e => e.Totoutside2).HasColumnName("totoutside2");
            entity.Property(e => e.Totoutside3).HasColumnName("totoutside3");
            entity.Property(e => e.Totoutside4).HasColumnName("totoutside4");
            entity.Property(e => e.Tradename)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tradename");
            entity.Property(e => e.Tripdate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("tripdate");
            entity.Property(e => e.Type)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("type");
            entity.Property(e => e.Unitprice).HasColumnName("unitprice");
            entity.Property(e => e.Uom)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("uom");
            entity.Property(e => e.WidthUom)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("width_uom");
            entity.Property(e => e.Ytdadj).HasColumnName("ytdadj");
            entity.Property(e => e.Ytdbackorder).HasColumnName("ytdbackorder");
            entity.Property(e => e.Ytddemands).HasColumnName("ytddemands");
            entity.Property(e => e.Ytdissues).HasColumnName("ytdissues");
            entity.Property(e => e.Ytdrec).HasColumnName("ytdrec");
        });

        modelBuilder.Entity<ClairTourTaxCodesToSyproTaxCodesMapping>(entity =>
        {
            entity.HasKey(e => new { e.CompanyCode, e.TaxTypeKey, e.TaxCode }).HasName("ClairTourTaxCodesToBRPSyproTaxCodesMapping_PK");

            entity.ToTable("ClairTourTaxCodesToSyproTaxCodesMapping");

            entity.Property(e => e.CompanyCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TaxTypeKey)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TaxCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.CompanyCodeNavigation).WithMany(p => p.ClairTourTaxCodesToSyproTaxCodesMappings)
                .HasForeignKey(d => d.CompanyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClairTourTaxCodesToBRPSyproTaxCodesMapping_Company");

            entity.HasOne(d => d.TaxTypeKeyNavigation).WithMany(p => p.ClairTourTaxCodesToSyproTaxCodesMappings)
                .HasForeignKey(d => d.TaxTypeKey)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClairTourTaxCodesToBRPSyproTaxCodesMapping_InvoicingTaxType");
        });

        modelBuilder.Entity<CleanSolutionsCustomer>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Btaddr1)
                .HasMaxLength(50)
                .HasColumnName("BTAddr1");
            entity.Property(e => e.Btaddr2)
                .HasMaxLength(50)
                .HasColumnName("BTAddr2");
            entity.Property(e => e.Btcity)
                .HasMaxLength(50)
                .HasColumnName("BTCity");
            entity.Property(e => e.Btstate)
                .HasMaxLength(50)
                .HasColumnName("BTState");
            entity.Property(e => e.Btzip)
                .HasMaxLength(50)
                .HasColumnName("BTZip");
            entity.Property(e => e.Customer).HasMaxLength(50);
            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.Phone).HasMaxLength(50);
            entity.Property(e => e.Staddr1)
                .HasMaxLength(50)
                .HasColumnName("STAddr1");
            entity.Property(e => e.Staddr2)
                .HasMaxLength(50)
                .HasColumnName("STAddr2");
            entity.Property(e => e.Stcity)
                .HasMaxLength(50)
                .HasColumnName("STCity");
            entity.Property(e => e.Ststate)
                .HasMaxLength(50)
                .HasColumnName("STState");
            entity.Property(e => e.Stzip)
                .HasMaxLength(50)
                .HasColumnName("STZip");
        });

        modelBuilder.Entity<CloudFileStoragGroupsToCoreTeam>(entity =>
        {
            entity.HasKey(e => new { e.IdLevel, e.CoreTeamMemberDesc });

            entity.ToTable("CloudFileStoragGroupsToCoreTeam");

            entity.Property(e => e.IdLevel).HasColumnName("id_Level");
            entity.Property(e => e.CoreTeamMemberDesc)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.IdLevelNavigation).WithMany(p => p.CloudFileStoragGroupsToCoreTeams)
                .HasForeignKey(d => d.IdLevel)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CloudFileStoragGroupsToCoreTeam_CloudFileStorageGroups");
        });

        modelBuilder.Entity<CloudFileStorageFileRenameRequest>(entity =>
        {
            entity.HasKey(e => new { e.NewFileName, e.Entityno, e.UserFolderPath });

            entity.Property(e => e.NewFileName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.UserFolderPath)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.IsUpdated).HasColumnName("isUpdated");
            entity.Property(e => e.OldFileName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UpdateTimeUtc)
                .HasDefaultValueSql("(sysdatetime())")
                .HasColumnName("updateTimeUTC");
        });

        modelBuilder.Entity<CloudFileStorageFolderRenameRequest>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.NewUserFolderPath });

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.NewUserFolderPath)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.IsUpdated).HasColumnName("isUpdated");
            entity.Property(e => e.OldUserFolderPath)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UpdateTimeUtc)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnName("updateTimeUTC");

            entity.HasOne(d => d.EntitynoNavigation).WithMany(p => p.CloudFileStorageFolderRenameRequests)
                .HasForeignKey(d => d.Entityno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CloudFileStorageFolderRenameRequests_glentities");
        });

        modelBuilder.Entity<CloudFileStorageGroup>(entity =>
        {
            entity.HasKey(e => e.IdLevel);

            entity.Property(e => e.IdLevel).HasColumnName("id_Level");
            entity.Property(e => e.LevelDescription)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Level Description");
        });

        modelBuilder.Entity<CloudFileStoragePermissionFolderTemplate>(entity =>
        {
            entity.HasKey(e => e.CloudFolderTemplate);

            entity.ToTable("CloudFileStoragePermissionFolderTemplate");

            entity.Property(e => e.CloudFolderTemplate)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DropboxFilePathSuffix)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasMany(d => d.IdLevels).WithMany(p => p.CloudFolderTemplates)
                .UsingEntity<Dictionary<string, object>>(
                    "CloudFileStorageGroupsToPermissionFolder",
                    r => r.HasOne<CloudFileStorageGroup>().WithMany()
                        .HasForeignKey("IdLevel")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CloudFileStorageGroupsToPermissionFolders_CloudFileStorageGroups"),
                    l => l.HasOne<CloudFileStoragePermissionFolderTemplate>().WithMany()
                        .HasForeignKey("CloudFolderTemplate")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CloudFileStorageGroupsToPermissionFolders_CloudFileStoragePermissionFolderTemplate"),
                    j =>
                    {
                        j.HasKey("CloudFolderTemplate", "IdLevel");
                        j.ToTable("CloudFileStorageGroupsToPermissionFolders");
                        j.IndexerProperty<string>("CloudFolderTemplate")
                            .HasMaxLength(50)
                            .IsUnicode(false);
                        j.IndexerProperty<int>("IdLevel").HasColumnName("id_Level");
                    });
        });

        modelBuilder.Entity<CloudFileStorageShareRequest>(entity =>
        {
            entity.HasKey(e => new { e.Email, e.CloudFolderTemplate, e.Entityno });

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("d_AuditCloudFileStorageShareRequests");
                    tb.HasTrigger("i_AuditCloudFileStorageShareRequests");
                });

            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.CloudFolderTemplate)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.AddFolderMemberTime)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnName("addFolderMemberTime");
            entity.Property(e => e.AttachmentCategory)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.IsAddFolderMember).HasColumnName("isAddFolderMember");
            entity.Property(e => e.IsEgnyteShare).HasColumnName("isEgnyteShare");
            entity.Property(e => e.IsExecuted).HasColumnName("isExecuted");
            entity.Property(e => e.IsRemoveFolderMember).HasColumnName("isRemoveFolderMember");
            entity.Property(e => e.Note)
                .IsUnicode(false)
                .HasColumnName("note");
            entity.Property(e => e.RemoveFolderMemberTime)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("removeFolderMemberTime");
            entity.Property(e => e.UserFolderPath)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");

            entity.HasOne(d => d.CloudFolderTemplateNavigation).WithMany(p => p.CloudFileStorageShareRequests)
                .HasForeignKey(d => d.CloudFolderTemplate)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CloudFileStorageShareRequests_CloudFileStoragePermissionFolderTemplate");

            entity.HasOne(d => d.EntitynoNavigation).WithMany(p => p.CloudFileStorageShareRequests)
                .HasForeignKey(d => d.Entityno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CloudFileStorageShareRequests_glentities");
        });

        modelBuilder.Entity<CloudFileStorageShareRequestsA>(entity =>
        {
            entity.HasKey(e => e.AtransactionId).IsClustered(false);

            entity.ToTable("CloudFileStorageShareRequestsA");

            entity.Property(e => e.AtransactionId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ATransactionID");
            entity.Property(e => e.AdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnName("ADateTime");
            entity.Property(e => e.AddFolderMemberTime).HasColumnName("addFolderMemberTime");
            entity.Property(e => e.ArecordAction).HasColumnName("ARecordAction");
            entity.Property(e => e.Atransaction).HasColumnName("ATransaction");
            entity.Property(e => e.AttachmentCategory)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AuserId)
                .IsUnicode(false)
                .HasColumnName("AUserID");
            entity.Property(e => e.CloudFolderTemplate)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.IsAddFolderMember).HasColumnName("isAddFolderMember");
            entity.Property(e => e.IsEgnyteShare).HasColumnName("isEgnyteShare");
            entity.Property(e => e.IsExecuted).HasColumnName("isExecuted");
            entity.Property(e => e.IsRemoveFolderMember).HasColumnName("isRemoveFolderMember");
            entity.Property(e => e.Note)
                .IsUnicode(false)
                .HasColumnName("note");
            entity.Property(e => e.RemoveFolderMemberTime).HasColumnName("removeFolderMemberTime");
            entity.Property(e => e.UserFolderPath)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CloudFileStorageUploadedFile>(entity =>
        {
            entity.HasKey(e => new { e.FileName, e.UserFolderPath, e.Entityno });

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("d_AuditCloudFileStorageUploadedFiles");
                    tb.HasTrigger("i_AuditCloudFileStorageUploadedFiles");
                });

            entity.Property(e => e.FileName)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("fileName");
            entity.Property(e => e.UserFolderPath)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.AttachmentCategory)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.AttachmentType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DropboxFileId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dropboxFileID");
            entity.Property(e => e.FileMissingAtUpload).HasColumnName("fileMissingAtUpload");
            entity.Property(e => e.IsUploaded).HasColumnName("isUploaded");
            entity.Property(e => e.UploadTime).HasColumnName("uploadTime");
            entity.Property(e => e.Userid)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("userid");

            entity.HasOne(d => d.EntitynoNavigation).WithMany(p => p.CloudFileStorageUploadedFiles)
                .HasForeignKey(d => d.Entityno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CloudFileStorageUploadedFiles_glentities");
        });

        modelBuilder.Entity<CloudFileStorageUploadedFilesA>(entity =>
        {
            entity.HasKey(e => e.AtransactionId).IsClustered(false);

            entity.ToTable("CloudFileStorageUploadedFilesA");

            entity.Property(e => e.AtransactionId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ATransactionID");
            entity.Property(e => e.AdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnName("ADateTime");
            entity.Property(e => e.ArecordAction).HasColumnName("ARecordAction");
            entity.Property(e => e.Atransaction).HasColumnName("ATransaction");
            entity.Property(e => e.AttachmentCategory)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AttachmentType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AuserId)
                .IsUnicode(false)
                .HasColumnName("AUserID");
            entity.Property(e => e.DropboxFileId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dropboxFileID");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.FileMissingAtUpload).HasColumnName("fileMissingAtUpload");
            entity.Property(e => e.FileName)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("fileName");
            entity.Property(e => e.IsUploaded).HasColumnName("isUploaded");
            entity.Property(e => e.UploadTime).HasColumnName("uploadTime");
            entity.Property(e => e.UserFolderPath)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Userid)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("userid");
        });

        modelBuilder.Entity<CloudFileStorageUploadedPartFile>(entity =>
        {
            entity.HasKey(e => new { e.FileName, e.UserFolderPath, e.Partno });

            entity.Property(e => e.FileName)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("fileName");
            entity.Property(e => e.UserFolderPath)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.AttachmentType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DropboxFileId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dropboxFileID");
            entity.Property(e => e.IsUploaded).HasColumnName("isUploaded");
            entity.Property(e => e.UploadTime).HasColumnName("uploadTime");

            entity.HasOne(d => d.PartnoNavigation).WithMany(p => p.CloudFileStorageUploadedPartFiles)
                .HasForeignKey(d => d.Partno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CloudFileStorageUploadedPartFiles_inpart");
        });

        modelBuilder.Entity<Cm2Contact>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("cm2Contacts");

            entity.Property(e => e.Contactname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("contactname");
            entity.Property(e => e.Contactno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("contactno");
            entity.Property(e => e.Contacttype)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("contacttype");
            entity.Property(e => e.Enterdate)
                .HasColumnType("datetime")
                .HasColumnName("enterdate");
            entity.Property(e => e.HideFromReceivablesReport).HasDefaultValue(false);
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.Statuscode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("statuscode");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<Cm2Customer>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("cm2Customers", tb => tb.HasTrigger("TRG_PreventCustomerModifications"));

            entity.Property(e => e.Abnnumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ABNNumber");
            entity.Property(e => e.Accountno)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("accountno");
            entity.Property(e => e.Activeind).HasColumnName("activeind");
            entity.Property(e => e.Addr1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("addr1");
            entity.Property(e => e.Addr2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("addr2");
            entity.Property(e => e.Addr3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("addr3");
            entity.Property(e => e.Attention)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("attention");
            entity.Property(e => e.BillToName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bill_to_name");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("city");
            entity.Property(e => e.Contact)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("contact");
            entity.Property(e => e.Country)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("country");
            entity.Property(e => e.County)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("county");
            entity.Property(e => e.Currencycd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("currencycd");
            entity.Property(e => e.Custno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("custno");
            entity.Property(e => e.DealNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("deal_no");
            entity.Property(e => e.Discount).HasColumnName("discount");
            entity.Property(e => e.Email2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Ext)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ext");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fax");
            entity.Property(e => e.FileStorageGuid).HasColumnName("FileStorageGUID");
            entity.Property(e => e.IdLanguage).HasColumnName("id_language");
            entity.Property(e => e.InvoiceFolder)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Matrixcd)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("matrixcd");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("notes");
            entity.Property(e => e.Paytermscd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("paytermscd");
            entity.Property(e => e.Phone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("phone");
            entity.Property(e => e.Salesmancd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("salesmancd");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.ShipAddr1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ship_addr1");
            entity.Property(e => e.ShipAddr2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ship_addr2");
            entity.Property(e => e.ShipAddr3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ship_addr3");
            entity.Property(e => e.ShipAttention)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ship_attention");
            entity.Property(e => e.ShipCity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ship_city");
            entity.Property(e => e.ShipContact)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ship_contact");
            entity.Property(e => e.ShipCountry)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ship_country");
            entity.Property(e => e.ShipCounty)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ship_county");
            entity.Property(e => e.ShipDealNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ship_deal_no");
            entity.Property(e => e.ShipEmail2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ship_Email2");
            entity.Property(e => e.ShipExt)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ship_ext");
            entity.Property(e => e.ShipFax)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ship_fax");
            entity.Property(e => e.ShipPhone)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ship_phone");
            entity.Property(e => e.ShipState)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ship_state");
            entity.Property(e => e.ShipTelex)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ship_telex");
            entity.Property(e => e.ShipToName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ship_to_name");
            entity.Property(e => e.ShipUsenet)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ship_usenet");
            entity.Property(e => e.ShipVoicemail)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ship_voicemail");
            entity.Property(e => e.ShipZip)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ship_zip");
            entity.Property(e => e.Shipno)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("shipno");
            entity.Property(e => e.State)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("state");
            entity.Property(e => e.Subno)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("subno");
            entity.Property(e => e.Tax2).HasColumnName("tax2");
            entity.Property(e => e.Tax3).HasColumnName("tax3");
            entity.Property(e => e.TaxCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tax_code");
            entity.Property(e => e.Taxexempt)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("taxexempt");
            entity.Property(e => e.TaxexemptNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("taxexempt_no");
            entity.Property(e => e.Telex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("telex");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
            entity.Property(e => e.Usenet)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usenet");
            entity.Property(e => e.VatidentificationNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VATIdentificationNumber");
            entity.Property(e => e.Vatstatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("VATStatus");
            entity.Property(e => e.Voicemail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("voicemail");
            entity.Property(e => e.Zip)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("zip");
        });

        modelBuilder.Entity<Cm2CustomersContactCategory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("cm2CustomersContactCategories");

            entity.Property(e => e.Custno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("custno");
            entity.Property(e => e.IdContactCategory).HasColumnName("id_ContactCategory");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<Cm2Vendor>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("cm2Vendors");

            entity.Property(e => e.Abnnumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ABNNumber");
            entity.Property(e => e.Activeind).HasColumnName("activeind");
            entity.Property(e => e.Address1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("address_1");
            entity.Property(e => e.Address2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("address_2");
            entity.Property(e => e.Address3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("address_3");
            entity.Property(e => e.Ap1099Ind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ap1099_ind");
            entity.Property(e => e.Bank)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bank");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("city");
            entity.Property(e => e.Contact)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("contact");
            entity.Property(e => e.Country)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("country");
            entity.Property(e => e.Currencycd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("currencycd");
            entity.Property(e => e.Discount1).HasColumnName("discount1");
            entity.Property(e => e.Discount2).HasColumnName("discount2");
            entity.Property(e => e.Email2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Extension)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("extension");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fax");
            entity.Property(e => e.IdLanguage).HasColumnName("id_language");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("notes");
            entity.Property(e => e.Parent)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("parent");
            entity.Property(e => e.Paytermscd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("paytermscd");
            entity.Property(e => e.Phone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("phone");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.SiteNo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("site_no");
            entity.Property(e => e.State)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("state");
            entity.Property(e => e.Taxid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("taxid");
            entity.Property(e => e.Telex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("telex");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
            entity.Property(e => e.Usenet)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usenet");
            entity.Property(e => e.VatidentificationNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VATIdentificationNumber");
            entity.Property(e => e.Vatstatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("VATStatus");
            entity.Property(e => e.Vendno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("vendno");
            entity.Property(e => e.VendorName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vendor_name");
            entity.Property(e => e.Voicemail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("voicemail");
            entity.Property(e => e.Zipcode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("zipcode");
        });

        modelBuilder.Entity<Cm2VendorsContactCategory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("cm2VendorsContactCategories");

            entity.Property(e => e.IdContactCategory).HasColumnName("id_ContactCategory");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
            entity.Property(e => e.Vendno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("vendno");
        });

        modelBuilder.Entity<CommMethod>(entity =>
        {
            entity.HasKey(e => new { e.PartyType, e.Identity, e.CommId });

            entity.ToTable("COMM_METHOD", "IFS");

            entity.Property(e => e.PartyType)
                .HasMaxLength(20)
                .HasColumnName("PARTY_TYPE");
            entity.Property(e => e.Identity)
                .HasMaxLength(20)
                .HasColumnName("IDENTITY");
            entity.Property(e => e.CommId).HasColumnName("COMM_ID");
            entity.Property(e => e.AddressDefault)
                .HasMaxLength(5)
                .HasColumnName("ADDRESS_DEFAULT");
            entity.Property(e => e.AddressId)
                .HasMaxLength(50)
                .HasColumnName("ADDRESS_ID");
            entity.Property(e => e.Description)
                .HasMaxLength(200)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.MethodDefault)
                .HasMaxLength(5)
                .HasColumnName("METHOD_DEFAULT");
            entity.Property(e => e.MethodId)
                .HasMaxLength(20)
                .HasColumnName("METHOD_ID");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .HasColumnName("NAME");
            entity.Property(e => e.Rowkey)
                .HasMaxLength(50)
                .HasColumnName("ROWKEY");
            entity.Property(e => e.Rowversion)
                .HasColumnType("datetime")
                .HasColumnName("ROWVERSION");
            entity.Property(e => e.ValidFrom)
                .HasColumnType("datetime")
                .HasColumnName("VALID_FROM");
            entity.Property(e => e.ValidTo)
                .HasColumnType("datetime")
                .HasColumnName("VALID_TO");
            entity.Property(e => e.Value)
                .HasMaxLength(200)
                .HasColumnName("VALUE");
        });

        modelBuilder.Entity<CommodityNotificationRecipient>(entity =>
        {
            entity.HasKey(e => new { e.Warehouse, e.Commodity });

            entity.Property(e => e.Warehouse)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("warehouse");
            entity.Property(e => e.Commodity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("commodity");
            entity.Property(e => e.Recipients)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("recipients");

            entity.HasOne(d => d.CommodityNavigation).WithMany(p => p.CommodityNotificationRecipients)
                .HasForeignKey(d => d.Commodity)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CommodityNotificationRecipients_incommodity");

            entity.HasOne(d => d.WarehouseNavigation).WithMany(p => p.CommodityNotificationRecipients)
                .HasForeignKey(d => d.Warehouse)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CommodityNotificationRecipients_warehouses");
        });

        modelBuilder.Entity<Company>(entity =>
        {
            entity.HasKey(e => e.CompanyCode);

            entity.ToTable("Company");

            entity.Property(e => e.CompanyCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Abbreviation)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Active).HasDefaultValue(true);
            entity.Property(e => e.CompanyDesc)
                .HasMaxLength(70)
                .IsUnicode(false);
            entity.Property(e => e.CountryCode)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.CrewPaymentScheduleDueDays)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CrewPaymentSchedulePeriodStartDays)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DefaultCrewOpsEmpno)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DefaultPayTermsCd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("NET 10");
            entity.Property(e => e.DefaultPrinterPaperSize)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Eorinumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EORINumber");
            entity.Property(e => e.HasUsedGearStorePage).HasColumnName("hasUsedGearStorePage");
            entity.Property(e => e.IfscompanyCd)
                .HasMaxLength(50)
                .HasColumnName("IFSCompanyCd");
            entity.Property(e => e.IfscompanyCodeForInvoicing)
                .HasMaxLength(50)
                .HasColumnName("IFSCompanyCodeForInvoicing");
            entity.Property(e => e.IncludeInProjectMaintenance).HasComputedColumnSql("([Active])", false);
            entity.Property(e => e.IntercompanyBillingLesseeOverride)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IntercompanyBillingLessorOverride)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InternalOrg)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("internal_org");
            entity.Property(e => e.IsRentalCompany)
                .HasDefaultValue(true)
                .HasColumnName("isRentalCompany");
            entity.Property(e => e.IsUsingSyspro).HasColumnName("isUsingSyspro");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("locationcd");
            entity.Property(e => e.ParentCompanyCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProformaInvoiceSequenceType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("proformaInvoiceSequenceType");
            entity.Property(e => e.QuoteReportGreetingText)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.RoadPayExportFolder)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.SalesForecastGroup)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ShowCrewBillRatesOnNonBidProjects).HasDefaultValue(false);
            entity.Property(e => e.SysproCompanyCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SysproInvoiceAutoDeferRevenue).HasDefaultValue(true);
            entity.Property(e => e.TouringRevenueGroup)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Unitofweight)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("unitofweight");
            entity.Property(e => e.VatidentificationNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VATIdentificationNumber");

            entity.HasOne(d => d.CountryCodeNavigation).WithMany(p => p.Companies)
                .HasForeignKey(d => d.CountryCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Company__Country");

            entity.HasOne(d => d.DefaultCrewOpsEmpnoNavigation).WithMany(p => p.Companies)
                .HasForeignKey(d => d.DefaultCrewOpsEmpno)
                .HasConstraintName("FK_company_peemployee_DefaultCrewOpsEmpno");

            entity.HasOne(d => d.InternalOrgNavigation).WithMany(p => p.Companies)
                .HasPrincipalKey(p => p.Division)
                .HasForeignKey(d => d.InternalOrg)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Company_pedivision");

            entity.HasOne(d => d.LocationcdNavigation).WithMany(p => p.Companies)
                .HasPrincipalKey(p => p.Locationcd)
                .HasForeignKey(d => d.Locationcd)
                .HasConstraintName("FK_Company_oelocation");

            entity.HasOne(d => d.ParentCompanyCodeNavigation).WithMany(p => p.InverseParentCompanyCodeNavigation)
                .HasForeignKey(d => d.ParentCompanyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Company_ParentCompany");

            entity.HasOne(d => d.ProformaInvoiceSequenceTypeNavigation).WithMany(p => p.Companies)
                .HasForeignKey(d => d.ProformaInvoiceSequenceType)
                .HasConstraintName("FK_Company_IDNumberSequenceTypes");

            entity.HasOne(d => d.SalesForecastGroupNavigation).WithMany(p => p.Companies)
                .HasForeignKey(d => d.SalesForecastGroup)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Company_SalesForecastGroup");

            entity.HasOne(d => d.SysproCompanyCodeNavigation).WithMany(p => p.Companies)
                .HasForeignKey(d => d.SysproCompanyCode)
                .HasConstraintName("FK_Company_SysproCompany");

            entity.HasOne(d => d.TouringRevenueGroupNavigation).WithMany(p => p.Companies)
                .HasForeignKey(d => d.TouringRevenueGroup)
                .HasConstraintName("FK_Company_TouringRevenueGroup");

            entity.HasOne(d => d.UnitofweightNavigation).WithMany(p => p.Companies)
                .HasForeignKey(d => d.Unitofweight)
                .HasConstraintName("FK_Company_unitofweight");
        });

        modelBuilder.Entity<CompanyExpenseTypesBillingAccount>(entity =>
        {
            entity.HasKey(e => new { e.CompanyCd, e.ExpenseCd }).HasName("PK_Company_Account");

            entity.Property(e => e.CompanyCd)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ExpenseCd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("expenseCd");
            entity.Property(e => e.AccountCd)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CompanyNewProjectNotification>(entity =>
        {
            entity.HasKey(e => e.CompanyCode);

            entity.Property(e => e.CompanyCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("user_name");

            entity.HasOne(d => d.CompanyCodeNavigation).WithOne(p => p.CompanyNewProjectNotification)
                .HasForeignKey<CompanyNewProjectNotification>(d => d.CompanyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CompanyNewProjectNotifications_Company");

            entity.HasOne(d => d.UserNameNavigation).WithMany(p => p.CompanyNewProjectNotifications)
                .HasForeignKey(d => d.UserName)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CompanyNewProjectNotifications_pjtfrusr");
        });

        modelBuilder.Entity<CompanyQuoteMonthlyTotal>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("company_quote_monthly_totals");

            entity.Property(e => e.BillingCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BillingCompanyDesc)
                .HasMaxLength(70)
                .IsUnicode(false);
            entity.Property(e => e.Crew).HasColumnType("money");
            entity.Property(e => e.Equipment).HasColumnType("money");
            entity.Property(e => e.Expenses).HasColumnType("money");
            entity.Property(e => e.RevenueCompanyGroup)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CompanyShippingServiceType>(entity =>
        {
            entity.HasKey(e => new { e.CompanyCode, e.VendorFriendlyName });

            entity.Property(e => e.CompanyCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorFriendlyName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.CompanyCodeNavigation).WithMany(p => p.CompanyShippingServiceTypes)
                .HasForeignKey(d => d.CompanyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CompanyShippingServiceTypes_Company");
        });

        modelBuilder.Entity<ComplexCurve>(entity =>
        {
            entity.HasKey(e => e.CurveId);

            entity.ToTable("ComplexCurve", "SpeakerTest");

            entity.Property(e => e.CurveId)
                .ValueGeneratedNever()
                .HasColumnName("CurveID");
            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FrequencyVectorId).HasColumnName("FrequencyVectorID");

            entity.HasOne(d => d.FrequencyVector).WithMany(p => p.ComplexCurves)
                .HasForeignKey(d => d.FrequencyVectorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ComplexCurve_FrequencyVector");

            entity.HasMany(d => d.ConstituentCurves).WithMany(p => p.Curves)
                .UsingEntity<Dictionary<string, object>>(
                    "CompositeCurveConstituent",
                    r => r.HasOne<ComplexCurve>().WithMany()
                        .HasForeignKey("ConstituentCurveId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CompositeCurveConstituents_ConstituentCurveID"),
                    l => l.HasOne<ComplexCurve>().WithMany()
                        .HasForeignKey("CurveId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CompositeCurveConstituents_CurveID"),
                    j =>
                    {
                        j.HasKey("CurveId", "ConstituentCurveId");
                        j.ToTable("CompositeCurveConstituents", "SpeakerTest");
                        j.IndexerProperty<int>("CurveId").HasColumnName("CurveID");
                        j.IndexerProperty<int>("ConstituentCurveId").HasColumnName("ConstituentCurveID");
                    });

            entity.HasMany(d => d.Curves).WithMany(p => p.ConstituentCurves)
                .UsingEntity<Dictionary<string, object>>(
                    "CompositeCurveConstituent",
                    r => r.HasOne<ComplexCurve>().WithMany()
                        .HasForeignKey("CurveId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CompositeCurveConstituents_CurveID"),
                    l => l.HasOne<ComplexCurve>().WithMany()
                        .HasForeignKey("ConstituentCurveId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CompositeCurveConstituents_ConstituentCurveID"),
                    j =>
                    {
                        j.HasKey("CurveId", "ConstituentCurveId");
                        j.ToTable("CompositeCurveConstituents", "SpeakerTest");
                        j.IndexerProperty<int>("CurveId").HasColumnName("CurveID");
                        j.IndexerProperty<int>("ConstituentCurveId").HasColumnName("ConstituentCurveID");
                    });
        });

        modelBuilder.Entity<ComplexCurveValue>(entity =>
        {
            entity.HasKey(e => new { e.CurveId, e.BinIndex });

            entity.ToTable("ComplexCurveValue", "SpeakerTest");

            entity.Property(e => e.CurveId).HasColumnName("CurveID");

            entity.HasOne(d => d.Curve).WithMany(p => p.ComplexCurveValues)
                .HasForeignKey(d => d.CurveId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ComplexCurveValue_ComplexCurve");
        });

        modelBuilder.Entity<ComplexCurveValueBulkSave>(entity =>
        {
            entity.HasKey(e => new { e.SessionId, e.CurveFakeId, e.BinIndex });

            entity.ToTable("ComplexCurveValueBulkSave", "SpeakerTest");

            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.CurveFakeId).HasColumnName("CurveFakeID");
        });

        modelBuilder.Entity<Component>(entity =>
        {
            entity.HasKey(e => e.Component1);

            entity.ToTable("Component", "SpeakerTest");

            entity.Property(e => e.Component1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Component");
            entity.Property(e => e.ComponentDescription)
                .HasMaxLength(260)
                .IsUnicode(false);
            entity.Property(e => e.ComponentType)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ComponentFailureCurve>(entity =>
        {
            entity.HasKey(e => new { e.CurveId, e.Component });

            entity.ToTable("ComponentFailureCurve", "SpeakerTest");

            entity.Property(e => e.CurveId).HasColumnName("CurveID");
            entity.Property(e => e.Component)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FailureDescription)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.ComponentNavigation).WithMany(p => p.ComponentFailureCurves)
                .HasForeignKey(d => d.Component)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ComponentFailureCurve_Component");

            entity.HasOne(d => d.Curve).WithMany(p => p.ComponentFailureCurves)
                .HasForeignKey(d => d.CurveId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ComponentFailureCurve_CurveID");
        });

        modelBuilder.Entity<ComponentTest>(entity =>
        {
            entity.HasKey(e => new { e.Component, e.Test });

            entity.ToTable("ComponentTest", "SpeakerTest");

            entity.Property(e => e.Component)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Test)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OutputVoltageVrms).HasColumnName("OutputVoltage_Vrms");

            entity.HasOne(d => d.ComponentNavigation).WithMany(p => p.ComponentTests)
                .HasForeignKey(d => d.Component)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SpeakerTestComponentTest_Component");

            entity.HasOne(d => d.TestNavigation).WithMany(p => p.ComponentTests)
                .HasForeignKey(d => d.Test)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SpeakerTestComponentTest_Test");
        });

        modelBuilder.Entity<ComponentType>(entity =>
        {
            entity.HasKey(e => e.ComponentType1);

            entity.ToTable("ComponentType", "SpeakerTest");

            entity.Property(e => e.ComponentType1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ComponentType");
        });

        modelBuilder.Entity<ComputerImagingLog>(entity =>
        {
            entity.HasKey(e => e.RunDateTime);

            entity.ToTable("ComputerImagingLog", "ComputerImaging");

            entity.Property(e => e.RunDateTime).HasDefaultValueSql("(sysdatetimeoffset())");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.BootVersion)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CommitId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CommitID");
            entity.Property(e => e.DriveName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FxComputerType)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("FX_computerType");
            entity.Property(e => e.HardwareReportedModelNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("hardware_reported_model_no");
            entity.Property(e => e.HardwareReportedSerialNo)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("hardware_reported_serial_no");
            entity.Property(e => e.HardwareReportedUuid)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("hardware_reported_UUID");
            entity.Property(e => e.ImageName)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("image_name");
            entity.Property(e => e.ImagingScriptName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("imaging_script_name");
            entity.Property(e => e.Ipaddress)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IPAddress");
            entity.Property(e => e.LakeBuild)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LogSource)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.PrevEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("prev_entityno");
            entity.Property(e => e.ReloadPackageType)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ReloadPackageVersion)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ReloadVersion)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ServerName)
                .HasMaxLength(16)
                .HasDefaultValueSql("(@@servername)");
            entity.Property(e => e.TaskChoice)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.WavesOfflineInstaller)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("waves_offline_installer");
        });

        modelBuilder.Entity<ConnectionFailureLog>(entity =>
        {
            entity.HasKey(e => new { e.LoginTime, e.HostName, e.ProgramName, e.LoginName, e.HostFailureTime, e.HostRecoverTime, e.TransactionTime }).IsClustered(false);

            entity.ToTable("ConnectionFailureLog");

            entity.Property(e => e.LoginTime)
                .HasColumnType("datetime")
                .HasColumnName("login_time");
            entity.Property(e => e.HostName)
                .HasMaxLength(128)
                .HasColumnName("host_name");
            entity.Property(e => e.ProgramName)
                .HasMaxLength(128)
                .HasColumnName("program_name");
            entity.Property(e => e.LoginName)
                .HasMaxLength(128)
                .HasColumnName("login_name");
            entity.Property(e => e.HostFailureTime)
                .HasColumnType("datetime")
                .HasColumnName("host_failure_time");
            entity.Property(e => e.HostRecoverTime)
                .HasColumnType("datetime")
                .HasColumnName("host_recover_time");
            entity.Property(e => e.TransactionTime)
                .HasColumnType("datetime")
                .HasColumnName("transaction_time");
            entity.Property(e => e.Note)
                .IsUnicode(false)
                .HasColumnName("note");
            entity.Property(e => e.SqlconnectionAttempts).HasColumnName("SQLConnectionAttempts");
        });

        modelBuilder.Entity<Contact>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("contacts");

            entity.Property(e => e.Cellphone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cellphone");
            entity.Property(e => e.Contactname)
                .HasMaxLength(51)
                .IsUnicode(false)
                .HasColumnName("contactname");
            entity.Property(e => e.Contactno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("contactno");
            entity.Property(e => e.Contacttype)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("contacttype");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.Enterdate)
                .HasColumnType("datetime")
                .HasColumnName("enterdate");
            entity.Property(e => e.FileStorageGuid).HasColumnName("FileStorageGUID");
            entity.Property(e => e.Name1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("name1");
            entity.Property(e => e.Name2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("name2");
            entity.Property(e => e.Name3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("name3");
            entity.Property(e => e.Statuscode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("statuscode");
        });

        modelBuilder.Entity<ContactCategoriesCloudFileStorageGroup>(entity =>
        {
            entity.HasKey(e => new { e.IdLevel, e.IdContactCategory });

            entity.Property(e => e.IdLevel).HasColumnName("id_Level");
            entity.Property(e => e.IdContactCategory).HasColumnName("id_ContactCategory");

            entity.HasOne(d => d.IdLevelNavigation).WithMany(p => p.ContactCategoriesCloudFileStorageGroups)
                .HasForeignKey(d => d.IdLevel)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ContactCategoriesCloudFileStorageGroups_CloudFileStorageGroups");
        });

        modelBuilder.Entity<ContactCategory>(entity =>
        {
            entity.HasKey(e => e.IdContactCategory);

            entity.ToTable("ContactCategory");

            entity.Property(e => e.IdContactCategory).HasColumnName("id_ContactCategory");
            entity.Property(e => e.ContactCategory1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ContactCategory");
            entity.Property(e => e.IsProjectClientContact).HasColumnName("isProjectClientContact");
        });

        modelBuilder.Entity<ContactCustomerInfo>(entity =>
        {
            entity.HasKey(e => new { e.CustomerId, e.Guid, e.PersonId });

            entity.ToTable("CONTACT_CUSTOMER_INFO", "IFS");

            entity.Property(e => e.CustomerId)
                .HasMaxLength(20)
                .HasColumnName("CUSTOMER_ID");
            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.PersonId)
                .HasMaxLength(20)
                .HasColumnName("PERSON_ID");
            entity.Property(e => e.BlockedForCrmObjectsDb)
                .HasMaxLength(20)
                .HasColumnName("BLOCKED_FOR_CRM_OBJECTS_DB");
            entity.Property(e => e.ConnectAllCustAddrDb)
                .HasMaxLength(20)
                .HasColumnName("CONNECT_ALL_CUST_ADDR_DB");
            entity.Property(e => e.ContactAddress)
                .HasMaxLength(50)
                .HasColumnName("CONTACT_ADDRESS");
            entity.Property(e => e.ContactName)
                .HasMaxLength(100)
                .HasColumnName("CONTACT_NAME");
            entity.Property(e => e.CustomerAddress)
                .HasMaxLength(50)
                .HasColumnName("CUSTOMER_ADDRESS");
            entity.Property(e => e.CustomerName)
                .HasMaxLength(100)
                .HasColumnName("CUSTOMER_NAME");
            entity.Property(e => e.Department)
                .HasMaxLength(200)
                .HasColumnName("DEPARTMENT");
            entity.Property(e => e.DepartmentDb)
                .HasMaxLength(20)
                .HasColumnName("DEPARTMENT_DB");
            entity.Property(e => e.Email)
                .HasMaxLength(200)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Fax)
                .HasMaxLength(200)
                .HasColumnName("FAX");
            entity.Property(e => e.Intercom)
                .HasMaxLength(200)
                .HasColumnName("INTERCOM");
            entity.Property(e => e.Manager)
                .HasMaxLength(20)
                .HasColumnName("MANAGER");
            entity.Property(e => e.Mobile)
                .HasMaxLength(200)
                .HasColumnName("MOBILE");
            entity.Property(e => e.Objid)
                .HasMaxLength(50)
                .HasColumnName("OBJID");
            entity.Property(e => e.Pager)
                .HasMaxLength(200)
                .HasColumnName("PAGER");
            entity.Property(e => e.Phone)
                .HasMaxLength(200)
                .HasColumnName("PHONE");
            entity.Property(e => e.Role)
                .HasMaxLength(200)
                .HasColumnName("ROLE");
            entity.Property(e => e.RoleDb)
                .HasMaxLength(4000)
                .HasColumnName("ROLE_DB");
            entity.Property(e => e.Title)
                .HasMaxLength(100)
                .HasColumnName("TITLE");
        });

        modelBuilder.Entity<ContactType>(entity =>
        {
            entity.HasKey(e => e.Contacttype);

            entity.ToTable("ContactType");

            entity.Property(e => e.Contacttype)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("contacttype");
            entity.Property(e => e.Contacttypedesc)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("contacttypedesc");
        });

        modelBuilder.Entity<ContactsStatesCountriesParsedGigme>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Contacts_States_Countries_Parsed_gigme");

            entity.Property(e => e.Address)
                .HasMaxLength(892)
                .IsUnicode(false);
            entity.Property(e => e.ContactId).HasColumnName("ContactID");
            entity.Property(e => e.Countrycode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("countrycode");
            entity.Property(e => e.Countrydesc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("countrydesc");
            entity.Property(e => e.Piece)
                .IsUnicode(false)
                .HasColumnName("piece");
            entity.Property(e => e.Statecode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("statecode");
        });

        modelBuilder.Entity<CostOfInternationalFreightMovement>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Cost_Of_International_Freight_Movements");

            entity.Property(e => e.Commmodity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("commmodity");
            entity.Property(e => e.CostToNotUtilize).HasColumnName("costToNotUtilize");
            entity.Property(e => e.CostToShipOneWay).HasColumnName("costToShipOneWay");
            entity.Property(e => e.FromWh)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fromWH");
            entity.Property(e => e.Partdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.PricePerPoundUsd).HasColumnName("PricePerPoundUSD");
            entity.Property(e => e.ShippingMethodDesc)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ToWh)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("toWH");
            entity.Property(e => e.TransferDays).HasColumnName("transferDays");
            entity.Property(e => e.Transferred).HasColumnName("transferred");
            entity.Property(e => e.ValueTransferred).HasColumnName("valueTransferred");
            entity.Property(e => e.WeightTransferred).HasColumnName("weightTransferred");
        });

        modelBuilder.Entity<Country>(entity =>
        {
            entity.HasKey(e => e.Countrycode);

            entity.ToTable("country");

            entity.HasIndex(e => e.Countrydesc, "UC_country_countryDesc").IsUnique();

            entity.Property(e => e.Countrycode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("countrycode");
            entity.Property(e => e.CallingCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Countrydesc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("countrydesc");
            entity.Property(e => e.Region)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.RegionNavigation).WithMany(p => p.Countries)
                .HasForeignKey(d => d.Region)
                .HasConstraintName("FK_Country_Regions");
        });

        modelBuilder.Entity<CountryFedExCountryCode>(entity =>
        {
            entity.HasKey(e => e.Countrycode);

            entity.ToTable("CountryFedExCountryCode");

            entity.Property(e => e.Countrycode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("countrycode");
            entity.Property(e => e.FedExCountryCode)
                .HasMaxLength(2)
                .IsUnicode(false);

            entity.HasOne(d => d.CountrycodeNavigation).WithOne(p => p.CountryFedExCountryCode)
                .HasForeignKey<CountryFedExCountryCode>(d => d.Countrycode)
                .HasConstraintName("FK_CountryFedExCountryCode_countrycode");
        });

        modelBuilder.Entity<CrewBidValue>(entity =>
        {
            entity.HasKey(e => new { e.Jobtype, e.Currency });

            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("jobtype");
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("currency");

            entity.HasOne(d => d.CurrencyNavigation).WithMany(p => p.CrewBidValues)
                .HasForeignKey(d => d.Currency)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CrewBidValues_Currency");

            entity.HasOne(d => d.JobtypeNavigation).WithMany(p => p.CrewBidValues)
                .HasForeignKey(d => d.Jobtype)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CrewBidValues_pejob");
        });

        modelBuilder.Entity<CrewDemandsAssignmentSummary>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("crew_demands_assignment_summary");

            entity.Property(e => e.AssignedDaysCount).HasColumnName("assignedDaysCount");
            entity.Property(e => e.Assignments).HasColumnName("assignments");
            entity.Property(e => e.CrewSize).HasColumnName("crew_size");
            entity.Property(e => e.EmplineNo).HasColumnName("empline_no");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("fromdate");
            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("jobtype");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("todate");
        });

        modelBuilder.Entity<CrewDemandsPartiallyAssigned>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("crew_demands_partially_assigned");

            entity.Property(e => e.AssignedDaysCount).HasColumnName("assignedDaysCount");
            entity.Property(e => e.Assignments).HasColumnName("assignments");
            entity.Property(e => e.CrewSize).HasColumnName("crew_size");
            entity.Property(e => e.EmplineNo).HasColumnName("empline_no");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("fromdate");
            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("jobtype");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("todate");
        });

        modelBuilder.Entity<Culture>(entity =>
        {
            entity.HasKey(e => e.Culture1);

            entity.Property(e => e.Culture1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("culture");
            entity.Property(e => e.Description)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<Currency>(entity =>
        {
            entity.HasKey(e => e.Currency1);

            entity.ToTable("Currency");

            entity.Property(e => e.Currency1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.CapexThreshold).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Culture)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("culture");
            entity.Property(e => e.DecimalSeparator)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DefaultTaxType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DefaultVattaxType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DefaultVATTaxType");
            entity.Property(e => e.Description)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("description");
            entity.Property(e => e.InvoiceGranularity).HasDefaultValue(0.050000000000000003);
            entity.Property(e => e.InvoiceLineItemGranularity).HasDefaultValue(0.050000000000000003);
            entity.Property(e => e.InvoiceTaxGranularity).HasDefaultValue(0.01);
            entity.Property(e => e.RfidefaultGranularity)
                .HasDefaultValue(0.070000000000000007)
                .HasColumnName("RFIDefaultGranularity");
            entity.Property(e => e.RfienforcedGranularity)
                .HasDefaultValue(0.050000000000000003)
                .HasColumnName("RFIEnforcedGranularity");
            entity.Property(e => e.Symbol)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("symbol");
            entity.Property(e => e.SymbolOnLeft).HasDefaultValue(true);
            entity.Property(e => e.ThousandsSeparator)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.DefaultTaxTypeNavigation).WithMany(p => p.Currencies)
                .HasForeignKey(d => d.DefaultTaxType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Currency__TaxType");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("customer");

            entity.Property(e => e.Activeind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("activeind");
            entity.Property(e => e.Attention)
                .HasMaxLength(100)
                .HasColumnName("attention");
            entity.Property(e => e.BillToName)
                .HasMaxLength(100)
                .HasColumnName("bill_to_name");
            entity.Property(e => e.Cellphone)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("cellphone");
            entity.Property(e => e.Contact)
                .HasMaxLength(100)
                .HasColumnName("contact");
            entity.Property(e => e.CustName)
                .HasMaxLength(100)
                .HasColumnName("cust_name");
            entity.Property(e => e.Custno)
                .HasMaxLength(20)
                .HasColumnName("custno");
            entity.Property(e => e.Email)
                .HasMaxLength(1000)
                .HasColumnName("email");
            entity.Property(e => e.Enterdate).HasColumnName("enterdate");
            entity.Property(e => e.FileStorageGuid).HasColumnName("FileStorageGUID");
            entity.Property(e => e.Subno)
                .HasMaxLength(50)
                .HasColumnName("subno");
        });

        modelBuilder.Entity<CustomerAddress>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CustomerAddress", "Contact");

            entity.Property(e => e.AddressLine1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AddressLine2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AddressLine3)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AddressLine4)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Country)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CustomerId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CustomerID");
            entity.Property(e => e.PostalCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.StateProvince)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(4)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CustomerContact>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CustomerContact", "Contact");

            entity.Property(e => e.CustomerId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("CustomerID");
            entity.Property(e => e.CustomerNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Organization)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.SubNum)
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CustomerDocumentTaxInfo>(entity =>
        {
            entity.HasKey(e => new { e.Company, e.CustomerId, e.AddressId, e.SupplyCountry, e.DeliveryCountry });

            entity.ToTable("CUSTOMER_DOCUMENT_TAX_INFO", "IFS");

            entity.Property(e => e.Company)
                .HasMaxLength(20)
                .HasColumnName("COMPANY");
            entity.Property(e => e.CustomerId)
                .HasMaxLength(20)
                .HasColumnName("CUSTOMER_ID");
            entity.Property(e => e.AddressId)
                .HasMaxLength(50)
                .HasColumnName("ADDRESS_ID");
            entity.Property(e => e.SupplyCountry)
                .HasMaxLength(2)
                .HasColumnName("SUPPLY_COUNTRY");
            entity.Property(e => e.DeliveryCountry)
                .HasMaxLength(2)
                .HasColumnName("DELIVERY_COUNTRY");
            entity.Property(e => e.Rowkey)
                .HasMaxLength(50)
                .HasColumnName("ROWKEY");
            entity.Property(e => e.Rowversion).HasColumnName("ROWVERSION");
            entity.Property(e => e.TaxIdType)
                .HasMaxLength(10)
                .HasColumnName("TAX_ID_TYPE");
            entity.Property(e => e.TaxOfficeId)
                .HasMaxLength(20)
                .HasColumnName("TAX_OFFICE_ID");
            entity.Property(e => e.ValidatedDate)
                .HasColumnType("datetime")
                .HasColumnName("VALIDATED_DATE");
            entity.Property(e => e.VatNo)
                .HasMaxLength(50)
                .HasColumnName("VAT_NO");
        });

        modelBuilder.Entity<CustomerEmail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CustomerEmail", "Contact");

            entity.Property(e => e.CustomerId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("CustomerID");
            entity.Property(e => e.EmailAddress)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CustomerInfo>(entity =>
        {
            entity.HasKey(e => e.CustomerId).HasName("PK_IFS_CUSTOMER_INFO");

            entity.ToTable("CUSTOMER_INFO", "IFS");

            entity.Property(e => e.CustomerId)
                .HasMaxLength(20)
                .HasColumnName("CUSTOMER_ID");
            entity.Property(e => e.AssociationNo)
                .HasMaxLength(50)
                .HasColumnName("ASSOCIATION_NO");
            entity.Property(e => e.B2bCustomer)
                .HasMaxLength(20)
                .HasColumnName("B2B_CUSTOMER");
            entity.Property(e => e.BusinessClassification)
                .HasMaxLength(10)
                .HasColumnName("BUSINESS_CLASSIFICATION");
            entity.Property(e => e.CorporateForm)
                .HasMaxLength(8)
                .HasColumnName("CORPORATE_FORM");
            entity.Property(e => e.Country)
                .HasMaxLength(2)
                .HasColumnName("COUNTRY");
            entity.Property(e => e.CreationDate).HasColumnName("CREATION_DATE");
            entity.Property(e => e.CustomerCategory)
                .HasMaxLength(20)
                .HasColumnName("CUSTOMER_CATEGORY");
            entity.Property(e => e.CustomerTaxUsageType)
                .HasMaxLength(5)
                .HasColumnName("CUSTOMER_TAX_USAGE_TYPE");
            entity.Property(e => e.DateOfRegistration).HasColumnName("DATE_OF_REGISTRATION");
            entity.Property(e => e.DefaultDomain)
                .HasMaxLength(5)
                .HasColumnName("DEFAULT_DOMAIN");
            entity.Property(e => e.DefaultLanguage)
                .HasMaxLength(2)
                .HasColumnName("DEFAULT_LANGUAGE");
            entity.Property(e => e.IdentifierRefValidation)
                .HasMaxLength(20)
                .HasColumnName("IDENTIFIER_REF_VALIDATION");
            entity.Property(e => e.IdentifierReference)
                .HasMaxLength(100)
                .HasColumnName("IDENTIFIER_REFERENCE");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .HasColumnName("NAME");
            entity.Property(e => e.OneTime)
                .HasMaxLength(20)
                .HasColumnName("ONE_TIME");
            entity.Property(e => e.Party)
                .HasMaxLength(20)
                .HasColumnName("PARTY");
            entity.Property(e => e.PartyType)
                .HasMaxLength(20)
                .HasColumnName("PARTY_TYPE");
            entity.Property(e => e.PictureId).HasColumnName("PICTURE_ID");
            entity.Property(e => e.Rowkey)
                .HasMaxLength(50)
                .HasColumnName("ROWKEY");
            entity.Property(e => e.Rowversion)
                .HasColumnType("datetime")
                .HasColumnName("ROWVERSION");
        });

        modelBuilder.Entity<CustomerInfoAddress>(entity =>
        {
            entity.HasKey(e => new { e.CustomerId, e.AddressId }).HasName("PK_IFS_CUSTOMER_INFO_ADDRESS");

            entity.ToTable("CUSTOMER_INFO_ADDRESS", "IFS");

            entity.Property(e => e.CustomerId)
                .HasMaxLength(20)
                .HasColumnName("CUSTOMER_ID");
            entity.Property(e => e.AddressId)
                .HasMaxLength(50)
                .HasColumnName("ADDRESS_ID");
            entity.Property(e => e.Address)
                .HasMaxLength(2000)
                .HasColumnName("ADDRESS");
            entity.Property(e => e.Address1)
                .HasMaxLength(35)
                .HasColumnName("ADDRESS1");
            entity.Property(e => e.Address2)
                .HasMaxLength(35)
                .HasColumnName("ADDRESS2");
            entity.Property(e => e.Address3)
                .HasMaxLength(100)
                .HasColumnName("ADDRESS3");
            entity.Property(e => e.Address4)
                .HasMaxLength(100)
                .HasColumnName("ADDRESS4");
            entity.Property(e => e.Address5)
                .HasMaxLength(100)
                .HasColumnName("ADDRESS5");
            entity.Property(e => e.Address6)
                .HasMaxLength(100)
                .HasColumnName("ADDRESS6");
            entity.Property(e => e.AddressLov)
                .HasMaxLength(2000)
                .HasColumnName("ADDRESS_LOV");
            entity.Property(e => e.City)
                .HasMaxLength(35)
                .HasColumnName("CITY");
            entity.Property(e => e.CommId).HasColumnName("COMM_ID");
            entity.Property(e => e.Country)
                .HasMaxLength(2)
                .HasColumnName("COUNTRY");
            entity.Property(e => e.County)
                .HasMaxLength(35)
                .HasColumnName("COUNTY");
            entity.Property(e => e.CustomerBranch)
                .HasMaxLength(20)
                .HasColumnName("CUSTOMER_BRANCH");
            entity.Property(e => e.DefaultDomain)
                .HasMaxLength(5)
                .HasColumnName("DEFAULT_DOMAIN");
            entity.Property(e => e.EanLocation)
                .HasMaxLength(100)
                .HasColumnName("EAN_LOCATION");
            entity.Property(e => e.EndCustAddrId)
                .HasMaxLength(50)
                .HasColumnName("END_CUST_ADDR_ID");
            entity.Property(e => e.EndCustomerId)
                .HasMaxLength(20)
                .HasColumnName("END_CUSTOMER_ID");
            entity.Property(e => e.JurisdictionCode)
                .HasMaxLength(20)
                .HasColumnName("JURISDICTION_CODE");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .HasColumnName("NAME");
            entity.Property(e => e.OutputMedia)
                .HasMaxLength(20)
                .HasColumnName("OUTPUT_MEDIA");
            entity.Property(e => e.Party)
                .HasMaxLength(20)
                .HasColumnName("PARTY");
            entity.Property(e => e.PartyType)
                .HasMaxLength(20)
                .HasColumnName("PARTY_TYPE");
            entity.Property(e => e.PrimaryContact)
                .HasMaxLength(35)
                .HasColumnName("PRIMARY_CONTACT");
            entity.Property(e => e.Rowkey)
                .HasMaxLength(50)
                .HasColumnName("ROWKEY");
            entity.Property(e => e.Rowversion)
                .HasColumnType("datetime")
                .HasColumnName("ROWVERSION");
            entity.Property(e => e.SecondaryContact)
                .HasMaxLength(35)
                .HasColumnName("SECONDARY_CONTACT");
            entity.Property(e => e.State)
                .HasMaxLength(35)
                .HasColumnName("STATE");
            entity.Property(e => e.ValidFrom)
                .HasColumnType("datetime")
                .HasColumnName("VALID_FROM");
            entity.Property(e => e.ValidTo)
                .HasColumnType("datetime")
                .HasColumnName("VALID_TO");
            entity.Property(e => e.ZipCode)
                .HasMaxLength(35)
                .HasColumnName("ZIP_CODE");
        });

        modelBuilder.Entity<CustomerInfoAddressCft>(entity =>
        {
            entity.HasKey(e => e.Rowkey);

            entity.ToTable("CUSTOMER_INFO_ADDRESS_CFT", "IFS");

            entity.Property(e => e.Rowkey)
                .HasMaxLength(50)
                .HasColumnName("ROWKEY");
            entity.Property(e => e.CfNotes)
                .HasMaxLength(4000)
                .HasColumnName("CF$_NOTES");
        });

        modelBuilder.Entity<CustomerInfoAddressType>(entity =>
        {
            entity.HasKey(e => new { e.CustomerId, e.AddressId, e.AddressTypeCode });

            entity.ToTable("CUSTOMER_INFO_ADDRESS_TYPE", "IFS");

            entity.Property(e => e.CustomerId)
                .HasMaxLength(20)
                .HasColumnName("CUSTOMER_ID");
            entity.Property(e => e.AddressId)
                .HasMaxLength(50)
                .HasColumnName("ADDRESS_ID");
            entity.Property(e => e.AddressTypeCode)
                .HasMaxLength(20)
                .HasColumnName("ADDRESS_TYPE_CODE");
            entity.Property(e => e.DefAddress)
                .HasMaxLength(5)
                .HasColumnName("DEF_ADDRESS");
            entity.Property(e => e.DefaultDomain)
                .HasMaxLength(5)
                .HasColumnName("DEFAULT_DOMAIN");
            entity.Property(e => e.Party)
                .HasMaxLength(20)
                .HasColumnName("PARTY");
            entity.Property(e => e.Rowkey)
                .HasMaxLength(50)
                .HasColumnName("ROWKEY");
            entity.Property(e => e.Rowversion).HasColumnName("ROWVERSION");
        });

        modelBuilder.Entity<CustomerInfoContact>(entity =>
        {
            entity.HasKey(e => new { e.CustomerId, e.PersonId, e.Guid });

            entity.ToTable("CUSTOMER_INFO_CONTACT", "IFS");

            entity.Property(e => e.CustomerId)
                .HasMaxLength(20)
                .HasColumnName("CUSTOMER_ID");
            entity.Property(e => e.PersonId)
                .HasMaxLength(20)
                .HasColumnName("PERSON_ID");
            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("GUID");
            entity.Property(e => e.AddressPrimary)
                .HasMaxLength(5)
                .HasColumnName("ADDRESS_PRIMARY");
            entity.Property(e => e.AddressSecondary)
                .HasMaxLength(5)
                .HasColumnName("ADDRESS_SECONDARY");
            entity.Property(e => e.BlockedForCrmObjects)
                .HasMaxLength(20)
                .HasColumnName("BLOCKED_FOR_CRM_OBJECTS");
            entity.Property(e => e.CampaignInterest)
                .HasMaxLength(4000)
                .HasColumnName("CAMPAIGN_INTEREST");
            entity.Property(e => e.Changed)
                .HasColumnType("datetime")
                .HasColumnName("CHANGED");
            entity.Property(e => e.ChangedBy)
                .HasMaxLength(30)
                .HasColumnName("CHANGED_BY");
            entity.Property(e => e.ConnectAllCustAddr)
                .HasMaxLength(20)
                .HasColumnName("CONNECT_ALL_CUST_ADDR");
            entity.Property(e => e.ContactAddress)
                .HasMaxLength(50)
                .HasColumnName("CONTACT_ADDRESS");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("CREATED");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(30)
                .HasColumnName("CREATED_BY");
            entity.Property(e => e.CustomerAddress)
                .HasMaxLength(50)
                .HasColumnName("CUSTOMER_ADDRESS");
            entity.Property(e => e.CustomerPrimary)
                .HasMaxLength(5)
                .HasColumnName("CUSTOMER_PRIMARY");
            entity.Property(e => e.CustomerSecondary)
                .HasMaxLength(5)
                .HasColumnName("CUSTOMER_SECONDARY");
            entity.Property(e => e.DecisionPowerType)
                .HasMaxLength(20)
                .HasColumnName("DECISION_POWER_TYPE");
            entity.Property(e => e.Department)
                .HasMaxLength(20)
                .HasColumnName("DEPARTMENT");
            entity.Property(e => e.MainRepresentativeId)
                .HasMaxLength(20)
                .HasColumnName("MAIN_REPRESENTATIVE_ID");
            entity.Property(e => e.Manager)
                .HasMaxLength(20)
                .HasColumnName("MANAGER");
            entity.Property(e => e.ManagerCustAddress)
                .HasMaxLength(50)
                .HasColumnName("MANAGER_CUST_ADDRESS");
            entity.Property(e => e.ManagerGuid)
                .HasMaxLength(50)
                .HasColumnName("MANAGER_GUID");
            entity.Property(e => e.NoteText).HasColumnName("NOTE_TEXT");
            entity.Property(e => e.PersonalInterest)
                .HasMaxLength(4000)
                .HasColumnName("PERSONAL_INTEREST");
            entity.Property(e => e.Role)
                .HasMaxLength(4000)
                .HasColumnName("ROLE");
            entity.Property(e => e.Rowkey)
                .HasMaxLength(50)
                .HasColumnName("ROWKEY");
            entity.Property(e => e.Rowversion)
                .HasColumnType("datetime")
                .HasColumnName("ROWVERSION");
        });

        modelBuilder.Entity<CustomerInfoTab>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CUSTOMER_INFO_TAB", "IFS");

            entity.Property(e => e.AssociationNo)
                .HasMaxLength(50)
                .HasColumnName("ASSOCIATION_NO");
            entity.Property(e => e.B2bCustomer)
                .HasMaxLength(20)
                .HasColumnName("B2B_CUSTOMER");
            entity.Property(e => e.BusinessClassification)
                .HasMaxLength(10)
                .HasColumnName("BUSINESS_CLASSIFICATION");
            entity.Property(e => e.CorporateForm)
                .HasMaxLength(8)
                .HasColumnName("CORPORATE_FORM");
            entity.Property(e => e.Country)
                .HasMaxLength(2)
                .HasColumnName("COUNTRY");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("CREATION_DATE");
            entity.Property(e => e.CustomerCategory)
                .HasMaxLength(20)
                .HasColumnName("CUSTOMER_CATEGORY");
            entity.Property(e => e.CustomerId)
                .HasMaxLength(20)
                .HasColumnName("CUSTOMER_ID");
            entity.Property(e => e.CustomerTaxUsageType)
                .HasMaxLength(5)
                .HasColumnName("CUSTOMER_TAX_USAGE_TYPE");
            entity.Property(e => e.DateOfRegistration)
                .HasColumnType("datetime")
                .HasColumnName("DATE_OF_REGISTRATION");
            entity.Property(e => e.DefaultDomain)
                .HasMaxLength(5)
                .HasColumnName("DEFAULT_DOMAIN");
            entity.Property(e => e.DefaultLanguage)
                .HasMaxLength(2)
                .HasColumnName("DEFAULT_LANGUAGE");
            entity.Property(e => e.IdentifierRefValidation)
                .HasMaxLength(20)
                .HasColumnName("IDENTIFIER_REF_VALIDATION");
            entity.Property(e => e.IdentifierReference)
                .HasMaxLength(100)
                .HasColumnName("IDENTIFIER_REFERENCE");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .HasColumnName("NAME");
            entity.Property(e => e.OneTime)
                .HasMaxLength(20)
                .HasColumnName("ONE_TIME");
            entity.Property(e => e.Party)
                .HasMaxLength(20)
                .HasColumnName("PARTY");
            entity.Property(e => e.PartyType)
                .HasMaxLength(20)
                .HasColumnName("PARTY_TYPE");
            entity.Property(e => e.PictureId).HasColumnName("PICTURE_ID");
            entity.Property(e => e.Rowkey)
                .HasMaxLength(50)
                .HasColumnName("ROWKEY");
            entity.Property(e => e.Rowversion)
                .HasColumnType("datetime")
                .HasColumnName("ROWVERSION");
        });

        modelBuilder.Entity<CustomerPhone>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CustomerPhone", "Contact");

            entity.Property(e => e.CustomerId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("CustomerID");
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CustomerSearch>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Customer_Search");

            entity.Property(e => e.Custno)
                .HasMaxLength(20)
                .HasColumnName("custno");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.SearchString)
                .HasMaxLength(132)
                .HasColumnName("search_string");
        });

        modelBuilder.Entity<CustomersContactCategory>(entity =>
        {
            entity.HasKey(e => new { e.Custno, e.IdContactCategory });

            entity.Property(e => e.Custno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("custno");
            entity.Property(e => e.IdContactCategory).HasColumnName("id_ContactCategory");
        });

        modelBuilder.Entity<CycleCountUnitCostCategory>(entity =>
        {
            entity.HasKey(e => e.Category);

            entity.Property(e => e.Category)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DataMetrics20220713>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("dataMetrics_20220713");

            entity.Property(e => e.Barcode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Cabinet)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CabinetNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Component)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Configuration)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CurveId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CurveID");
            entity.Property(e => e.FilePath)
                .HasMaxLength(260)
                .IsUnicode(false);
            entity.Property(e => e.InputNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StackTestId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StackTestID");
            entity.Property(e => e.Station)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DataSource>(entity =>
        {
            entity.HasKey(e => e.Name).HasName("PK_Source");

            entity.ToTable("DataSource", "Contact");

            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DataType>(entity =>
        {
            entity.HasKey(e => e.Name);

            entity.ToTable("DataType", "Contact");

            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DatabaseSchemaHistory>(entity =>
        {
            entity.HasKey(e => new { e.ObjectName, e.SchemaName, e.ChangeDate });

            entity.ToTable("DatabaseSchemaHistory");

            entity.Property(e => e.ObjectName).HasMaxLength(128);
            entity.Property(e => e.SchemaName).HasMaxLength(128);
            entity.Property(e => e.EventType).HasMaxLength(128);
            entity.Property(e => e.LoginName).HasMaxLength(128);
            entity.Property(e => e.ObjectType).HasMaxLength(128);
            entity.Property(e => e.ServerName)
                .HasMaxLength(100)
                .HasDefaultValueSql("(@@servername)");
        });

        modelBuilder.Entity<Day>(entity =>
        {
            entity.HasKey(e => e.Date);

            entity.Property(e => e.Date).HasColumnType("datetime");
        });

        modelBuilder.Entity<DbRolePermission>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DbRolePermissions", "ApiGateway");

            entity.Property(e => e.PermissionName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("permission_name");
            entity.Property(e => e.Role)
                .HasMaxLength(128)
                .HasColumnName("role");

            entity.HasOne(d => d.PermissionNameNavigation).WithMany()
                .HasForeignKey(d => d.PermissionName)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DbRolePermissions_PermissionGroup");
        });

        modelBuilder.Entity<DbstatsProjectInformation>(entity =>
        {
            entity.HasKey(e => e.AuthorDateTime).HasName("PK__dbstats___0B68ACCC71201119");

            entity.ToTable("dbstats_ProjectInformation", "varko");

            entity.Property(e => e.AuthorDateTime).HasColumnType("datetime");
            entity.Property(e => e.AppVersionArrayCalc)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AppVersionR1)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AuthorName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Comment)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DbVersion)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Password)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ProjectDateTime).HasColumnType("datetime");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DelInpartsub>(entity =>
        {
            entity.HasKey(e => e.UniqueNo);

            entity.ToTable("del_inpartsub");

            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Receipt)
                .HasColumnType("datetime")
                .HasColumnName("receipt");
            entity.Property(e => e.SysP2pCdId)
                .HasMaxLength(32)
                .HasColumnName("$sys_p2p_cd_id");
        });

        modelBuilder.Entity<DelInpartsubAr>(entity =>
        {
            entity.HasKey(e => e.UniqueNo);

            entity.ToTable("del_inpartsub_ar");

            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Receipt)
                .HasColumnType("datetime")
                .HasColumnName("receipt");
            entity.Property(e => e.SysP2pCdId)
                .HasMaxLength(32)
                .HasColumnName("$sys_p2p_cd_id");
        });

        modelBuilder.Entity<DelInpartsubSyd>(entity =>
        {
            entity.HasKey(e => e.UniqueNo);

            entity.ToTable("del_inpartsub_syd");

            entity.HasIndex(e => e.SysP2pCdId, "IX_del_inpartsub_syd");

            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.Receipt)
                .HasColumnType("datetime")
                .HasColumnName("receipt");
            entity.Property(e => e.SysP2pCdId)
                .HasMaxLength(32)
                .HasColumnName("$sys_p2p_cd_id");
        });

        modelBuilder.Entity<DelQueue>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("del_Queue");

            entity.Property(e => e.CastedMessageBody).HasColumnName("casted_message_body");
            entity.Property(e => e.ConversationGroupId).HasColumnName("conversation_group_id");
            entity.Property(e => e.ConversationHandle).HasColumnName("conversation_handle");
            entity.Property(e => e.MessageBody).HasColumnName("message_body");
            entity.Property(e => e.MessageEnqueueTime)
                .HasColumnType("datetime")
                .HasColumnName("message_enqueue_time");
            entity.Property(e => e.MessageSequenceNumber).HasColumnName("message_sequence_number");
            entity.Property(e => e.MessageTypeId).HasColumnName("message_type_id");
            entity.Property(e => e.MessageTypeName)
                .HasMaxLength(128)
                .UseCollation("Latin1_General_BIN")
                .HasColumnName("message_type_name");
            entity.Property(e => e.Priority).HasColumnName("priority");
            entity.Property(e => e.QueuingOrder).HasColumnName("queuing_order");
            entity.Property(e => e.ServiceContractId).HasColumnName("service_contract_id");
            entity.Property(e => e.ServiceContractName)
                .HasMaxLength(128)
                .UseCollation("Latin1_General_BIN")
                .HasColumnName("service_contract_name");
            entity.Property(e => e.ServiceId).HasColumnName("service_id");
            entity.Property(e => e.ServiceName)
                .HasMaxLength(128)
                .UseCollation("Latin1_General_BIN")
                .HasColumnName("service_name");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.Validation)
                .HasMaxLength(1)
                .IsFixedLength()
                .UseCollation("Latin1_General_BIN")
                .HasColumnName("validation");
        });

        modelBuilder.Entity<DeleteEdsImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Delete_EDS_Import");

            entity.Property(e => e.Barcode).HasMaxLength(255);
            entity.Property(e => e.Owner).HasMaxLength(255);
            entity.Property(e => e.PartDescription)
                .HasMaxLength(255)
                .HasColumnName("Part Description");
            entity.Property(e => e.PartNo)
                .HasMaxLength(255)
                .HasColumnName("Part No");
            entity.Property(e => e.Po)
                .HasMaxLength(255)
                .HasColumnName("PO #");
            entity.Property(e => e.Reason).HasMaxLength(255);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(255)
                .HasColumnName("Serial No");
            entity.Property(e => e.Username).HasMaxLength(255);
            entity.Property(e => e.Warehouse).HasMaxLength(255);
        });

        modelBuilder.Entity<DeletemeBal>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("deleteme_bal");

            entity.Property(e => e.ProjId).HasColumnName("projId");
        });

        modelBuilder.Entity<DeviceAttachment>(entity =>
        {
            entity.HasKey(e => new { e.UniqueNo, e.AttachmentType, e.AttachmentPath });

            entity.Property(e => e.UniqueNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.AttachmentType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AttachmentPath)
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.AttachmentTypeNavigation).WithMany(p => p.DeviceAttachments)
                .HasForeignKey(d => d.AttachmentType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DeviceAttachments_AttachmentType");
        });

        modelBuilder.Entity<DeviceMaintenanceType>(entity =>
        {
            entity.HasKey(e => e.MaintenanceTypeId);

            entity.Property(e => e.MaintenanceTypeId)
                .ValueGeneratedNever()
                .HasColumnName("MaintenanceType_ID");
            entity.Property(e => e.IsVisible)
                .HasDefaultValue(true)
                .HasColumnName("isVisible");
            entity.Property(e => e.MaintenanceTypeDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("MaintenanceType_Desc");
        });

        modelBuilder.Entity<DeviceMaintenanceTypesWarehouseReport>(entity =>
        {
            entity.HasKey(e => new { e.MaintenanceTypeId, e.WarehouseCode });

            entity.Property(e => e.MaintenanceTypeId).HasColumnName("MaintenanceType_ID");
            entity.Property(e => e.WarehouseCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SmallStickerHtmlIdTemplate).HasColumnName("Small_Sticker_html_id_Template");
            entity.Property(e => e.StickerHtmlIdTemplate).HasColumnName("Sticker_html_id_Template");

            entity.HasOne(d => d.MaintenanceType).WithMany(p => p.DeviceMaintenanceTypesWarehouseReports)
                .HasForeignKey(d => d.MaintenanceTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DeviceMaintenanceTypesWarehouseReports_DeviceMaintenanceTypes");

            entity.HasOne(d => d.SmallStickerHtmlIdTemplateNavigation).WithMany(p => p.DeviceMaintenanceTypesWarehouseReportSmallStickerHtmlIdTemplateNavigations)
                .HasForeignKey(d => d.SmallStickerHtmlIdTemplate)
                .HasConstraintName("FK_DeviceMaintenanceTypesWarehouseReports_HtmlReportTemplate_small_sticker");

            entity.HasOne(d => d.StickerHtmlIdTemplateNavigation).WithMany(p => p.DeviceMaintenanceTypesWarehouseReportStickerHtmlIdTemplateNavigations)
                .HasForeignKey(d => d.StickerHtmlIdTemplate)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DeviceMaintenanceTypesWarehouseReports_HtmlReportTemplate");

            entity.HasOne(d => d.WarehouseCodeNavigation).WithMany(p => p.DeviceMaintenanceTypesWarehouseReports)
                .HasForeignKey(d => d.WarehouseCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DeviceMaintenanceTypesWarehouseReports_Warehouse");
        });

        modelBuilder.Entity<DevicePropertiesA>(entity =>
        {
            entity.HasKey(e => e.AtransactionId).IsClustered(false);

            entity.ToTable("DevicePropertiesA");

            entity.Property(e => e.AtransactionId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ATransactionID");
            entity.Property(e => e.AdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnName("ADateTime");
            entity.Property(e => e.ArecordAction).HasColumnName("ARecordAction");
            entity.Property(e => e.Atransaction).HasColumnName("ATransaction");
            entity.Property(e => e.AuserId)
                .IsUnicode(false)
                .HasColumnName("AUserID");
            entity.Property(e => e.IdPropertyType).HasColumnName("id_PropertyType");
            entity.Property(e => e.Note)
                .IsUnicode(false)
                .HasColumnName("note");
            entity.Property(e => e.OldIdPropertyType).HasColumnName("Old_Id_PropertyType");
            entity.Property(e => e.OldPartNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Old_PartNo");
            entity.Property(e => e.OldSeqno).HasColumnName("Old_Seqno");
            entity.Property(e => e.OldSerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("Old_Serial_no");
            entity.Property(e => e.OldUniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Old_Unique_No");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.Value)
                .IsUnicode(false)
                .HasColumnName("value");
        });

        modelBuilder.Entity<DevicePropertiesTemp>(entity =>
        {
            entity.HasKey(e => new { e.Partno, e.UniqueNo, e.SerialNo, e.IdPropertyType, e.Seqno });

            entity.ToTable("DeviceProperties_Temp");

            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.IdPropertyType).HasColumnName("id_PropertyType");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Note)
                .IsUnicode(false)
                .HasColumnName("note");
            entity.Property(e => e.Value)
                .IsUnicode(false)
                .HasColumnName("value");
        });

        modelBuilder.Entity<DevicePropertiesTemp2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DeviceProperties_Temp2");

            entity.Property(e => e.IdPropertyType).HasColumnName("id_PropertyType");
            entity.Property(e => e.Note)
                .IsUnicode(false)
                .HasColumnName("note");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.Value)
                .IsUnicode(false)
                .HasColumnName("value");
        });

        modelBuilder.Entity<DevicePropertiesTemp3>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DeviceProperties_Temp3");

            entity.Property(e => e.IdPropertyType).HasColumnName("id_PropertyType");
            entity.Property(e => e.OldPartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("old_partno");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<DeviceProperty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Device_Properties");

            entity.Property(e => e.CategoryDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdCategory).HasColumnName("id_Category");
            entity.Property(e => e.IdPropertyType).HasColumnName("id_PropertyType");
            entity.Property(e => e.Note)
                .IsUnicode(false)
                .HasColumnName("note");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.PropertyTypeDescription)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PropertyTypeShortDesc)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.Value)
                .IsUnicode(false)
                .HasColumnName("value");
        });

        modelBuilder.Entity<DeviceProperty1>(entity =>
        {
            entity.HasKey(e => new { e.Partno, e.UniqueNo, e.SerialNo, e.IdPropertyType, e.Seqno });

            entity.ToTable("DeviceProperties", tb =>
                {
                    tb.HasTrigger("d_AuditDeviceProperties");
                    tb.HasTrigger("i_AuditDeviceProperties");
                    tb.HasTrigger("u_AuditDeviceProperties");
                    tb.HasTrigger("x_AuditDeviceProperties");
                });

            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.IdPropertyType).HasColumnName("id_PropertyType");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Note)
                .IsUnicode(false)
                .HasColumnName("note");
            entity.Property(e => e.Value)
                .IsUnicode(false)
                .HasColumnName("value");

            entity.HasOne(d => d.IdPropertyTypeNavigation).WithMany(p => p.DeviceProperty1s)
                .HasForeignKey(d => d.IdPropertyType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DeviceProperties_DevicePropertyTypes");

            entity.HasOne(d => d.PartnoNavigation).WithMany(p => p.DeviceProperty1s)
                .HasForeignKey(d => d.Partno)
                .HasConstraintName("FK_DeviceProperties_inpart");
        });

        modelBuilder.Entity<DevicePropertyType>(entity =>
        {
            entity.HasKey(e => e.IdPropertyType);

            entity.Property(e => e.IdPropertyType).HasColumnName("id_PropertyType");
            entity.Property(e => e.Color)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdCategory).HasColumnName("id_Category");
            entity.Property(e => e.IsAllocatedIpaddressPropertyType).HasColumnName("isAllocatedIPAddressPropertyType");
            entity.Property(e => e.IsVisible)
                .HasDefaultValue(true)
                .HasColumnName("isVisible");
            entity.Property(e => e.PropertyTypeDescription)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PropertyTypeShortDesc)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.IdCategoryNavigation).WithMany(p => p.DevicePropertyTypes)
                .HasForeignKey(d => d.IdCategory)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DevicePropertyTypes__DevicePropertyTypeCategories");
        });

        modelBuilder.Entity<DevicePropertyTypeCategory>(entity =>
        {
            entity.HasKey(e => e.IdCategory);

            entity.Property(e => e.IdCategory).HasColumnName("id_Category");
            entity.Property(e => e.CategoryDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DguvTestresult>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DGUV_testresults");

            entity.Property(e => e.CustomerId)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Factual)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Filestoragepath)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("guid");
            entity.Property(e => e.I)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Ie)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IE");
            entity.Property(e => e.Ieac)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IEac");
            entity.Property(e => e.Iedc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IEdc");
            entity.Property(e => e.Iins)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Info)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Ipe)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IPE");
            entity.Property(e => e.Ipeac)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IPEac");
            entity.Property(e => e.Ipedc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IPEdc");
            entity.Property(e => e.Nextduedate).HasColumnName("nextduedate");
            entity.Property(e => e.P)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Passed)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("passed");
            entity.Property(e => e.Pf)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PF");
            entity.Property(e => e.Rins)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Rpe)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.S)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceMode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sequence_mode");
            entity.Property(e => e.SequenceName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sequence_name");
            entity.Property(e => e.Street)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("street");
            entity.Property(e => e.TestDeviceManufacturer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("testDeviceManufacturer");
            entity.Property(e => e.TestDeviceModel)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("testDeviceModel");
            entity.Property(e => e.TestDeviceSerialNr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("testDeviceSerialNr");
            entity.Property(e => e.TestNote)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Testequipmentref)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("testequipmentref");
            entity.Property(e => e.Tester)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tester");
            entity.Property(e => e.Testtime)
                .HasColumnType("datetime")
                .HasColumnName("testtime");
            entity.Property(e => e.Txt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("txt");
            entity.Property(e => e.U)
                .HasMaxLength(210)
                .IsUnicode(false);
            entity.Property(e => e.Uins)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Ulpe)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ULpe");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Unique_no");
            entity.Property(e => e.Zip)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("zip");
        });

        modelBuilder.Entity<DisassemblePart>(entity =>
        {
            entity.HasKey(e => new { e.ParentPartNo, e.ChildPartNo }).HasName("PK_IFS_DISASSEMBLE_PART");

            entity.ToTable("DisassemblePart", "IFS");

            entity.HasIndex(e => e.ParentPartNo, "IDX_DisassemblePart_ParentPartNo");

            entity.Property(e => e.ParentPartNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.ChildPartNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PricePercentage).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.ChildPartNoNavigation).WithMany(p => p.DisassembleParts)
                .HasForeignKey(d => d.ChildPartNo)
                .HasConstraintName("FK_DisassemblePart_inpart");

            entity.HasOne(d => d.ParentPartNoNavigation).WithMany(p => p.DisassembleParts)
                .HasForeignKey(d => d.ParentPartNo)
                .HasConstraintName("FK_DisassemblePart_PART_CATALOG");
        });

        modelBuilder.Entity<DivisionBurdenRate>(entity =>
        {
            entity.HasKey(e => new { e.Division, e.ValidFrom });

            entity.ToTable("DivisionBurdenRate", tb => tb.HasTrigger("TR_DivisionBurdenRate_date_range_cannot_overlap"));

            entity.Property(e => e.Division)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("division");
            entity.Property(e => e.EmployeeBurdenRate)
                .HasComputedColumnSql("([EmployeeBurdenRatePercent]*(0.01))", false)
                .HasColumnType("numeric(17, 10)");
            entity.Property(e => e.EmployeeBurdenRatePercent).HasColumnType("decimal(14, 8)");
            entity.Property(e => e.SubcontractorBurdenRate)
                .HasComputedColumnSql("([SubcontractorBurdenRatePercent]*(0.01))", false)
                .HasColumnType("numeric(17, 10)");
            entity.Property(e => e.SubcontractorBurdenRatePercent).HasColumnType("decimal(14, 8)");

            entity.HasOne(d => d.DivisionNavigation).WithMany(p => p.DivisionBurdenRates)
                .HasPrincipalKey(p => p.Division)
                .HasForeignKey(d => d.Division)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DivisionBurdenRate_pedivision");
        });

        modelBuilder.Entity<DivisionPayrollTypeBurdenRate>(entity =>
        {
            entity.HasKey(e => new { e.Division, e.Ref4, e.ValidFrom });

            entity.ToTable("DivisionPayrollTypeBurdenRate");

            entity.Property(e => e.Division)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("division");
            entity.Property(e => e.Ref4)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ref4");
            entity.Property(e => e.BurdenRate)
                .HasComputedColumnSql("([BurdenRatePercent]*(0.01))", false)
                .HasColumnType("numeric(17, 10)");
            entity.Property(e => e.BurdenRatePercent).HasColumnType("decimal(14, 8)");

            entity.HasOne(d => d.DivisionNavigation).WithMany(p => p.DivisionPayrollTypeBurdenRates)
                .HasPrincipalKey(p => p.Division)
                .HasForeignKey(d => d.Division)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DivisionPayrollTypeBurdenRate_pedivision");

            entity.HasOne(d => d.Ref4Navigation).WithMany(p => p.DivisionPayrollTypeBurdenRates)
                .HasForeignKey(d => d.Ref4)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DivisionPayrollTypeBurdenRate_peemployee_ref4");
        });

        modelBuilder.Entity<Dpro>(entity =>
        {
            entity.HasKey(e => e.Macaddress).HasName("PK_SpeakerTest_DPRO");

            entity.ToTable("DPRO", "SpeakerTest");

            entity.Property(e => e.Macaddress)
                .HasMaxLength(6)
                .IsFixedLength()
                .HasColumnName("MACAddress");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DropboxCursor>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("dropboxCursor");

            entity.Property(e => e.Cursor)
                .IsUnicode(false)
                .HasColumnName("cursor");
        });

        modelBuilder.Entity<Dropboxerror>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("dropboxerrors");

            entity.Property(e => e.AttachmentCategory)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AttachmentType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CloudFolderTemplate)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DropboxFileId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dropboxFileID");
            entity.Property(e => e.DropboxFilePathSuffix)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DropboxFolderId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CS_AS")
                .HasColumnName("dropboxFolderID");
            entity.Property(e => e.Entitydesc)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("entitydesc");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.FileName)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("fileName");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.IdLevel).HasColumnName("id_Level");
            entity.Property(e => e.IsUploaded).HasColumnName("isUploaded");
            entity.Property(e => e.UserFolderPath)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DryHireBillingDaysRate>(entity =>
        {
            entity.HasKey(e => new { e.Company, e.Daysused });

            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("company");
            entity.Property(e => e.Daysused).HasColumnName("daysused");
            entity.Property(e => e.Daysbilled).HasColumnName("daysbilled");

            entity.HasOne(d => d.CompanyNavigation).WithMany(p => p.DryHireBillingDaysRates)
                .HasForeignKey(d => d.Company)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DryHireBillingDaysRates_company");
        });

        modelBuilder.Entity<DuplicateBarcodes20211020>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("duplicate_barcodes_20211020");

            entity.Property(e => e.Area)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("area");
            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.MsreplTranVersion).HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.Parentpartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("parentpartno");
            entity.Property(e => e.ParentserialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("parentserial_no");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Primekey).HasColumnName("primekey");
            entity.Property(e => e.Receipt)
                .HasColumnType("datetime")
                .HasColumnName("receipt");
            entity.Property(e => e.Row)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<EdsrebarcodedDevicesScanHistory>(entity =>
        {
            entity.HasKey(e => new { e.ScannedDateTime, e.Barcode });

            entity.ToTable("EDSRebarcodedDevicesScanHistory");

            entity.Property(e => e.ScannedDateTime)
                .HasPrecision(1)
                .HasDefaultValueSql("(sysdatetimeoffset())");
            entity.Property(e => e.Barcode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ScannedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EgnyePermissionsType>(entity =>
        {
            entity.HasKey(e => e.PermissionsType);

            entity.Property(e => e.PermissionsType)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EgnyteShareRequest>(entity =>
        {
            entity.HasKey(e => new { e.Email, e.FileStoragePath });

            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.FileStoragePath)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AttachmentCategory)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CreationTimeUtc)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnName("CreationTimeUTC");
            entity.Property(e => e.FileStorageGuid).HasColumnName("FileStorageGUID");
            entity.Property(e => e.IsAddFolderMember).HasColumnName("isAddFolderMember");
            entity.Property(e => e.IsExecuted).HasColumnName("isExecuted");
            entity.Property(e => e.IsRemoveFolderMember).HasColumnName("isRemoveFolderMember");
            entity.Property(e => e.LastUpdateTimeUtc)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnName("LastUpdateTimeUTC");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Note)
                .IsUnicode(false)
                .HasColumnName("note");
            entity.Property(e => e.Server)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(@@servername)");
            entity.Property(e => e.SharedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");

            entity.HasOne(d => d.FileStorage).WithMany(p => p.EgnyteShareRequests)
                .HasForeignKey(d => d.FileStorageGuid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EgnyteShareRequests_FileStoragePaths");
        });

        modelBuilder.Entity<EgnyteShareRequestsBulkSave>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EgnyteShareRequestsBulkSave");

            entity.Property(e => e.AttachmentCategory)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreationTimeTimeUtc).HasColumnName("CreationTimeTimeUTC");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.FileStorageGuid).HasColumnName("FileStorageGUID");
            entity.Property(e => e.FileStoragePath)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsExecuted).HasColumnName("isExecuted");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Note)
                .IsUnicode(false)
                .HasColumnName("note");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<EgnyteSharingServer>(entity =>
        {
            entity.HasKey(e => e.ServerName);

            entity.Property(e => e.ServerName).HasMaxLength(128);
            entity.Property(e => e.ServerUriprefix)
                .HasMaxLength(150)
                .HasColumnName("ServerURIPrefix");
        });

        modelBuilder.Entity<EjArJhCusArowningForFinesse>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EJ_AR_JH_cusARowningForFinesse");

            entity.Property(e => e.Batchno)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.IdSt).HasColumnName("idST");
            entity.Property(e => e.Idowner).HasColumnName("idowner");
            entity.Property(e => e.Idstock).HasColumnName("idstock");
            entity.Property(e => e.Mininv).HasColumnName("mininv");
            entity.Property(e => e.Own).HasColumnName("own");
            entity.Property(e => e.Owner)
                .HasMaxLength(50)
                .HasColumnName("owner");
            entity.Property(e => e.ParentpartNo).HasColumnName("parentpart_no");
            entity.Property(e => e.ParentserialNo).HasColumnName("parentserial_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .HasColumnName("partno");
            entity.Property(e => e.Receipt).HasColumnName("receipt");
            entity.Property(e => e.Revision).HasColumnName("revision");
            entity.Property(e => e.Serialnumber).HasColumnName("serialnumber");
            entity.Property(e => e.UniqueNo).HasColumnName("unique_no");
            entity.Property(e => e.Warehouse)
                .HasMaxLength(50)
                .HasColumnName("warehouse");
        });

        modelBuilder.Entity<EjArJhInpartsubAllnbc>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EJ_AR_JH_inpartsub_allnbc");

            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.Groupno).HasColumnName("groupno");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .HasColumnName("partno");
            entity.Property(e => e.Receipt)
                .HasColumnType("smalldatetime")
                .HasColumnName("receipt");
        });

        modelBuilder.Entity<EjArJhInpartsubBc>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EJ_AR_JH_inpartsub_bc");

            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(41)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.Groupno).HasColumnName("groupno");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .HasColumnName("partno");
            entity.Property(e => e.Receipt)
                .HasColumnType("datetime")
                .HasColumnName("receipt");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(50)
                .HasColumnName("serial_no");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(50)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<EjArJhTransAllnbcAddedRemovedTfr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EJ_AR_JH_trans_allnbc_added_removed_tfrs");

            entity.Property(e => e.AvblDayTimeDelayBack).HasColumnType("smalldatetime");
            entity.Property(e => e.AvblDayTimeIn).HasColumnType("smalldatetime");
            entity.Property(e => e.AvblDayTimeOut).HasColumnType("smalldatetime");
            entity.Property(e => e.Caption).HasMaxLength(250);
            entity.Property(e => e.CreationDate).HasColumnType("smalldatetime");
            entity.Property(e => e.DateTimeIn).HasColumnType("smalldatetime");
            entity.Property(e => e.DateTimeOut).HasColumnType("smalldatetime");
            entity.Property(e => e.Entitydesc)
                .HasMaxLength(151)
                .HasColumnName("entitydesc");
            entity.Property(e => e.FPartno)
                .HasMaxLength(50)
                .HasColumnName("F_partno");
            entity.Property(e => e.FinesseNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.IdStockType2JobParent).HasColumnName("IdStockType2Job_Parent");
            entity.Property(e => e.Jobstate)
                .HasMaxLength(50)
                .HasColumnName("jobstate");
            entity.Property(e => e.Loginname).HasMaxLength(4000);
            entity.Property(e => e.Note)
                .HasMaxLength(250)
                .HasColumnName("note");
            entity.Property(e => e.Number)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("number");
            entity.Property(e => e.Owner)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("owner");
            entity.Property(e => e.Partdesc)
                .HasMaxLength(255)
                .HasColumnName("partdesc");
            entity.Property(e => e.PurchasePrice).HasColumnType("money");
            entity.Property(e => e.Trantype)
                .HasMaxLength(50)
                .HasColumnName("trantype");
            entity.Property(e => e.WhStit)
                .HasMaxLength(10)
                .HasColumnName("WH_stit");
        });

        modelBuilder.Entity<EjArJhTransAllnbcMerged>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EJ_AR_JH_trans_allnbc_merged");

            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.EjEntitydesc)
                .HasMaxLength(151)
                .HasColumnName("EJ_entitydesc");
            entity.Property(e => e.Enterdate)
                .HasColumnType("smalldatetime")
                .HasColumnName("enterdate");
            entity.Property(e => e.Groupno).HasColumnName("groupno");
            entity.Property(e => e.Onhand)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("onhand");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .HasColumnName("partno");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Ref3)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ref3");
            entity.Property(e => e.Ref4)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("ref5");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.Sortdate)
                .HasColumnType("smalldatetime")
                .HasColumnName("sortdate");
            entity.Property(e => e.TranType)
                .HasMaxLength(17)
                .IsUnicode(false);
            entity.Property(e => e.Trandate)
                .HasColumnType("datetime")
                .HasColumnName("trandate");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.Userid)
                .HasMaxLength(4000)
                .HasColumnName("userid");
        });

        modelBuilder.Entity<EjArJhTransAllnbcOnOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EJ_AR_JH_trans_allnbc_on_orders");

            entity.Property(e => e.AvblDayTimeDelayBack).HasColumnType("smalldatetime");
            entity.Property(e => e.AvblDayTimeIn).HasColumnType("smalldatetime");
            entity.Property(e => e.AvblDayTimeOut).HasColumnType("smalldatetime");
            entity.Property(e => e.Comment).HasMaxLength(4000);
            entity.Property(e => e.CustomNumber).HasMaxLength(50);
            entity.Property(e => e.EjEntitydesc)
                .HasMaxLength(151)
                .HasColumnName("EJ_entitydesc");
            entity.Property(e => e.EjEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EJ_entityno");
            entity.Property(e => e.EjPartdesc)
                .HasMaxLength(255)
                .HasColumnName("EJ_partdesc");
            entity.Property(e => e.FPartno)
                .HasMaxLength(50)
                .HasColumnName("F_partno");
            entity.Property(e => e.IdStockType2JobParent).HasColumnName("IdStockType2Job_Parent");
            entity.Property(e => e.InLoginname)
                .HasMaxLength(4000)
                .HasColumnName("in_Loginname");
            entity.Property(e => e.JStatus)
                .HasMaxLength(50)
                .HasColumnName("j_status");
            entity.Property(e => e.JobStockType).HasMaxLength(50);
            entity.Property(e => e.OutLoginname)
                .HasMaxLength(4000)
                .HasColumnName("out_Loginname");
            entity.Property(e => e.Owner)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("owner");
            entity.Property(e => e.WhJ)
                .HasMaxLength(10)
                .HasColumnName("WH_j");
            entity.Property(e => e.WhJRet)
                .HasMaxLength(10)
                .HasColumnName("WH_jRet");
            entity.Property(e => e.WhStj)
                .HasMaxLength(10)
                .HasColumnName("WH_stj");
        });

        modelBuilder.Entity<EjArJhTransBcAddedRemoved>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EJ_AR_JH_trans_bc_added_removed");

            entity.Property(e => e.Barcode).HasMaxLength(50);
            entity.Property(e => e.BoughtDate).HasColumnType("smalldatetime");
            entity.Property(e => e.Caption)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("caption");
            entity.Property(e => e.CreationTime).HasColumnType("smalldatetime");
            entity.Property(e => e.EjEntityDesc)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("EJ_EntityDesc");
            entity.Property(e => e.EjPartdesc)
                .HasMaxLength(255)
                .HasColumnName("EJ_partdesc");
            entity.Property(e => e.EjPartno)
                .HasMaxLength(15)
                .HasColumnName("EJ_partno");
            entity.Property(e => e.Entityno)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.FPartno)
                .HasMaxLength(50)
                .HasColumnName("F_partno");
            entity.Property(e => e.IIdOwner).HasColumnName("i_idOwner");
            entity.Property(e => e.IOwner)
                .HasMaxLength(41)
                .IsUnicode(false)
                .HasColumnName("i_owner");
            entity.Property(e => e.IdJobService).HasColumnName("idJobService");
            entity.Property(e => e.Idjob)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("idjob");
            entity.Property(e => e.Idstock).HasColumnName("idstock");
            entity.Property(e => e.InCaption)
                .HasMaxLength(250)
                .HasColumnName("in_Caption");
            entity.Property(e => e.InType).HasColumnName("in_Type");
            entity.Property(e => e.InWarranty)
                .HasColumnType("smalldatetime")
                .HasColumnName("in_Warranty");
            entity.Property(e => e.LastService).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginnameC)
                .HasMaxLength(4000)
                .HasColumnName("loginname_c");
            entity.Property(e => e.LoginnameU)
                .HasMaxLength(4000)
                .HasColumnName("loginname_u");
            entity.Property(e => e.OutCaption)
                .HasMaxLength(250)
                .HasColumnName("out_Caption");
            entity.Property(e => e.OutCreationDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("out_CreationDate");
            entity.Property(e => e.OutType).HasColumnName("out_Type");
            entity.Property(e => e.OutWarranty)
                .HasColumnType("smalldatetime")
                .HasColumnName("out_Warranty");
            entity.Property(e => e.Price).HasColumnType("numeric(12, 4)");
            entity.Property(e => e.Serialnumber).HasMaxLength(50);
            entity.Property(e => e.T2jWh)
                .HasMaxLength(10)
                .HasColumnName("t2j_WH");
            entity.Property(e => e.UpdateTime).HasColumnType("smalldatetime");
        });

        modelBuilder.Entity<EjArJhTransBcMergedForIntran>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EJ_AR_JH_trans_bc_merged_for_intrans");

            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(41)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.EjEntitydesc)
                .HasMaxLength(100)
                .HasColumnName("EJ_entitydesc");
            entity.Property(e => e.Enterdate)
                .HasColumnType("datetime")
                .HasColumnName("enterdate");
            entity.Property(e => e.Groupno).HasColumnName("groupno");
            entity.Property(e => e.Idlogaction).HasColumnName("idlogaction");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .HasColumnName("partno");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Ref3)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ref3");
            entity.Property(e => e.Ref4)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("ref5");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(50)
                .HasColumnName("serial_no");
            entity.Property(e => e.Sortdate)
                .HasColumnType("datetime")
                .HasColumnName("sortdate");
            entity.Property(e => e.TranType)
                .HasMaxLength(17)
                .IsUnicode(false);
            entity.Property(e => e.Trandate)
                .HasColumnType("datetime")
                .HasColumnName("trandate");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(50)
                .HasColumnName("unique_no");
            entity.Property(e => e.Userid)
                .HasMaxLength(4000)
                .HasColumnName("userid");
        });

        modelBuilder.Entity<EjArJhTransBcOnOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EJ_AR_JH_trans_bc_on_orders");

            entity.Property(e => e.AvblDayTimeDelayBack).HasColumnType("smalldatetime");
            entity.Property(e => e.AvblDayTimeIn).HasColumnType("smalldatetime");
            entity.Property(e => e.AvblDayTimeOut).HasColumnType("smalldatetime");
            entity.Property(e => e.AvblEnd).HasColumnType("smalldatetime");
            entity.Property(e => e.AvblStart).HasColumnType("smalldatetime");
            entity.Property(e => e.Barcode).HasMaxLength(50);
            entity.Property(e => e.BarcodeP)
                .HasMaxLength(50)
                .HasColumnName("barcode_p");
            entity.Property(e => e.Caption)
                .HasMaxLength(50)
                .HasColumnName("caption");
            entity.Property(e => e.CustomNumberJ)
                .HasMaxLength(50)
                .HasColumnName("CustomNumber_J");
            entity.Property(e => e.Datetimein)
                .HasColumnType("smalldatetime")
                .HasColumnName("datetimein");
            entity.Property(e => e.Datetimeout)
                .HasColumnType("smalldatetime")
                .HasColumnName("datetimeout");
            entity.Property(e => e.DayTimeDelayBackJ)
                .HasColumnType("datetime")
                .HasColumnName("DayTimeDelayBack_J");
            entity.Property(e => e.DayTimeInJ)
                .HasColumnType("datetime")
                .HasColumnName("DayTimeIn_J");
            entity.Property(e => e.DayTimeOutJ)
                .HasColumnType("datetime")
                .HasColumnName("DayTimeOut_J");
            entity.Property(e => e.EjEntitydesc)
                .HasMaxLength(100)
                .HasColumnName("EJ_entitydesc");
            entity.Property(e => e.EjEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EJ_entityno");
            entity.Property(e => e.EjPartdesc)
                .HasMaxLength(255)
                .HasColumnName("EJ_partdesc");
            entity.Property(e => e.EjPartno)
                .HasMaxLength(15)
                .HasColumnName("EJ_partno");
            entity.Property(e => e.FPartno)
                .HasMaxLength(50)
                .HasColumnName("F_partno");
            entity.Property(e => e.FinesseCaption).HasMaxLength(10);
            entity.Property(e => e.IBack).HasColumnName("i_back");
            entity.Property(e => e.IIdOwner).HasColumnName("i_idOwner");
            entity.Property(e => e.IOwner)
                .HasMaxLength(41)
                .IsUnicode(false)
                .HasColumnName("i_owner");
            entity.Property(e => e.IdStockItem2JobParent).HasColumnName("IdStockItem2Job_Parent");
            entity.Property(e => e.Idjob).HasColumnName("idjob");
            entity.Property(e => e.Idstocktype2job).HasColumnName("idstocktype2job");
            entity.Property(e => e.InLoginname)
                .HasMaxLength(4000)
                .HasColumnName("in_Loginname");
            entity.Property(e => e.Loaded).HasColumnName("loaded");
            entity.Property(e => e.OutLoginname)
                .HasMaxLength(4000)
                .HasColumnName("out_Loginname");
            entity.Property(e => e.ParEjPartno)
                .HasMaxLength(15)
                .HasColumnName("par_EJ_partno");
            entity.Property(e => e.ParFPartno)
                .HasMaxLength(50)
                .HasColumnName("par_F_partno");
            entity.Property(e => e.ParIdstockitem).HasColumnName("par_idstockitem");
            entity.Property(e => e.ParIdstocktype).HasColumnName("par_idstocktype");
            entity.Property(e => e.ParPartdesc)
                .HasMaxLength(255)
                .HasColumnName("par_partdesc");
            entity.Property(e => e.Price)
                .HasColumnType("numeric(12, 4)")
                .HasColumnName("price");
            entity.Property(e => e.RentalPriceSum).HasColumnType("money");
            entity.Property(e => e.Serialnumber).HasMaxLength(50);
            entity.Property(e => e.SerialnumberP)
                .HasMaxLength(50)
                .HasColumnName("Serialnumber_p");
            entity.Property(e => e.T2jIdstock).HasColumnName("t2j_idstock");
            entity.Property(e => e.T2jWh)
                .HasMaxLength(10)
                .HasColumnName("t2j_WH");
            entity.Property(e => e.TBack).HasColumnName("t_back");
            entity.Property(e => e.WhRet)
                .HasMaxLength(10)
                .HasColumnName("wh_Ret");
            entity.Property(e => e.WtfCheckOutDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("WTF_CheckOutDate");
        });

        modelBuilder.Entity<EjArJhTransBcOnWhTransfer>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EJ_AR_JH_trans_bc_on_WH_transfers");

            entity.Property(e => e.Barcode).HasMaxLength(50);
            entity.Property(e => e.DestCaption)
                .HasMaxLength(50)
                .HasColumnName("dest_Caption");
            entity.Property(e => e.DestDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("dest_Date");
            entity.Property(e => e.DestFactor).HasColumnName("dest_Factor");
            entity.Property(e => e.DestIdStockType2InventoryTypeParent).HasColumnName("dest_IdStockType2InventoryTypeParent");
            entity.Property(e => e.DestNote)
                .HasMaxLength(250)
                .HasColumnName("dest_note");
            entity.Property(e => e.DestUser)
                .HasMaxLength(4000)
                .HasColumnName("dest_user");
            entity.Property(e => e.DestWh)
                .HasMaxLength(10)
                .HasColumnName("dest_WH");
            entity.Property(e => e.FPartno)
                .HasMaxLength(50)
                .HasColumnName("F_partno");
            entity.Property(e => e.IOwner)
                .HasMaxLength(41)
                .IsUnicode(false)
                .HasColumnName("i_owner");
            entity.Property(e => e.Serialnumber).HasMaxLength(50);
            entity.Property(e => e.SrcCaption)
                .HasMaxLength(50)
                .HasColumnName("src_Caption");
            entity.Property(e => e.SrcDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("src_Date");
            entity.Property(e => e.SrcFactor).HasColumnName("src_Factor");
            entity.Property(e => e.SrcIdStockType2InventoryTypeParent).HasColumnName("src_IdStockType2InventoryTypeParent");
            entity.Property(e => e.SrcNote)
                .HasMaxLength(250)
                .HasColumnName("src_note");
            entity.Property(e => e.SrcUser)
                .HasMaxLength(4000)
                .HasColumnName("src_user");
            entity.Property(e => e.SrcWh)
                .HasMaxLength(10)
                .HasColumnName("src_WH");
        });

        modelBuilder.Entity<EjStockType2JobLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EJ_StockType2JobLog");

            entity.Property(e => e.LogDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<EjUser>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EJ_User");

            entity.Property(e => e.Cepassword)
                .HasMaxLength(150)
                .HasColumnName("CEPassword");
            entity.Property(e => e.CrmemailAddress)
                .HasMaxLength(100)
                .HasColumnName("CRMEmailAddress");
            entity.Property(e => e.CrmemailPsw)
                .HasMaxLength(200)
                .HasColumnName("CRMEmailPsw");
            entity.Property(e => e.CrmemailUser)
                .HasMaxLength(100)
                .HasColumnName("CRMEmailUser");
            entity.Property(e => e.Department).HasMaxLength(50);
            entity.Property(e => e.Description).HasMaxLength(400);
            entity.Property(e => e.DisplayName).HasMaxLength(50);
            entity.Property(e => e.FirstName).HasMaxLength(50);
            entity.Property(e => e.Handle).HasMaxLength(50);
            entity.Property(e => e.Loginname).HasMaxLength(50);
            entity.Property(e => e.Password).HasMaxLength(50);
            entity.Property(e => e.Surname).HasMaxLength(50);
            entity.Property(e => e.Userlevel).HasMaxLength(50);
        });

        modelBuilder.Entity<Em2CrewBidValue>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("em2CrewBidValues");

            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("jobtype");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<Em2EmpCompany>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("em2EmpCompany");

            entity.Property(e => e.Addr1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("addr1");
            entity.Property(e => e.Addr2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("addr2");
            entity.Property(e => e.Addr3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("addr3");
            entity.Property(e => e.City)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("city");
            entity.Property(e => e.Companyfax)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("companyfax");
            entity.Property(e => e.Companyname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("companyname");
            entity.Property(e => e.Companyname2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("companyname2");
            entity.Property(e => e.Companyno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("companyno");
            entity.Property(e => e.Companynotes)
                .IsUnicode(false)
                .HasColumnName("companynotes");
            entity.Property(e => e.Companyphone)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("companyphone");
            entity.Property(e => e.Companystatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("companystatus");
            entity.Property(e => e.Companywebaddress)
                .IsUnicode(false)
                .HasColumnName("companywebaddress");
            entity.Property(e => e.Contactcellphone)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("contactcellphone");
            entity.Property(e => e.Contactemail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("contactemail");
            entity.Property(e => e.Contactfax)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("contactfax");
            entity.Property(e => e.Contactfirstname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("contactfirstname");
            entity.Property(e => e.Contactlastname)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("contactlastname");
            entity.Property(e => e.Contactofficephone)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("contactofficephone");
            entity.Property(e => e.Contactother1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("contactother1");
            entity.Property(e => e.Contactother2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("contactother2");
            entity.Property(e => e.Country)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("country");
            entity.Property(e => e.Defaultproptype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("defaultproptype");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.State)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("state");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
            entity.Property(e => e.Zip)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("zip");
        });

        modelBuilder.Entity<Em2EmpReview>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("em2EmpReviews");

            entity.Property(e => e.AttitudeNotes).IsUnicode(false);
            entity.Property(e => e.AttitudeRating)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CommunicationSkillsNotes).IsUnicode(false);
            entity.Property(e => e.CommunicationSkillsRating)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("notes");
            entity.Property(e => e.Rating)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("rating");
            entity.Property(e => e.ResponsibilityNotes).IsUnicode(false);
            entity.Property(e => e.ResponsibilityRating)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SafetyConscientiousnessNotes).IsUnicode(false);
            entity.Property(e => e.SafetyConscientiousnessRating)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.TechnicalSkillsNotes).IsUnicode(false);
            entity.Property(e => e.TechnicalSkillsRating)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<Em2Employee>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("em2Employees");

            entity.Property(e => e.Addr1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("addr1");
            entity.Property(e => e.Addr2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("addr2");
            entity.Property(e => e.Addr3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("addr3");
            entity.Property(e => e.Airport)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("airport");
            entity.Property(e => e.AlienExpiredate)
                .HasColumnType("datetime")
                .HasColumnName("alien_expiredate");
            entity.Property(e => e.Alienno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("alienno");
            entity.Property(e => e.Birthdate)
                .HasColumnType("datetime")
                .HasColumnName("birthdate");
            entity.Property(e => e.Birthplace)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("birthplace");
            entity.Property(e => e.Cellphone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cellphone");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("city");
            entity.Property(e => e.Countrycode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("countrycode");
            entity.Property(e => e.CovidvaccineStatusCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("COVIDVaccineStatusCode");
            entity.Property(e => e.Dietary)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dietary");
            entity.Property(e => e.DriversLicense)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DriversLicenseExpire).HasColumnType("datetime");
            entity.Property(e => e.DriversLicenseState)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.EmergencyName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("emergency_name");
            entity.Property(e => e.EmergencyPhone1)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("emergency_phone1");
            entity.Property(e => e.EmergencyPhone2)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("emergency_phone2");
            entity.Property(e => e.EmergencyRelation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("emergency_relation");
            entity.Property(e => e.EmpDriversLicenseScan)
                .IsUnicode(false)
                .HasColumnName("empDriversLicenseScan");
            entity.Property(e => e.EmpHeadShotFilePath)
                .IsUnicode(false)
                .HasColumnName("empHeadShotFilePath");
            entity.Property(e => e.EmpPassportScanFilePath)
                .IsUnicode(false)
                .HasColumnName("empPassportScanFilePath");
            entity.Property(e => e.Empcompanyno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empcompanyno");
            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.Empstatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("empstatus");
            entity.Property(e => e.ExpireDate)
                .HasColumnType("datetime")
                .HasColumnName("expire_date");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fax");
            entity.Property(e => e.Filestat)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("filestat");
            entity.Property(e => e.Firstname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("firstname");
            entity.Property(e => e.Gradecd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("gradecd");
            entity.Property(e => e.Groupno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("groupno");
            entity.Property(e => e.Hiredate)
                .HasColumnType("datetime")
                .HasColumnName("hiredate");
            entity.Property(e => e.ISolvedId).HasColumnName("iSolvedID");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Issuecountry)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("issuecountry");
            entity.Property(e => e.Issuedate)
                .HasColumnType("datetime")
                .HasColumnName("issuedate");
            entity.Property(e => e.Issueplace)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("issueplace");
            entity.Property(e => e.JobTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastPayRaiseDate).HasColumnType("datetime");
            entity.Property(e => e.Lastname)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("lastname");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("locationcd");
            entity.Property(e => e.Midname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("midname");
            entity.Property(e => e.Nationality)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nationality");
            entity.Property(e => e.Nickname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("nickname");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("notes");
            entity.Property(e => e.OfficeDirectPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OtherEcontact)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OtherEContact");
            entity.Property(e => e.Passportno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("passportno");
            entity.Property(e => e.Phone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("phone");
            entity.Property(e => e.Ref2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ref2");
            entity.Property(e => e.Ref4)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ref4");
            entity.Property(e => e.SecondEmpPassportIssuePlace)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SecondEmpPassportScanFilePath)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SecondPassportExpirationDate).HasColumnType("datetime");
            entity.Property(e => e.SecondPassportIssueCountry)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SecondPassportIssueDate).HasColumnType("datetime");
            entity.Property(e => e.SecondPassportNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.Smoker)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("smoker");
            entity.Property(e => e.Spouse)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("spouse");
            entity.Property(e => e.Ssn)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ssn");
            entity.Property(e => e.State)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("state");
            entity.Property(e => e.Termdate)
                .HasColumnType("datetime")
                .HasColumnName("termdate");
            entity.Property(e => e.Travelrestrictions)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("travelrestrictions");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
            entity.Property(e => e.UserName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("user_name");
            entity.Property(e => e.Zip)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("zip");
        });

        modelBuilder.Entity<Em2EmployeeJobType>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("em2EmployeeJobTypes");

            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("jobtype");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<Em2EmployeePay>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("em2EmployeePay");

            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Note)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Paycode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("paycode");
            entity.Property(e => e.Payrate).HasColumnName("payrate");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<Em2JobType>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("em2JobTypes");

            entity.Property(e => e.AbraHourlyPayCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.AbraHourlyPayCodePrefix)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Abraearningscodeprefix)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("abraearningscodeprefix");
            entity.Property(e => e.Bidratehourly).HasColumnName("bidratehourly");
            entity.Property(e => e.Hours).HasColumnName("hours");
            entity.Property(e => e.IsActive).HasColumnName("isActive");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsQualification).HasColumnName("is_qualification");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Jobdesc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("jobdesc");
            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("jobtype");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<Em2JobTypeTranslation>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("em2JobTypeTranslations");

            entity.Property(e => e.IdLanguage).HasColumnName("id_language");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Jobdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("jobdesc");
            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("jobtype");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<EmailDataSourceFieldMap>(entity =>
        {
            entity.HasKey(e => new { e.Source, e.Type }).HasName("PK_EmailData_SourceFieldMap");

            entity.ToTable("EmailDataSourceFieldMap", "Contact");

            entity.Property(e => e.Source)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MultipleAllowed).HasDefaultValue(true);
            entity.Property(e => e.Value)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.SourceNavigation).WithMany(p => p.EmailDataSourceFieldMaps)
                .HasForeignKey(d => d.Source)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmailDataSourceFieldMap_Source");

            entity.HasOne(d => d.TypeNavigation).WithMany(p => p.EmailDataSourceFieldMaps)
                .HasForeignKey(d => d.Type)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmailDataSourceFieldMap_Type");
        });

        modelBuilder.Entity<Employee>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("employee");

            entity.Property(e => e.Cellphone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cellphone");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.EmpName)
                .HasMaxLength(51)
                .IsUnicode(false)
                .HasColumnName("emp_name");
            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.Empstatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("empstatus");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.Hiredate)
                .HasColumnType("datetime")
                .HasColumnName("hiredate");
            entity.Property(e => e.Nickname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("nickname");
            entity.Property(e => e.ToName)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("to_name");
            entity.Property(e => e.UserName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("user_name");
        });

        modelBuilder.Entity<EmployeeAddress>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("EmployeeAddress", "Contact");

            entity.Property(e => e.AddressLine1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AddressLine2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AddressLine3)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AddressLine4)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Country)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EmployeeID");
            entity.Property(e => e.PostalCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.StateProvince)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(4)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EmployeeAssignmentStatus>(entity =>
        {
            entity.HasKey(e => e.StatusCode);

            entity.ToTable("EmployeeAssignmentStatus");

            entity.Property(e => e.StatusCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StatusDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EmployeeAttachment>(entity =>
        {
            entity.HasKey(e => e.Empno);

            entity.Property(e => e.Empno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.AttachmentType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeAttachmentPath).IsUnicode(false);

            entity.HasOne(d => d.AttachmentTypeNavigation).WithMany(p => p.EmployeeAttachments)
                .HasForeignKey(d => d.AttachmentType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AttachmentType");
        });

        modelBuilder.Entity<EmployeeAttachmentBulkSave>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EmployeeAttachmentBulkSave");

            entity.Property(e => e.AttachmentType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeAttachmentPath).IsUnicode(false);
            entity.Property(e => e.Empno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<EmployeeCompanyStatus>(entity =>
        {
            entity.HasKey(e => e.StatusCode);

            entity.ToTable("EmployeeCompanyStatus");

            entity.Property(e => e.StatusCode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StatusDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EmployeeContact>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("EmployeeContact", "Contact");

            entity.Property(e => e.Department)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("EmployeeID");
            entity.Property(e => e.JobCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.JobTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.JobType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Location)
                .HasMaxLength(70)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(51)
                .IsUnicode(false);
            entity.Property(e => e.Organization)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PictureFilePath).IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Username)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EmployeeCovidvaccineStatus>(entity =>
        {
            entity.HasKey(e => e.CovidvaccineStatusCode);

            entity.ToTable("EmployeeCOVIDVaccineStatus");

            entity.Property(e => e.CovidvaccineStatusCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("COVIDVaccineStatusCode");
            entity.Property(e => e.StatusDescription)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("statusDescription");
        });

        modelBuilder.Entity<EmployeeDataSheetPropertiesV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Employee_Data_Sheet_Properties_v");

            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.IdPropertyType).HasColumnName("id_PropertyType");
            entity.Property(e => e.Note)
                .IsUnicode(false)
                .HasColumnName("note");
            entity.Property(e => e.PropertyTypeDescription)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Value)
                .IsUnicode(false)
                .HasColumnName("value");
        });

        modelBuilder.Entity<EmployeeDataSheetV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Employee_Data_Sheet_v");

            entity.Property(e => e.Addr1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("addr1");
            entity.Property(e => e.Airport)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("airport");
            entity.Property(e => e.Birthdate)
                .HasColumnType("datetime")
                .HasColumnName("birthdate");
            entity.Property(e => e.Birthplace)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("birthplace");
            entity.Property(e => e.Cellphone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cellphone");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("city");
            entity.Property(e => e.Countrycode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("countrycode");
            entity.Property(e => e.Dietary)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dietary");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.EmpHeadShotFilePath)
                .IsUnicode(false)
                .HasColumnName("empHeadShotFilePath");
            entity.Property(e => e.EmpPassportScanFilePath)
                .IsUnicode(false)
                .HasColumnName("empPassportScanFilePath");
            entity.Property(e => e.Empname)
                .HasMaxLength(72)
                .IsUnicode(false)
                .HasColumnName("empname");
            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.ExpireDate)
                .HasColumnType("datetime")
                .HasColumnName("expire_date");
            entity.Property(e => e.Issuecountry)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("issuecountry");
            entity.Property(e => e.Issuedate)
                .HasColumnType("datetime")
                .HasColumnName("issuedate");
            entity.Property(e => e.Issueplace)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("issueplace");
            entity.Property(e => e.Nationality)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nationality");
            entity.Property(e => e.Passportno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("passportno");
            entity.Property(e => e.Ref4)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ref4");
            entity.Property(e => e.Spouse)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("spouse");
            entity.Property(e => e.State)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("state");
            entity.Property(e => e.Zip)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("zip");
        });

        modelBuilder.Entity<EmployeeDepartment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Employee__3214EC27F5BFDD0E");

            entity.ToTable("EmployeeDepartment");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.DepartmentGroup)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PaylocityCode)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EmployeeEmail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("EmployeeEmail", "Contact");

            entity.Property(e => e.EmailAddress)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("EmployeeID");
            entity.Property(e => e.Type)
                .HasMaxLength(4)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EmployeeJobTypeQualification>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Employee_JobType_Qualifications");

            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("jobtype");
        });

        modelBuilder.Entity<EmployeeJobTypeQualificationsCommaList>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("EmployeeJobTypeQualificationsCommaList");

            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
        });

        modelBuilder.Entity<EmployeeJobTypeQualificationsHistory>(entity =>
        {
            entity.HasKey(e => new { e.Empno, e.Jobtype, e.StartDate });

            entity.ToTable("EmployeeJobTypeQualificationsHistory");

            entity.HasIndex(e => new { e.Empno, e.Jobtype, e.StartDate }, "IX_empno_and_jobtype");

            entity.HasIndex(e => new { e.EndDate, e.StartDate }, "IX_enddate");

            entity.HasIndex(e => new { e.Jobtype, e.StartDate, e.EndDate }, "IX_jobtype");

            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("jobtype");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.IsDefault).HasColumnName("is_default");

            entity.HasOne(d => d.EmpnoNavigation).WithMany(p => p.EmployeeJobTypeQualificationsHistories)
                .HasForeignKey(d => d.Empno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmployeeJobTypeQualificationsHistory_empno");

            entity.HasOne(d => d.EndDateNavigation).WithMany(p => p.EmployeeJobTypeQualificationsHistoryEndDateNavigations)
                .HasForeignKey(d => d.EndDate)
                .HasConstraintName("FK_EmployeeJobTypeQualificationsHistory_EndDate");

            entity.HasOne(d => d.JobtypeNavigation).WithMany(p => p.EmployeeJobTypeQualificationsHistories)
                .HasForeignKey(d => d.Jobtype)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmployeeJobTypeQualificationsHistory_jobtype");

            entity.HasOne(d => d.StartDateNavigation).WithMany(p => p.EmployeeJobTypeQualificationsHistoryStartDateNavigations)
                .HasForeignKey(d => d.StartDate)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmployeeJobTypeQualificationsHistory_StartDate");
        });

        modelBuilder.Entity<EmployeeLanguagesBulkSave>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EmployeeLanguagesBulkSave");

            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("empno");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Languagecd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("languagecd");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<EmployeeLocation>(entity =>
        {
            entity.HasKey(e => e.Location).HasName("PK_EmployeeWebPage");

            entity.ToTable("EmployeeLocation", "Contact");

            entity.Property(e => e.Location)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.LocationParent)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EmployeePayRate>(entity =>
        {
            entity.HasKey(e => new { e.Empno, e.JobType, e.StartDate });

            entity.ToTable("EmployeePayRate", tb =>
                {
                    tb.HasTrigger("TR_EmployeePayRate_Prevent_StartDate_EndDate_Overlap");
                    tb.HasTrigger("TR_EmployeePayRate_TrackHistory");
                    tb.HasTrigger("d_AuditEmployeePayRate");
                    tb.HasTrigger("i_AuditEmployeePayRate");
                    tb.HasTrigger("u_AuditEmployeePayRate");
                });

            entity.HasIndex(e => e.EndDate, "IX_pejob__by_enddate");

            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.JobType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.Note)
                .HasMaxLength(1000)
                .IsUnicode(false);

            entity.HasOne(d => d.EmpnoNavigation).WithMany(p => p.EmployeePayRates)
                .HasForeignKey(d => d.Empno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmployeePayRate_peemployee");

            entity.HasOne(d => d.JobTypeNavigation).WithMany(p => p.EmployeePayRates)
                .HasForeignKey(d => d.JobType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmployeePayRate_pejob");
        });

        modelBuilder.Entity<EmployeePayRateA>(entity =>
        {
            entity.HasKey(e => e.AtransactionId).IsClustered(false);

            entity.ToTable("EmployeePayRateA");

            entity.Property(e => e.AtransactionId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ATransactionID");
            entity.Property(e => e.AdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnName("ADateTime");
            entity.Property(e => e.ArecordAction).HasColumnName("ARecordAction");
            entity.Property(e => e.Atransaction).HasColumnName("ATransaction");
            entity.Property(e => e.AuserId)
                .IsUnicode(false)
                .HasColumnName("AUserID");
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.JobType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Note)
                .HasMaxLength(1000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EmployeePayRateHistory>(entity =>
        {
            entity.HasKey(e => new { e.Empno, e.JobType, e.StartDate, e.ValidFromUtc });

            entity.ToTable("EmployeePayRateHistory");

            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.JobType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ValidFromUtc)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnName("ValidFromUTC");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(128)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.RemovedBy).HasMaxLength(128);
            entity.Property(e => e.ValidToUtc).HasColumnName("ValidToUTC");
        });

        modelBuilder.Entity<EmployeePhone>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("EmployeePhone", "Contact");

            entity.Property(e => e.EmployeeId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("EmployeeID");
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EmployeePropertiesBulkSave>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EmployeePropertiesBulkSave");

            entity.Property(e => e.Empno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.IdPropertyType).HasColumnName("id_PropertyType");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Note)
                .IsUnicode(false)
                .HasColumnName("note");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
            entity.Property(e => e.Value)
                .IsUnicode(false)
                .HasColumnName("value");
        });

        modelBuilder.Entity<EmployeeProperty>(entity =>
        {
            entity.HasKey(e => new { e.Empno, e.IdPropertyType, e.Seqno });

            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.IdPropertyType).HasColumnName("id_PropertyType");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Note)
                .IsUnicode(false)
                .HasColumnName("note");
            entity.Property(e => e.Value)
                .IsUnicode(false)
                .HasColumnName("value");

            entity.HasOne(d => d.EmpnoNavigation).WithMany(p => p.EmployeeProperties)
                .HasForeignKey(d => d.Empno)
                .HasConstraintName("FK_EmployeeProperties_peemployee");

            entity.HasOne(d => d.IdPropertyTypeNavigation).WithMany(p => p.EmployeeProperties)
                .HasForeignKey(d => d.IdPropertyType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmployeeProperties_EmployeePropertyTypes");
        });

        modelBuilder.Entity<EmployeePropertyType>(entity =>
        {
            entity.HasKey(e => e.IdPropertyType);

            entity.Property(e => e.IdPropertyType).HasColumnName("id_PropertyType");
            entity.Property(e => e.IdCategory).HasColumnName("id_Category");
            entity.Property(e => e.PropertyTypeDescription)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PropertyTypeShortDesc)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.IdCategoryNavigation).WithMany(p => p.EmployeePropertyTypes)
                .HasForeignKey(d => d.IdCategory)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmployeePropertyTypes__PartPropertyTypeCategories");
        });

        modelBuilder.Entity<EmployeePropertyTypeCategory>(entity =>
        {
            entity.HasKey(e => e.IdCategory);

            entity.Property(e => e.IdCategory).HasColumnName("id_Category");
            entity.Property(e => e.CategoryDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IsInternal)
                .HasDefaultValue(true)
                .HasColumnName("isInternal");
        });

        modelBuilder.Entity<EmployeeStatus>(entity =>
        {
            entity.HasKey(e => e.StatusCode);

            entity.ToTable("EmployeeStatus");

            entity.Property(e => e.StatusCode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StatusDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EmployeeTrainingTopicsCompleted>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Employee_Training_Topics_Completed");

            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("jobtype");
            entity.Property(e => e.Topic)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("topic");
            entity.Property(e => e.TrainingDate)
                .HasColumnType("datetime")
                .HasColumnName("trainingDate");
            entity.Property(e => e.TrainingDateEnd)
                .HasColumnType("datetime")
                .HasColumnName("trainingDateEnd");
        });

        modelBuilder.Entity<EmployeeTrainingTreeStructureCategoriesBulkSave>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EmployeeTrainingTreeStructureCategoriesBulkSave");

            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.NodeDescription)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ParentNodeDescription)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<EmployeeTrainingTreeStructureCategoriesBulkSave2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EmployeeTrainingTreeStructureCategoriesBulkSave2");

            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.NodeDescriptionNew)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NodeDescription_new");
            entity.Property(e => e.NodeDescriptionOld)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NodeDescription_old");
            entity.Property(e => e.ParentNodeDescription)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<EmployeeTrainingTreeStructureCategory>(entity =>
        {
            entity.HasKey(e => e.NodeDescription);

            entity.Property(e => e.NodeDescription)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ParentNodeDescription)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EmployeeUsageHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Employee_Usage_History");

            entity.Property(e => e.AddInventory).HasColumnName("Add Inventory");
            entity.Property(e => e.CanChangePartNumbers).HasColumnName("can_change_part_numbers");
            entity.Property(e => e.CanCreateInvoices).HasColumnName("can_create_invoices");
            entity.Property(e => e.CanEditEmpMedicalInfo).HasColumnName("can_edit_empMedicalInfo");
            entity.Property(e => e.CanEditEmployee).HasColumnName("can_edit_employee");
            entity.Property(e => e.CanEditEmployeeRate).HasColumnName("can_edit_employee_rate");
            entity.Property(e => e.CanEditInventory).HasColumnName("can_edit_inventory");
            entity.Property(e => e.CanEditPartSubhires).HasColumnName("can_edit_part_subhires");
            entity.Property(e => e.CanEditParts).HasColumnName("can_edit_parts");
            entity.Property(e => e.CanEditProjects).HasColumnName("can_edit_projects");
            entity.Property(e => e.CanEditPurchaseOrders).HasColumnName("can_edit_purchase_orders");
            entity.Property(e => e.CanEditSubhire).HasColumnName("can_edit_subhire");
            entity.Property(e => e.CanEditVendors).HasColumnName("can_edit_vendors");
            entity.Property(e => e.CanSeeBids).HasColumnName("can_see_bids");
            entity.Property(e => e.CanSeeEmpRates).HasColumnName("can_see_empRates");
            entity.Property(e => e.CanSeeEmpReviews).HasColumnName("can_see_empReviews");
            entity.Property(e => e.CanSeeInvoicing).HasColumnName("can_see_invoicing");
            entity.Property(e => e.CanViewPurchaseOrders).HasColumnName("can_view_purchase_orders");
            entity.Property(e => e.ContactMaintenance).HasColumnName("Contact Maintenance");
            entity.Property(e => e.CrewPayrollReport).HasColumnName("Crew Payroll Report");
            entity.Property(e => e.CrewTools).HasColumnName("Crew Tools");
            entity.Property(e => e.CrewTraining).HasColumnName("Crew Training");
            entity.Property(e => e.DeviceMaintenance).HasColumnName("Device Maintenance");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.EmployeeMaintenance).HasColumnName("Employee Maintenance");
            entity.Property(e => e.Empname)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("empname");
            entity.Property(e => e.IsSysadmin).HasColumnName("is_sysadmin");
            entity.Property(e => e.JobCosting).HasColumnName("Job Costing");
            entity.Property(e => e.JobTypes)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.LastEmployeeMaintenanceUse).HasPrecision(3);
            entity.Property(e => e.LastFinesseUse).HasPrecision(3);
            entity.Property(e => e.LastInventoryMaintenanceUse).HasPrecision(3);
            entity.Property(e => e.LastPartMaintenanceUse).HasPrecision(3);
            entity.Property(e => e.LastProjectMaintenanceUse).HasPrecision(3);
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("name");
            entity.Property(e => e.OwnerEntity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("owner_entity");
            entity.Property(e => e.PartMaintenance).HasColumnName("Part Maintenance");
            entity.Property(e => e.ProjectMaintenance).HasColumnName("Project Maintenance");
            entity.Property(e => e.QuoteContractReport).HasColumnName("Quote/Contract Report");
            entity.Property(e => e.RequestForInvoicingInquiry).HasColumnName("Request for Invoicing Inquiry");
            entity.Property(e => e.TouringInvoiceBuilder).HasColumnName("Touring Invoice Builder");
            entity.Property(e => e.UserCreationDate).HasColumnType("datetime");
            entity.Property(e => e.WarehouseEntity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("warehouse_entity");
        });

        modelBuilder.Entity<EmployeesInMyDivision>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Employees_In_My_Division");

            entity.Property(e => e.Empname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("empname");
            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.Firstname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("firstname");
            entity.Property(e => e.GroupStatus)
                .HasMaxLength(75)
                .IsUnicode(false);
            entity.Property(e => e.InMyDivision)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Lastname)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("lastname");
        });

        modelBuilder.Entity<EnglishWord>(entity =>
        {
            entity.HasKey(e => e.American);

            entity.HasIndex(e => e.British, "UC_EnglishWords_British").IsUnique();

            entity.Property(e => e.American)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.British)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EquipmentCheckedoutWDate>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("equipment_checkedout_wDates");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.EstQty).HasColumnName("est_qty");
            entity.Property(e => e.LineNo).HasColumnName("line_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("todate");
            entity.Property(e => e.Trandate)
                .HasColumnType("datetime")
                .HasColumnName("trandate");
        });

        modelBuilder.Entity<EquipmentCheckoutSummary>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("equipment_checkout_summary");

            entity.Property(e => e.CBig).HasColumnName("cBig");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.ItemsOut).HasColumnName("items_out");
            entity.Property(e => e.ItemsReq).HasColumnName("items_req");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("todate");
            entity.Property(e => e.Trandate)
                .HasColumnType("datetime")
                .HasColumnName("trandate");
        });

        modelBuilder.Entity<EquipmentOwner>(entity =>
        {
            entity.HasKey(e => e.OwnerCode);

            entity.ToTable("EquipmentOwner", tb => tb.HasTrigger("SetSequenceTypeDefault"));

            entity.Property(e => e.OwnerCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.AllowAddNewEquipment).HasDefaultValue(true);
            entity.Property(e => e.BarcodeSequenceType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DoIntercompanyBilling).HasDefaultValue(true);
            entity.Property(e => e.IncludeInJobCosting).HasDefaultValue(true);
            entity.Property(e => e.OwnerDesc)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.CompanyCodeNavigation).WithMany(p => p.EquipmentOwners)
                .HasForeignKey(d => d.CompanyCode)
                .HasConstraintName("FK_EquipmentOwner_Company");
        });

        modelBuilder.Entity<EquipmentSubhire>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.Partno, e.LineNo });

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("d_AuditEquipmentSubhires");
                    tb.HasTrigger("i_AuditEquipmentSubhires");
                    tb.HasTrigger("u_AuditEquipmentSubhires");
                });

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.LineNo).HasColumnName("line_no");
            entity.Property(e => e.Billabledays).HasColumnName("billabledays");
            entity.Property(e => e.DeliveryRate).HasColumnType("money");
            entity.Property(e => e.InvoiceNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Ponumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PONumber");
            entity.Property(e => e.Rate).HasColumnType("money");
            entity.Property(e => e.RateType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ReturnRate).HasColumnType("money");
            entity.Property(e => e.Siteno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("siteno");
            entity.Property(e => e.StatusCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.Vendno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("vendno");
            entity.Property(e => e.VendorName)
                .HasMaxLength(250)
                .IsUnicode(false);

            entity.HasOne(d => d.EntitynoNavigation).WithMany(p => p.EquipmentSubhires)
                .HasForeignKey(d => d.Entityno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EquipmentSubhires_glentities");

            entity.HasOne(d => d.PartnoNavigation).WithMany(p => p.EquipmentSubhires)
                .HasForeignKey(d => d.Partno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EquipmentSubhires_inpart");

            entity.HasOne(d => d.StatusCodeNavigation).WithMany(p => p.EquipmentSubhires)
                .HasForeignKey(d => d.StatusCode)
                .HasConstraintName("FK_EquipmentSubhires_EquipmentSubhireStatus");
        });

        modelBuilder.Entity<EquipmentSubhireStatus>(entity =>
        {
            entity.HasKey(e => e.StatusCode);

            entity.ToTable("EquipmentSubhireStatus");

            entity.Property(e => e.StatusCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EquipmentSubhiresA>(entity =>
        {
            entity.HasKey(e => e.AtransactionId).IsClustered(false);

            entity.ToTable("EquipmentSubhiresA");

            entity.Property(e => e.AtransactionId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ATransactionID");
            entity.Property(e => e.AdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnName("ADateTime");
            entity.Property(e => e.ArecordAction).HasColumnName("ARecordAction");
            entity.Property(e => e.Atransaction).HasColumnName("ATransaction");
            entity.Property(e => e.AuserId)
                .IsUnicode(false)
                .HasColumnName("AUserID");
            entity.Property(e => e.Billabledays).HasColumnName("billabledays");
            entity.Property(e => e.DeliveryRate).HasColumnType("money");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.InvoiceNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LineNo).HasColumnName("line_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Ponumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PONumber");
            entity.Property(e => e.Rate).HasColumnType("money");
            entity.Property(e => e.RateType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ReturnRate).HasColumnType("money");
            entity.Property(e => e.Siteno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("siteno");
            entity.Property(e => e.StatusCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.Vendno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("vendno");
            entity.Property(e => e.VendorName)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EquipmentSubhiresTemp>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.Partno, e.LineNo });

            entity.ToTable("EquipmentSubhires_Temp");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.LineNo).HasColumnName("line_no");
            entity.Property(e => e.Billabledays).HasColumnName("billabledays");
            entity.Property(e => e.DeliveryRate).HasColumnType("money");
            entity.Property(e => e.InvoiceNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Ponumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PONumber");
            entity.Property(e => e.Rate).HasColumnType("money");
            entity.Property(e => e.RateType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ReturnRate).HasColumnType("money");
            entity.Property(e => e.Siteno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("siteno");
            entity.Property(e => e.StatusCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.Vendno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("vendno");
            entity.Property(e => e.VendorName)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ErppartExistenceReference>(entity =>
        {
            entity.HasKey(e => new { e.Partno, e.Company });

            entity.ToTable("ERPPartExistenceReference");

            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Partdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("partdesc");
        });

        modelBuilder.Entity<ExchangeRateBook>(entity =>
        {
            entity.HasKey(e => new { e.Currency, e.Startdate });

            entity.ToTable("ExchangeRateBook", tb => tb.HasTrigger("TR_exchangeratebook_date_range_cannot_overlap"));

            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(128)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("createdBy");
            entity.Property(e => e.DateCreated)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dateCreated");
            entity.Property(e => e.DateModified)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dateModified");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(128)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("modifiedBy");
            entity.Property(e => e.Ratetodollars).HasColumnName("ratetodollars");

            entity.HasOne(d => d.CurrencyNavigation).WithMany(p => p.ExchangeRateBooks)
                .HasForeignKey(d => d.Currency)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ExchangeRateBook_Currency");
        });

        modelBuilder.Entity<ExchangeRateDaily>(entity =>
        {
            entity.HasKey(e => new { e.Currency, e.Startdate });

            entity.ToTable("ExchangeRateDaily", tb => tb.HasTrigger("TR_exchangeratedaily_date_range_cannot_overlap"));

            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.DateModified)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dateModified");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Ratetodollars).HasColumnName("ratetodollars");

            entity.HasOne(d => d.CurrencyNavigation).WithMany(p => p.ExchangeRateDailies)
                .HasForeignKey(d => d.Currency)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ExchangeRateDaily_Currency");
        });

        modelBuilder.Entity<ExpenseCategory>(entity =>
        {
            entity.HasKey(e => e.CategoryCode);

            entity.Property(e => e.CategoryCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CategoryDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ExpensePeriodType>(entity =>
        {
            entity.HasKey(e => e.PeriodTypeCode);

            entity.Property(e => e.PeriodTypeCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PeriodTypeDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sortorder).HasColumnName("sortorder");
        });

        modelBuilder.Entity<Failure>(entity =>
        {
            entity.ToTable("Failures", "SpeakerTest");

            entity.HasIndex(e => e.Description, "UC_Failures_FailureID").IsUnique();

            entity.Property(e => e.FailureId)
                .ValueGeneratedNever()
                .HasColumnName("FailureID");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FedExLinkedAccountsNumber>(entity =>
        {
            entity.HasKey(e => e.CompanyCode);

            entity.Property(e => e.CompanyCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LinkedAccountCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LocalAccountCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MasterAccountCode)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.CompanyCodeNavigation).WithOne(p => p.FedExLinkedAccountsNumber)
                .HasForeignKey<FedExLinkedAccountsNumber>(d => d.CompanyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FedExLinkedAccountsNumbers_Company");
        });

        modelBuilder.Entity<FileAttachmentIndex>(entity =>
        {
            entity.HasKey(e => new { e.FileName, e.SubFolderPath, e.Guid });

            entity.ToTable("FileAttachmentIndex", tb =>
                {
                    tb.HasTrigger("TR_FileAttachmentIndex_Instead_Of_Delete");
                    tb.HasTrigger("TR_FileAttachmentIndex_Instead_Of_Insert");
                });

            entity.Property(e => e.FileName)
                .HasMaxLength(255)
                .HasColumnName("fileName");
            entity.Property(e => e.SubFolderPath).HasMaxLength(255);
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.Commodity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("commodity");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DocumentExpirationDateUtc)
                .HasColumnType("datetime")
                .HasColumnName("DocumentExpirationDateUTC");
            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.FileExtension)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("fileExtension");
            entity.Property(e => e.FileNameUnique)
                .HasMaxLength(255)
                .HasColumnName("fileNameUnique");
            entity.Property(e => e.IdManufacturer).HasColumnName("idManufacturer");
            entity.Property(e => e.IdPurchaseOrderInvoice).HasColumnName("idPurchaseOrderInvoice");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.SecondaryCategoryCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Topic)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("topic");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");

            entity.HasOne(d => d.EntitynoNavigation).WithMany(p => p.FileAttachmentIndices)
                .HasForeignKey(d => d.Entityno)
                .HasConstraintName("FK_FileAttachmentIndex_glentities");

            entity.HasOne(d => d.PartnoNavigation).WithMany(p => p.FileAttachmentIndices)
                .HasForeignKey(d => d.Partno)
                .HasConstraintName("FK_FileAttachmentIndex_inpart");
        });

        modelBuilder.Entity<FileAttachmentIndexStagingArea>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("FileAttachmentIndexStagingArea");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.FileName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.IsCreate).HasColumnName("isCreate");
            entity.Property(e => e.IsDelete).HasColumnName("isDelete");
            entity.Property(e => e.SubFolderPath)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FilePermissionsGroup>(entity =>
        {
            entity.HasKey(e => e.GroupName).HasName("PK_FilePermissionsGroup");

            entity.Property(e => e.GroupName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EgnytePermissionGroup)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.GroupPath).IsUnicode(false);
        });

        modelBuilder.Entity<FileStorageEntityNumbersToRollup>(entity =>
        {
            entity.HasKey(e => e.EntitynoBeingRolledUp);

            entity.ToTable("FileStorageEntityNumbersToRollup");

            entity.Property(e => e.EntitynoBeingRolledUp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("entitynoBeingRolledUp");
            entity.Property(e => e.EntitynoToRollUpTo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("entitynoToRollUpTo");

            entity.HasOne(d => d.EntitynoBeingRolledUpNavigation).WithOne(p => p.FileStorageEntityNumbersToRollup)
                .HasForeignKey<FileStorageEntityNumbersToRollup>(d => d.EntitynoBeingRolledUp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FileStorageEntityNumbersToRollup_glentities");
        });

        modelBuilder.Entity<FileStoragePath>(entity =>
        {
            entity.HasKey(e => e.FileStorageGuid);

            entity.ToTable("fileStoragePaths");

            entity.HasIndex(e => e.FileStoragePath1, "fileStoragePaths_Path_Must_Be_Unique")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.FileStorageGuid)
                .ValueGeneratedNever()
                .HasColumnName("fileStorageGUID");
            entity.Property(e => e.CreationTimeUtc).HasColumnType("datetime");
            entity.Property(e => e.FileStoragePath1)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("fileStoragePath");
            entity.Property(e => e.LatestCreatedFileTimeUtc).HasColumnType("datetime");
        });

        modelBuilder.Entity<FinesseApplicationDistributionFilesToIgnore>(entity =>
        {
            entity.HasKey(e => e.FileName).IsClustered(false);

            entity.ToTable("FinesseApplicationDistributionFilesToIgnore");

            entity.Property(e => e.FileName)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("file_name");
        });

        modelBuilder.Entity<FinesseCategoriesShopifyCollection>(entity =>
        {
            entity.HasKey(e => new { e.Commodity, e.ShopifyCollectionId });

            entity.Property(e => e.Commodity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("commodity");
            entity.Property(e => e.ShopifyCollectionId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ShopifyCollectionID");
            entity.Property(e => e.CompanyCode)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.CommodityNavigation).WithMany(p => p.FinesseCategoriesShopifyCollections)
                .HasForeignKey(d => d.Commodity)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FinesseCategoriesShopifyCollections_incommodity");

            entity.HasOne(d => d.CompanyCodeNavigation).WithMany(p => p.FinesseCategoriesShopifyCollections)
                .HasForeignKey(d => d.CompanyCode)
                .HasConstraintName("FK_FinesseCategoriesShopifyCollections_company");

            entity.HasOne(d => d.ShopifyCollection).WithMany(p => p.FinesseCategoriesShopifyCollections)
                .HasForeignKey(d => d.ShopifyCollectionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FinesseCategoriesShopifyCollections_UsedGearSalesCollections");
        });

        modelBuilder.Entity<FinesseInventoryReceiptMessage>(entity =>
        {
            entity.HasKey(e => e.Ref).HasName("PK_IFS_FinesseInventoryReceiptMessages");

            entity.ToTable("FinesseInventoryReceiptMessages", "IFS", tb => tb.HasTrigger("trg_FinesseInventoryReceiptMessages_Insert"));

            entity.HasIndex(e => new { e.OrderNo, e.PartNo }, "IX_FinesseInventoryReceiptMessages_PartNo_OrderNo");

            entity.Property(e => e.Ref).HasColumnName("REF");
            entity.Property(e => e.ConditionCode)
                .HasMaxLength(10)
                .HasColumnName("CONDITION_CODE");
            entity.Property(e => e.DueDate)
                .HasColumnType("datetime")
                .HasColumnName("DUE_DATE");
            entity.Property(e => e.Error)
                .HasMaxLength(4000)
                .HasColumnName("ERROR");
            entity.Property(e => e.HeaderNote)
                .HasMaxLength(4000)
                .HasColumnName("HEADER_NOTE");
            entity.Property(e => e.InternalCustomer)
                .HasMaxLength(10)
                .HasColumnName("INTERNAL_CUSTOMER");
            entity.Property(e => e.InternalDestination)
                .HasMaxLength(50)
                .HasColumnName("INTERNAL_DESTINATION");
            entity.Property(e => e.InternalDestinationDescription)
                .HasMaxLength(4000)
                .HasColumnName("INTERNAL_DESTINATION_DESCRIPTION");
            entity.Property(e => e.InventoryLocation)
                .HasMaxLength(35)
                .HasColumnName("INVENTORY_LOCATION");
            entity.Property(e => e.LineNo).HasColumnName("Line_No");
            entity.Property(e => e.LineNote)
                .HasMaxLength(4000)
                .HasColumnName("LINE_NOTE");
            entity.Property(e => e.LotBatchNo)
                .HasMaxLength(20)
                .HasColumnName("LOT_BATCH_NO");
            entity.Property(e => e.MatReqRef)
                .HasMaxLength(2000)
                .HasColumnName("MAT_REQ_REF");
            entity.Property(e => e.MessageBody).HasColumnName("message_body");
            entity.Property(e => e.MessageDate)
                .HasColumnType("datetime")
                .HasColumnName("MESSAGE_DATE");
            entity.Property(e => e.OrderNo).HasMaxLength(12);
            entity.Property(e => e.OrigMaterialReqNo).HasColumnName("ORIG_MATERIAL_REQ_NO");
            entity.Property(e => e.OrigMaterialReqRel).HasColumnName("ORIG_MATERIAL_REQ_REL");
            entity.Property(e => e.PartNo).HasMaxLength(25);
            entity.Property(e => e.PoLine).HasColumnName("PO_LINE");
            entity.Property(e => e.PoRelease).HasColumnName("PO_RELEASE");
            entity.Property(e => e.RawError).HasColumnName("RAW_ERROR");
            entity.Property(e => e.ReadyToSend).HasDefaultValue(true);
            entity.Property(e => e.SerialNo).HasMaxLength(12);
            entity.Property(e => e.Site)
                .HasMaxLength(5)
                .HasColumnName("SITE");
            entity.Property(e => e.TransactionDate).HasDefaultValueSql("(sysdatetimeoffset())");
            entity.Property(e => e.TransactionType).HasMaxLength(10);
            entity.Property(e => e.Updated).HasDefaultValueSql("(sysdatetimeoffset())");
            entity.Property(e => e.UserId).HasMaxLength(128);
        });

        modelBuilder.Entity<Frequency>(entity =>
        {
            entity.HasKey(e => e.FrequencyCode).HasName("PK__Frequenc__FC537834B0AEE57D");

            entity.ToTable("Frequency");

            entity.Property(e => e.FrequencyCode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.FrequencyAdjective)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FrequencyNoun)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FrequencyVector>(entity =>
        {
            entity.ToTable("FrequencyVector", "SpeakerTest");

            entity.Property(e => e.FrequencyVectorId)
                .ValueGeneratedNever()
                .HasColumnName("FrequencyVectorID");
        });

        modelBuilder.Entity<FrequencyVectorValue>(entity =>
        {
            entity.HasKey(e => new { e.FrequencyVectorId, e.AvgBinIndex });

            entity.ToTable("FrequencyVectorValue", "SpeakerTest");

            entity.Property(e => e.FrequencyVectorId).HasColumnName("FrequencyVectorID");
            entity.Property(e => e.HiFftbinIndex).HasColumnName("HiFFTBinIndex");
            entity.Property(e => e.LoFftbinIndex).HasColumnName("LoFFTBinIndex");

            entity.HasOne(d => d.FrequencyVector).WithMany(p => p.FrequencyVectorValues)
                .HasForeignKey(d => d.FrequencyVectorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FrequencyVectorValue_FrequencyVector");
        });

        modelBuilder.Entity<FrequencyVectorValueBulkSave>(entity =>
        {
            entity.HasKey(e => new { e.FrequencyVectorId, e.BinIndex });

            entity.ToTable("FrequencyVectorValueBulkSave", "SpeakerTest");

            entity.Property(e => e.FrequencyVectorId).HasColumnName("FrequencyVectorID");
        });

        modelBuilder.Entity<GenLedVoucherRow>(entity =>
        {
            entity.HasKey(e => new { e.AccountingYear, e.Company, e.VoucherType, e.VoucherNo, e.RowNo });

            entity.ToTable("GEN_LED_VOUCHER_ROW", "IFS");

            entity.Property(e => e.AccountingYear).HasColumnName("ACCOUNTING_YEAR");
            entity.Property(e => e.Company)
                .HasMaxLength(20)
                .HasColumnName("COMPANY");
            entity.Property(e => e.VoucherType)
                .HasMaxLength(3)
                .HasColumnName("VOUCHER_TYPE");
            entity.Property(e => e.VoucherNo)
                .HasColumnType("numeric(10, 0)")
                .HasColumnName("VOUCHER_NO");
            entity.Property(e => e.RowNo).HasColumnName("ROW_NO");
            entity.Property(e => e.Account)
                .HasMaxLength(20)
                .HasColumnName("ACCOUNT");
            entity.Property(e => e.AccountingPeriod).HasColumnName("ACCOUNTING_PERIOD");
            entity.Property(e => e.ActivateCode)
                .HasMaxLength(20)
                .HasColumnName("ACTIVATE_CODE");
            entity.Property(e => e.AllocLineId).HasColumnName("ALLOC_LINE_ID");
            entity.Property(e => e.AllocationId).HasColumnName("ALLOCATION_ID");
            entity.Property(e => e.Amount)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("AMOUNT");
            entity.Property(e => e.AutCodingParentRow).HasColumnName("AUT_CODING_PARENT_ROW");
            entity.Property(e => e.AutCodingRule)
                .HasMaxLength(20)
                .HasColumnName("AUT_CODING_RULE");
            entity.Property(e => e.AutCodingSeq).HasColumnName("AUT_CODING_SEQ");
            entity.Property(e => e.AutoTaxVouEntry)
                .HasMaxLength(20)
                .HasColumnName("AUTO_TAX_VOU_ENTRY");
            entity.Property(e => e.Autobook)
                .HasMaxLength(1)
                .HasColumnName("AUTOBOOK");
            entity.Property(e => e.AutomaticMatchingNo).HasColumnName("AUTOMATIC_MATCHING_NO");
            entity.Property(e => e.CodeB)
                .HasMaxLength(20)
                .HasColumnName("CODE_B");
            entity.Property(e => e.CodeC)
                .HasMaxLength(20)
                .HasColumnName("CODE_C");
            entity.Property(e => e.CodeD)
                .HasMaxLength(20)
                .HasColumnName("CODE_D");
            entity.Property(e => e.CodeE)
                .HasMaxLength(20)
                .HasColumnName("CODE_E");
            entity.Property(e => e.CodeF)
                .HasMaxLength(20)
                .HasColumnName("CODE_F");
            entity.Property(e => e.CodeG)
                .HasMaxLength(20)
                .HasColumnName("CODE_G");
            entity.Property(e => e.CodeH)
                .HasMaxLength(20)
                .HasColumnName("CODE_H");
            entity.Property(e => e.CodeI)
                .HasMaxLength(20)
                .HasColumnName("CODE_I");
            entity.Property(e => e.CodeJ)
                .HasMaxLength(20)
                .HasColumnName("CODE_J");
            entity.Property(e => e.ConversionFactor).HasColumnName("CONVERSION_FACTOR");
            entity.Property(e => e.Corrected)
                .HasMaxLength(1)
                .HasColumnName("CORRECTED");
            entity.Property(e => e.Correction)
                .HasMaxLength(1)
                .HasColumnName("CORRECTION");
            entity.Property(e => e.CounterAccount)
                .HasMaxLength(20)
                .HasColumnName("COUNTER_ACCOUNT");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.CreatorDesc)
                .HasMaxLength(200)
                .HasColumnName("CREATOR_DESC");
            entity.Property(e => e.CreditAmount).HasColumnName("CREDIT_AMOUNT");
            entity.Property(e => e.CurrAccounting)
                .HasMaxLength(200)
                .HasColumnName("CURR_ACCOUNTING");
            entity.Property(e => e.CurrAccountingDb)
                .HasMaxLength(1)
                .HasColumnName("CURR_ACCOUNTING_DB");
            entity.Property(e => e.CurrencyAmount)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("CURRENCY_AMOUNT");
            entity.Property(e => e.CurrencyCode)
                .HasMaxLength(3)
                .HasColumnName("CURRENCY_CODE");
            entity.Property(e => e.CurrencyCreditAmount).HasColumnName("CURRENCY_CREDIT_AMOUNT");
            entity.Property(e => e.CurrencyDebetAmount).HasColumnName("CURRENCY_DEBET_AMOUNT");
            entity.Property(e => e.CurrencyRate).HasColumnName("CURRENCY_RATE");
            entity.Property(e => e.DebetAmount).HasColumnName("DEBET_AMOUNT");
            entity.Property(e => e.DelivTypeId)
                .HasMaxLength(20)
                .HasColumnName("DELIV_TYPE_ID");
            entity.Property(e => e.ExcludePeriodicalCap)
                .HasMaxLength(5)
                .HasColumnName("EXCLUDE_PERIODICAL_CAP");
            entity.Property(e => e.HeaderCorrection)
                .HasMaxLength(1)
                .HasColumnName("HEADER_CORRECTION");
            entity.Property(e => e.InternalAccounting)
                .HasMaxLength(1)
                .HasColumnName("INTERNAL_ACCOUNTING");
            entity.Property(e => e.InternalSeqNumber).HasColumnName("INTERNAL_SEQ_NUMBER");
            entity.Property(e => e.IsMultiCompanyVoucher)
                .HasMaxLength(5)
                .HasColumnName("IS_MULTI_COMPANY_VOUCHER");
            entity.Property(e => e.JournalId)
                .HasMaxLength(20)
                .HasColumnName("JOURNAL_ID");
            entity.Property(e => e.LedgerCountAcc)
                .HasMaxLength(20)
                .HasColumnName("LEDGER_COUNT_ACC");
            entity.Property(e => e.MatchingDate).HasColumnName("MATCHING_DATE");
            entity.Property(e => e.MatchingInfo)
                .HasMaxLength(200)
                .HasColumnName("MATCHING_INFO");
            entity.Property(e => e.MatchingNo)
                .HasMaxLength(10)
                .HasColumnName("MATCHING_NO");
            entity.Property(e => e.MatchingPeriod).HasColumnName("MATCHING_PERIOD");
            entity.Property(e => e.MatchingYear).HasColumnName("MATCHING_YEAR");
            entity.Property(e => e.MpccomAccountingId).HasColumnName("MPCCOM_ACCOUNTING_ID");
            entity.Property(e => e.MultiCompanyAccYear).HasColumnName("MULTI_COMPANY_ACC_YEAR");
            entity.Property(e => e.MultiCompanyId)
                .HasMaxLength(20)
                .HasColumnName("MULTI_COMPANY_ID");
            entity.Property(e => e.MultiCompanyRowNo).HasColumnName("MULTI_COMPANY_ROW_NO");
            entity.Property(e => e.MultiCompanyVoucherNo).HasColumnName("MULTI_COMPANY_VOUCHER_NO");
            entity.Property(e => e.MultiCompanyVoucherType)
                .HasMaxLength(3)
                .HasColumnName("MULTI_COMPANY_VOUCHER_TYPE");
            entity.Property(e => e.NcfSettlementDate).HasColumnName("NCF_SETTLEMENT_DATE");
            entity.Property(e => e.ObjectId)
                .HasMaxLength(20)
                .HasColumnName("OBJECT_ID");
            entity.Property(e => e.OldPeriod).HasColumnName("OLD_PERIOD");
            entity.Property(e => e.OldRowNo).HasColumnName("OLD_ROW_NO");
            entity.Property(e => e.OptionalCode)
                .HasMaxLength(20)
                .HasColumnName("OPTIONAL_CODE");
            entity.Property(e => e.OrgParentRow).HasColumnName("ORG_PARENT_ROW");
            entity.Property(e => e.ParallelConversionFactor)
                .HasColumnType("decimal(15, 6)")
                .HasColumnName("PARALLEL_CONVERSION_FACTOR");
            entity.Property(e => e.ParallelCurrencyRate)
                .HasColumnType("decimal(15, 6)")
                .HasColumnName("PARALLEL_CURRENCY_RATE");
            entity.Property(e => e.ParentRow).HasColumnName("PARENT_ROW");
            entity.Property(e => e.PartyType)
                .HasMaxLength(20)
                .HasColumnName("PARTY_TYPE");
            entity.Property(e => e.PartyTypeId)
                .HasMaxLength(20)
                .HasColumnName("PARTY_TYPE_ID");
            entity.Property(e => e.PeriodAllocation)
                .HasMaxLength(1)
                .HasColumnName("PERIOD_ALLOCATION");
            entity.Property(e => e.PostingCombinationId).HasColumnName("POSTING_COMBINATION_ID");
            entity.Property(e => e.ProcessCode)
                .HasMaxLength(10)
                .HasColumnName("PROCESS_CODE");
            entity.Property(e => e.ProjectAccounting)
                .HasMaxLength(200)
                .HasColumnName("PROJECT_ACCOUNTING");
            entity.Property(e => e.ProjectAccountingDb)
                .HasMaxLength(1)
                .HasColumnName("PROJECT_ACCOUNTING_DB");
            entity.Property(e => e.ProjectActivityId).HasColumnName("PROJECT_ACTIVITY_ID");
            entity.Property(e => e.ProjectId)
                .HasMaxLength(20)
                .HasColumnName("PROJECT_ID");
            entity.Property(e => e.Quantity).HasColumnName("QUANTITY");
            entity.Property(e => e.ReferenceNumber)
                .HasMaxLength(50)
                .HasColumnName("REFERENCE_NUMBER");
            entity.Property(e => e.ReferenceRowNo).HasColumnName("REFERENCE_ROW_NO");
            entity.Property(e => e.ReferenceSerie)
                .HasMaxLength(50)
                .HasColumnName("REFERENCE_SERIE");
            entity.Property(e => e.RowGroupId).HasColumnName("ROW_GROUP_ID");
            entity.Property(e => e.Rowkey)
                .HasMaxLength(50)
                .HasColumnName("ROWKEY");
            entity.Property(e => e.Rowversion)
                .HasColumnType("datetime")
                .HasColumnName("ROWVERSION");
            entity.Property(e => e.SequenceNo).HasColumnName("SEQUENCE_NO");
            entity.Property(e => e.SeveralCountAcc)
                .HasMaxLength(2)
                .HasColumnName("SEVERAL_COUNT_ACC");
            entity.Property(e => e.Summerized)
                .HasMaxLength(200)
                .HasColumnName("SUMMERIZED");
            entity.Property(e => e.SummerizedDb)
                .HasMaxLength(1)
                .HasColumnName("SUMMERIZED_DB");
            entity.Property(e => e.TaxBookId)
                .HasMaxLength(10)
                .HasColumnName("TAX_BOOK_ID");
            entity.Property(e => e.TaxSeriesId)
                .HasMaxLength(20)
                .HasColumnName("TAX_SERIES_ID");
            entity.Property(e => e.TaxSeriesNo).HasColumnName("TAX_SERIES_NO");
            entity.Property(e => e.Text)
                .HasMaxLength(200)
                .HasColumnName("TEXT");
            entity.Property(e => e.ThirdCurrencyAmount)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("THIRD_CURRENCY_AMOUNT");
            entity.Property(e => e.ThirdCurrencyCreditAmount).HasColumnName("THIRD_CURRENCY_CREDIT_AMOUNT");
            entity.Property(e => e.ThirdCurrencyDebitAmount).HasColumnName("THIRD_CURRENCY_DEBIT_AMOUNT");
            entity.Property(e => e.TransCode)
                .HasMaxLength(100)
                .HasColumnName("TRANS_CODE");
            entity.Property(e => e.TransferId)
                .HasMaxLength(200)
                .HasColumnName("TRANSFER_ID");
            entity.Property(e => e.VouTextUdpdated)
                .HasMaxLength(10)
                .HasColumnName("VOU_TEXT_UDPDATED");
            entity.Property(e => e.VoucherDate)
                .HasColumnType("datetime")
                .HasColumnName("VOUCHER_DATE");
            entity.Property(e => e.YearPeriodKey).HasColumnName("YEAR_PERIOD_KEY");
        });

        modelBuilder.Entity<GenericPickerParameter>(entity =>
        {
            entity.HasKey(e => e.Title);

            entity.Property(e => e.Title)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DisplayMember)
                .HasMaxLength(32)
                .IsUnicode(false);
            entity.Property(e => e.Sqlquery)
                .IsUnicode(false)
                .HasColumnName("SQLQuery");
            entity.Property(e => e.ValueMember)
                .HasMaxLength(32)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GeographicalRegion>(entity =>
        {
            entity.HasKey(e => e.GeographicalRegion1);

            entity.ToTable("GeographicalRegion");

            entity.Property(e => e.GeographicalRegion1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("GeographicalRegion");
        });

        modelBuilder.Entity<GetAllPersonnelQualificationsCodesAndDescriptionsGigmeV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("get_all_personnel_qualifications_codes_and_descriptions_gigme_v");

            entity.Property(e => e.Message)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GetAllPersonnelQualificationsCodesAndDescriptionsV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("get_all_personnel_qualifications_codes_and_descriptions_v");

            entity.Property(e => e.DataSource)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.JobType)
                .HasMaxLength(63)
                .IsUnicode(false);
            entity.Property(e => e.JobTypeCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.JobTypeDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Glaccount>(entity =>
        {
            entity.HasKey(e => e.Primekey)
                .IsClustered(false)
                .HasFillFactor(90);

            entity.ToTable("glaccounts");

            entity.HasIndex(e => e.Acctcd, "glaccountspk")
                .IsUnique()
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("primekey");
            entity.Property(e => e.Acctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("acctcd");
            entity.Property(e => e.Accttype)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("accttype");
            entity.Property(e => e.Activecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("activecd");
            entity.Property(e => e.Beg1prevyr)
                .HasColumnType("money")
                .HasColumnName("beg1prevyr");
            entity.Property(e => e.Beg2prevyr)
                .HasColumnType("money")
                .HasColumnName("beg2prevyr");
            entity.Property(e => e.Beg3prevyr)
                .HasColumnType("money")
                .HasColumnName("beg3prevyr");
            entity.Property(e => e.Beg4prevyr)
                .HasColumnType("money")
                .HasColumnName("beg4prevyr");
            entity.Property(e => e.Beg5prevyr)
                .HasColumnType("money")
                .HasColumnName("beg5prevyr");
            entity.Property(e => e.Beginbal)
                .HasColumnType("money")
                .HasColumnName("beginbal");
            entity.Property(e => e.Cashflow)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("cashflow");
            entity.Property(e => e.Chgpcnt).HasColumnName("chgpcnt");
            entity.Property(e => e.Debitacct)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("debitacct");
            entity.Property(e => e.Debitind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("debitind");
            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("description");
            entity.Property(e => e.End1prevyr)
                .HasColumnType("money")
                .HasColumnName("end1prevyr");
            entity.Property(e => e.End2prevyr)
                .HasColumnType("money")
                .HasColumnName("end2prevyr");
            entity.Property(e => e.End3prevyr)
                .HasColumnType("money")
                .HasColumnName("end3prevyr");
            entity.Property(e => e.End4prevyr)
                .HasColumnType("money")
                .HasColumnName("end4prevyr");
            entity.Property(e => e.End5prevyr)
                .HasColumnType("money")
                .HasColumnName("end5prevyr");
            entity.Property(e => e.Endbal)
                .HasColumnType("money")
                .HasColumnName("endbal");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
            entity.Property(e => e.OrigBeg1prevyr)
                .HasColumnType("money")
                .HasColumnName("orig_beg1prevyr");
            entity.Property(e => e.OrigBeg2prevyr)
                .HasColumnType("money")
                .HasColumnName("orig_beg2prevyr");
            entity.Property(e => e.OrigBeg3prevyr)
                .HasColumnType("money")
                .HasColumnName("orig_beg3prevyr");
            entity.Property(e => e.OrigBeg4prevyr)
                .HasColumnType("money")
                .HasColumnName("orig_beg4prevyr");
            entity.Property(e => e.OrigBeg5prevyr)
                .HasColumnType("money")
                .HasColumnName("orig_beg5prevyr");
            entity.Property(e => e.OrigBeginbal)
                .HasColumnType("money")
                .HasColumnName("orig_beginbal");
            entity.Property(e => e.OrigEnd1prevyr)
                .HasColumnType("money")
                .HasColumnName("orig_end1prevyr");
            entity.Property(e => e.OrigEnd2prevyr)
                .HasColumnType("money")
                .HasColumnName("orig_end2prevyr");
            entity.Property(e => e.OrigEnd3prevyr)
                .HasColumnType("money")
                .HasColumnName("orig_end3prevyr");
            entity.Property(e => e.OrigEnd4prevyr)
                .HasColumnType("money")
                .HasColumnName("orig_end4prevyr");
            entity.Property(e => e.OrigEnd5prevyr)
                .HasColumnType("money")
                .HasColumnName("orig_end5prevyr");
            entity.Property(e => e.OrigEndbal)
                .HasColumnType("money")
                .HasColumnName("orig_endbal");
            entity.Property(e => e.Postcd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("postcd");
            entity.Property(e => e.Rangeamt)
                .HasColumnType("money")
                .HasColumnName("rangeamt");
            entity.Property(e => e.Ref1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref1");
            entity.Property(e => e.Ref2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref2");
            entity.Property(e => e.Ref3)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref3");
            entity.Property(e => e.Ref4)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref5");
            entity.Property(e => e.Ref6)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref6");
            entity.Property(e => e.Ref7)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref7");
            entity.Property(e => e.Ref8)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref8");
            entity.Property(e => e.Reqactivity)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("reqactivity");
            entity.Property(e => e.Rptseqno).HasColumnName("rptseqno");
            entity.Property(e => e.Scode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("scode");
            entity.Property(e => e.Subpost)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("subpost");
        });

        modelBuilder.Entity<Glcontrol>(entity =>
        {
            entity.HasKey(e => e.Primekey).HasFillFactor(90);

            entity.ToTable("glcontrol");

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("primekey");
            entity.Property(e => e.Addr1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("addr1");
            entity.Property(e => e.Addr2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("addr2");
            entity.Property(e => e.Addr3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("addr3");
            entity.Property(e => e.Batchno).HasColumnName("batchno");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("company");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
        });

        modelBuilder.Entity<Glcurrency>(entity =>
        {
            entity.HasKey(e => e.Primekey)
                .IsClustered(false)
                .HasFillFactor(90);

            entity.ToTable("glcurrency");

            entity.HasIndex(e => new { e.Currencycd, e.Begindate }, "glcurrencypk")
                .IsUnique()
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("primekey");
            entity.Property(e => e.Begindate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("begindate");
            entity.Property(e => e.ConvFactor).HasColumnName("conv_factor");
            entity.Property(e => e.Currencycd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("currencycd");
            entity.Property(e => e.Currencydesc)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("currencydesc");
            entity.Property(e => e.Enddate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
        });

        modelBuilder.Entity<GlentitiesA>(entity =>
        {
            entity.HasKey(e => e.AtransactionId).IsClustered(false);

            entity.ToTable("glentitiesA");

            entity.Property(e => e.AtransactionId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ATransactionID");
            entity.Property(e => e.AcctExecEmpno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("acctExecEmpno");
            entity.Property(e => e.AdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnName("ADateTime");
            entity.Property(e => e.Agency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("agency");
            entity.Property(e => e.ArecordAction).HasColumnName("ARecordAction");
            entity.Property(e => e.Atransaction).HasColumnName("ATransaction");
            entity.Property(e => e.AuserId)
                .IsUnicode(false)
                .HasColumnName("AUserID");
            entity.Property(e => e.Bidmarkup).HasColumnName("bidmarkup");
            entity.Property(e => e.Bidroot)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bidroot");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Country)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("country");
            entity.Property(e => e.CrewOpsEmpno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("crewOpsEmpno");
            entity.Property(e => e.CrewPrep).HasColumnType("smalldatetime");
            entity.Property(e => e.CrmleadUrl)
                .IsUnicode(false)
                .HasColumnName("CRMLeadURL");
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.Custno)
                .HasMaxLength(40)
                .HasColumnName("custno");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("engactivecd");
            entity.Property(e => e.EngrEmpno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("engrEmpno");
            entity.Property(e => e.Entitydesc)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("entitydesc");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Entitytype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("entitytype");
            entity.Property(e => e.Finactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("finactivecd");
            entity.Property(e => e.FirstShow).HasColumnType("smalldatetime");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.Industry)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("industry");
            entity.Property(e => e.InternalOrg)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("internal_org");
            entity.Property(e => e.InvoiceVsBidNote)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LastShow).HasColumnType("smalldatetime");
            entity.Property(e => e.LeadTime)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("leadTime");
            entity.Property(e => e.LoadOut).HasColumnType("smalldatetime");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("locationcd");
            entity.Property(e => e.Matrixcd)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("matrixcd");
            entity.Property(e => e.OeOrderno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("oe_orderno");
            entity.Property(e => e.Opsmgr)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("opsmgr");
            entity.Property(e => e.Plactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("plactivecd");
            entity.Property(e => e.PollstarArtistId).HasColumnName("PollstarArtistID");
            entity.Property(e => e.Probability).HasColumnName("probability");
            entity.Property(e => e.Propduedate)
                .HasColumnType("datetime")
                .HasColumnName("propduedate");
            entity.Property(e => e.Proptype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("proptype");
            entity.Property(e => e.Readytopack).HasColumnName("readytopack");
            entity.Property(e => e.ReferralProgramId).HasColumnName("ReferralProgramID");
            entity.Property(e => e.Respempno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("respempno");
            entity.Property(e => e.Rfplempno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RFPLEmpno");
            entity.Property(e => e.RootEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComputedColumnSql("(left([entityno],charindex('-',[entityno]+'-')-(1)))", false)
                .HasColumnName("rootEntityno");
            entity.Property(e => e.SecondaryOpsEmpno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("secondaryOpsEmpno");
            entity.Property(e => e.Sfactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sfactivecd");
            entity.Property(e => e.Shipno)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("shipno");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.Subcontract)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("subcontract");
            entity.Property(e => e.Subno)
                .HasMaxLength(100)
                .HasColumnName("subno");
            entity.Property(e => e.TaxCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tax_code");
            entity.Property(e => e.TaxTypeKey)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TruckingVendNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GlentitiesCompare>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("glentities_compare");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.SysP2pCdId)
                .HasMaxLength(32)
                .HasColumnName("$sys_p2p_cd_id");
        });

        modelBuilder.Entity<GlentitiesIndexViewTable>(entity =>
        {
            entity.HasKey(e => e.Entityno);

            entity.ToTable("glentities_IndexViewTable");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("entityno");
            entity.Property(e => e.Agency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("agency");
            entity.Property(e => e.Bidmarkup).HasColumnName("bidmarkup");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("engactivecd");
            entity.Property(e => e.Entitydesc)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("entitydesc");
            entity.Property(e => e.Entitytype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("entitytype");
            entity.Property(e => e.Finactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("finactivecd");
            entity.Property(e => e.Industry)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("industry");
            entity.Property(e => e.Opsmgr)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("opsmgr");
            entity.Property(e => e.Proptype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("proptype");
            entity.Property(e => e.Respempno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("respempno");
            entity.Property(e => e.SecondaryOpsEmpno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("secondaryOpsEmpno");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.Subcontract)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("subcontract");

            entity.HasOne(d => d.ProptypeNavigation).WithMany(p => p.GlentitiesIndexViewTables)
                .HasForeignKey(d => d.Proptype)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_glentities_IndexViewTable_pjproptype");
        });

        modelBuilder.Entity<GlentitiesIndexViewTableHighLatency>(entity =>
        {
            entity.HasKey(e => e.Entityno);

            entity.ToTable("glentities_IndexViewTable_High_Latency");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("entityno");
            entity.Property(e => e.Agency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("agency");
            entity.Property(e => e.Bidmarkup).HasColumnName("bidmarkup");
            entity.Property(e => e.Enddate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("A")
                .HasColumnName("engactivecd");
            entity.Property(e => e.Entitytype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("PJ")
                .HasColumnName("entitytype");
            entity.Property(e => e.Finactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("finactivecd");
            entity.Property(e => e.Industry)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("industry");
            entity.Property(e => e.Opsmgr)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("opsmgr");
            entity.Property(e => e.Proptype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("proptype");
            entity.Property(e => e.Respempno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("respempno");
            entity.Property(e => e.SecondaryOpsEmpno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("secondaryOpsEmpno");
            entity.Property(e => e.Startdate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.Subcontract)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("subcontract");
        });

        modelBuilder.Entity<GlentitiesIndexViewTableStagingArea>(entity =>
        {
            entity.HasKey(e => e.Entityno);

            entity.ToTable("glentities_IndexViewTable_Staging_Area");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("entityno");
            entity.Property(e => e.Agency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("agency");
            entity.Property(e => e.Bidmarkup).HasColumnName("bidmarkup");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("engactivecd");
            entity.Property(e => e.Entitydesc)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("entitydesc");
            entity.Property(e => e.Entitytype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("entitytype");
            entity.Property(e => e.Finactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("finactivecd");
            entity.Property(e => e.Industry)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("industry");
            entity.Property(e => e.Opsmgr)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("opsmgr");
            entity.Property(e => e.Proptype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("proptype");
            entity.Property(e => e.Respempno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("respempno");
            entity.Property(e => e.SecondaryOpsEmpno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("secondaryOpsEmpno");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.Subcontract)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("subcontract");
        });

        modelBuilder.Entity<GlentitiesNonPj>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("glentities_non_PJ");

            entity.Property(e => e.AcctExecEmpno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("acctExecEmpno");
            entity.Property(e => e.Actempno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("actempno");
            entity.Property(e => e.Actfirstname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("actfirstname");
            entity.Property(e => e.Actlastname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("actlastname");
            entity.Property(e => e.Actualcomplete).HasColumnName("actualcomplete");
            entity.Property(e => e.Address1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("address1");
            entity.Property(e => e.Address2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("address2");
            entity.Property(e => e.Address3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("address3");
            entity.Property(e => e.Adjacctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("adjacctcd");
            entity.Property(e => e.Adjmatrixcd)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("adjmatrixcd");
            entity.Property(e => e.Agency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("agency");
            entity.Property(e => e.Bidmarkup).HasColumnName("bidmarkup");
            entity.Property(e => e.Bidroot)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bidroot");
            entity.Property(e => e.Bidyn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("bidyn");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BuyerId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("buyer_id");
            entity.Property(e => e.Category)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("category");
            entity.Property(e => e.City)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("city");
            entity.Property(e => e.Classification)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("classification");
            entity.Property(e => e.CogsValue)
                .HasColumnType("money")
                .HasColumnName("cogs_value");
            entity.Property(e => e.ContactEmail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("contact_email");
            entity.Property(e => e.ContactMobile)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("contact_mobile");
            entity.Property(e => e.ContactName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("contact_name");
            entity.Property(e => e.ContactPhone)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("contact_phone");
            entity.Property(e => e.Contractno)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("contractno");
            entity.Property(e => e.Costofmoney)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("costofmoney");
            entity.Property(e => e.Country)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("country");
            entity.Property(e => e.CrewPrep).HasColumnType("smalldatetime");
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.Custno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("custno");
            entity.Property(e => e.Deliverables).HasColumnName("deliverables");
            entity.Property(e => e.Delivertype)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("delivertype");
            entity.Property(e => e.Dollar1)
                .HasColumnType("money")
                .HasColumnName("dollar1");
            entity.Property(e => e.Dollar2)
                .HasColumnType("money")
                .HasColumnName("dollar2");
            entity.Property(e => e.Dollar3)
                .HasColumnType("money")
                .HasColumnName("dollar3");
            entity.Property(e => e.Dollar4)
                .HasColumnType("money")
                .HasColumnName("dollar4");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("engactivecd");
            entity.Property(e => e.EngrEmpno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("engrEmpno");
            entity.Property(e => e.Entitydesc)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("entitydesc");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Entitytype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("entitytype");
            entity.Property(e => e.Eqpacctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("eqpacctcd");
            entity.Property(e => e.Eqpmarkup1).HasColumnName("eqpmarkup1");
            entity.Property(e => e.Eqpmarkup2).HasColumnName("eqpmarkup2");
            entity.Property(e => e.Eqpmarkup3).HasColumnName("eqpmarkup3");
            entity.Property(e => e.Eqpmarkup4).HasColumnName("eqpmarkup4");
            entity.Property(e => e.Eqpmatrixcd)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("eqpmatrixcd");
            entity.Property(e => e.ExchangeRateDate).HasColumnType("datetime");
            entity.Property(e => e.ExpId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("exp_id");
            entity.Property(e => e.Expacctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("expacctcd");
            entity.Property(e => e.Expmarkup1).HasColumnName("expmarkup1");
            entity.Property(e => e.Expmarkup2).HasColumnName("expmarkup2");
            entity.Property(e => e.Expmarkup3).HasColumnName("expmarkup3");
            entity.Property(e => e.Expmarkup4).HasColumnName("expmarkup4");
            entity.Property(e => e.Expmatrixcd)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("expmatrixcd");
            entity.Property(e => e.Feecap)
                .HasColumnType("money")
                .HasColumnName("feecap");
            entity.Property(e => e.Feefixed)
                .HasColumnType("money")
                .HasColumnName("feefixed");
            entity.Property(e => e.Feepercent).HasColumnName("feepercent");
            entity.Property(e => e.Finactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("finactivecd");
            entity.Property(e => e.FirstShow).HasColumnType("smalldatetime");
            entity.Property(e => e.FloatDays).HasColumnName("float_days");
            entity.Property(e => e.Frequency)
                .HasColumnType("datetime")
                .HasColumnName("frequency");
            entity.Property(e => e.Glend).HasColumnName("glend");
            entity.Property(e => e.Glstart).HasColumnName("glstart");
            entity.Property(e => e.Groupno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("groupno");
            entity.Property(e => e.Hours1).HasColumnName("hours1");
            entity.Property(e => e.Hours2).HasColumnName("hours2");
            entity.Property(e => e.Hours3).HasColumnName("hours3");
            entity.Property(e => e.Hours4).HasColumnName("hours4");
            entity.Property(e => e.Industry)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("industry");
            entity.Property(e => e.Inend).HasColumnName("inend");
            entity.Property(e => e.Instart).HasColumnName("instart");
            entity.Property(e => e.InternalOrg)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("internal_org");
            entity.Property(e => e.Jobord)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("jobord");
            entity.Property(e => e.Labacctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("labacctcd");
            entity.Property(e => e.Labmarkup1).HasColumnName("labmarkup1");
            entity.Property(e => e.Labmarkup2).HasColumnName("labmarkup2");
            entity.Property(e => e.Labmarkup3).HasColumnName("labmarkup3");
            entity.Property(e => e.Labmarkup4).HasColumnName("labmarkup4");
            entity.Property(e => e.Labmatrixcd)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("labmatrixcd");
            entity.Property(e => e.LastShow).HasColumnType("smalldatetime");
            entity.Property(e => e.LoadOut).HasColumnType("smalldatetime");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("locationcd");
            entity.Property(e => e.Matacctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("matacctcd");
            entity.Property(e => e.Matmatrixcd)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("matmatrixcd");
            entity.Property(e => e.Maxdol1)
                .HasColumnType("money")
                .HasColumnName("maxdol1");
            entity.Property(e => e.Maxdol2)
                .HasColumnType("money")
                .HasColumnName("maxdol2");
            entity.Property(e => e.Maxdol3)
                .HasColumnType("money")
                .HasColumnName("maxdol3");
            entity.Property(e => e.Maxdol4)
                .HasColumnType("money")
                .HasColumnName("maxdol4");
            entity.Property(e => e.MsreplTranVersion).HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Opsmgr)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("opsmgr");
            entity.Property(e => e.Optdate1)
                .HasColumnType("datetime")
                .HasColumnName("optdate1");
            entity.Property(e => e.Optdate2)
                .HasColumnType("datetime")
                .HasColumnName("optdate2");
            entity.Property(e => e.Orderno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("orderno");
            entity.Property(e => e.Orditemno).HasColumnName("orditemno");
            entity.Property(e => e.Plactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("plactivecd");
            entity.Property(e => e.Primekey).HasColumnName("primekey");
            entity.Property(e => e.Priority).HasColumnName("priority");
            entity.Property(e => e.Probability).HasColumnName("probability");
            entity.Property(e => e.Productclass)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("productclass");
            entity.Property(e => e.Projecttype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("projecttype");
            entity.Property(e => e.Propcost)
                .HasColumnType("money")
                .HasColumnName("propcost");
            entity.Property(e => e.Propduedate)
                .HasColumnType("datetime")
                .HasColumnName("propduedate");
            entity.Property(e => e.Propprice)
                .HasColumnType("money")
                .HasColumnName("propprice");
            entity.Property(e => e.Proptype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("proptype");
            entity.Property(e => e.Purchord)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("purchord");
            entity.Property(e => e.Readytopack).HasColumnName("readytopack");
            entity.Property(e => e.Ref1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ref1");
            entity.Property(e => e.Ref2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ref2");
            entity.Property(e => e.Ref3)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ref3");
            entity.Property(e => e.Ref4)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ref5");
            entity.Property(e => e.Ref6)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ref6");
            entity.Property(e => e.Ref7)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ref7");
            entity.Property(e => e.Ref8)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ref8");
            entity.Property(e => e.ReferralProgramId).HasColumnName("ReferralProgramID");
            entity.Property(e => e.Reportflag)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("reportflag");
            entity.Property(e => e.Respcenter)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("respcenter");
            entity.Property(e => e.Respempno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("respempno");
            entity.Property(e => e.Respfirstname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("respfirstname");
            entity.Property(e => e.Resplastname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("resplastname");
            entity.Property(e => e.Rfpyn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("rfpyn");
            entity.Property(e => e.RootEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("rootEntityno");
            entity.Property(e => e.Schedule1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("schedule1");
            entity.Property(e => e.Schedule2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("schedule2");
            entity.Property(e => e.Schedule3)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("schedule3");
            entity.Property(e => e.Schedule4)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("schedule4");
            entity.Property(e => e.Sfactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sfactivecd");
            entity.Property(e => e.Shipno)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("shipno");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.State)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("state");
            entity.Property(e => e.Subclass)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("subclass");
            entity.Property(e => e.Subcontract)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("subcontract");
            entity.Property(e => e.Subno)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("subno");
            entity.Property(e => e.TrafficId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("traffic_id");
            entity.Property(e => e.Zip)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("zip");
        });

        modelBuilder.Entity<GlentitiesTemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("glentities_Temp");

            entity.Property(e => e.AcctExecEmpno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("acctExecEmpno");
            entity.Property(e => e.Agency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("agency");
            entity.Property(e => e.Bidmarkup).HasColumnName("bidmarkup");
            entity.Property(e => e.Bidroot)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bidroot");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Country)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("country");
            entity.Property(e => e.CrewOpsEmpno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("crewOpsEmpno");
            entity.Property(e => e.CrewPrep).HasColumnType("smalldatetime");
            entity.Property(e => e.CrmleadUrl)
                .IsUnicode(false)
                .HasColumnName("CRMLeadURL");
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.Custno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("custno");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("engactivecd");
            entity.Property(e => e.EngrEmpno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("engrEmpno");
            entity.Property(e => e.Entitydesc)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("entitydesc");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Entitytype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("entitytype");
            entity.Property(e => e.Finactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("finactivecd");
            entity.Property(e => e.FirstShow).HasColumnType("smalldatetime");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.Industry)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("industry");
            entity.Property(e => e.InternalOrg)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("internal_org");
            entity.Property(e => e.InvoiceVsBidNote)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LastShow).HasColumnType("smalldatetime");
            entity.Property(e => e.LeadTime)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("leadTime");
            entity.Property(e => e.LoadOut).HasColumnType("smalldatetime");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("locationcd");
            entity.Property(e => e.Matrixcd)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("matrixcd");
            entity.Property(e => e.OeOrderno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("oe_orderno");
            entity.Property(e => e.Opsmgr)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("opsmgr");
            entity.Property(e => e.Plactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("plactivecd");
            entity.Property(e => e.PollstarArtistId).HasColumnName("PollstarArtistID");
            entity.Property(e => e.Probability).HasColumnName("probability");
            entity.Property(e => e.Propduedate)
                .HasColumnType("datetime")
                .HasColumnName("propduedate");
            entity.Property(e => e.Proptype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("proptype");
            entity.Property(e => e.Readytopack).HasColumnName("readytopack");
            entity.Property(e => e.ReferralProgramId).HasColumnName("ReferralProgramID");
            entity.Property(e => e.Respempno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("respempno");
            entity.Property(e => e.Rfplempno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RFPLEmpno");
            entity.Property(e => e.SecondaryOpsEmpno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("secondaryOpsEmpno");
            entity.Property(e => e.Sfactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sfactivecd");
            entity.Property(e => e.Shipno)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("shipno");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.Subcontract)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("subcontract");
            entity.Property(e => e.Subno)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("subno");
            entity.Property(e => e.TaxCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tax_code");
            entity.Property(e => e.TaxTypeKey)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TruckingVendNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Glentity>(entity =>
        {
            entity.HasKey(e => e.Entityno);

            entity.ToTable("glentities", tb =>
                {
                    tb.HasTrigger("TR_cannot_inactivate_project_with_uninvoiced_rfi");
                    tb.HasTrigger("TR_disallow_deleting_projects_with_payroll");
                    tb.HasTrigger("TR_glentities_ExternalSearch_Update");
                    tb.HasTrigger("TR_glentities__a_bid_cannot_be_created_under_another_bid");
                    tb.HasTrigger("TR_glentities__all_projects_in_invoice_group_must_have_the_same_company");
                    tb.HasTrigger("TR_glentities__projects_history__delete");
                    tb.HasTrigger("TR_glentities__projects_history__insert");
                    tb.HasTrigger("TR_glentities__projects_history__update");
                    tb.HasTrigger("TR_glentities__track_bid_project_changes");
                    tb.HasTrigger("TR_glentities__truck_packed_notifications");
                    tb.HasTrigger("TR_glentities__update_related_to_parts");
                    tb.HasTrigger("TR_glentities_disallow_deactivation_with_checked_out_parts");
                    tb.HasTrigger("TR_glentities_only_invoicers_may_change_customer_address_after_invoicing");
                    tb.HasTrigger("TR_glentities_prevent_deleting_parent");
                    tb.HasTrigger("TR_glentities_require_parent");
                    tb.HasTrigger("TR_glentities_track_changes_into_glentities_indexViewTable");
                    tb.HasTrigger("TR_projects_with_invoices_prevent_company_changes");
                    tb.HasTrigger("tr_glentities_do_not_allow_home_warehouse_to_change_when_parts_are_checked_out");
                    tb.HasTrigger("x_Auditglentities");
                });

            entity.HasIndex(e => e.Entityno, "IX_active_for_checkout").HasFilter("([engactivecd]<>'I')");

            entity.HasIndex(e => new { e.Subcontract, e.Engactivecd, e.Entityno, e.Agency }, "IX_activecd_and_subcontract");

            entity.HasIndex(e => e.Agency, "IX_agency");

            entity.HasIndex(e => e.Enddate, "IX_for_projcal_enddate").HasFilter("([engactivecd]<>'I' AND [finactivecd]<>'I')");

            entity.HasIndex(e => e.Startdate, "IX_for_projcal_startdate").HasFilter("([engactivecd]<>'I' AND [finactivecd]<>'I')");

            entity.HasIndex(e => e.OeOrderno, "IX_glentities__by_oe_order").HasFilter("([oe_orderno] IS NOT NULL)");

            entity.HasIndex(e => new { e.Enddate, e.Engactivecd }, "IX_glentities_by_enddate__for_my_projects");

            entity.HasIndex(e => e.Industry, "IX_industry");

            entity.HasIndex(e => e.Proptype, "IX_proptype");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("entityno");
            entity.Property(e => e.AcctExecEmpno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("acctExecEmpno");
            entity.Property(e => e.Agency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("agency");
            entity.Property(e => e.Bidmarkup).HasColumnName("bidmarkup");
            entity.Property(e => e.Bidroot)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bidroot");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Country)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("country");
            entity.Property(e => e.CrewOpsEmpno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("crewOpsEmpno");
            entity.Property(e => e.CrewPrep).HasColumnType("smalldatetime");
            entity.Property(e => e.CrmleadUrl)
                .IsUnicode(false)
                .HasColumnName("CRMLeadURL");
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.Custno)
                .HasMaxLength(40)
                .HasDefaultValue("")
                .HasColumnName("custno");
            entity.Property(e => e.Enddate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("A")
                .HasColumnName("engactivecd");
            entity.Property(e => e.EngrEmpno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("engrEmpno");
            entity.Property(e => e.Entitydesc)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("entitydesc");
            entity.Property(e => e.Entitytype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("PJ")
                .HasColumnName("entitytype");
            entity.Property(e => e.Finactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("finactivecd");
            entity.Property(e => e.FirstShow).HasColumnType("smalldatetime");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Industry)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("industry");
            entity.Property(e => e.InternalOrg)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("internal_org");
            entity.Property(e => e.InvoiceVsBidNote)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LastShow).HasColumnType("smalldatetime");
            entity.Property(e => e.LeadTime)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("leadTime");
            entity.Property(e => e.LoadOut).HasColumnType("smalldatetime");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("locationcd");
            entity.Property(e => e.Matrixcd)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("matrixcd");
            entity.Property(e => e.Note).IsUnicode(false);
            entity.Property(e => e.OeOrderno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("oe_orderno");
            entity.Property(e => e.Opsmgr)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("opsmgr");
            entity.Property(e => e.Plactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("plactivecd");
            entity.Property(e => e.PollstarArtistId).HasColumnName("PollstarArtistID");
            entity.Property(e => e.PriceLevelValue).HasDefaultValue(1.0);
            entity.Property(e => e.Probability).HasColumnName("probability");
            entity.Property(e => e.Propduedate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("propduedate");
            entity.Property(e => e.Proptype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("proptype");
            entity.Property(e => e.Readytopack).HasColumnName("readytopack");
            entity.Property(e => e.ReferralProgramId).HasColumnName("ReferralProgramID");
            entity.Property(e => e.Respempno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("respempno");
            entity.Property(e => e.Rfplempno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RFPLEmpno");
            entity.Property(e => e.RootEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComputedColumnSql("(left([entityno],charindex('-',[entityno]+'-')-(1)))", false)
                .HasColumnName("rootEntityno");
            entity.Property(e => e.SecondaryCrewOpsEmpno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("secondaryCrewOpsEmpno");
            entity.Property(e => e.SecondaryOpsEmpno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("secondaryOpsEmpno");
            entity.Property(e => e.Sfactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("sfactivecd");
            entity.Property(e => e.Shipno)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("shipno");
            entity.Property(e => e.Startdate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.Subcontract)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("subcontract");
            entity.Property(e => e.Subno)
                .HasMaxLength(100)
                .HasDefaultValue("")
                .HasColumnName("subno");
            entity.Property(e => e.TaxCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tax_code");
            entity.Property(e => e.TaxTypeKey)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TruckingVendNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.AcctExecEmpnoNavigation).WithMany(p => p.GlentityAcctExecEmpnoNavigations)
                .HasForeignKey(d => d.AcctExecEmpno)
                .HasConstraintName("FK_glentities_peemployee__acctExecEmpno");

            entity.HasOne(d => d.AgencyNavigation).WithMany(p => p.Glentities)
                .HasForeignKey(d => d.Agency)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_glentities_Warehouse__agency");

            entity.HasOne(d => d.BillingCompanyNavigation).WithMany(p => p.Glentities)
                .HasForeignKey(d => d.BillingCompany)
                .HasConstraintName("FK_glentities_Company");

            entity.HasOne(d => d.CrewOpsEmpnoNavigation).WithMany(p => p.GlentityCrewOpsEmpnoNavigations).HasForeignKey(d => d.CrewOpsEmpno);

            entity.HasOne(d => d.CurrencyNavigation).WithMany(p => p.Glentities)
                .HasForeignKey(d => d.Currency)
                .HasConstraintName("FK_glentities_Currency");

            entity.HasOne(d => d.EngactivecdNavigation).WithMany(p => p.Glentities)
                .HasForeignKey(d => d.Engactivecd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_glentities_ProjectStatus");

            entity.HasOne(d => d.EngrEmpnoNavigation).WithMany(p => p.GlentityEngrEmpnoNavigations)
                .HasForeignKey(d => d.EngrEmpno)
                .HasConstraintName("FK_glentities_peemployee__engrEmpno");

            entity.HasOne(d => d.EntitytypeNavigation).WithMany(p => p.Glentities)
                .HasForeignKey(d => d.Entitytype)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_glentities_glentitytype");

            entity.HasOne(d => d.LocationcdNavigation).WithMany(p => p.Glentities)
                .HasPrincipalKey(p => p.Locationcd)
                .HasForeignKey(d => d.Locationcd)
                .HasConstraintName("FK_glentities_oelocation");

            entity.HasOne(d => d.OpsmgrNavigation).WithMany(p => p.GlentityOpsmgrNavigations)
                .HasForeignKey(d => d.Opsmgr)
                .HasConstraintName("FK_glentities_peemployee__opsmgr");

            entity.HasOne(d => d.PollstarArtist).WithMany(p => p.Glentities)
                .HasForeignKey(d => d.PollstarArtistId)
                .HasConstraintName("FK_glentities__PollstartArtists");

            entity.HasOne(d => d.ProptypeNavigation).WithMany(p => p.Glentities)
                .HasForeignKey(d => d.Proptype)
                .HasConstraintName("FK_glentities_pjproptype");

            entity.HasOne(d => d.ReferralProgram).WithMany(p => p.Glentities)
                .HasForeignKey(d => d.ReferralProgramId)
                .HasConstraintName("FK_glentities_ReferralProgram");

            entity.HasOne(d => d.RespempnoNavigation).WithMany(p => p.GlentityRespempnoNavigations)
                .HasForeignKey(d => d.Respempno)
                .HasConstraintName("FK_glentities_peemployee__respempno");

            entity.HasOne(d => d.RfplempnoNavigation).WithMany(p => p.GlentityRfplempnoNavigations)
                .HasForeignKey(d => d.Rfplempno)
                .HasConstraintName("FK_glentities_peemployee__RFPLEmpno");

            entity.HasOne(d => d.SecondaryOpsEmpnoNavigation).WithMany(p => p.GlentitySecondaryOpsEmpnoNavigations).HasForeignKey(d => d.SecondaryOpsEmpno);

            entity.HasOne(d => d.TaxTypeKeyNavigation).WithMany(p => p.Glentities)
                .HasForeignKey(d => d.TaxTypeKey)
                .HasConstraintName("FK_glentities_InvoicingTaxType");

            // entity.HasMany(d => d.UserNames).WithMany(p => p.Entitynos)
            //     .UsingEntity<Dictionary<string, object>>(
            //         "FavoriteProjects",
            //         r => r.HasOne<Pjtfrusr>().WithMany()
            //             .HasForeignKey("UserName")
            //             .OnDelete(DeleteBehavior.ClientSetNull)
            //             .HasConstraintName("FK_FavoriteProjects_pjtfrusr"),
            //         l => l.HasOne<Glentity>().WithMany()
            //             .HasForeignKey("Entityno")
            //             .OnDelete(DeleteBehavior.ClientSetNull)
            //             .HasConstraintName("FK_FavoriteProjects_glentities"),
            //         j =>
            //         {
            //             j.HasKey("Entityno", "UserName");
            //             j.ToTable("FavoriteProjects");
            //             j.IndexerProperty<string>("Entityno")
            //                 .HasMaxLength(50)
            //                 .IsUnicode(false)
            //                 .HasColumnName("entityno");
            //             j.IndexerProperty<string>("UserName")
            //                 .HasMaxLength(30)
            //                 .IsUnicode(false)
            //                 .HasColumnName("user_name");
            //         });
        });

        modelBuilder.Entity<Glentitynote>(entity =>
        {
            entity.HasKey(e => e.Primekey)
                .IsClustered(false)
                .HasFillFactor(90);

            entity.ToTable("glentitynote");

            entity.HasIndex(e => new { e.Entityno, e.NoteNo }, "glentitynotepk")
                .IsUnique()
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("primekey");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
            entity.Property(e => e.NoteNo).HasColumnName("note_no");
            entity.Property(e => e.NoteText)
                .IsUnicode(false)
                .HasColumnName("note_text");

            entity.HasOne(d => d.EntitynoNavigation).WithMany(p => p.Glentitynotes)
                .HasForeignKey(d => d.Entityno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_glentitynote_glentities");
        });

        modelBuilder.Entity<GlentitynoteV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("glentitynote_v");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.NoteText)
                .HasMaxLength(4180)
                .IsUnicode(false)
                .HasColumnName("note_text");
        });

        modelBuilder.Entity<GlentitynoteVForHtml>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("glentitynote_v_forHTML");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.NoteText)
                .IsUnicode(false)
                .HasColumnName("note_text");
        });

        modelBuilder.Entity<Glentitytype>(entity =>
        {
            entity.HasKey(e => e.Entitytype);

            entity.ToTable("glentitytype");

            entity.Property(e => e.Entitytype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("entitytype");
            entity.Property(e => e.Entitytypedesc)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("entitytypedesc");
        });

        modelBuilder.Entity<GlobalOpsMonitoredDocument>(entity =>
        {
            entity.HasKey(e => new { e.FileName, e.FolderId, e.Folder });

            entity.Property(e => e.FileName)
                .HasMaxLength(260)
                .IsUnicode(false);
            entity.Property(e => e.FolderId).HasColumnName("FolderID");
            entity.Property(e => e.Folder)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DateModified)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dateModified");

            entity.HasOne(d => d.FolderNavigation).WithMany(p => p.GlobalOpsMonitoredDocuments)
                .HasPrincipalKey(p => p.FolderId)
                .HasForeignKey(d => d.FolderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GlobalOpsMonitoredDocuments_GlobalOpsMonitoredFolders");
        });

        modelBuilder.Entity<GlobalOpsMonitoredFolder>(entity =>
        {
            entity.HasKey(e => e.Path);

            entity.HasIndex(e => e.FolderId, "IX_ByFolderID").IsUnique();

            entity.Property(e => e.Path)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.FolderId).HasColumnName("FolderID");
        });

        modelBuilder.Entity<GroupPermission>(entity =>
        {
            entity.HasKey(e => new { e.GroupName, e.AttachmentType });

            entity.Property(e => e.GroupName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AttachmentType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AllowFullControl).HasColumnName("allowFullControl");
            entity.Property(e => e.AllowListFolderContents).HasColumnName("allowListFolderContents");
            entity.Property(e => e.AllowModify).HasColumnName("allowModify");
            entity.Property(e => e.AllowRead).HasColumnName("allowRead");
            entity.Property(e => e.AllowReadExecute).HasColumnName("allowRead&Execute");
            entity.Property(e => e.AllowSpecialPermissions).HasColumnName("allowSpecialPermissions");
            entity.Property(e => e.AllowWrite).HasColumnName("allowWrite");
            entity.Property(e => e.EgnytePermission)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.AttachmentTypeNavigation).WithMany(p => p.GroupPermissions)
                .HasForeignKey(d => d.AttachmentType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GroupPermissions_AttachmentTypes");

            entity.HasOne(d => d.GroupNameNavigation).WithMany(p => p.GroupPermissions)
                .HasForeignKey(d => d.GroupName)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GroupPermissions_FilePermissionsGroups");
        });

        modelBuilder.Entity<GuicolumnNamesFromSqlfield>(entity =>
        {
            entity.HasKey(e => e.Sqlfield);

            entity.ToTable("GUIColumnNamesFromSQLFields");

            entity.Property(e => e.Sqlfield)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SQLField");
            entity.Property(e => e.ColumnName).IsUnicode(false);
        });

        modelBuilder.Entity<HtmlReportBlock>(entity =>
        {
            entity.HasKey(e => e.IdHtmlBlock);

            entity.Property(e => e.IdHtmlBlock).HasColumnName("id_HtmlBlock");
            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Html).IsUnicode(false);
            entity.Property(e => e.IdSectionType)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("id_SectionType");
            entity.Property(e => e.IsDefault).HasColumnName("isDefault");
            entity.Property(e => e.IsVisible).HasColumnName("isVisible");
            entity.Property(e => e.ResultTypeCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.SortOrder).HasColumnName("sortOrder");
            entity.Property(e => e.Sqlquery)
                .IsUnicode(false)
                .HasColumnName("SQLQuery");

            entity.HasOne(d => d.IdSectionTypeNavigation).WithMany(p => p.HtmlReportBlocks)
                .HasForeignKey(d => d.IdSectionType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HtmlReportBlocks_HTMLReportSectionType");

            entity.HasOne(d => d.ResultTypeCodeNavigation).WithMany(p => p.HtmlReportBlocks)
                .HasForeignKey(d => d.ResultTypeCode)
                .HasConstraintName("FK_HtmlReportBlocks_SQLResultType");
        });

        modelBuilder.Entity<HtmlReportBlocksArchive>(entity =>
        {
            entity.HasKey(e => new { e.IdHtmlBlock, e.ArchiveDate }).IsClustered(false);

            entity.ToTable("HtmlReportBlocksArchive");

            entity.Property(e => e.IdHtmlBlock).HasColumnName("id_HtmlBlock");
            entity.Property(e => e.ArchiveDate)
                .HasDefaultValueSql("([dbo].[today]())")
                .HasColumnType("datetime");
            entity.Property(e => e.ArchivedBy)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Html).IsUnicode(false);
            entity.Property(e => e.IdSectionType)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("id_SectionType");
            entity.Property(e => e.IsDefault).HasColumnName("isDefault");
            entity.Property(e => e.IsVisible).HasColumnName("isVisible");
            entity.Property(e => e.ResultTypeCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.SortOrder).HasColumnName("sortOrder");
            entity.Property(e => e.Sqlquery)
                .IsUnicode(false)
                .HasColumnName("SQLQuery");

            entity.HasOne(d => d.ArchivedByNavigation).WithMany(p => p.HtmlReportBlocksArchives)
                .HasForeignKey(d => d.ArchivedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HtmlReportBlocksArchive__ArchivedBy");

            entity.HasOne(d => d.IdSectionTypeNavigation).WithMany(p => p.HtmlReportBlocksArchives)
                .HasForeignKey(d => d.IdSectionType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HtmlReportBlocksArchive_HTMLReportSectionType");

            entity.HasOne(d => d.ResultTypeCodeNavigation).WithMany(p => p.HtmlReportBlocksArchives)
                .HasForeignKey(d => d.ResultTypeCode)
                .HasConstraintName("FK_HtmlReportBlocksArchive_SQLResultType");
        });

        modelBuilder.Entity<HtmlReportBlocksDataFormat>(entity =>
        {
            entity.HasKey(e => new { e.IdHtmlBlock, e.Field });

            entity.ToTable("HtmlReportBlocksDataFormat");

            entity.Property(e => e.IdHtmlBlock).HasColumnName("id_HtmlBlock");
            entity.Property(e => e.Field)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormatType)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<HtmlReportBlocksGroupBy>(entity =>
        {
            entity.HasKey(e => new { e.IdHtmlBlock, e.Seqno });

            entity.ToTable("HtmlReportBlocksGroupBy");

            entity.Property(e => e.IdHtmlBlock).HasColumnName("id_HtmlBlock");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.GroupByField).IsUnicode(false);

            entity.HasOne(d => d.IdHtmlBlockNavigation).WithMany(p => p.HtmlReportBlocksGroupBies)
                .HasForeignKey(d => d.IdHtmlBlock)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HtmlReportBlockGroupBy_HtmlReportBlocks");
        });

        modelBuilder.Entity<HtmlReportBlocksSummary>(entity =>
        {
            entity.HasKey(e => new { e.IdHtmlBlock, e.Seqno, e.ColumnName });

            entity.Property(e => e.IdHtmlBlock).HasColumnName("id_HtmlBlock");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.ColumnName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SummaryType)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.HtmlReportBlocksGroupBy).WithMany(p => p.HtmlReportBlocksSummaries)
                .HasForeignKey(d => new { d.IdHtmlBlock, d.Seqno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HtmlReportBlocksSummaries_HtmlReportBlocksGroupBy");
        });

        modelBuilder.Entity<HtmlReportSectionType>(entity =>
        {
            entity.HasKey(e => e.IdSectionType).HasName("PK_HTMLReportSectionType");

            entity.ToTable("HtmlReportSectionType");

            entity.Property(e => e.IdSectionType)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("id_SectionType");
            entity.Property(e => e.SectionType)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<HtmlReportTemplate>(entity =>
        {
            entity.HasKey(e => e.IdTemplate);

            entity.ToTable("HtmlReportTemplate");

            entity.Property(e => e.IdTemplate).HasColumnName("id_Template");
            entity.Property(e => e.FileNameTemplate)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TemplateName)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<HtmlReportTemplateSection>(entity =>
        {
            entity.HasKey(e => new { e.IdTemplate, e.IdHtmlBlock });

            entity.Property(e => e.IdTemplate).HasColumnName("id_Template");
            entity.Property(e => e.IdHtmlBlock).HasColumnName("id_HtmlBlock");

            entity.HasOne(d => d.IdHtmlBlockNavigation).WithMany(p => p.HtmlReportTemplateSections)
                .HasForeignKey(d => d.IdHtmlBlock)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HtmlReportTemplateSections_HtmlReportBlocks");

            entity.HasOne(d => d.IdTemplateNavigation).WithMany(p => p.HtmlReportTemplateSections)
                .HasForeignKey(d => d.IdTemplate)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HtmlReportTemplateSections_HtmlReportTemplate");
        });

        modelBuilder.Entity<ISolvedAddress>(entity =>
        {
            entity.HasKey(e => new { e.ISolvedId, e.Type }).HasName("PK_iSolved_Address");

            entity.ToTable("iSolvedAddress", "Contact");

            entity.Property(e => e.ISolvedId).HasColumnName("iSolvedID");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.AddressLine1)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AddressLine2)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AddressLine3)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AddressLine4)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Country)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PostalCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StateProvince)
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.ISolved).WithMany(p => p.ISolvedAddresses)
                .HasForeignKey(d => d.ISolvedId)
                .HasConstraintName("FK_iSolvedAddress_Contact");
        });

        modelBuilder.Entity<ISolvedContact>(entity =>
        {
            entity.HasKey(e => e.ISolvedId).HasName("PK_iSolved");

            entity.ToTable("iSolvedContact", "Contact");

            entity.Property(e => e.ISolvedId)
                .ValueGeneratedNever()
                .HasColumnName("iSolvedID");
            entity.Property(e => e.ClientId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ClientID");
            entity.Property(e => e.Department)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.JobCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LegalCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Location)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Organization)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PayGroup)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PictureFilePath).IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.SupervisorIsolvedId).HasColumnName("SupervisorISolvedID");
            entity.Property(e => e.TimeclockId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TimeclockID");
            entity.Property(e => e.Title)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.StatusNavigation).WithMany(p => p.ISolvedContacts)
                .HasForeignKey(d => d.Status)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_iSolvedCont_Status");
        });

        modelBuilder.Entity<ISolvedEmail>(entity =>
        {
            entity.HasKey(e => new { e.ISolvedId, e.Type }).HasName("PK_iSolved_Email");

            entity.ToTable("iSolvedEmail", "Contact");

            entity.Property(e => e.ISolvedId).HasColumnName("iSolvedID");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.EmailAddress)
                .HasMaxLength(200)
                .IsUnicode(false);

            entity.HasOne(d => d.ISolved).WithMany(p => p.ISolvedEmails)
                .HasForeignKey(d => d.ISolvedId)
                .HasConstraintName("FK_iSolvedEmail_Contact");
        });

        modelBuilder.Entity<ISolvedPhone>(entity =>
        {
            entity.HasKey(e => new { e.ISolvedId, e.Type }).HasName("PK_iSolved_Phone");

            entity.ToTable("iSolvedPhone", "Contact");

            entity.Property(e => e.ISolvedId).HasColumnName("iSolvedID");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.ISolved).WithMany(p => p.ISolvedPhones)
                .HasForeignKey(d => d.ISolvedId)
                .HasConstraintName("FK_iSolved_Phone_Contact");
        });

        modelBuilder.Entity<IdentityInvoiceInfo>(entity =>
        {
            entity.HasKey(e => new { e.Company, e.Identity, e.PartyType });

            entity.ToTable("IDENTITY_INVOICE_INFO", "IFS");

            entity.Property(e => e.Company)
                .HasMaxLength(20)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Identity)
                .HasMaxLength(20)
                .HasColumnName("IDENTITY");
            entity.Property(e => e.PartyType)
                .HasMaxLength(200)
                .HasColumnName("PARTY_TYPE");
            entity.Property(e => e.AllowQuantityDiff)
                .HasMaxLength(5)
                .HasColumnName("ALLOW_QUANTITY_DIFF");
            entity.Property(e => e.AllowTolerance)
                .HasMaxLength(5)
                .HasColumnName("ALLOW_TOLERANCE");
            entity.Property(e => e.AmountTolerance).HasColumnName("AMOUNT_TOLERANCE");
            entity.Property(e => e.AutomaticInvoice)
                .HasMaxLength(1)
                .HasColumnName("AUTOMATIC_INVOICE");
            entity.Property(e => e.AutomaticPayAuthFlag)
                .HasMaxLength(1)
                .HasColumnName("AUTOMATIC_PAY_AUTH_FLAG");
            entity.Property(e => e.BiTimestamp)
                .HasColumnType("datetime")
                .HasColumnName("BI_TIMESTAMP");
            entity.Property(e => e.CertifiedEmail)
                .HasMaxLength(200)
                .HasColumnName("CERTIFIED_EMAIL");
            entity.Property(e => e.CisReferenceId).HasColumnName("CIS_REFERENCE_ID");
            entity.Property(e => e.ConsolidationDay)
                .HasMaxLength(100)
                .HasColumnName("CONSOLIDATION_DAY");
            entity.Property(e => e.CreateTolerancePosting)
                .HasMaxLength(5)
                .HasColumnName("CREATE_TOLERANCE_POSTING");
            entity.Property(e => e.CustomerId)
                .HasMaxLength(200)
                .HasColumnName("CUSTOMER_ID");
            entity.Property(e => e.DefAuthorizer)
                .HasMaxLength(20)
                .HasColumnName("DEF_AUTHORIZER");
            entity.Property(e => e.DefAutoInvoiceType)
                .HasMaxLength(20)
                .HasColumnName("DEF_AUTO_INVOICE_TYPE");
            entity.Property(e => e.DefCurrency)
                .HasMaxLength(3)
                .HasColumnName("DEF_CURRENCY");
            entity.Property(e => e.DefManSuppInvType)
                .HasMaxLength(20)
                .HasColumnName("DEF_MAN_SUPP_INV_TYPE");
            entity.Property(e => e.DefPreliminaryCode)
                .HasMaxLength(20)
                .HasColumnName("DEF_PRELIMINARY_CODE");
            entity.Property(e => e.DefRecManSuppInvType)
                .HasMaxLength(20)
                .HasColumnName("DEF_REC_MAN_SUPP_INV_TYPE");
            entity.Property(e => e.DefVatCode)
                .HasMaxLength(20)
                .HasColumnName("DEF_VAT_CODE");
            entity.Property(e => e.DefaultCurrencyRateType)
                .HasMaxLength(10)
                .HasColumnName("DEFAULT_CURRENCY_RATE_TYPE");
            entity.Property(e => e.DelivTypeId)
                .HasMaxLength(20)
                .HasColumnName("DELIV_TYPE_ID");
            entity.Property(e => e.EinvoiceProcessType)
                .HasMaxLength(20)
                .HasColumnName("EINVOICE_PROCESS_TYPE");
            entity.Property(e => e.EinvoiceReceiverCode)
                .HasMaxLength(7)
                .HasColumnName("EINVOICE_RECEIVER_CODE");
            entity.Property(e => e.ExcFromSpesometroDec)
                .HasMaxLength(20)
                .HasColumnName("EXC_FROM_SPESOMETRO_DEC");
            entity.Property(e => e.ExcFromSpesometroDecDb)
                .HasMaxLength(20)
                .HasColumnName("EXC_FROM_SPESOMETRO_DEC_DB");
            entity.Property(e => e.ExcludeInvoiceImage)
                .HasMaxLength(20)
                .HasColumnName("EXCLUDE_INVOICE_IMAGE");
            entity.Property(e => e.ExcludeInvoiceImageDb)
                .HasMaxLength(20)
                .HasColumnName("EXCLUDE_INVOICE_IMAGE_DB");
            entity.Property(e => e.ExcludePostingAuth)
                .HasMaxLength(20)
                .HasColumnName("EXCLUDE_POSTING_AUTH");
            entity.Property(e => e.ExcludePostingAuthDb)
                .HasMaxLength(20)
                .HasColumnName("EXCLUDE_POSTING_AUTH_DB");
            entity.Property(e => e.ExpireDate)
                .HasColumnType("datetime")
                .HasColumnName("EXPIRE_DATE");
            entity.Property(e => e.FiscalNo)
                .HasMaxLength(16)
                .HasColumnName("FISCAL_NO");
            entity.Property(e => e.GroupId)
                .HasMaxLength(20)
                .HasColumnName("GROUP_ID");
            entity.Property(e => e.IdentityType)
                .HasMaxLength(20)
                .HasColumnName("IDENTITY_TYPE");
            entity.Property(e => e.InactiveReasonDesc)
                .HasMaxLength(1000)
                .HasColumnName("INACTIVE_REASON_DESC");
            entity.Property(e => e.IncInvCurrRateBase)
                .HasMaxLength(20)
                .HasColumnName("INC_INV_CURR_RATE_BASE");
            entity.Property(e => e.InvoiceFee)
                .HasMaxLength(5)
                .HasColumnName("INVOICE_FEE");
            entity.Property(e => e.InvoiceReasonId)
                .HasMaxLength(20)
                .HasColumnName("INVOICE_REASON_ID");
            entity.Property(e => e.InvoiceRecipient)
                .HasMaxLength(20)
                .HasColumnName("INVOICE_RECIPIENT");
            entity.Property(e => e.InvoiceRecipientFrom)
                .HasMaxLength(20)
                .HasColumnName("INVOICE_RECIPIENT_FROM");
            entity.Property(e => e.InvoiceRecipientFromDb)
                .HasMaxLength(20)
                .HasColumnName("INVOICE_RECIPIENT_FROM_DB");
            entity.Property(e => e.InvoicingSupplier)
                .HasMaxLength(20)
                .HasColumnName("INVOICING_SUPPLIER");
            entity.Property(e => e.IsNote)
                .HasMaxLength(5)
                .HasColumnName("IS_NOTE");
            entity.Property(e => e.LegalIdAddrId)
                .HasMaxLength(50)
                .HasColumnName("LEGAL_ID_ADDR_ID");
            entity.Property(e => e.LegalIdName)
                .HasMaxLength(100)
                .HasColumnName("LEGAL_ID_NAME");
            entity.Property(e => e.LegalIdentity)
                .HasMaxLength(5)
                .HasColumnName("LEGAL_IDENTITY");
            entity.Property(e => e.LegalIdentityDb)
                .HasMaxLength(5)
                .HasColumnName("LEGAL_IDENTITY_DB");
            entity.Property(e => e.MatchingLevel)
                .HasMaxLength(20)
                .HasColumnName("MATCHING_LEVEL");
            entity.Property(e => e.NationalBankCode)
                .HasMaxLength(20)
                .HasColumnName("NATIONAL_BANK_CODE");
            entity.Property(e => e.NcfReferenceCheck)
                .HasMaxLength(5)
                .HasColumnName("NCF_REFERENCE_CHECK");
            entity.Property(e => e.NoInvoiceCopies).HasColumnName("NO_INVOICE_COPIES");
            entity.Property(e => e.NumerationGroup)
                .HasMaxLength(20)
                .HasColumnName("NUMERATION_GROUP");
            entity.Property(e => e.PayTermId)
                .HasMaxLength(20)
                .HasColumnName("PAY_TERM_ID");
            entity.Property(e => e.PaymDevDays).HasColumnName("PAYM_DEV_DAYS");
            entity.Property(e => e.PercentTolerance).HasColumnName("PERCENT_TOLERANCE");
            entity.Property(e => e.PersonId)
                .HasMaxLength(20)
                .HasColumnName("PERSON_ID");
            entity.Property(e => e.PoRefRecRefValMethod)
                .HasMaxLength(20)
                .HasColumnName("PO_REF_REC_REF_VAL_METHOD");
            entity.Property(e => e.PostingTemplateId)
                .HasMaxLength(10)
                .HasColumnName("POSTING_TEMPLATE_ID");
            entity.Property(e => e.PrintTaxCodeText)
                .HasMaxLength(5)
                .HasColumnName("PRINT_TAX_CODE_TEXT");
            entity.Property(e => e.ReportAndWithhold)
                .HasMaxLength(20)
                .HasColumnName("REPORT_AND_WITHHOLD");
            entity.Property(e => e.RoundingTaxCode)
                .HasMaxLength(20)
                .HasColumnName("ROUNDING_TAX_CODE");
            entity.Property(e => e.Rowkey)
                .HasMaxLength(50)
                .HasColumnName("ROWKEY");
            entity.Property(e => e.Rowversion).HasColumnName("ROWVERSION");
            entity.Property(e => e.SecondTin)
                .HasMaxLength(5)
                .HasColumnName("SECOND_TIN");
            entity.Property(e => e.ServiceCodeRequired)
                .HasMaxLength(20)
                .HasColumnName("SERVICE_CODE_REQUIRED");
            entity.Property(e => e.ServiceCodeRequiredDb)
                .HasMaxLength(20)
                .HasColumnName("SERVICE_CODE_REQUIRED_DB");
            entity.Property(e => e.SupCountryCode)
                .HasMaxLength(2)
                .HasColumnName("SUP_COUNTRY_CODE");
            entity.Property(e => e.SupVatFreeVatCode)
                .HasMaxLength(20)
                .HasColumnName("SUP_VAT_FREE_VAT_CODE");
            entity.Property(e => e.SupplierId)
                .HasMaxLength(200)
                .HasColumnName("SUPPLIER_ID");
            entity.Property(e => e.SupplierTaxOfficeId)
                .HasMaxLength(20)
                .HasColumnName("SUPPLIER_TAX_OFFICE_ID");
            entity.Property(e => e.SupplierUtr)
                .HasMaxLength(10)
                .HasColumnName("SUPPLIER_UTR");
            entity.Property(e => e.SupplyTypeCode)
                .HasMaxLength(10)
                .HasColumnName("SUPPLY_TYPE_CODE");
            entity.Property(e => e.TaxBookId)
                .HasMaxLength(20)
                .HasColumnName("TAX_BOOK_ID");
            entity.Property(e => e.TaxBookType).HasColumnName("TAX_BOOK_TYPE");
            entity.Property(e => e.TaxBuyCurrRateBase)
                .HasMaxLength(20)
                .HasColumnName("TAX_BUY_CURR_RATE_BASE");
            entity.Property(e => e.TaxCertificateForm)
                .HasMaxLength(20)
                .HasColumnName("TAX_CERTIFICATE_FORM");
            entity.Property(e => e.TaxExempt)
                .HasMaxLength(5)
                .HasColumnName("TAX_EXEMPT");
            entity.Property(e => e.TaxExemptValidFrom)
                .HasColumnType("datetime")
                .HasColumnName("TAX_EXEMPT_VALID_FROM");
            entity.Property(e => e.TaxExemptValidTo)
                .HasColumnType("datetime")
                .HasColumnName("TAX_EXEMPT_VALID_TO");
            entity.Property(e => e.TaxLiability)
                .HasMaxLength(20)
                .HasColumnName("TAX_LIABILITY");
            entity.Property(e => e.TaxRepresentative)
                .HasMaxLength(20)
                .HasColumnName("TAX_REPRESENTATIVE");
            entity.Property(e => e.TaxStructureId)
                .HasMaxLength(20)
                .HasColumnName("TAX_STRUCTURE_ID");
            entity.Property(e => e.UtilityBillProvider)
                .HasMaxLength(20)
                .HasColumnName("UTILITY_BILL_PROVIDER");
            entity.Property(e => e.UtilityBillProviderDb)
                .HasMaxLength(20)
                .HasColumnName("UTILITY_BILL_PROVIDER_DB");
            entity.Property(e => e.VotingSharePercentage)
                .HasMaxLength(20)
                .HasColumnName("VOTING_SHARE_PERCENTAGE");
            entity.Property(e => e.WithholdingBaseAmount)
                .HasMaxLength(20)
                .HasColumnName("WITHHOLDING_BASE_AMOUNT");
        });

        modelBuilder.Entity<IdnumberSequence>(entity =>
        {
            entity.HasKey(e => new { e.SequenceNumber, e.SequenceType });

            entity.ToTable("IDNumberSequences", tb => tb.HasTrigger("TR_IDNumberSequences_Remove_And_Replace_Taken_Sequence_Numbers"));

            entity.Property(e => e.SequenceType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OwningSessionId).HasColumnName("OwningSessionID");
            entity.Property(e => e.ServerName).HasMaxLength(128);

            entity.HasOne(d => d.SequenceTypeNavigation).WithMany(p => p.IdnumberSequences)
                .HasForeignKey(d => d.SequenceType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IDNumberSequenceTypes");
        });

        modelBuilder.Entity<IdnumberSequenceType>(entity =>
        {
            entity.HasKey(e => e.SequenceType);

            entity.ToTable("IDNumberSequenceTypes");

            entity.Property(e => e.SequenceType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.SequencePrefix)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceSuffix)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IfsexternalInvoiceFormat>(entity =>
        {
            entity.HasKey(e => new { e.RecordTypeId, e.ColumnNo });

            entity.ToTable("IFSExternalInvoiceFormat");

            entity.HasIndex(e => new { e.RecordTypeId, e.ColumnId }, "CK_IFSExternalInvoiceFormat_Only_1_field_per_record_type").IsUnique();

            entity.Property(e => e.RecordTypeId)
                .HasMaxLength(10)
                .HasColumnName("RecordTypeID");
            entity.Property(e => e.ColumnId)
                .HasMaxLength(100)
                .HasColumnName("ColumnID");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.FileTemplate)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IfspaymentTerm>(entity =>
        {
            entity.HasKey(e => e.IfstermsCode);

            entity.ToTable("IFSPaymentTerms");

            entity.Property(e => e.IfstermsCode)
                .HasMaxLength(50)
                .HasColumnName("IFSTermsCode");
            entity.Property(e => e.Description).HasMaxLength(500);
        });

        modelBuilder.Entity<In2InvoiceSeries>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("in2InvoiceSeries");

            entity.HasIndex(e => new { e.SessionId, e.Entityno, e.InvoiceTemplateId }, "IX_in2InvoiceSeries").IsClustered();

            entity.Property(e => e.BankAccountId).HasColumnName("BankAccountID");
            entity.Property(e => e.BillSchedule)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.BodyText)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.FooterText)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.IdLanguage)
                .HasDefaultValue(1)
                .HasColumnName("id_language");
            entity.Property(e => e.InvoiceTemplateId).HasColumnName("InvoiceTemplateID");
            entity.Property(e => e.InvoicingTaxGroupId).HasColumnName("InvoicingTaxGroupID");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Notes)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.Paytermscd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("paytermscd");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.Tag)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<In2InvoiceSeriesGroup>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("in2InvoiceSeriesGroups");

            entity.HasIndex(e => new { e.SessionId, e.Entityno, e.InvoiceTemplateId, e.InvoiceTemplateGroupId }, "IX_in2InvoiceSeriesGroups").IsClustered();

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.InvoiceGroupName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.InvoiceTemplateGroupId).HasColumnName("InvoiceTemplateGroupID");
            entity.Property(e => e.InvoiceTemplateId).HasColumnName("InvoiceTemplateID");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Notes)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<In2InvoiceSeriesGroupsV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("in2InvoiceSeriesGroups_v");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.InvoiceGroupName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.InvoiceTemplateGroupId).HasColumnName("InvoiceTemplateGroupID");
            entity.Property(e => e.InvoiceTemplateId).HasColumnName("InvoiceTemplateID");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Notes)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.SessionId).HasColumnName("session_id");
            entity.Property(e => e.UpdateTime)
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<In2InvoiceSeriesV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("in2InvoiceSeries_v");

            entity.Property(e => e.BankAccountId).HasColumnName("BankAccountID");
            entity.Property(e => e.BillSchedule)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.BodyText)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.FooterText)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.IdLanguage).HasColumnName("id_language");
            entity.Property(e => e.InvoiceTemplateId).HasColumnName("InvoiceTemplateID");
            entity.Property(e => e.InvoicingTaxGroupId).HasColumnName("InvoicingTaxGroupID");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Notes)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.Paytermscd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("paytermscd");
            entity.Property(e => e.SessionId).HasColumnName("session_id");
            entity.Property(e => e.StartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.Tag)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UpdateTime)
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<In2InvoiceSplit>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("in2InvoiceSplits");

            entity.HasIndex(e => new { e.SessionId, e.Entityno, e.InvoiceSeriesId, e.InvoiceSplitId }, "IX_in2InvoiceSplits").IsClustered();

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.InvoiceSeriesId).HasColumnName("InvoiceSeriesID");
            entity.Property(e => e.InvoiceSplitId).HasColumnName("InvoiceSplitID");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.ProjectedInvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.SplitEvenly).HasDefaultValue(false);
            entity.Property(e => e.Type)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");

            entity.HasOne(d => d.EntitynoNavigation).WithMany()
                .HasForeignKey(d => d.Entityno)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.TypeNavigation).WithMany()
                .HasForeignKey(d => d.Type)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<In2InvoiceSplitsV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("in2InvoiceSplits_v");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.InvoiceSeriesId).HasColumnName("InvoiceSeriesID");
            entity.Property(e => e.InvoiceSplitId).HasColumnName("InvoiceSplitID");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.ProjectedInvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.SessionId).HasColumnName("session_id");
            entity.Property(e => e.Type)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.UpdateTime)
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<In2InvoiceTax>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("in2InvoiceTax");

            entity.HasIndex(e => new { e.SessionId, e.Entityno, e.StartDate, e.InvoicingTaxGroupId, e.TaxTypeKey }, "IX_in2InvoiceTax").IsClustered();

            entity.Property(e => e.Acctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("acctcd");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.InvoiceTemplateId).HasColumnName("InvoiceTemplateID");
            entity.Property(e => e.InvoicingTaxGroupId).HasColumnName("InvoicingTaxGroupID");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("startDate");
            entity.Property(e => e.TaxTypeKey)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<In2InvoiceTaxV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("in2InvoiceTax_v");

            entity.Property(e => e.Acctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("acctcd");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.InvoiceTemplateId).HasColumnName("InvoiceTemplateID");
            entity.Property(e => e.InvoicingTaxGroupId).HasColumnName("InvoicingTaxGroupID");
            entity.Property(e => e.SessionId).HasColumnName("session_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("startDate");
            entity.Property(e => e.TaxTypeKey)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.UpdateTime)
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<In2Rfi>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("in2RFI");

            entity.HasIndex(e => new { e.SessionId, e.Entityno, e.Seq }, "IX_in2RFI").IsClustered();

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.InvoiceTemplateGroupId).HasColumnName("InvoiceTemplateGroupID");
            entity.Property(e => e.InvoiceTemplateId).HasColumnName("InvoiceTemplateID");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<In2RfiV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("in2RFI_v");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.InvoiceTemplateGroupId).HasColumnName("InvoiceTemplateGroupID");
            entity.Property(e => e.InvoiceTemplateId).HasColumnName("InvoiceTemplateID");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.SessionId).HasColumnName("session_id");
            entity.Property(e => e.Sortorder).HasColumnName("sortorder");
            entity.Property(e => e.UpdateTime)
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<InOutBoard>(entity =>
        {
            entity.HasKey(e => new { e.UserName, e.ActivityDate });

            entity.ToTable("InOutBoard");

            entity.HasIndex(e => new { e.UserName, e.ActivityDate }, "IX_user");

            entity.Property(e => e.UserName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("user_name");
            entity.Property(e => e.ActivityDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Note)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<InOutBoardUserNote>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("InOutBoard_UserNotes");

            entity.Property(e => e.Note)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<InStorageLocation>(entity =>
        {
            entity.HasKey(e => e.IdStoragelocation);

            entity.ToTable("inStorageLocations");

            entity.Property(e => e.IdStoragelocation).HasColumnName("id_storagelocation");
            entity.Property(e => e.Storagelocation)
                .HasMaxLength(50)
                .HasColumnName("storagelocation");
        });

        modelBuilder.Entity<InUnitOfFrequency>(entity =>
        {
            entity.HasKey(e => e.UnitId).HasName("PK_UnitConversion");

            entity.ToTable("InUnitOfFrequency");

            entity.Property(e => e.UnitId).HasColumnName("Unit ID");
            entity.Property(e => e.ConversionValue).HasColumnName("Conversion Value");
            entity.Property(e => e.UnitName)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("Unit Name");
            entity.Property(e => e.UnitSymbol)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Unit Symbol");
        });

        modelBuilder.Entity<InUnitOfLength>(entity =>
        {
            entity.HasKey(e => e.ConversionShortname);

            entity.ToTable("inUnitOfLength");

            entity.Property(e => e.ConversionShortname)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("conversionShortname");
            entity.Property(e => e.ConversionFactorFromInches)
                .HasComputedColumnSql("((1.0)/isnull([conversionFactorToInches],(1)))", false)
                .HasColumnName("conversionFactorFromInches");
            entity.Property(e => e.ConversionFactorToInches).HasColumnName("conversionFactorToInches");
            entity.Property(e => e.ConversionLongname)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("conversionLongname");
        });

        modelBuilder.Entity<InUnitOfWeight>(entity =>
        {
            entity.HasKey(e => e.ConversionShortname);

            entity.ToTable("inUnitOfWeight");

            entity.Property(e => e.ConversionShortname)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("conversionShortname");
            entity.Property(e => e.ConversionFactorFromPounds)
                .HasComputedColumnSql("((1.0)/isnull([conversionFactorToPounds],(1)))", false)
                .HasColumnName("conversionFactorFromPounds");
            entity.Property(e => e.ConversionFactorToPounds).HasColumnName("conversionFactorToPounds");
            entity.Property(e => e.ConversionLongname)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("conversionLongname");
        });

        modelBuilder.Entity<IncomingBarcodesFromAquiredCompany>(entity =>
        {
            entity.HasKey(e => e.BarcodeId);

            entity.ToTable("incomingBarcodesFromAquiredCompanies");

            entity.HasIndex(e => new { e.SourceCompany, e.SourceSystem, e.SourceSystemBarcode }, "UC_incomingBarcodesFromAquiredCompanies_barcode_is_unique").IsUnique();

            entity.Property(e => e.BarcodeId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("barcodeID");
            entity.Property(e => e.DateTimeAddedUtc)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnName("DateTimeAddedUTC");
            entity.Property(e => e.SourceCompany)
                .HasMaxLength(150)
                .HasColumnName("sourceCompany");
            entity.Property(e => e.SourceSystem)
                .HasMaxLength(150)
                .HasColumnName("sourceSystem");
            entity.Property(e => e.SourceSystemBarcode)
                .HasMaxLength(150)
                .HasColumnName("sourceSystemBarcode");
            entity.Property(e => e.SourceSystemPartDescription)
                .HasMaxLength(300)
                .HasColumnName("sourceSystemPartDescription");
            entity.Property(e => e.SourceSystemPartIdentifier)
                .HasMaxLength(150)
                .HasColumnName("sourceSystemPartIdentifier");
        });

        modelBuilder.Entity<Incommodity>(entity =>
        {
            entity.HasKey(e => e.Commodity);

            entity.ToTable("incommodity", tb => tb.HasTrigger("TR_incommodity_TrackHistory"));

            entity.Property(e => e.Commodity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("commodity");
            entity.Property(e => e.Acctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("acctcd");
            entity.Property(e => e.CanHaveSafeWorkingLoad).HasColumnName("canHaveSafeWorkingLoad");
            entity.Property(e => e.Commoditydesc)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("commoditydesc");
            entity.Property(e => e.FileStorageGuid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("FileStorageGUID");
        });

        modelBuilder.Entity<IncommodityBulkSave>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("incommodityBulkSave");

            entity.Property(e => e.FileStorageGuid).HasColumnName("FileStorageGUID");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.ItemcdNew)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("itemcd_new");
            entity.Property(e => e.ItemcdOld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("itemcd_old");
            entity.Property(e => e.Itemdesc)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("itemdesc");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<IncommodityHistory>(entity =>
        {
            entity.HasKey(e => new { e.Commodity, e.ValidFromUtc });

            entity.ToTable("incommodityHistory");

            entity.Property(e => e.Commodity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("commodity");
            entity.Property(e => e.ValidFromUtc)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnName("ValidFromUTC");
            entity.Property(e => e.Acctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("acctcd");
            entity.Property(e => e.Commoditydesc)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("commoditydesc");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(128)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.RemovedBy).HasMaxLength(128);
            entity.Property(e => e.ValidToUtc).HasColumnName("ValidToUTC");
        });

        modelBuilder.Entity<IncommodityMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("incommodity_Mapping");

            entity.Property(e => e.Commodity).HasColumnName("commodity");
        });

        modelBuilder.Entity<Incostinq>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("incostinq");

            entity.Property(e => e.Lvl1).HasColumnName("lvl1");
            entity.Property(e => e.Lvl2).HasColumnName("lvl2");
            entity.Property(e => e.Lvl3).HasColumnName("lvl3");
            entity.Property(e => e.Lvl4).HasColumnName("lvl4");
            entity.Property(e => e.Lvlacq1).HasColumnName("lvlacq1");
            entity.Property(e => e.Lvlacq2).HasColumnName("lvlacq2");
            entity.Property(e => e.Lvlacq3).HasColumnName("lvlacq3");
            entity.Property(e => e.Lvlacq4).HasColumnName("lvlacq4");
            entity.Property(e => e.Lvllabcost1).HasColumnName("lvllabcost1");
            entity.Property(e => e.Lvllabcost2).HasColumnName("lvllabcost2");
            entity.Property(e => e.Lvllabcost3).HasColumnName("lvllabcost3");
            entity.Property(e => e.Lvllabcost4).HasColumnName("lvllabcost4");
            entity.Property(e => e.Lvlmatcost1).HasColumnName("lvlmatcost1");
            entity.Property(e => e.Lvlmatcost2).HasColumnName("lvlmatcost2");
            entity.Property(e => e.Lvlmatcost3).HasColumnName("lvlmatcost3");
            entity.Property(e => e.Lvlmatcost4).HasColumnName("lvlmatcost4");
            entity.Property(e => e.Lvloh1cost1).HasColumnName("lvloh1cost1");
            entity.Property(e => e.Lvloh1cost2).HasColumnName("lvloh1cost2");
            entity.Property(e => e.Lvloh1cost3).HasColumnName("lvloh1cost3");
            entity.Property(e => e.Lvloh1cost4).HasColumnName("lvloh1cost4");
            entity.Property(e => e.Lvloh2cost1).HasColumnName("lvloh2cost1");
            entity.Property(e => e.Lvloh2cost2).HasColumnName("lvloh2cost2");
            entity.Property(e => e.Lvloh2cost3).HasColumnName("lvloh2cost3");
            entity.Property(e => e.Lvloh2cost4).HasColumnName("lvloh2cost4");
            entity.Property(e => e.Lvloutside1).HasColumnName("lvloutside1");
            entity.Property(e => e.Lvloutside2).HasColumnName("lvloutside2");
            entity.Property(e => e.Lvloutside3).HasColumnName("lvloutside3");
            entity.Property(e => e.Lvloutside4).HasColumnName("lvloutside4");
            entity.Property(e => e.MsreplTranVersion).HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Partdesc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partentityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partentityno");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Partrev)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("partrev");
            entity.Property(e => e.Primekey).HasColumnName("primekey");
            entity.Property(e => e.Tot1).HasColumnName("tot1");
            entity.Property(e => e.Tot2).HasColumnName("tot2");
            entity.Property(e => e.Tot3).HasColumnName("tot3");
            entity.Property(e => e.Tot4).HasColumnName("tot4");
            entity.Property(e => e.Totacq1).HasColumnName("totacq1");
            entity.Property(e => e.Totacq2).HasColumnName("totacq2");
            entity.Property(e => e.Totacq3).HasColumnName("totacq3");
            entity.Property(e => e.Totacq4).HasColumnName("totacq4");
            entity.Property(e => e.Totlabcost1).HasColumnName("totlabcost1");
            entity.Property(e => e.Totlabcost2).HasColumnName("totlabcost2");
            entity.Property(e => e.Totlabcost3).HasColumnName("totlabcost3");
            entity.Property(e => e.Totlabcost4).HasColumnName("totlabcost4");
            entity.Property(e => e.Totmatcost1).HasColumnName("totmatcost1");
            entity.Property(e => e.Totmatcost2).HasColumnName("totmatcost2");
            entity.Property(e => e.Totmatcost3).HasColumnName("totmatcost3");
            entity.Property(e => e.Totmatcost4).HasColumnName("totmatcost4");
            entity.Property(e => e.Totoh1cost1).HasColumnName("totoh1cost1");
            entity.Property(e => e.Totoh1cost2).HasColumnName("totoh1cost2");
            entity.Property(e => e.Totoh1cost3).HasColumnName("totoh1cost3");
            entity.Property(e => e.Totoh1cost4).HasColumnName("totoh1cost4");
            entity.Property(e => e.Totoh2cost1).HasColumnName("totoh2cost1");
            entity.Property(e => e.Totoh2cost2).HasColumnName("totoh2cost2");
            entity.Property(e => e.Totoh2cost3).HasColumnName("totoh2cost3");
            entity.Property(e => e.Totoh2cost4).HasColumnName("totoh2cost4");
            entity.Property(e => e.Totoutside1).HasColumnName("totoutside1");
            entity.Property(e => e.Totoutside2).HasColumnName("totoutside2");
            entity.Property(e => e.Totoutside3).HasColumnName("totoutside3");
            entity.Property(e => e.Totoutside4).HasColumnName("totoutside4");
        });

        modelBuilder.Entity<Incostpart>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("incostpart");

            entity.Property(e => e.Lvlacq2).HasColumnName("lvlacq2");
            entity.Property(e => e.Lvlacq3).HasColumnName("lvlacq3");
            entity.Property(e => e.Lvlacq4).HasColumnName("lvlacq4");
            entity.Property(e => e.Lvllabcost2).HasColumnName("lvllabcost2");
            entity.Property(e => e.Lvllabcost3).HasColumnName("lvllabcost3");
            entity.Property(e => e.Lvllabcost4).HasColumnName("lvllabcost4");
            entity.Property(e => e.Lvlmatcost2).HasColumnName("lvlmatcost2");
            entity.Property(e => e.Lvlmatcost3).HasColumnName("lvlmatcost3");
            entity.Property(e => e.Lvlmatcost4).HasColumnName("lvlmatcost4");
            entity.Property(e => e.Lvloh1cost2).HasColumnName("lvloh1cost2");
            entity.Property(e => e.Lvloh1cost3).HasColumnName("lvloh1cost3");
            entity.Property(e => e.Lvloh1cost4).HasColumnName("lvloh1cost4");
            entity.Property(e => e.Lvloh2cost2).HasColumnName("lvloh2cost2");
            entity.Property(e => e.Lvloh2cost3).HasColumnName("lvloh2cost3");
            entity.Property(e => e.Lvloh2cost4).HasColumnName("lvloh2cost4");
            entity.Property(e => e.Lvloutside2).HasColumnName("lvloutside2");
            entity.Property(e => e.Lvloutside3).HasColumnName("lvloutside3");
            entity.Property(e => e.Lvloutside4).HasColumnName("lvloutside4");
            entity.Property(e => e.Partentityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partentityno");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Partrev)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("partrev");
            entity.Property(e => e.Totacq2).HasColumnName("totacq2");
            entity.Property(e => e.Totacq3).HasColumnName("totacq3");
            entity.Property(e => e.Totacq4).HasColumnName("totacq4");
            entity.Property(e => e.Totlabcost2).HasColumnName("totlabcost2");
            entity.Property(e => e.Totlabcost3).HasColumnName("totlabcost3");
            entity.Property(e => e.Totlabcost4).HasColumnName("totlabcost4");
            entity.Property(e => e.Totmatcost2).HasColumnName("totmatcost2");
            entity.Property(e => e.Totmatcost3).HasColumnName("totmatcost3");
            entity.Property(e => e.Totmatcost4).HasColumnName("totmatcost4");
            entity.Property(e => e.Totoh1cost2).HasColumnName("totoh1cost2");
            entity.Property(e => e.Totoh1cost3).HasColumnName("totoh1cost3");
            entity.Property(e => e.Totoh1cost4).HasColumnName("totoh1cost4");
            entity.Property(e => e.Totoh2cost2).HasColumnName("totoh2cost2");
            entity.Property(e => e.Totoh2cost3).HasColumnName("totoh2cost3");
            entity.Property(e => e.Totoh2cost4).HasColumnName("totoh2cost4");
            entity.Property(e => e.Totoutside2).HasColumnName("totoutside2");
            entity.Property(e => e.Totoutside3).HasColumnName("totoutside3");
            entity.Property(e => e.Totoutside4).HasColumnName("totoutside4");
        });

        modelBuilder.Entity<IncostpartHistory>(entity =>
        {
            entity.HasKey(e => new { e.Partno, e.ValidFrom });

            entity.ToTable("incostpart_history");

            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("partno");
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy).HasMaxLength(128);
            entity.Property(e => e.Lvlacq2).HasColumnName("lvlacq2");
            entity.Property(e => e.Lvlacq3).HasColumnName("lvlacq3");
            entity.Property(e => e.Lvlacq4).HasColumnName("lvlacq4");
            entity.Property(e => e.Lvllabcost2).HasColumnName("lvllabcost2");
            entity.Property(e => e.Lvllabcost3).HasColumnName("lvllabcost3");
            entity.Property(e => e.Lvllabcost4).HasColumnName("lvllabcost4");
            entity.Property(e => e.Lvlmatcost2).HasColumnName("lvlmatcost2");
            entity.Property(e => e.Lvlmatcost3).HasColumnName("lvlmatcost3");
            entity.Property(e => e.Lvlmatcost4).HasColumnName("lvlmatcost4");
            entity.Property(e => e.Lvloh1cost2).HasColumnName("lvloh1cost2");
            entity.Property(e => e.Lvloh1cost3).HasColumnName("lvloh1cost3");
            entity.Property(e => e.Lvloh1cost4).HasColumnName("lvloh1cost4");
            entity.Property(e => e.Lvloh2cost2).HasColumnName("lvloh2cost2");
            entity.Property(e => e.Lvloh2cost3).HasColumnName("lvloh2cost3");
            entity.Property(e => e.Lvloh2cost4).HasColumnName("lvloh2cost4");
            entity.Property(e => e.Lvloutside2).HasColumnName("lvloutside2");
            entity.Property(e => e.Lvloutside3).HasColumnName("lvloutside3");
            entity.Property(e => e.Lvloutside4).HasColumnName("lvloutside4");
            entity.Property(e => e.Partentityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("RENT")
                .HasColumnName("partentityno");
            entity.Property(e => e.Partrev)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("partrev");
            entity.Property(e => e.RemovedBy).HasMaxLength(128);
            entity.Property(e => e.Totacq2).HasColumnName("totacq2");
            entity.Property(e => e.Totacq3).HasColumnName("totacq3");
            entity.Property(e => e.Totacq4).HasColumnName("totacq4");
            entity.Property(e => e.Totlabcost2).HasColumnName("totlabcost2");
            entity.Property(e => e.Totlabcost3).HasColumnName("totlabcost3");
            entity.Property(e => e.Totlabcost4).HasColumnName("totlabcost4");
            entity.Property(e => e.Totmatcost2).HasColumnName("totmatcost2");
            entity.Property(e => e.Totmatcost3).HasColumnName("totmatcost3");
            entity.Property(e => e.Totmatcost4).HasColumnName("totmatcost4");
            entity.Property(e => e.Totoh1cost2).HasColumnName("totoh1cost2");
            entity.Property(e => e.Totoh1cost3).HasColumnName("totoh1cost3");
            entity.Property(e => e.Totoh1cost4).HasColumnName("totoh1cost4");
            entity.Property(e => e.Totoh2cost2).HasColumnName("totoh2cost2");
            entity.Property(e => e.Totoh2cost3).HasColumnName("totoh2cost3");
            entity.Property(e => e.Totoh2cost4).HasColumnName("totoh2cost4");
            entity.Property(e => e.Totoutside2).HasColumnName("totoutside2");
            entity.Property(e => e.Totoutside3).HasColumnName("totoutside3");
            entity.Property(e => e.Totoutside4).HasColumnName("totoutside4");
            entity.Property(e => e.ValidTo).HasColumnType("datetime");
        });

        modelBuilder.Entity<Inmakepurchase>(entity =>
        {
            entity.HasKey(e => e.Makepurchasecode).HasName("PK_mumakepurchase");

            entity.ToTable("inmakepurchase");

            entity.Property(e => e.Makepurchasecode)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("makepurchasecode");
            entity.Property(e => e.Makepurchasedesc)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("makepurchasedesc");
        });

        modelBuilder.Entity<Inordercode>(entity =>
        {
            entity.HasKey(e => e.Primekey).HasFillFactor(90);

            entity.ToTable("inordercodes");

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("primekey");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Ordercd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ordercd");
            entity.Property(e => e.Ordercddesc)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ordercddesc");
        });

        modelBuilder.Entity<Inp2Part>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("inp2Parts", tb => tb.HasTrigger("x_Auditinp2PartsA"));

            entity.Property(e => e.Acctno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("acctno");
            entity.Property(e => e.AlternateDesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("alternate_desc");
            entity.Property(e => e.BarcodeLocationNote).HasMaxLength(124);
            entity.Property(e => e.BidValueUsd).HasColumnName("bid_value_USD");
            entity.Property(e => e.Category)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("category");
            entity.Property(e => e.CeMarking)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("CE_Marking");
            entity.Property(e => e.FccId)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("FCC_ID");
            entity.Property(e => e.HarmonizedCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.HarmonizedTariff)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.Height).HasColumnName("height");
            entity.Property(e => e.IdManufacturer).HasColumnName("idManufacturer");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Length).HasColumnName("length");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("locationcd");
            entity.Property(e => e.MakePurchase)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("make_purchase");
            entity.Property(e => e.MaterialDesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("material_desc");
            entity.Property(e => e.ModelNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NetCostCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.OperatingVa).HasColumnName("operating_va");
            entity.Property(e => e.OperatingVacMax)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("operating_vac_max");
            entity.Property(e => e.OperatingVacMin)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("operating_vac_min");
            entity.Property(e => e.Origin)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("origin");
            entity.Property(e => e.Package)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("package");
            entity.Property(e => e.Parent)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("parent");
            entity.Property(e => e.PartImageFilePath).IsUnicode(false);
            entity.Property(e => e.Partdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.PartdescSales)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("partdesc_sales");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.PreferenceCriterionCode)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.PrimaryCategoryCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ProducerCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.RackBays).HasColumnName("rack_bays");
            entity.Property(e => e.RackUnits).HasColumnName("rack_units");
            entity.Property(e => e.RangeType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RentalValueUsd).HasColumnName("rental_value_USD");
            entity.Property(e => e.SafeWorkingLoadLbs).HasColumnName("SafeWorkingLoadLBs");
            entity.Property(e => e.SecondaryCategoryCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SKU");
            entity.Property(e => e.TagIdeas).IsUnicode(false);
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
            entity.Property(e => e.Weight).HasColumnName("weight");
            entity.Property(e => e.Width).HasColumnName("width");
        });

        modelBuilder.Entity<Inp2PartAttachment>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("inp2PartAttachments");

            entity.Property(e => e.AttachmentPath).IsUnicode(false);
            entity.Property(e => e.AttachmentType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<Inp2PartBidValue>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("inp2PartBidValues");

            entity.Property(e => e.Bidvalue).HasColumnName("bidvalue");
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
            entity.Property(e => e.Valuetype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("valuetype");
        });

        modelBuilder.Entity<Inp2PartMaintenanceInterval>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("inp2PartMaintenanceInterval");

            entity.Property(e => e.Caption)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("caption");
            entity.Property(e => e.Instructions)
                .IsUnicode(false)
                .HasColumnName("instructions");
            entity.Property(e => e.Interval).HasColumnName("interval");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<Inp2PartProperty>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("inp2PartProperties");

            entity.Property(e => e.IdPropertyType).HasColumnName("id_PropertyType");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Note)
                .IsUnicode(false)
                .HasColumnName("note");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
            entity.Property(e => e.Value)
                .IsUnicode(false)
                .HasColumnName("value");
        });

        modelBuilder.Entity<Inp2PartReference>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("inp2PartReferences");

            entity.Property(e => e.IdReferenceType).HasColumnName("id_ReferenceType");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Parentpartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("parentpartno");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<Inp2PartSubhireNote>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("inp2PartSubhireNotes");

            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.SubhireNotes).IsUnicode(false);
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<Inp2PartSubhireVendor>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("inp2PartSubhireVendors");

            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.DeliveryRate).HasColumnType("money");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Notes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("notes");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Rate).HasColumnType("money");
            entity.Property(e => e.RateType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ReturnRate).HasColumnType("money");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.Siteno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("siteno");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
            entity.Property(e => e.Vendno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("vendno");
        });

        modelBuilder.Entity<Inp2PartTranslation>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("inp2PartTranslations");

            entity.Property(e => e.IdLanguage).HasColumnName("id_language");
            entity.Property(e => e.Partdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<Inp2PartsA>(entity =>
        {
            entity.HasKey(e => e.AtransactionId).IsClustered(false);

            entity.ToTable("inp2PartsA");

            entity.Property(e => e.AtransactionId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ATransactionID");
            entity.Property(e => e.Acctno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("acctno");
            entity.Property(e => e.AdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnName("ADateTime");
            entity.Property(e => e.AlternateDesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("alternate_desc");
            entity.Property(e => e.ArecordAction).HasColumnName("ARecordAction");
            entity.Property(e => e.Atransaction).HasColumnName("ATransaction");
            entity.Property(e => e.AuserId)
                .IsUnicode(false)
                .HasColumnName("AUserID");
            entity.Property(e => e.BarcodeLocationNote).HasMaxLength(124);
            entity.Property(e => e.BidValueUsd).HasColumnName("bid_value_USD");
            entity.Property(e => e.Category)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("category");
            entity.Property(e => e.CeMarking)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("CE_Marking");
            entity.Property(e => e.FccId)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("FCC_ID");
            entity.Property(e => e.HarmonizedCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.HarmonizedTariff)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.Height).HasColumnName("height");
            entity.Property(e => e.IdManufacturer).HasColumnName("idManufacturer");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Length).HasColumnName("length");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("locationcd");
            entity.Property(e => e.MakePurchase)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("make_purchase");
            entity.Property(e => e.MaterialDesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("material_desc");
            entity.Property(e => e.ModelNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NetCostCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.OperatingVa).HasColumnName("operating_va");
            entity.Property(e => e.OperatingVacMax)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("operating_vac_max");
            entity.Property(e => e.OperatingVacMin)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("operating_vac_min");
            entity.Property(e => e.Origin)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("origin");
            entity.Property(e => e.Package)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("package");
            entity.Property(e => e.Parent)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("parent");
            entity.Property(e => e.PartImageFilePath).IsUnicode(false);
            entity.Property(e => e.Partdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.PartdescSales)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("partdesc_sales");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.PreferenceCriterionCode)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.PrimaryCategoryCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ProducerCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.RackBays).HasColumnName("rack_bays");
            entity.Property(e => e.RackUnits).HasColumnName("rack_units");
            entity.Property(e => e.RangeType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RentalValueUsd).HasColumnName("rental_value_USD");
            entity.Property(e => e.SafeWorkingLoadLbs).HasColumnName("SafeWorkingLoadLBs");
            entity.Property(e => e.SecondaryCategoryCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SessionId).HasColumnName("session_id");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SKU");
            entity.Property(e => e.TagIdeas).IsUnicode(false);
            entity.Property(e => e.UpdateTime)
                .HasColumnType("datetime")
                .HasColumnName("update_time");
            entity.Property(e => e.Weight).HasColumnName("weight");
            entity.Property(e => e.Width).HasColumnName("width");
        });

        modelBuilder.Entity<Inp2ReplacementValue>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("inp2ReplacementValues");

            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Partentityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partentityno");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<InpNeedProtocol>(entity =>
        {
            entity.HasKey(e => new { e.Partno, e.Filetype });

            entity.ToTable("inpNeedProtocol");

            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Filetype)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("filetype");
        });

        modelBuilder.Entity<Inpart>(entity =>
        {
            entity.HasKey(e => e.Partno);

            entity.ToTable("inpart", tb =>
                {
                    tb.HasTrigger("TR_create_part_merge_history");
                    tb.HasTrigger("TR_inpart_OS_Update");
                    tb.HasTrigger("TR_inpart_TrackHistory");
                    tb.HasTrigger("TR_inpart_TrackHistory_BKUP_18SEP2024");
                    tb.HasTrigger("TR_notify_ifs_of_part_creation");
                    tb.HasTrigger("x_AuditinpartA");
                });

            entity.HasIndex(e => e.Guid, "Unique_GUID_inpart").IsUnique();

            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("partno");
            entity.Property(e => e.Acctno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("acctno");
            entity.Property(e => e.AlternateDesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("alternate_desc");
            entity.Property(e => e.BarcodeLocationNote).HasMaxLength(124);
            entity.Property(e => e.CeMarking)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("CE_Marking");
            entity.Property(e => e.Commmodity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("commmodity");
            entity.Property(e => e.Commodity2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("commodity2");
            entity.Property(e => e.CreatedTime)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnType("datetime");
            entity.Property(e => e.DepthUom).HasColumnName("depth_uom");
            entity.Property(e => e.DimsVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("dimsVerifiedDate");
            entity.Property(e => e.DimsVerifiedUser)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dimsVerifiedUser");
            entity.Property(e => e.FccId)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("FCC_ID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("GUID");
            entity.Property(e => e.HarmonizedCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.HarmonizedTariff)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.IdManufacturer).HasColumnName("idManufacturer");
            entity.Property(e => e.LeadSource)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("lead_source");
            entity.Property(e => e.LengthUom).HasColumnName("length_uom");
            entity.Property(e => e.Locationcd).HasColumnName("locationcd");
            entity.Property(e => e.MaterialDesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("material_desc");
            entity.Property(e => e.MaterialSpecs)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("material_specs");
            entity.Property(e => e.ModelNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.Needcompletionreport)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("N")
                .HasColumnName("needcompletionreport");
            entity.Property(e => e.Needkanbancard)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("N")
                .HasColumnName("needkanbancard");
            entity.Property(e => e.NetCostCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.OperatingVa).HasColumnName("operating_va");
            entity.Property(e => e.OperatingVacMax)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("operating_vac_max");
            entity.Property(e => e.OperatingVacMin)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("operating_vac_min");
            entity.Property(e => e.Package)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("package");
            entity.Property(e => e.PartImageFilePath)
                .HasMaxLength(260)
                .IsUnicode(false);
            entity.Property(e => e.Partdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("partdesc");
            entity.Property(e => e.PreferenceCriterionCode)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.PrimaryCategoryCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ProducerCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Projpercent).HasColumnName("projpercent");
            entity.Property(e => e.RackBays).HasColumnName("rack_bays");
            entity.Property(e => e.RackUnits).HasColumnName("rack_units");
            entity.Property(e => e.RangeType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RentalValueUsd).HasColumnName("RentalValueUSD");
            entity.Property(e => e.SafeWorkingLoadLbs).HasColumnName("SafeWorkingLoadLBs");
            entity.Property(e => e.SecondaryCategoryCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SKU");
            entity.Property(e => e.Soundchecksequence)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("soundchecksequence");
            entity.Property(e => e.Source)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("source");
            entity.Property(e => e.Totmatcost1).HasColumnName("totmatcost1");
            entity.Property(e => e.UserCreated)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.UserModified)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.WeightVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("weightVerifiedDate");
            entity.Property(e => e.WeightVerifiedUser)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("weightVerifiedUser");
            entity.Property(e => e.WidthUom).HasColumnName("width_uom");

            entity.HasOne(d => d.CommmodityNavigation).WithMany(p => p.Inparts)
                .HasForeignKey(d => d.Commmodity)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_inpart_commodity");

            entity.HasOne(d => d.HarmonizedCodeNavigation).WithMany(p => p.Inparts)
                .HasForeignKey(d => d.HarmonizedCode)
                .HasConstraintName("FK_inpart_ShippingHarmonizedCodeUOM");

            entity.HasOne(d => d.IdManufacturerNavigation).WithMany(p => p.Inparts)
                .HasForeignKey(d => d.IdManufacturer)
                .HasConstraintName("FK_inpart__idManufacturer");

            entity.HasOne(d => d.LocationcdNavigation).WithMany(p => p.Inparts)
                .HasForeignKey(d => d.Locationcd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_inpartsub_inStorageLocations");

            entity.HasOne(d => d.NetCostCodeNavigation).WithMany(p => p.Inparts)
                .HasForeignKey(d => d.NetCostCode)
                .HasConstraintName("FK_inpart_ShippingNetCostCode");

            entity.HasOne(d => d.PreferenceCriterionCodeNavigation).WithMany(p => p.Inparts)
                .HasForeignKey(d => d.PreferenceCriterionCode)
                .HasConstraintName("FK_inpart_ShippingPreferenceCriterionCode");

            entity.HasOne(d => d.ProducerCodeNavigation).WithMany(p => p.Inparts)
                .HasForeignKey(d => d.ProducerCode)
                .HasConstraintName("FK_inpart_ShippingProducerCode");

            entity.HasOne(d => d.RangeTypeNavigation).WithMany(p => p.Inparts)
                .HasForeignKey(d => d.RangeType)
                .HasConstraintName("FK_inpart_ipAddressRanges");

            entity.HasOne(d => d.SoundchecksequenceNavigation).WithMany(p => p.Inparts)
                .HasForeignKey(d => d.Soundchecksequence)
                .HasConstraintName("FK_SoundcheckSequences_inpart");

            entity.HasOne(d => d.SourceNavigation).WithMany(p => p.Inparts)
                .HasForeignKey(d => d.Source)
                .HasConstraintName("FK_inpart_country");
        });

        modelBuilder.Entity<Inpart2inq>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("inpart2inq");

            entity.Property(e => e.Actcutoff).HasColumnName("actcutoff");
            entity.Property(e => e.Cstacctno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cstacctno");
            entity.Property(e => e.Cstaccttp)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("cstaccttp");
            entity.Property(e => e.Drawref)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("drawref");
            entity.Property(e => e.Drawsize)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("drawsize");
            entity.Property(e => e.Lyradj).HasColumnName("lyradj");
            entity.Property(e => e.Lyrbackorder).HasColumnName("lyrbackorder");
            entity.Property(e => e.Lyrdemands).HasColumnName("lyrdemands");
            entity.Property(e => e.Lyrissue).HasColumnName("lyrissue");
            entity.Property(e => e.Lyrrec).HasColumnName("lyrrec");
            entity.Property(e => e.Lyservice).HasColumnName("lyservice");
            entity.Property(e => e.Maxdays).HasColumnName("maxdays");
            entity.Property(e => e.Maxorder).HasColumnName("maxorder");
            entity.Property(e => e.Minorder).HasColumnName("minorder");
            entity.Property(e => e.Movequeue).HasColumnName("movequeue");
            entity.Property(e => e.Mtdadj).HasColumnName("mtdadj");
            entity.Property(e => e.Mtdbackorder).HasColumnName("mtdbackorder");
            entity.Property(e => e.Mtddemands).HasColumnName("mtddemands");
            entity.Property(e => e.Mtdissue).HasColumnName("mtdissue");
            entity.Property(e => e.Mtdrec).HasColumnName("mtdrec");
            entity.Property(e => e.Multorder).HasColumnName("multorder");
            entity.Property(e => e.Partdesc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partentityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partentityno");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Partrev)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("partrev");
            entity.Property(e => e.Projpercent).HasColumnName("projpercent");
            entity.Property(e => e.Runtime).HasColumnName("runtime");
            entity.Property(e => e.Setuptime).HasColumnName("setuptime");
            entity.Property(e => e.Shrinkage).HasColumnName("shrinkage");
            entity.Property(e => e.Stndorderqty).HasColumnName("stndorderqty");
            entity.Property(e => e.Type)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.Ytdadj).HasColumnName("ytdadj");
            entity.Property(e => e.Ytdbackorder).HasColumnName("ytdbackorder");
            entity.Property(e => e.Ytddemands).HasColumnName("ytddemands");
            entity.Property(e => e.Ytdissues).HasColumnName("ytdissues");
            entity.Property(e => e.Ytdrec).HasColumnName("ytdrec");
            entity.Property(e => e.Ytdservice).HasColumnName("ytdservice");
        });

        modelBuilder.Entity<InpartEntityAccount>(entity =>
        {
            entity.HasKey(e => new { e.Partentityno, e.Acctno });

            entity.ToTable("inpartEntityAccounts");

            entity.Property(e => e.Partentityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partentityno");
            entity.Property(e => e.Acctno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("acctno");
            entity.Property(e => e.Cstacctno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cstacctno");
            entity.Property(e => e.Qcacctno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("qcacctno");
            entity.Property(e => e.ShowInPopup).HasColumnName("show_in_popup");
        });

        modelBuilder.Entity<InpartFixSyd>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("inpart_fix_syd");

            entity.Property(e => e.Area)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("area");
            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.Parentpartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("parentpartno");
            entity.Property(e => e.ParentserialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("parentserial_no");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Receipt)
                .HasColumnType("datetime")
                .HasColumnName("receipt");
            entity.Property(e => e.Row)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.SysP2pCdId)
                .HasMaxLength(32)
                .HasColumnName("$sys_p2p_cd_id");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<InpartHistory>(entity =>
        {
            entity.HasKey(e => new { e.Partno, e.ValidFromUtc });

            entity.ToTable("inpartHistory");

            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.ValidFromUtc)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnName("ValidFromUTC");
            entity.Property(e => e.Acctno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("acctno");
            entity.Property(e => e.AlternateDesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("alternate_desc");
            entity.Property(e => e.CeMarking)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("CE_Marking");
            entity.Property(e => e.Commmodity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("commmodity");
            entity.Property(e => e.Commodity2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("commodity2");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(128)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.DepthUom).HasColumnName("depth_uom");
            entity.Property(e => e.DimsVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("dimsVerifiedDate");
            entity.Property(e => e.DimsVerifiedUser)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dimsVerifiedUser");
            entity.Property(e => e.FccId)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("FCC_ID");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.HarmonizedCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.HarmonizedTariff)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.IdManufacturer).HasColumnName("idManufacturer");
            entity.Property(e => e.LeadSource)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("lead_source");
            entity.Property(e => e.LengthUom).HasColumnName("length_uom");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("locationcd");
            entity.Property(e => e.MaterialDesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("material_desc");
            entity.Property(e => e.MaterialSpecs)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("material_specs");
            entity.Property(e => e.ModelNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.Needcompletionreport)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("needcompletionreport");
            entity.Property(e => e.Needkanbancard)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("needkanbancard");
            entity.Property(e => e.NetCostCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.OperatingVa).HasColumnName("operating_va");
            entity.Property(e => e.OperatingVacMax)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("operating_vac_max");
            entity.Property(e => e.OperatingVacMin)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("operating_vac_min");
            entity.Property(e => e.Package)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("package");
            entity.Property(e => e.PartImageFilePath).IsUnicode(false);
            entity.Property(e => e.Partdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.PreferenceCriterionCode)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.PrimaryCategoryCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ProducerCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Projpercent).HasColumnName("projpercent");
            entity.Property(e => e.RackBays).HasColumnName("rack_bays");
            entity.Property(e => e.RackUnits).HasColumnName("rack_units");
            entity.Property(e => e.RangeType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RemovedBy).HasMaxLength(128);
            entity.Property(e => e.RentalValueUsd).HasColumnName("RentalValueUSD");
            entity.Property(e => e.SecondaryCategoryCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SKU");
            entity.Property(e => e.Soundchecksequence)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("soundchecksequence");
            entity.Property(e => e.Source)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("source");
            entity.Property(e => e.Totmatcost1).HasColumnName("totmatcost1");
            entity.Property(e => e.UserCreated)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UserModified)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ValidToUtc).HasColumnName("ValidToUTC");
            entity.Property(e => e.WeightVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("weightVerifiedDate");
            entity.Property(e => e.WeightVerifiedUser)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("weightVerifiedUser");
            entity.Property(e => e.WidthUom).HasColumnName("width_uom");
        });

        modelBuilder.Entity<InpartHistoryTemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("inpartHistory_Temp");

            entity.Property(e => e.Acctno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("acctno");
            entity.Property(e => e.CeMarking)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("CE_Marking");
            entity.Property(e => e.Commmodity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("commmodity");
            entity.Property(e => e.Commodity2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("commodity2");
            entity.Property(e => e.CreatedBy).HasMaxLength(128);
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.DepthUom).HasColumnName("depth_uom");
            entity.Property(e => e.DimsVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("dimsVerifiedDate");
            entity.Property(e => e.DimsVerifiedUser)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dimsVerifiedUser");
            entity.Property(e => e.FccId)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("FCC_ID");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.HarmonizedCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.HarmonizedTariff)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.IdManufacturer).HasColumnName("idManufacturer");
            entity.Property(e => e.LeadSource)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("lead_source");
            entity.Property(e => e.LengthUom).HasColumnName("length_uom");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("locationcd");
            entity.Property(e => e.MaterialDesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("material_desc");
            entity.Property(e => e.MaterialSpecs)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("material_specs");
            entity.Property(e => e.ModelNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.Needcompletionreport)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("needcompletionreport");
            entity.Property(e => e.Needkanbancard)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("needkanbancard");
            entity.Property(e => e.NetCostCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.OperatingVa).HasColumnName("operating_va");
            entity.Property(e => e.OperatingVacMax)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("operating_vac_max");
            entity.Property(e => e.OperatingVacMin)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("operating_vac_min");
            entity.Property(e => e.Package)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("package");
            entity.Property(e => e.PartImageFilePath).IsUnicode(false);
            entity.Property(e => e.Partdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.PreferenceCriterionCode)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ProducerCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Projpercent).HasColumnName("projpercent");
            entity.Property(e => e.RackBays).HasColumnName("rack_bays");
            entity.Property(e => e.RackUnits).HasColumnName("rack_units");
            entity.Property(e => e.RangeType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RemovedBy).HasMaxLength(128);
            entity.Property(e => e.RentalValueUsd).HasColumnName("RentalValueUSD");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SKU");
            entity.Property(e => e.Soundchecksequence)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("soundchecksequence");
            entity.Property(e => e.Source)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("source");
            entity.Property(e => e.Totmatcost1).HasColumnName("totmatcost1");
            entity.Property(e => e.UserCreated)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UserModified)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ValidFromUtc).HasColumnName("ValidFromUTC");
            entity.Property(e => e.ValidToUtc).HasColumnName("ValidToUTC");
            entity.Property(e => e.WeightVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("weightVerifiedDate");
            entity.Property(e => e.WeightVerifiedUser)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("weightVerifiedUser");
            entity.Property(e => e.WidthUom).HasColumnName("width_uom");
        });

        modelBuilder.Entity<InpartIndexViewTable>(entity =>
        {
            entity.HasKey(e => e.Partno);

            entity.ToTable("inpart_IndexViewTable");

            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("partno");
            entity.Property(e => e.Commmodity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("commmodity");
            entity.Property(e => e.Locationcd)
                .HasDefaultValue(-1)
                .HasColumnName("locationcd");
            entity.Property(e => e.Partdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("partdesc");
            entity.Property(e => e.RentalValueUsd).HasColumnName("RentalValueUSD");
        });

        modelBuilder.Entity<InpartMaintenance>(entity =>
        {
            entity.HasKey(e => new { e.Partno, e.Interval, e.Caption });

            entity.ToTable("inpart_maintenance");

            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Interval).HasColumnName("interval");
            entity.Property(e => e.Caption)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("caption");
            entity.Property(e => e.Instructions)
                .IsUnicode(false)
                .HasColumnName("instructions");
        });

        modelBuilder.Entity<InpartPartSecondaryCategoriesBackUp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("inpart_PartSecondaryCategories_BackUp");

            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("partno");
            entity.Property(e => e.SecondaryCategoryCode)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<InpartReference>(entity =>
        {
            entity.HasKey(e => new { e.Partno, e.Parentpartno, e.IdReferenceType });

            entity.ToTable("inpart_Reference");

            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Parentpartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("parentpartno");
            entity.Property(e => e.IdReferenceType).HasColumnName("id_ReferenceType");
            entity.Property(e => e.IdPartnoReference).HasColumnName("id_PartnoReference");

            entity.HasOne(d => d.IdReferenceTypeNavigation).WithMany(p => p.InpartReferences)
                .HasForeignKey(d => d.IdReferenceType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_inpart_Reference_id_ReferenceType");

            entity.HasOne(d => d.ParentpartnoNavigation).WithMany(p => p.InpartReferenceParentpartnoNavigations)
                .HasForeignKey(d => d.Parentpartno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_inpart_Reference_parentpartno");

            entity.HasOne(d => d.PartnoNavigation).WithMany(p => p.InpartReferencePartnoNavigations)
                .HasForeignKey(d => d.Partno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_inpart_Reference_partno");
        });

        modelBuilder.Entity<InpartReferenceType>(entity =>
        {
            entity.HasKey(e => e.IdReferenceType);

            entity.ToTable("inpart_ReferenceType");

            entity.Property(e => e.IdReferenceType).HasColumnName("id_ReferenceType");
            entity.Property(e => e.ReferenceType)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<InpartTranslation>(entity =>
        {
            entity.HasKey(e => new { e.Partno, e.IdLanguage }).IsClustered(false);

            entity.ToTable("inpart_translations");

            entity.HasIndex(e => new { e.IdLanguage, e.Partno }, "IX_inpart_translations");

            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.IdLanguage).HasColumnName("id_language");
            entity.Property(e => e.Partdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("partdesc");

            entity.HasOne(d => d.IdLanguageNavigation).WithMany(p => p.InpartTranslations)
                .HasForeignKey(d => d.IdLanguage)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_inpart_translations_id_language");

            entity.HasOne(d => d.PartnoNavigation).WithMany(p => p.InpartTranslations)
                .HasForeignKey(d => d.Partno)
                .HasConstraintName("FK_inpart_translations_partno");
        });

        modelBuilder.Entity<InpartTranslationsTemp>(entity =>
        {
            entity.HasKey(e => new { e.Partno, e.IdLanguage }).IsClustered(false);

            entity.ToTable("inpart_translations_Temp");

            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.IdLanguage).HasColumnName("id_language");
            entity.Property(e => e.Partdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("partdesc");
        });

        modelBuilder.Entity<InpartUsedGearSalesInfo>(entity =>
        {
            entity.HasKey(e => new { e.Partno, e.CompanyCode });

            entity.ToTable("inpartUsedGearSalesInfo", tb => tb.HasTrigger("tr_inpartUsedGearSalesInfo_UpdateShopify"));

            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("partno");
            entity.Property(e => e.CompanyCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IsMarkedForSale)
                .HasDefaultValue(false)
                .HasColumnName("isMarkedForSale");
            entity.Property(e => e.NoteInternal).IsUnicode(false);
            entity.Property(e => e.QtyForSale).HasColumnName("qtyForSale");
            entity.Property(e => e.SalesDescription).IsUnicode(false);
            entity.Property(e => e.SalesPageCreated).HasDefaultValue(false);
            entity.Property(e => e.SalesPageSeo)
                .HasMaxLength(320)
                .IsUnicode(false)
                .HasColumnName("SalesPageSEO");
            entity.Property(e => e.ShopifyId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ShopifyID");
            entity.Property(e => e.Tags).IsUnicode(false);
            entity.Property(e => e.UsedGearSalesStatusTypeCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("H");

            entity.HasOne(d => d.CompanyCodeNavigation).WithMany(p => p.InpartUsedGearSalesInfos)
                .HasForeignKey(d => d.CompanyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_inpartUsedGearSalesInfo_Company");

            entity.HasOne(d => d.PartnoNavigation).WithMany(p => p.InpartUsedGearSalesInfos)
                .HasForeignKey(d => d.Partno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_inpartUsedGearSalesInfo_inpart");

            entity.HasOne(d => d.UsedGearSalesStatusTypeCodeNavigation).WithMany(p => p.InpartUsedGearSalesInfos)
                .HasForeignKey(d => d.UsedGearSalesStatusTypeCode)
                .HasConstraintName("FK_inpartUsedGearSalesInfo_UsedGearSalesSalesStatusTypes");
        });

        modelBuilder.Entity<InpartUsedGearSalesInfoBulkSave>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("inpartUsedGearSalesInfoBulkSave");

            entity.Property(e => e.CompanyCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsMarkedForSale).HasColumnName("isMarkedForSale");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.NoteInternal).IsUnicode(false);
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.QtyForSale).HasColumnName("qtyForSale");
            entity.Property(e => e.SalesDescription).IsUnicode(false);
            entity.Property(e => e.SalesPageSeo)
                .HasMaxLength(320)
                .IsUnicode(false)
                .HasColumnName("SalesPageSEO");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.Tags).IsUnicode(false);
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
            entity.Property(e => e.UsedGearSalesStatusTypeCode)
                .HasMaxLength(2)
                .IsUnicode(false);
        });

        modelBuilder.Entity<InpartUsedGearSalesInfoStagingArea>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("inpartUsedGearSalesInfoStagingArea");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Title).HasColumnName("title");
            entity.Property(e => e.Vendor).HasColumnName("vendor");
        });

        modelBuilder.Entity<Inpartsub>(entity =>
        {
            entity.HasKey(e => new { e.UniqueNo, e.Partno, e.Batchno, e.Bld, e.Dept, e.Area, e.Row, e.SerialNo, e.ParentuniqueNo });

            entity.ToTable("inpartsub", tb =>
                {
                    tb.HasTrigger("TR_inpartsub__child_items_follow_parent");
                    tb.HasTrigger("TR_inpartsub__create_intrans_records");
                    tb.HasTrigger("TR_inpartsub__enforce_parts_ordered");
                    tb.HasTrigger("TR_inpartsub__parent_with_child_items_may_not_be_removed");
                    tb.HasTrigger("TR_inpartsub__update_related_to_parts");
                    tb.HasTrigger("TR_inpartsub_checkinNotifications");
                    tb.HasTrigger("TR_inpartsub_checkinOpenRepairTicketNotification");
                    tb.HasTrigger("x_Auditinpartsub");
                });

            entity.HasIndex(e => e.ParentuniqueNo, "IX_parent").HasFilter("([parentunique_no]<>'' AND [onhand]>(0))");

            entity.HasIndex(e => e.Partno, "IX_partno");

            entity.HasIndex(e => new { e.Batchno, e.Partno, e.Bld }, "IX_project_part_warehouse");

            entity.HasIndex(e => new { e.Bld, e.Partno, e.Dept }, "IX_warehouse_part");

            entity.HasIndex(e => e.UniqueNo, "UC_inpartsub_unique_no_for_barcoded_items")
                .IsUnique()
                .HasFilter("([unique_no]<>'')");

            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("unique_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("partno");
            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dept");
            entity.Property(e => e.Area)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("area");
            entity.Property(e => e.Row)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("row");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("serial_no");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.Parentpartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("parentpartno");
            entity.Property(e => e.ParentserialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("parentserial_no");
            entity.Property(e => e.Receipt)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("receipt");

            entity.HasOne(d => d.AreaNavigation).WithMany(p => p.Inpartsubs)
                .HasForeignKey(d => d.Area)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_inpartsub_Lessor");

            entity.HasOne(d => d.BatchnoNavigation).WithMany(p => p.Inpartsubs)
                .HasForeignKey(d => d.Batchno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_inpartsub_glentities");

            entity.HasOne(d => d.BldNavigation).WithMany(p => p.Inpartsubs)
                .HasForeignKey(d => d.Bld)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_inpartsub_Warehouse");

            entity.HasOne(d => d.DeptNavigation).WithMany(p => p.Inpartsubs)
                .HasForeignKey(d => d.Dept)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_inpartsub_EquipmentOwner__dept");

            entity.HasOne(d => d.PartnoNavigation).WithMany(p => p.Inpartsubs)
                .HasForeignKey(d => d.Partno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_inpartsub_inpart");
        });

        modelBuilder.Entity<InpartsubA>(entity =>
        {
            entity.HasKey(e => e.AtransactionId).IsClustered(false);

            entity.ToTable("inpartsubA");

            entity.Property(e => e.AtransactionId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ATransactionID");
            entity.Property(e => e.AdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnName("ADateTime");
            entity.Property(e => e.Area)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("area");
            entity.Property(e => e.ArecordAction).HasColumnName("ARecordAction");
            entity.Property(e => e.Atransaction).HasColumnName("ATransaction");
            entity.Property(e => e.AuserId)
                .IsUnicode(false)
                .HasColumnName("AUserID");
            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.OldArea)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("old_area");
            entity.Property(e => e.OldBatchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("old_batchno");
            entity.Property(e => e.OldBld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("old_bld");
            entity.Property(e => e.OldParentunqieNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("old_parentunqie_no");
            entity.Property(e => e.OldPartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("old_partno");
            entity.Property(e => e.OldSerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("old_serial_no");
            entity.Property(e => e.OldUniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("old_unique_no");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.Parentpartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("parentpartno");
            entity.Property(e => e.ParentserialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("parentserial_no");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Receipt)
                .HasColumnType("datetime")
                .HasColumnName("receipt");
            entity.Property(e => e.Row)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<InpartsubChildPart>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("inpartsub_child_parts");

            entity.Property(e => e.Area)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("area");
            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.Parentpartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("parentpartno");
            entity.Property(e => e.ParentserialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("parentserial_no");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Receipt)
                .HasColumnType("datetime")
                .HasColumnName("receipt");
            entity.Property(e => e.Row)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<InpartsubCompare>(entity =>
        {
            entity.HasKey(e => e.UniqueNo);

            entity.ToTable("inpartsub_compare");

            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.Receipt)
                .HasColumnType("datetime")
                .HasColumnName("receipt");
            entity.Property(e => e.SysP2pCdId)
                .HasMaxLength(32)
                .HasColumnName("$sys_p2p_cd_id");
        });

        modelBuilder.Entity<InpartsubCompareAr>(entity =>
        {
            entity.HasKey(e => e.UniqueNo);

            entity.ToTable("inpartsub_compare_ar");

            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.Receipt)
                .HasColumnType("datetime")
                .HasColumnName("receipt");
            entity.Property(e => e.SysP2pCdId)
                .HasMaxLength(32)
                .HasColumnName("$sys_p2p_cd_id");
        });

        modelBuilder.Entity<InpartsubCompareSyd>(entity =>
        {
            entity.HasKey(e => e.UniqueNo);

            entity.ToTable("inpartsub_compare_syd");

            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.Receipt)
                .HasColumnType("datetime")
                .HasColumnName("receipt");
            entity.Property(e => e.SysP2pCdId)
                .HasMaxLength(32)
                .HasColumnName("$sys_p2p_cd_id");
        });

        modelBuilder.Entity<InpartsubConflicts20230926>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("inpartsubConflicts20230926");

            entity.Property(e => e.Area)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("area");
            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.Parentpartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("parentpartno");
            entity.Property(e => e.ParentserialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("parentserial_no");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Receipt)
                .HasColumnType("datetime")
                .HasColumnName("receipt");
            entity.Property(e => e.Row)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<InpartsubConflicts20231003>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("inpartsubConflicts20231003");

            entity.Property(e => e.Area)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("area");
            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.Parentpartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("parentpartno");
            entity.Property(e => e.ParentserialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("parentserial_no");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Receipt)
                .HasColumnType("datetime")
                .HasColumnName("receipt");
            entity.Property(e => e.Row)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<InpartsubConflicts20240325>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("inpartsub_conflicts_20240325");

            entity.Property(e => e.Area)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("area");
            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.Parentpartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("parentpartno");
            entity.Property(e => e.ParentserialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("parentserial_no");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Receipt)
                .HasColumnType("datetime")
                .HasColumnName("receipt");
            entity.Property(e => e.Row)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<InpartsubConflicts20240522>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("inpartsub_conflicts_20240522");

            entity.Property(e => e.Area)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("area");
            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.Parentpartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("parentpartno");
            entity.Property(e => e.ParentserialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("parentserial_no");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Receipt)
                .HasColumnType("datetime")
                .HasColumnName("receipt");
            entity.Property(e => e.Row)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<InpartsubDuplicatedBarcodes20210111>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("inpartsub_duplicated_barcodes_20210111");

            entity.Property(e => e.Area)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("area");
            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.MsreplTranVersion).HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.Parentpartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("parentpartno");
            entity.Property(e => e.ParentserialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("parentserial_no");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Primekey).HasColumnName("primekey");
            entity.Property(e => e.R).HasColumnName("r");
            entity.Property(e => e.Receipt)
                .HasColumnType("datetime")
                .HasColumnName("receipt");
            entity.Property(e => e.Row)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<InpartsubNonBarcodedProbablyDuplicatedAttached20210113>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("inpartsubNonBarcodedProbablyDuplicatedAttached20210113");

            entity.Property(e => e.Area)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("area");
            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.MsreplTranVersion).HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.Parentpartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("parentpartno");
            entity.Property(e => e.ParentserialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("parentserial_no");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Primekey).HasColumnName("primekey");
            entity.Property(e => e.Receipt)
                .HasColumnType("datetime")
                .HasColumnName("receipt");
            entity.Property(e => e.Row)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<InpartsubParent>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("inpartsub_parents");

            entity.Property(e => e.CBig).HasColumnName("cBig");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<Inpartum>(entity =>
        {
            entity.HasKey(e => e.AtransactionId).IsClustered(false);

            entity.ToTable("inpartA");

            entity.Property(e => e.AtransactionId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ATransactionID");
            entity.Property(e => e.Acctno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("acctno");
            entity.Property(e => e.AdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnName("ADateTime");
            entity.Property(e => e.AlternateDesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("alternate_desc");
            entity.Property(e => e.ArecordAction).HasColumnName("ARecordAction");
            entity.Property(e => e.Atransaction).HasColumnName("ATransaction");
            entity.Property(e => e.AuserId)
                .IsUnicode(false)
                .HasColumnName("AUserID");
            entity.Property(e => e.BarcodeLocationNote).HasMaxLength(124);
            entity.Property(e => e.CeMarking)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("CE_Marking");
            entity.Property(e => e.Commmodity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("commmodity");
            entity.Property(e => e.Commodity2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("commodity2");
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.DepthUom).HasColumnName("depth_uom");
            entity.Property(e => e.DimsVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("dimsVerifiedDate");
            entity.Property(e => e.DimsVerifiedUser)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dimsVerifiedUser");
            entity.Property(e => e.FccId)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("FCC_ID");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.HarmonizedCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.HarmonizedTariff)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.IdManufacturer).HasColumnName("idManufacturer");
            entity.Property(e => e.LeadSource)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("lead_source");
            entity.Property(e => e.LengthUom).HasColumnName("length_uom");
            entity.Property(e => e.Locationcd).HasColumnName("locationcd");
            entity.Property(e => e.MaterialDesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("material_desc");
            entity.Property(e => e.MaterialSpecs)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("material_specs");
            entity.Property(e => e.ModelNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.Needcompletionreport)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("needcompletionreport");
            entity.Property(e => e.Needkanbancard)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("needkanbancard");
            entity.Property(e => e.NetCostCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.OperatingVa).HasColumnName("operating_va");
            entity.Property(e => e.OperatingVacMax)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("operating_vac_max");
            entity.Property(e => e.OperatingVacMin)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("operating_vac_min");
            entity.Property(e => e.Package)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("package");
            entity.Property(e => e.PartImageFilePath)
                .HasMaxLength(260)
                .IsUnicode(false);
            entity.Property(e => e.Partdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.PreferenceCriterionCode)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.PrimaryCategoryCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ProducerCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Projpercent).HasColumnName("projpercent");
            entity.Property(e => e.RackBays).HasColumnName("rack_bays");
            entity.Property(e => e.RackUnits).HasColumnName("rack_units");
            entity.Property(e => e.RangeType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RentalValueUsd).HasColumnName("RentalValueUSD");
            entity.Property(e => e.SafeWorkingLoadLbs).HasColumnName("SafeWorkingLoadLBs");
            entity.Property(e => e.SecondaryCategoryCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SKU");
            entity.Property(e => e.Soundchecksequence)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("soundchecksequence");
            entity.Property(e => e.Source)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("source");
            entity.Property(e => e.Totmatcost1).HasColumnName("totmatcost1");
            entity.Property(e => e.UserCreated)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UserModified)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.WeightVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("weightVerifiedDate");
            entity.Property(e => e.WeightVerifiedUser)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("weightVerifiedUser");
            entity.Property(e => e.WidthUom).HasColumnName("width_uom");
        });

        modelBuilder.Entity<InpsAddInventory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("inpsAddInventory");

            entity.Property(e => e.Acctno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("acctno");
            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.Ipaddress)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IPAddress");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsDisassembly).HasDefaultValue(false);
            entity.Property(e => e.IsInsert)
                .HasDefaultValue(true)
                .HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.MacAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.ParentPartNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.PodateEntered)
                .HasColumnType("datetime")
                .HasColumnName("PODateEntered");
            entity.Property(e => e.PointernalCustomer)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("POInternalCustomer");
            entity.Property(e => e.PointernalDestination)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("POInternalDestination");
            entity.Property(e => e.PointernalDestinationId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("POInternalDestinationId");
            entity.Property(e => e.PoisSerialized).HasColumnName("POIsSerialized");
            entity.Property(e => e.PolineNo).HasColumnName("POLineNo");
            entity.Property(e => e.PolocationNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("POLocationNo");
            entity.Property(e => e.PolotBatchNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("POLotBatchNo");
            entity.Property(e => e.PonoteText)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("PONoteText");
            entity.Property(e => e.Ponumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PONumber");
            entity.Property(e => e.PopartNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("POPartNo");
            entity.Property(e => e.PoqtyArrived).HasColumnName("POQtyArrived");
            entity.Property(e => e.PoreleaseNo).HasColumnName("POReleaseNo");
            entity.Property(e => e.Posite)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("POSite");
            entity.Property(e => e.Ref4)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ref5");
            entity.Property(e => e.Row)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<InpsAddInventoryV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("inpsAddInventory_v");

            entity.Property(e => e.Acctno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("acctno");
            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.Ipaddress)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IPAddress");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.MacAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.ParentPartNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.PodateEntered)
                .HasColumnType("datetime")
                .HasColumnName("PODateEntered");
            entity.Property(e => e.PointernalCustomer)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("POInternalCustomer");
            entity.Property(e => e.PointernalDestination)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("POInternalDestination");
            entity.Property(e => e.PointernalDestinationId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("POInternalDestinationId");
            entity.Property(e => e.PoisSerialized).HasColumnName("POIsSerialized");
            entity.Property(e => e.PolineNo).HasColumnName("POLineNo");
            entity.Property(e => e.PolocationNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("POLocationNo");
            entity.Property(e => e.PolotBatchNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("POLotBatchNo");
            entity.Property(e => e.PonoteText)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("PONoteText");
            entity.Property(e => e.Ponumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PONumber");
            entity.Property(e => e.PopartNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("POPartNo");
            entity.Property(e => e.PoqtyArrived).HasColumnName("POQtyArrived");
            entity.Property(e => e.PoreleaseNo).HasColumnName("POReleaseNo");
            entity.Property(e => e.Posite)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("POSite");
            entity.Property(e => e.Ref4)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ref5");
            entity.Property(e => e.Row)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.SessionId).HasColumnName("session_id");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.UpdateTime)
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<InpsDevice>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("inpsDevices");

            entity.Property(e => e.Area)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("area");
            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.OrigBld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("orig_bld");
            entity.Property(e => e.OrigDept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("orig_dept");
            entity.Property(e => e.OrigOnhand).HasColumnName("orig_onhand");
            entity.Property(e => e.OrigRow)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("orig_row");
            entity.Property(e => e.OrigSerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("orig_serial_no");
            entity.Property(e => e.OrigUniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("orig_unique_no");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.QtyToDelete).HasColumnName("qty_to_delete");
            entity.Property(e => e.Ref4)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ref5");
            entity.Property(e => e.Row)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<InpsDeviceAttachment>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("inpsDeviceAttachments");

            entity.Property(e => e.AttachmentPath).IsUnicode(false);
            entity.Property(e => e.AttachmentType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<InpsDeviceCheckinNotification>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("inpsDeviceCheckinNotifications");

            entity.Property(e => e.CopyRecipients)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("copy_recipients");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Message)
                .IsUnicode(false)
                .HasColumnName("message");
            entity.Property(e => e.Project)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("project");
            entity.Property(e => e.Recipients)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("recipients");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.Subject)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("subject");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
            entity.Property(e => e.Warehouse)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("warehouse");
        });

        modelBuilder.Entity<InpsDeviceProperty>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("inpsDeviceProperties");

            entity.Property(e => e.IdPropertyType).HasColumnName("id_PropertyType");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Note)
                .IsUnicode(false)
                .HasColumnName("note");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
            entity.Property(e => e.Value)
                .IsUnicode(false)
                .HasColumnName("value");
        });

        modelBuilder.Entity<InpsDisassemblyPart>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("inpsDisassemblyParts", "IFS");

            entity.Property(e => e.ChildPartNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert)
                .HasDefaultValue(true)
                .HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.OldChildPartNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Old_ChildPartNo");
            entity.Property(e => e.ParentPartNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.PricePercentage).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<IntegrationProjectCostBucket>(entity =>
        {
            entity.HasKey(e => e.CostBucketCode);

            entity.ToTable("IntegrationProjectCostBucket");

            entity.HasIndex(e => e.CostBucketDescription, "UC_IntegrationProjectCostBucket_Description").IsUnique();

            entity.Property(e => e.CostBucketCode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CostBucketDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IntegrationProjectExpenseGlCodeCostBucket>(entity =>
        {
            entity.HasKey(e => e.ExpenseGlCode);

            entity.ToTable("IntegrationProjectExpenseGlCodeCostBucket");

            entity.Property(e => e.ExpenseGlCode)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.CostBucketCode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.CostBucketCodeNavigation).WithMany(p => p.IntegrationProjectExpenseGlCodeCostBuckets)
                .HasForeignKey(d => d.CostBucketCode)
                .HasConstraintName("FK_IntegrationProjectExpenseGlCodeCostBucket_IntegrationProjectCostBucket");
        });

        modelBuilder.Entity<IntegrationProjectJobTypeCostBucket>(entity =>
        {
            entity.HasKey(e => e.Jobtype);

            entity.ToTable("IntegrationProjectJobTypeCostBucket");

            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("jobtype");
            entity.Property(e => e.CostBucketCode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.CostBucketCodeNavigation).WithMany(p => p.IntegrationProjectJobTypeCostBuckets)
                .HasForeignKey(d => d.CostBucketCode)
                .HasConstraintName("FK_IntegrationProjectJobTypeCostBucket_IntegrationProjectCostBucket");

            entity.HasOne(d => d.JobtypeNavigation).WithOne(p => p.IntegrationProjectJobTypeCostBucket)
                .HasForeignKey<IntegrationProjectJobTypeCostBucket>(d => d.Jobtype)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IntegrationProjectJobTypeCostBucket_pejob");
        });

        modelBuilder.Entity<IntercoCustomer>(entity =>
        {
            entity.HasKey(e => e.CustomerId);

            entity.ToTable("IntercoCustomers", "IFS");

            entity.Property(e => e.CustomerId)
                .HasMaxLength(150)
                .HasColumnName("CUSTOMER_ID");
            entity.Property(e => e.AssociationNumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Association_Number");
            entity.Property(e => e.CounterPartyCode).HasMaxLength(50);
            entity.Property(e => e.CustomerGroup).HasMaxLength(50);
            entity.Property(e => e.CustomerStaticticGroup).HasMaxLength(50);
            entity.Property(e => e.DefaultCurrency)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DefaultPaymentTerms)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IfscompanyCd)
                .HasMaxLength(50)
                .HasColumnName("IFSCompanyCd");
            entity.Property(e => e.SiteId)
                .HasMaxLength(50)
                .HasColumnName("SITE_ID");
        });

        modelBuilder.Entity<IntercompanyBillingEquipValueAdjust>(entity =>
        {
            entity.HasKey(e => e.CompanyCode).IsClustered(false);

            entity.ToTable("IntercompanyBillingEquipValueAdjust");

            entity.Property(e => e.CompanyCode)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.CompanyCodeNavigation).WithOne(p => p.IntercompanyBillingEquipValueAdjust)
                .HasForeignKey<IntercompanyBillingEquipValueAdjust>(d => d.CompanyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IntercompanyBillingEquipValueAdjust_Company");
        });

        modelBuilder.Entity<IntercompanyBillingEquipValueAdjust20171109>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("IntercompanyBillingEquipValueAdjust20171109");

            entity.Property(e => e.CompanyCode)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IntercompanyBillingInstockExclusion>(entity =>
        {
            entity.HasKey(e => new { e.Lessor, e.Lessee });

            entity.Property(e => e.Lessor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("lessor");
            entity.Property(e => e.Lessee)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("lessee");
        });

        modelBuilder.Entity<IntercompanyBillingRevenueAccount>(entity =>
        {
            entity.HasKey(e => e.Acctcd);

            entity.Property(e => e.Acctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("acctcd");

            entity.HasOne(d => d.AcctcdNavigation).WithOne(p => p.IntercompanyBillingRevenueAccount)
                .HasPrincipalKey<Glaccount>(p => p.Acctcd)
                .HasForeignKey<IntercompanyBillingRevenueAccount>(d => d.Acctcd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IntercompanyBillingRevenueAccounts_glaccounts");
        });

        modelBuilder.Entity<IntercompanyPrepFeeExclusion>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.CompanyCodeA)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyCodeB)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Intran>(entity =>
        {
            entity.HasKey(e => new { e.EnterDateUtc, e.Trantype, e.Partno, e.Onhand, e.Orderno, e.Ref3, e.Ref4, e.Ref5, e.UniqueNo, e.Batchno, e.Dept, e.Bld, e.Area, e.Row, e.SerialNo, e.ParentuniqueNo });

            entity.ToTable("intrans", tb =>
                {
                    tb.HasTrigger("TR_intrans_dates");
                    tb.HasTrigger("trg_IFS_FinesseInventoryDisassemblyCompletionNotification_Insert");
                    tb.HasTrigger("x_AuditIntrans");
                });

            entity.HasIndex(e => e.Batchno, "IX_batchno");

            entity.HasIndex(e => e.Enterdate, "IX_date");

            entity.HasIndex(e => new { e.Ref4, e.Trandate }, "IX_intrans_SCRAP_and_LOST").HasFilter("([ref4] IN ('SCRAP', 'LOST'))");

            entity.HasIndex(e => e.Userid, "IX_intrans_by_user");

            entity.HasIndex(e => new { e.Orderno, e.Partno, e.Enterdate }, "IX_order");

            entity.HasIndex(e => new { e.Partno, e.UniqueNo, e.Batchno }, "IX_part");

            entity.HasIndex(e => new { e.Partno, e.Batchno, e.Enterdate }, "IX_part_and_date");

            entity.HasIndex(e => e.Trandate, "IX_trandate");

            entity.HasIndex(e => new { e.UniqueNo, e.Trantype, e.EnterDateUtc }, "IX_unique_no__trantype_EnterDateUTC__with_project")
                .IsDescending(false, false, true)
                .HasFilter("([unique_no]<>'')");

            entity.HasIndex(e => new { e.UniqueNo, e.Trantype, e.Enterdate }, "IX_unique_no__trantype_enterdate")
                .IsDescending(false, false, true)
                .HasFilter("([unique_no]<>'')");

            entity.HasIndex(e => new { e.EnterDateUtc, e.Trantype, e.Partno, e.Onhand, e.Orderno, e.Ref3, e.Ref4, e.Ref5, e.UniqueNo, e.Batchno, e.Dept, e.Bld, e.Area, e.Row, e.SerialNo, e.ParentuniqueNo }, "UC_intrans").IsUnique();

            entity.Property(e => e.EnterDateUtc)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnName("EnterDateUTC");
            entity.Property(e => e.Trantype)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("trantype");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.Orderno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("orderno");
            entity.Property(e => e.Ref3)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref3");
            entity.Property(e => e.Ref4)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref5");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Area)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("area");
            entity.Property(e => e.Row)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("row");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Enterdate)
                .HasDefaultValueSql("(sysdatetime())")
                .HasColumnName("enterdate");
            entity.Property(e => e.HiwmoveQty).HasColumnName("HIWMoveQty");
            entity.Property(e => e.Pk)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("PK");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Trandate)
                .HasDefaultValueSql("(CONVERT([date],sysdatetime()))")
                .HasColumnName("trandate");
            entity.Property(e => e.Userid)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("userid");

            entity.HasOne(d => d.User).WithMany(p => p.Intrans)
                .HasForeignKey(d => d.Userid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_intrans_pjtfrusr");
        });

        modelBuilder.Entity<Intrandesc>(entity =>
        {
            entity.HasKey(e => e.Primekey).HasFillFactor(90);

            entity.ToTable("intrandesc");

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("primekey");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Trancd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("trancd");
            entity.Property(e => e.Trandesc)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("trandesc");
        });

        modelBuilder.Entity<IntransA>(entity =>
        {
            entity.HasKey(e => e.AtransactionId).IsClustered(false);

            entity.ToTable("intransA");

            entity.Property(e => e.AtransactionId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ATransactionID");
            entity.Property(e => e.AdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnName("ADateTime");
            entity.Property(e => e.Area)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("area");
            entity.Property(e => e.ArecordAction).HasColumnName("ARecordAction");
            entity.Property(e => e.Atransaction).HasColumnName("ATransaction");
            entity.Property(e => e.AuserId)
                .IsUnicode(false)
                .HasColumnName("AUserID");
            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.EnterDateUtc).HasColumnName("EnterDateUTC");
            entity.Property(e => e.Enterdate).HasColumnName("enterdate");
            entity.Property(e => e.HiwmoveQty).HasColumnName("HIWMoveQty");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.Orderno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("orderno");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Pk).HasColumnName("PK");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Ref3)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ref3");
            entity.Property(e => e.Ref4)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ref5");
            entity.Property(e => e.Row)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.Trandate).HasColumnName("trandate");
            entity.Property(e => e.Trantype)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("trantype");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.Userid)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("userid");
        });

        modelBuilder.Entity<IntransDuplicates20171119>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("intrans_duplicates20171119");

            entity.Property(e => e.Area)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("area");
            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.EnterDateUtc).HasColumnName("EnterDateUTC");
            entity.Property(e => e.Enterdate).HasColumnName("enterdate");
            entity.Property(e => e.HiwmoveQty).HasColumnName("HIWMoveQty");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.Orderno)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("orderno");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Ref3)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ref3");
            entity.Property(e => e.Ref4)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ref5");
            entity.Property(e => e.Row)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.Trandate).HasColumnName("trandate");
            entity.Property(e => e.Trantype)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("trantype");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.Userid)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("userid");
        });

        modelBuilder.Entity<Intransinq>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("intransinq");

            entity.Property(e => e.Acctno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("acctno");
            entity.Property(e => e.Acctper).HasColumnName("acctper");
            entity.Property(e => e.Accttype)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("accttype");
            entity.Property(e => e.Acctyr).HasColumnName("acctyr");
            entity.Property(e => e.Acqacctno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("acqacctno");
            entity.Property(e => e.Acqaccttype)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("acqaccttype");
            entity.Property(e => e.Acqcost).HasColumnName("acqcost");
            entity.Property(e => e.Area)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("area");
            entity.Property(e => e.Arinvno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("arinvno");
            entity.Property(e => e.AvgUcost).HasColumnName("avg_ucost");
            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bay)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("bay");
            entity.Property(e => e.Billamt).HasColumnName("billamt");
            entity.Property(e => e.Billind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("billind");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Datetime)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("datetime");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.Depth).HasColumnName("depth");
            entity.Property(e => e.Enterdate)
                .HasColumnType("datetime")
                .HasColumnName("enterdate");
            entity.Property(e => e.Glind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("glind");
            entity.Property(e => e.HiwmoveQty).HasColumnName("HIWMoveQty");
            entity.Property(e => e.Inspector)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("inspector");
            entity.Property(e => e.Itemno).HasColumnName("itemno");
            entity.Property(e => e.Labacctno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("labacctno");
            entity.Property(e => e.Labaccttype)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("labaccttype");
            entity.Property(e => e.Labcost).HasColumnName("labcost");
            entity.Property(e => e.Length).HasColumnName("length");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("locationcd");
            entity.Property(e => e.Lot)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("lot");
            entity.Property(e => e.Matcost).HasColumnName("matcost");
            entity.Property(e => e.Oh1acctno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("oh1acctno");
            entity.Property(e => e.Oh1accttype)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("oh1accttype");
            entity.Property(e => e.Oh1cost).HasColumnName("oh1cost");
            entity.Property(e => e.Oh2acctno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("oh2acctno");
            entity.Property(e => e.Oh2accttype)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("oh2accttype");
            entity.Property(e => e.Oh2cost).HasColumnName("oh2cost");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.OpExtendNo).HasColumnName("op_extend_no");
            entity.Property(e => e.OperationNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("operation_no");
            entity.Property(e => e.OrderCostPer).HasColumnName("order_cost_per");
            entity.Property(e => e.Ordercd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ordercd");
            entity.Property(e => e.Orderno)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("orderno");
            entity.Property(e => e.Outsideacctno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("outsideacctno");
            entity.Property(e => e.Outsideaccttype)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("outsideaccttype");
            entity.Property(e => e.Outsidecost).HasColumnName("outsidecost");
            entity.Property(e => e.Pacctno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("pacctno");
            entity.Property(e => e.Paccttype)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("paccttype");
            entity.Property(e => e.Partcost).HasColumnName("partcost");
            entity.Property(e => e.Partdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partentityno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("partentityno");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Partrev)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("partrev");
            entity.Property(e => e.Pid)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("pid");
            entity.Property(e => e.Pieces).HasColumnName("pieces");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.ReceiptNo).HasColumnName("receipt_no");
            entity.Property(e => e.Receiveqty).HasColumnName("receiveqty");
            entity.Property(e => e.Ref1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ref1");
            entity.Property(e => e.Ref2)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ref2");
            entity.Property(e => e.Ref3)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ref3");
            entity.Property(e => e.Ref4)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ref5");
            entity.Property(e => e.RejectCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("reject_code");
            entity.Property(e => e.Release).HasColumnName("release");
            entity.Property(e => e.Row)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.SerialInd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("serial_ind");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.ShipviaCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("shipvia_code");
            entity.Property(e => e.Source)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("source");
            entity.Property(e => e.Tid).HasColumnName("tid");
            entity.Property(e => e.Tier)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("tier");
            entity.Property(e => e.Totcost).HasColumnName("totcost");
            entity.Property(e => e.Trandate)
                .HasColumnType("datetime")
                .HasColumnName("trandate");
            entity.Property(e => e.Trandesc)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("trandesc");
            entity.Property(e => e.Trantype)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("trantype");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.Userid)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("userid");
            entity.Property(e => e.Viewtidp).HasColumnName("viewtidp");
            entity.Property(e => e.Width).HasColumnName("width");
        });

        modelBuilder.Entity<Intransref4>(entity =>
        {
            entity.HasKey(e => e.Primekey).HasFillFactor(90);

            entity.ToTable("intransref4");

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("primekey");
            entity.Property(e => e.Description)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("description");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Ref4)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5desc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref5desc");
        });

        modelBuilder.Entity<InvInvoiceTaxToDeleteOnProduction>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("invInvoiceTaxToDeleteOnProduction");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.InvoiceTemplateId).HasColumnName("InvoiceTemplateID");
            entity.Property(e => e.InvoicingTaxGroupId).HasColumnName("InvoicingTaxGroupID");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Spid)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("spid");
            entity.Property(e => e.StartDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("startDate");
            entity.Property(e => e.TaxTypeKey)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TaxTypeName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.InvoicingTaxGroupType).WithMany()
                .HasForeignKey(d => new { d.InvoicingTaxGroupId, d.TaxTypeKey })
                .HasConstraintName("FK_invInvoiceTax_InvoicingTaxGroupTypes");
        });

        modelBuilder.Entity<InvInvoiceTaxV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("invInvoiceTax_v");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.InvoiceTemplateId).HasColumnName("InvoiceTemplateID");
            entity.Property(e => e.InvoicingTaxGroupId).HasColumnName("InvoicingTaxGroupID");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Spid).HasColumnName("spid");
            entity.Property(e => e.StartDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("startDate");
            entity.Property(e => e.TaxTypeKey)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TaxTypeName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<InventoryChildPartsConsolidated>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Inventory_ChildParts_Consolidated");

            entity.Property(e => e.Checkoutqty).HasColumnName("checkoutqty");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
        });

        modelBuilder.Entity<InventoryChildPartsConsolidatedByLocationOwner>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Inventory_ChildParts_Consolidated_by_Location_Owner");

            entity.Property(e => e.Area)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("area");
            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Checkoutqty).HasColumnName("checkoutqty");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
        });

        modelBuilder.Entity<InventoryConsolidatedByLocationOwner>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Inventory_Consolidated_by_Location_Owner");

            entity.Property(e => e.Area)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("area");
            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.CBig).HasColumnName("cBig");
            entity.Property(e => e.Checkoutqty).HasColumnName("checkoutqty");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
        });

        modelBuilder.Entity<InventoryParentsAndChild>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("InventoryParentsAndChildren");

            entity.Property(e => e.Area)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("area");
            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.IsChild).HasColumnName("is_child");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.Parentpartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("parentpartno");
            entity.Property(e => e.ParentserialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("parentserial_no");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Receipt)
                .HasColumnType("datetime")
                .HasColumnName("receipt");
            entity.Property(e => e.Row)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<InventoryReceipt>(entity =>
        {
            entity.HasKey(e => new { e.OrderNo, e.PartNumber, e.LineNo, e.ReleaseNo }).HasName("PK_IFS_InventoryReceipts");

            entity.ToTable("InventoryReceipts", "IFS");

            entity.Property(e => e.OrderNo).HasMaxLength(50);
            entity.Property(e => e.PartNumber).HasMaxLength(25);
            entity.Property(e => e.LineNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Line_No");
            entity.Property(e => e.ReleaseNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("Release_No");
            entity.Property(e => e.Updated)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<Invoice>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.InvoiceTemplateId, e.InvoiceSeqno }).HasName("PK_Invoice");

            entity.HasIndex(e => new { e.Custno, e.InvoiceDate }, "IX_Invoices_ByCustomer");

            entity.HasIndex(e => e.InvoiceNumber, "ix_invoicing_invoice_number").IsUnique();

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.InvoiceTemplateId).HasColumnName("InvoiceTemplateID");
            entity.Property(e => e.Accountno)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("accountno");
            entity.Property(e => e.Addr1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("addr1");
            entity.Property(e => e.Addr2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("addr2");
            entity.Property(e => e.Addr3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("addr3");
            entity.Property(e => e.Attention)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComputedColumnSql("([bill_to_attention])", false)
                .HasColumnName("attention");
            entity.Property(e => e.BankAccountId).HasColumnName("BankAccountID");
            entity.Property(e => e.BankAccountText)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.BillToAddr1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bill_to_addr1");
            entity.Property(e => e.BillToAddr2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bill_to_addr2");
            entity.Property(e => e.BillToAddr3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bill_to_addr3");
            entity.Property(e => e.BillToAttention)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bill_to_attention");
            entity.Property(e => e.BillToCity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bill_to_city");
            entity.Property(e => e.BillToContact)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bill_to_contact");
            entity.Property(e => e.BillToCountry)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bill_to_country");
            entity.Property(e => e.BillToCounty)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bill_to_county");
            entity.Property(e => e.BillToEmail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bill_to_email");
            entity.Property(e => e.BillToEmail2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bill_to_email2");
            entity.Property(e => e.BillToExt)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bill_to_ext");
            entity.Property(e => e.BillToName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bill_to_name");
            entity.Property(e => e.BillToPhone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bill_to_phone");
            entity.Property(e => e.BillToState)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bill_to_state");
            entity.Property(e => e.BillToZip)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bill_to_zip");
            entity.Property(e => e.BodyText)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.CentsToDistribute)
                .HasComputedColumnSql("(round(([RoundedChunksSum]-[ChunksNotRoundedTarget])*(100),(0)))", false)
                .HasColumnType("money");
            entity.Property(e => e.ChunksNotRoundedTarget).HasColumnType("money");
            entity.Property(e => e.ChunksNotRoundedUntouchable).HasColumnType("money");
            entity.Property(e => e.City)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("city");
            entity.Property(e => e.ClairNewInvoiceId).HasColumnName("ClairNewInvoiceID");
            entity.Property(e => e.Contact)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("contact");
            entity.Property(e => e.Country)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("country");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.CreatedDateUtc)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("CreatedDateUTC");
            entity.Property(e => e.Custno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("custno");
            entity.Property(e => e.EndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.ErrorMessage)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Extension)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("extension");
            entity.Property(e => e.Fax)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fax");
            entity.Property(e => e.FooterText)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.Frghtmatrix)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("frghtmatrix");
            entity.Property(e => e.GrainsToDistribute)
                .HasComputedColumnSql("(round((([RoundedChunksSum]-[ChunksNotRoundedTarget])*(100))/[LineItemOneGrainUnit],(0)))", false)
                .HasColumnType("money");
            entity.Property(e => e.GrainsToDistributeToEachLineItem).HasComputedColumnSql("(floor(CONVERT([int],round(([RoundedChunksSum]-[ChunksNotRoundedTarget])*(100),(0))/[LineItemOneGrainUnit],(0))/nullif([InvoiceChunkCount],(0))))", false);
            entity.Property(e => e.IdLanguage)
                .HasDefaultValue(1)
                .HasColumnName("id_language");
            entity.Property(e => e.InvoiceDueDate).HasColumnName("invoiceDueDate");
            entity.Property(e => e.InvoiceNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InvoiceOneGrainUnit).HasDefaultValue(1);
            entity.Property(e => e.InvoiceSplitId).HasColumnName("InvoiceSplitID");
            entity.Property(e => e.InvoiceTag)
                .HasMaxLength(105)
                .IsUnicode(false);
            entity.Property(e => e.LineItemOneGrainUnit).HasDefaultValue(1);
            entity.Property(e => e.Locationcd)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("locationcd");
            entity.Property(e => e.Name)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("name");
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.OrderedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PayTermsNote)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Paytermscd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("paytermscd");
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("phone");
            entity.Property(e => e.Ponumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PONumber");
            entity.Property(e => e.ProjectTag)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.Ref1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref1");
            entity.Property(e => e.Ref2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref2");
            entity.Property(e => e.Ref3)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref3");
            entity.Property(e => e.Ref4)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref5");
            entity.Property(e => e.Ref6)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref6");
            entity.Property(e => e.Ref7)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref7");
            entity.Property(e => e.Ref8)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref8");
            entity.Property(e => e.RemainingGrainsToDistribute).HasComputedColumnSql("(CONVERT([int],round((([RoundedChunksSum]-[ChunksNotRoundedTarget])*(100))/[LineItemOneGrainUnit],(0)),(0))%nullif([InvoiceChunkCount],(0)))", false);
            entity.Property(e => e.RoundedChunksSum).HasColumnType("money");
            entity.Property(e => e.ShippingAddr1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("shipping_addr1");
            entity.Property(e => e.ShippingAddr2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("shipping_addr2");
            entity.Property(e => e.ShippingAddr3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("shipping_addr3");
            entity.Property(e => e.ShippingCity)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("shipping_city");
            entity.Property(e => e.ShippingCountry)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("shipping_country");
            entity.Property(e => e.ShippingState)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("shipping_state");
            entity.Property(e => e.ShippingZip)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("shipping_zip");
            entity.Property(e => e.StartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.State)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("state");
            entity.Property(e => e.Subno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("subno");
            entity.Property(e => e.SysproCustomerOrderNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.Zip)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zip");

            entity.HasOne(d => d.BankAccount).WithMany(p => p.Invoices)
                .HasForeignKey(d => d.BankAccountId)
                .HasConstraintName("FK_Invoices_BankAccount");

            entity.HasOne(d => d.IdLanguageNavigation).WithMany(p => p.Invoices)
                .HasForeignKey(d => d.IdLanguage)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Invoices_xlat_languages");

            entity.HasOne(d => d.PaytermscdNavigation).WithMany(p => p.Invoices)
                .HasPrincipalKey(p => p.Paytermscd)
                .HasForeignKey(d => d.Paytermscd)
                .HasConstraintName("FK_Invoices_oepayterms");

            entity.HasOne(d => d.InvoiceSeries).WithMany(p => p.Invoices)
                .HasForeignKey(d => new { d.Entityno, d.InvoiceTemplateId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_invoices_invoicetemplates");
        });

        modelBuilder.Entity<InvoiceCommonGroup>(entity =>
        {
            entity.HasKey(e => e.InvoiceGroupName);

            entity.Property(e => e.InvoiceGroupName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<InvoicePiece>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.Seqno, e.InvoiceSeqno });

            entity.ToTable("invoice_pieces", tb => tb.HasTrigger("TR_invoice_pieces__enforce_non_overlapping"));

            entity.HasIndex(e => e.ChunkStartDate, "IX_chunkStartDate");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Acctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("acctcd");
            entity.Property(e => e.ChunkEndDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("chunkEndDate");
            entity.Property(e => e.ChunkRounding)
                .HasComputedColumnSql("([ChunkTotalRounded]-[ChunkTotalNotRounded])", false)
                .HasColumnType("money");
            entity.Property(e => e.ChunkStartDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("chunkStartDate");
            entity.Property(e => e.ChunkTotalNotRounded).HasColumnType("money");
            entity.Property(e => e.ChunkTotalRounded).HasColumnType("money");
            entity.Property(e => e.Description)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("description");
            entity.Property(e => e.InvoiceStartDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("invoiceStartDate");
            entity.Property(e => e.InvoiceTemplateGroupId).HasColumnName("InvoiceTemplateGroupID");
            entity.Property(e => e.InvoiceTemplateId).HasColumnName("InvoiceTemplateID");
            entity.Property(e => e.Notes)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("notes");
            entity.Property(e => e.RfichunkRowId).HasColumnName("RFIChunkRowID");
            entity.Property(e => e.RoundingRestriction).HasDefaultValue(false);
            entity.Property(e => e.Total).HasColumnName("total");

            entity.HasOne(d => d.Rfi).WithMany(p => p.InvoicePieces)
                .HasForeignKey(d => new { d.Entityno, d.Seqno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_invoice_pieces_RFI");

            entity.HasOne(d => d.Invoice).WithMany(p => p.InvoicePieces)
                .HasForeignKey(d => new { d.Entityno, d.InvoiceTemplateId, d.InvoiceSeqno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_invoice_pieces_Invoices");
        });

        modelBuilder.Entity<InvoicePieces1678891320250225>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("invoice_pieces_167889-13_20250225");

            entity.Property(e => e.Acctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("acctcd");
            entity.Property(e => e.ChunkEndDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("chunkEndDate");
            entity.Property(e => e.ChunkRounding).HasColumnType("money");
            entity.Property(e => e.ChunkStartDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("chunkStartDate");
            entity.Property(e => e.ChunkTotalNotRounded).HasColumnType("money");
            entity.Property(e => e.ChunkTotalRounded).HasColumnType("money");
            entity.Property(e => e.Description)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("description");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.InvoiceStartDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("invoiceStartDate");
            entity.Property(e => e.InvoiceTemplateGroupId).HasColumnName("InvoiceTemplateGroupID");
            entity.Property(e => e.InvoiceTemplateId).HasColumnName("InvoiceTemplateID");
            entity.Property(e => e.Notes)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("notes");
            entity.Property(e => e.RfichunkRowId).HasColumnName("RFIChunkRowID");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Total).HasColumnName("total");
        });

        modelBuilder.Entity<InvoiceReservedNumber>(entity =>
        {
            entity.HasKey(e => e.InvoiceReservedNumber1);

            entity.ToTable(tb => tb.HasTrigger("TR_InvoiceReservedNumbers_Insert"));

            entity.Property(e => e.InvoiceReservedNumber1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("InvoiceReservedNumber");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.ReserveNumberCreated)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<InvoiceReservedNumbersTracking>(entity =>
        {
            entity.HasKey(e => new { e.InvoiceReservedNumber, e.Entityno, e.Action }).HasName("PK_invoicereservednumberstracking");

            entity.ToTable("InvoiceReservedNumbersTracking");

            entity.Property(e => e.InvoiceReservedNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Action)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReserveNumberCreated)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<InvoiceSeries>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.InvoiceTemplateId }).HasName("PK_InvoiceTemplates");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("TR_InvoiceSeries");
                    tb.HasTrigger("x_AuditInvoiceSeries");
                });

            entity.HasIndex(e => new { e.Entityno, e.Tag }, "UC_InvoiceTemplates_Tag").IsUnique();

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.InvoiceTemplateId).HasColumnName("InvoiceTemplateID");
            entity.Property(e => e.BankAccountId).HasColumnName("BankAccountID");
            entity.Property(e => e.BillSchedule)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.BodyText)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FooterText)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.IdLanguage)
                .HasDefaultValue(1)
                .HasColumnName("id_language");
            entity.Property(e => e.InvoicingTaxGroupId).HasColumnName("InvoicingTaxGroupID");
            entity.Property(e => e.Notes)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.Paytermscd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("paytermscd");
            entity.Property(e => e.Tag)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.BankAccount).WithMany(p => p.InvoiceSeries)
                .HasForeignKey(d => d.BankAccountId)
                .HasConstraintName("FK_InvoiceTemplates_BankAccount");

            entity.HasOne(d => d.BillScheduleNavigation).WithMany(p => p.InvoiceSeries)
                .HasForeignKey(d => d.BillSchedule)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InvoiceTemplates_pjBillSchedules");

            entity.HasOne(d => d.EntitynoNavigation).WithMany(p => p.InvoiceSeries)
                .HasForeignKey(d => d.Entityno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InvoiceTemplates_glentities");

            entity.HasOne(d => d.IdLanguageNavigation).WithMany(p => p.InvoiceSeries)
                .HasForeignKey(d => d.IdLanguage)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__InvoiceSeries_xlat_languages");

            entity.HasOne(d => d.InvoicingTaxGroup).WithMany(p => p.InvoiceSeries)
                .HasForeignKey(d => d.InvoicingTaxGroupId)
                .HasConstraintName("FK_InvoiceTemplates_InvoicingTaxGroup");

            entity.HasOne(d => d.PaytermscdNavigation).WithMany(p => p.InvoiceSeries)
                .HasPrincipalKey(p => p.Paytermscd)
                .HasForeignKey(d => d.Paytermscd)
                .HasConstraintName("FK_InvoiceTemplates_oepayterms");
        });

        modelBuilder.Entity<InvoiceSeries20161221>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("InvoiceSeries20161221");

            entity.Property(e => e.BankAccountId).HasColumnName("BankAccountID");
            entity.Property(e => e.BillSchedule)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.BodyText)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.FooterText)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.IdLanguage).HasColumnName("id_language");
            entity.Property(e => e.InvoiceTemplateId).HasColumnName("InvoiceTemplateID");
            entity.Property(e => e.InvoicingTaxGroupId).HasColumnName("InvoicingTaxGroupID");
            entity.Property(e => e.Notes)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.Paytermscd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("paytermscd");
            entity.Property(e => e.StartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.Tag)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<InvoiceSeriesA>(entity =>
        {
            entity.HasKey(e => e.AtransactionId).IsClustered(false);

            entity.ToTable("InvoiceSeriesA");

            entity.Property(e => e.AtransactionId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ATransactionID");
            entity.Property(e => e.AdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnName("ADateTime");
            entity.Property(e => e.ArecordAction).HasColumnName("ARecordAction");
            entity.Property(e => e.Atransaction).HasColumnName("ATransaction");
            entity.Property(e => e.AuserId)
                .IsUnicode(false)
                .HasColumnName("AUserID");
            entity.Property(e => e.BankAccountId).HasColumnName("BankAccountID");
            entity.Property(e => e.BillSchedule)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.BodyText)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.FooterText)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.IdLanguage).HasColumnName("id_language");
            entity.Property(e => e.InvoiceTemplateId).HasColumnName("InvoiceTemplateID");
            entity.Property(e => e.InvoicingTaxGroupId).HasColumnName("InvoicingTaxGroupID");
            entity.Property(e => e.Notes)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.Paytermscd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("paytermscd");
            entity.Property(e => e.Tag)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<InvoiceSeriesGroup>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.InvoiceTemplateId, e.InvoiceTemplateGroupId }).HasName("PK_InvoiceTemplateGroups");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.InvoiceTemplateId).HasColumnName("InvoiceTemplateID");
            entity.Property(e => e.InvoiceTemplateGroupId).HasColumnName("InvoiceTemplateGroupID");
            entity.Property(e => e.InvoiceGroupName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Notes)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("notes");

            entity.HasOne(d => d.InvoiceSeries).WithMany(p => p.InvoiceSeriesGroups)
                .HasForeignKey(d => new { d.Entityno, d.InvoiceTemplateId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InvoiceTemplateGroups_InvoiceTemplates");
        });

        modelBuilder.Entity<InvoiceSeriesGroupsStagingVault>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("InvoiceSeriesGroups_StagingVault");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.InvoiceGroupName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.InvoiceTemplateGroupId).HasColumnName("InvoiceTemplateGroupID");
            entity.Property(e => e.InvoiceTemplateId).HasColumnName("InvoiceTemplateID");
            entity.Property(e => e.NewInvoiceTemplateGroupId).HasColumnName("NewInvoiceTemplateGroupID");
            entity.Property(e => e.Notes)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("notes");
            entity.Property(e => e.OEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("o_entityno");
            entity.Property(e => e.OInvoiceGroupName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("o_InvoiceGroupName");
            entity.Property(e => e.OInvoiceTemplateGroupId).HasColumnName("o_InvoiceTemplateGroupID");
            entity.Property(e => e.OInvoiceTemplateId).HasColumnName("o_InvoiceTemplateID");
            entity.Property(e => e.ONotes)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("o_notes");
            entity.Property(e => e.Spid)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("spid");
        });

        modelBuilder.Entity<InvoiceSeriesStagingVault>(entity =>
        {
            entity.HasKey(e => new { e.Spid, e.Entityno, e.InvoiceTemplateId }).HasName("PK_InvoiceTemplates_StagingVault");

            entity.ToTable("InvoiceSeries_StagingVault");

            entity.Property(e => e.Spid)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("spid");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.InvoiceTemplateId).HasColumnName("InvoiceTemplateID");
            entity.Property(e => e.BankAccountId).HasColumnName("BankAccountID");
            entity.Property(e => e.BankAccountText)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.BillSchedule)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.BodyText)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.FooterText)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.InvoicingTaxGroupId).HasColumnName("InvoicingTaxGroupID");
            entity.Property(e => e.NewInvoiceTemplateId).HasColumnName("NewInvoiceTemplateID");
            entity.Property(e => e.Notes)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.OBankAccountId).HasColumnName("o_BankAccountID");
            entity.Property(e => e.OBankAccountText)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("o_BankAccountText");
            entity.Property(e => e.OBillSchedule)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("o_BillSchedule");
            entity.Property(e => e.OBodyText)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("o_BodyText");
            entity.Property(e => e.OFooterText)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("o_FooterText");
            entity.Property(e => e.OInvoicingTaxGroupId).HasColumnName("o_InvoicingTaxGroupID");
            entity.Property(e => e.ONotes)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("o_Notes");
            entity.Property(e => e.OPaytermscd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("o_paytermscd");
            entity.Property(e => e.OStartDate)
                .HasColumnType("datetime")
                .HasColumnName("o_StartDate");
            entity.Property(e => e.OTag)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("o_Tag");
            entity.Property(e => e.OTax).HasColumnName("o_Tax");
            entity.Property(e => e.Paytermscd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("paytermscd");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.Tag)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.BankAccount).WithMany(p => p.InvoiceSeriesStagingVaults)
                .HasForeignKey(d => d.BankAccountId)
                .HasConstraintName("FK_InvoiceTemplates_StagingVault_BankAccount");

            entity.HasOne(d => d.InvoicingTaxGroup).WithMany(p => p.InvoiceSeriesStagingVaultInvoicingTaxGroups)
                .HasForeignKey(d => d.InvoicingTaxGroupId)
                .HasConstraintName("FK_InvoiceTemplates_StagingVault_InvoicingTaxGroup");

            entity.HasOne(d => d.OInvoicingTaxGroup).WithMany(p => p.InvoiceSeriesStagingVaultOInvoicingTaxGroups)
                .HasForeignKey(d => d.OInvoicingTaxGroupId)
                .HasConstraintName("FK_InvoiceTemplates_StagingVault_InvoicingTaxGroup2");

            entity.HasOne(d => d.PaytermscdNavigation).WithMany(p => p.InvoiceSeriesStagingVaults)
                .HasPrincipalKey(p => p.Paytermscd)
                .HasForeignKey(d => d.Paytermscd)
                .HasConstraintName("FK_InvoiceTemplates_StagingVault_oepayterms");
        });

        modelBuilder.Entity<InvoiceSplit>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.InvoiceSeriesId, e.InvoiceSplitId });

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.InvoiceSeriesId).HasColumnName("InvoiceSeriesID");
            entity.Property(e => e.InvoiceSplitId).HasColumnName("InvoiceSplitID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.SplitEvenly).HasDefaultValue(false);
            entity.Property(e => e.Type)
                .HasMaxLength(25)
                .IsUnicode(false);

            entity.HasOne(d => d.EntitynoNavigation).WithMany(p => p.InvoiceSplits)
                .HasForeignKey(d => d.Entityno)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.TypeNavigation).WithMany(p => p.InvoiceSplits)
                .HasForeignKey(d => d.Type)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<InvoiceSplitTemplate>(entity =>
        {
            entity.HasKey(e => e.TemplateId);

            entity.Property(e => e.TemplateId)
                .ValueGeneratedNever()
                .HasColumnName("TemplateID");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<InvoiceSplitTemplateItem>(entity =>
        {
            entity.HasKey(e => new { e.TemplateId, e.ItemId });

            entity.Property(e => e.TemplateId).HasColumnName("TemplateID");
            entity.Property(e => e.ItemId).HasColumnName("ItemID");
            entity.Property(e => e.SplitEvenly).HasDefaultValue(false);
            entity.Property(e => e.Type)
                .HasMaxLength(25)
                .IsUnicode(false);

            entity.HasOne(d => d.Template).WithMany(p => p.InvoiceSplitTemplateItems)
                .HasForeignKey(d => d.TemplateId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<InvoiceSplitType>(entity =>
        {
            entity.HasKey(e => e.Type);

            entity.Property(e => e.Type)
                .HasMaxLength(25)
                .IsUnicode(false);
        });

        modelBuilder.Entity<InvoiceTax>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.InvoiceTemplateId, e.InvoiceSeqno, e.InvoicingTaxGroupId, e.TaxTypeKey });

            entity.ToTable("InvoiceTax");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.InvoiceTemplateId).HasColumnName("InvoiceTemplateID");
            entity.Property(e => e.InvoicingTaxGroupId).HasColumnName("InvoicingTaxGroupID");
            entity.Property(e => e.TaxTypeKey)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Acctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("acctcd");
            entity.Property(e => e.StartDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("startDate");

            entity.HasOne(d => d.InvoicingTaxGroupType).WithMany(p => p.InvoiceTaxes)
                .HasForeignKey(d => new { d.InvoicingTaxGroupId, d.TaxTypeKey })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InvoiceTax_InvoicingTaxGroupTypes");

            entity.HasOne(d => d.Invoice).WithMany(p => p.InvoiceTaxes)
                .HasForeignKey(d => new { d.Entityno, d.InvoiceTemplateId, d.InvoiceSeqno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InvoiceTax_Invoices");
        });

        modelBuilder.Entity<InvoiceTaxStagingVault>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("InvoiceTax_StagingVault");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.InvoiceTemplateId).HasColumnName("InvoiceTemplateID");
            entity.Property(e => e.InvoicingTaxGroupId).HasColumnName("InvoicingTaxGroupID");
            entity.Property(e => e.Spid)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("spid");
            entity.Property(e => e.StartDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("startDate");
            entity.Property(e => e.TaxTypeKey)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TaxTypeName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.InvoicingTaxGroupType).WithMany()
                .HasForeignKey(d => new { d.InvoicingTaxGroupId, d.TaxTypeKey })
                .HasConstraintName("FK_InvoiceTax_StagingVault_InvoicingTaxGroupTypes");
        });

        modelBuilder.Entity<InvoiceTaxStagingVaultV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("InvoiceTax_StagingVault_v");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.InvoiceTemplateId).HasColumnName("InvoiceTemplateID");
            entity.Property(e => e.InvoicingTaxGroupId).HasColumnName("InvoicingTaxGroupID");
            entity.Property(e => e.StartDate)
                .HasColumnType("smalldatetime")
                .HasColumnName("startDate");
            entity.Property(e => e.TaxTypeKey)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.TaxTypeName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<InvoiceTemplateGroupsStagingVaultV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("InvoiceTemplateGroups_StagingVault_v");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.InvoiceGroupName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.InvoiceTemplateGroupId).HasColumnName("InvoiceTemplateGroupID");
            entity.Property(e => e.InvoiceTemplateId).HasColumnName("InvoiceTemplateID");
            entity.Property(e => e.NewInvoiceTemplateGroupId).HasColumnName("NewInvoiceTemplateGroupID");
            entity.Property(e => e.Notes)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.OEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("o_entityno");
            entity.Property(e => e.OInvoiceGroupName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("o_InvoiceGroupName");
            entity.Property(e => e.OInvoiceTemplateGroupId).HasColumnName("o_InvoiceTemplateGroupID");
            entity.Property(e => e.OInvoiceTemplateId).HasColumnName("o_InvoiceTemplateID");
            entity.Property(e => e.ONotes)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("o_Notes");
        });

        modelBuilder.Entity<InvoiceTemplatesStagingVaultV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("InvoiceTemplates_StagingVault_v");

            entity.Property(e => e.BankAccountId).HasColumnName("BankAccountID");
            entity.Property(e => e.BankAccountText)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.BillSchedule)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.BodyText)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.FooterText)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.InvoiceTemplateId).HasColumnName("InvoiceTemplateID");
            entity.Property(e => e.InvoicingTaxGroupId).HasColumnName("InvoicingTaxGroupID");
            entity.Property(e => e.NewInvoiceTemplateId).HasColumnName("NewInvoiceTemplateID");
            entity.Property(e => e.Notes)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.OBankAccountId).HasColumnName("o_BankAccountID");
            entity.Property(e => e.OBankAccountText)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("o_BankAccountText");
            entity.Property(e => e.OBillSchedule)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("o_BillSchedule");
            entity.Property(e => e.OBodyText)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("o_BodyText");
            entity.Property(e => e.OFooterText)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("o_FooterText");
            entity.Property(e => e.OInvoicingTaxGroupId).HasColumnName("o_InvoicingTaxGroupID");
            entity.Property(e => e.ONotes)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("o_Notes");
            entity.Property(e => e.OPaytermscd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("o_paytermscd");
            entity.Property(e => e.OStartDate)
                .HasColumnType("datetime")
                .HasColumnName("o_StartDate");
            entity.Property(e => e.OTag)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("o_Tag");
            entity.Property(e => e.OTax).HasColumnName("o_Tax");
            entity.Property(e => e.Paytermscd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("paytermscd");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.Tag)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Invoices1678891320250225>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("invoices_167889-13_20250225");

            entity.Property(e => e.Accountno)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("accountno");
            entity.Property(e => e.Addr1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("addr1");
            entity.Property(e => e.Addr2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("addr2");
            entity.Property(e => e.Addr3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("addr3");
            entity.Property(e => e.Attention)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("attention");
            entity.Property(e => e.BankAccountId).HasColumnName("BankAccountID");
            entity.Property(e => e.BankAccountText)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.BillToAddr1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bill_to_addr1");
            entity.Property(e => e.BillToAddr2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bill_to_addr2");
            entity.Property(e => e.BillToAddr3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bill_to_addr3");
            entity.Property(e => e.BillToAttention)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("bill_to_attention");
            entity.Property(e => e.BillToCity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bill_to_city");
            entity.Property(e => e.BillToContact)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bill_to_contact");
            entity.Property(e => e.BillToCountry)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bill_to_country");
            entity.Property(e => e.BillToCounty)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bill_to_county");
            entity.Property(e => e.BillToEmail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bill_to_email");
            entity.Property(e => e.BillToEmail2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bill_to_email2");
            entity.Property(e => e.BillToExt)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("bill_to_ext");
            entity.Property(e => e.BillToName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bill_to_name");
            entity.Property(e => e.BillToPhone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bill_to_phone");
            entity.Property(e => e.BillToState)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("bill_to_state");
            entity.Property(e => e.BillToZip)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bill_to_zip");
            entity.Property(e => e.BodyText)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.CentsToDistribute).HasColumnType("money");
            entity.Property(e => e.ChunksNotRoundedTarget).HasColumnType("money");
            entity.Property(e => e.ChunksNotRoundedUntouchable).HasColumnType("money");
            entity.Property(e => e.City)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("city");
            entity.Property(e => e.ClairNewInvoiceId).HasColumnName("ClairNewInvoiceID");
            entity.Property(e => e.Contact)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("contact");
            entity.Property(e => e.Country)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("country");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedDateUtc)
                .HasColumnType("datetime")
                .HasColumnName("CreatedDateUTC");
            entity.Property(e => e.Custno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("custno");
            entity.Property(e => e.EndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.ErrorMessage)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Extension)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("extension");
            entity.Property(e => e.Fax)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fax");
            entity.Property(e => e.FooterText)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.Frghtmatrix)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("frghtmatrix");
            entity.Property(e => e.GrainsToDistribute).HasColumnType("money");
            entity.Property(e => e.IdLanguage).HasColumnName("id_language");
            entity.Property(e => e.InvoiceDueDate).HasColumnName("invoiceDueDate");
            entity.Property(e => e.InvoiceNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InvoiceSplitId).HasColumnName("InvoiceSplitID");
            entity.Property(e => e.InvoiceTag)
                .HasMaxLength(105)
                .IsUnicode(false);
            entity.Property(e => e.InvoiceTemplateId).HasColumnName("InvoiceTemplateID");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("locationcd");
            entity.Property(e => e.Name)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.OrderedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PayTermsNote)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Paytermscd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("paytermscd");
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("phone");
            entity.Property(e => e.Ponumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PONumber");
            entity.Property(e => e.ProjectTag)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.Ref1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ref1");
            entity.Property(e => e.Ref2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ref2");
            entity.Property(e => e.Ref3)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ref3");
            entity.Property(e => e.Ref4)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ref5");
            entity.Property(e => e.Ref6)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ref6");
            entity.Property(e => e.Ref7)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ref7");
            entity.Property(e => e.Ref8)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ref8");
            entity.Property(e => e.RoundedChunksSum).HasColumnType("money");
            entity.Property(e => e.ShippingAddr1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("shipping_addr1");
            entity.Property(e => e.ShippingAddr2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("shipping_addr2");
            entity.Property(e => e.ShippingAddr3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("shipping_addr3");
            entity.Property(e => e.ShippingCity)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("shipping_city");
            entity.Property(e => e.ShippingCountry)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("shipping_country");
            entity.Property(e => e.ShippingState)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("shipping_state");
            entity.Property(e => e.ShippingZip)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("shipping_zip");
            entity.Property(e => e.StartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.State)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("state");
            entity.Property(e => e.Subno)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("subno");
            entity.Property(e => e.SysproCustomerOrderNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.Zip)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("zip");
        });

        modelBuilder.Entity<InvoicesUndone>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.InvoiceTemplateId, e.InvoiceNumber, e.StartDate, e.EndDate, e.UndoneBy, e.UndoneDate }).IsClustered(false);

            entity.ToTable("InvoicesUndone");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.InvoiceTemplateId).HasColumnName("InvoiceTemplateID");
            entity.Property(e => e.InvoiceNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.EndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.UndoneBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.UndoneDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Accountno)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("accountno");
            entity.Property(e => e.Addr1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("addr1");
            entity.Property(e => e.Addr2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("addr2");
            entity.Property(e => e.Addr3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("addr3");
            entity.Property(e => e.BankAccountId).HasColumnName("BankAccountID");
            entity.Property(e => e.BankAccountText)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.BillToAddr1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bill_to_addr1");
            entity.Property(e => e.BillToAddr2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bill_to_addr2");
            entity.Property(e => e.BillToAddr3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bill_to_addr3");
            entity.Property(e => e.BillToAttention)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bill_to_attention");
            entity.Property(e => e.BillToCity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bill_to_city");
            entity.Property(e => e.BillToContact)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bill_to_contact");
            entity.Property(e => e.BillToCountry)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bill_to_country");
            entity.Property(e => e.BillToCounty)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bill_to_county");
            entity.Property(e => e.BillToExt)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bill_to_ext");
            entity.Property(e => e.BillToName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bill_to_name");
            entity.Property(e => e.BillToPhone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bill_to_phone");
            entity.Property(e => e.BillToState)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bill_to_state");
            entity.Property(e => e.BillToZip)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bill_to_zip");
            entity.Property(e => e.BodyText)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.ChunksNotRoundedTarget).HasColumnType("money");
            entity.Property(e => e.ChunksNotRoundedUntouchable).HasColumnType("money");
            entity.Property(e => e.City)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("city");
            entity.Property(e => e.ClairNewInvoiceId).HasColumnName("ClairNewInvoiceID");
            entity.Property(e => e.Contact)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("contact");
            entity.Property(e => e.Country)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("country");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Custno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("custno");
            entity.Property(e => e.Extension)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("extension");
            entity.Property(e => e.Fax)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fax");
            entity.Property(e => e.FooterText)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.Frghtmatrix)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("frghtmatrix");
            entity.Property(e => e.IdLanguage)
                .HasDefaultValue(1)
                .HasColumnName("id_language");
            entity.Property(e => e.InvoiceOneGrainUnit).HasDefaultValue(1);
            entity.Property(e => e.InvoiceSplitId).HasColumnName("InvoiceSplitID");
            entity.Property(e => e.InvoiceTag)
                .HasMaxLength(105)
                .IsUnicode(false);
            entity.Property(e => e.LineItemOneGrainUnit).HasDefaultValue(1);
            entity.Property(e => e.Locationcd)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("locationcd");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("name");
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.Paytermscd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("paytermscd");
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("phone");
            entity.Property(e => e.Ponumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PONumber");
            entity.Property(e => e.Ref1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref1");
            entity.Property(e => e.Ref2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref2");
            entity.Property(e => e.Ref3)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref3");
            entity.Property(e => e.Ref4)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref5");
            entity.Property(e => e.Ref6)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref6");
            entity.Property(e => e.Ref7)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref7");
            entity.Property(e => e.Ref8)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref8");
            entity.Property(e => e.RoundedChunksSum).HasColumnType("money");
            entity.Property(e => e.ShippingAddr1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("shipping_addr1");
            entity.Property(e => e.ShippingAddr2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("shipping_addr2");
            entity.Property(e => e.ShippingAddr3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("shipping_addr3");
            entity.Property(e => e.ShippingCity)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("shipping_city");
            entity.Property(e => e.ShippingCountry)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("shipping_country");
            entity.Property(e => e.ShippingState)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("shipping_state");
            entity.Property(e => e.ShippingZip)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("shipping_zip");
            entity.Property(e => e.State)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("state");
            entity.Property(e => e.Subno)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("subno");
            entity.Property(e => e.Total).HasColumnType("money");
            entity.Property(e => e.Zip)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zip");
        });

        modelBuilder.Entity<InvoicingTaxGroup>(entity =>
        {
            entity.HasKey(e => e.InvoicingTaxGroupId).HasName("InvoicingTaxGroup_PK");

            entity.ToTable("InvoicingTaxGroup");

            entity.Property(e => e.InvoicingTaxGroupId)
                .ValueGeneratedNever()
                .HasColumnName("InvoicingTaxGroupID");
            entity.Property(e => e.GroupName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
        });

        modelBuilder.Entity<InvoicingTaxGroupType>(entity =>
        {
            entity.HasKey(e => new { e.InvoicingTaxGroupId, e.TaxTypeKey });

            entity.Property(e => e.InvoicingTaxGroupId).HasColumnName("InvoicingTaxGroupID");
            entity.Property(e => e.TaxTypeKey)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.InvoicingTaxGroup).WithMany(p => p.InvoicingTaxGroupTypes)
                .HasForeignKey(d => d.InvoicingTaxGroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InvoicingTaxGroupTypes_InvoicingTaxGroup");

            entity.HasOne(d => d.TaxTypeKeyNavigation).WithMany(p => p.InvoicingTaxGroupTypes)
                .HasForeignKey(d => d.TaxTypeKey)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InvoicingTaxGroupTypes_InvoicingTaxType");
        });

        modelBuilder.Entity<InvoicingTaxType>(entity =>
        {
            entity.HasKey(e => e.TaxTypeKey).HasName("InvoicingTaxType_PK");

            entity.ToTable("InvoicingTaxType");

            entity.Property(e => e.TaxTypeKey)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Rate).HasComment("if rate = 0 tax is manually calculated by the user.  if rate > 0 the tax is a fixed rate.");
            entity.Property(e => e.TaxTypeName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IpAddressRange>(entity =>
        {
            entity.HasKey(e => e.RangeType);

            entity.ToTable("ipAddressRanges");

            entity.Property(e => e.RangeType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.RangeDesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Subnet)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<Ippool>(entity =>
        {
            entity.HasKey(e => e.IppoolName);

            entity.ToTable("IPPools");

            entity.Property(e => e.IppoolName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IPPoolName");
            entity.Property(e => e.Iphigh)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("IPHigh");
            entity.Property(e => e.Iplow)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("IPLow");
        });

        modelBuilder.Entity<IsPerDiemBillableStatusType>(entity =>
        {
            entity.HasKey(e => e.IsPerDiemBillableStatusCode).IsClustered(false);

            entity.Property(e => e.IsPerDiemBillableStatusCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.IsPerDiemBillableStatusDesc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<IsoLanguageDef>(entity =>
        {
            entity.HasKey(e => e.LanguageCode);

            entity.ToTable("ISO_LANGUAGE_DEF", "IFS");

            entity.Property(e => e.LanguageCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("LANGUAGE_CODE");
            entity.Property(e => e.DbDescription).HasColumnName("DB_DESCRIPTION");
            entity.Property(e => e.Description)
                .HasMaxLength(740)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.FinesseLanguageId).HasColumnName("FinesseLanguageID");
            entity.Property(e => e.Objid).HasColumnName("OBJID");
            entity.Property(e => e.Objkey)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OBJKEY");
            entity.Property(e => e.Objversion).HasColumnName("OBJVERSION");
            entity.Property(e => e.UsedInAppl)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("USED_IN_APPL");

            entity.HasOne(d => d.FinesseLanguage).WithMany(p => p.IsoLanguageDefs)
                .HasForeignKey(d => d.FinesseLanguageId)
                .HasConstraintName("FK_FinesseLanguageID");
        });

        modelBuilder.Entity<JdbWarehouseGear>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("JDB_warehouse_gear");

            entity.Property(e => e.FromArea).HasColumnName("fromArea");
            entity.Property(e => e.FromBld).HasColumnName("fromBld");
            entity.Property(e => e.FromDept).HasColumnName("fromDept");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.ParentuniqueNo).HasColumnName("parentunique_no");
            entity.Property(e => e.Partno).HasColumnName("partno");
            entity.Property(e => e.Pieces).HasColumnName("pieces");
            entity.Property(e => e.Row).HasColumnName("row");
            entity.Property(e => e.SerialNo).HasColumnName("serial_no");
            entity.Property(e => e.ToArea).HasColumnName("toArea");
            entity.Property(e => e.ToBatchNo).HasColumnName("toBatchNo");
            entity.Property(e => e.ToBld).HasColumnName("toBld");
            entity.Property(e => e.ToDept).HasColumnName("toDept");
            entity.Property(e => e.UniqueNo).HasColumnName("unique_no");
        });

        modelBuilder.Entity<JobBudgetPartsCheckedOut>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("job_budget_parts_checked_out");

            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.CBig).HasColumnName("cBig");
            entity.Property(e => e.Checkoutqty).HasColumnName("checkoutqty");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
        });

        modelBuilder.Entity<JobBudgetsEmployeesTransaction>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("job_budgets_employees_transactions");

            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("engactivecd");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("fromdate");
            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("jobtype");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Src)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("src");
        });

        modelBuilder.Entity<JobBudgetsPartsTransaction>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("job_budgets_parts_transactions");

            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("engactivecd");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("fromdate");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Src)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("src");
        });

        modelBuilder.Entity<JobBudgetsPartsTransactions2>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("job_budgets_parts_transactions2");

            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("engactivecd");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("fromdate");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Src)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("src");
        });

        modelBuilder.Entity<JobBudgetsPartsTransactionsLastDailyRefresh>(entity =>
        {
            entity.HasKey(e => e.Date).HasName("PK__job_budgets_part__157742B7");

            entity.ToTable("job_budgets_parts_transactions_last_daily_refresh");

            entity.Property(e => e.Date).HasColumnType("datetime");
        });

        modelBuilder.Entity<JobBudgetsPartsTransactionsNeedingRefresh>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("job_budgets_parts_transactions_needing_refresh", tb => tb.HasTrigger("TR_job_budgets_parts_transactions_needing_refresh"));

            entity.HasIndex(e => new { e.Entityno, e.Partno }, "IX_job_budgets_parts_transactions_needing_refresh").IsClustered();

            entity.Property(e => e.DateAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("date_added");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
        });

        modelBuilder.Entity<JobBudgetsPartsTransactionsTbl>(entity =>
        {
            entity.HasKey(e => new { e.Bld, e.Partno, e.Fromdate, e.Src, e.Entityno });

            entity.ToTable("job_budgets_parts_transactions_tbl");

            entity.HasIndex(e => new { e.Entityno, e.Partno }, "IX_proj");

            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("fromdate");
            entity.Property(e => e.Src)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("src");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Qty).HasColumnName("qty");

            entity.HasOne(d => d.PartnoNavigation).WithMany(p => p.JobBudgetsPartsTransactionsTbls)
                .HasForeignKey(d => d.Partno)
                .HasConstraintName("FK_job_budgets_parts_transactions_tbl_inpart");
        });

        modelBuilder.Entity<JobBudgetsPartsTransactionsTblTemp>(entity =>
        {
            entity.HasKey(e => new { e.Src, e.Entityno, e.Bld, e.Partno, e.Fromdate });

            entity.ToTable("job_budgets_parts_transactions_tbl_Temp");

            entity.Property(e => e.Src)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("src");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("fromdate");
            entity.Property(e => e.Qty).HasColumnName("qty");
        });

        modelBuilder.Entity<JobBudgetsPartsTransactionsWithTzDefunct>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("job_budgets_parts_transactions_with_tz_defunct");

            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("engactivecd");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("fromdate");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Src)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("src");
        });

        modelBuilder.Entity<JobCostingExtra>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.StartDate, e.EndDate, e.Currency, e.EquipmentCost, e.Invoices, e.Crew, e.Expenses, e.Note });

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.StartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.EndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("USD")
                .HasColumnName("currency");
            entity.Property(e => e.EquipmentCost).HasColumnType("money");
            entity.Property(e => e.Invoices).HasColumnType("money");
            entity.Property(e => e.Crew).HasColumnType("money");
            entity.Property(e => e.Expenses).HasColumnType("money");
            entity.Property(e => e.Note)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("note");
            entity.Property(e => e.Days).HasComputedColumnSql("((1)+datediff(day,[StartDate],[EndDate]))", false);

            entity.HasOne(d => d.EntitynoNavigation).WithMany(p => p.JobCostingExtras)
                .HasForeignKey(d => d.Entityno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_JobCostingExtras_glentities");
        });

        modelBuilder.Entity<JobCostingHighLevelDataTbl>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("JobCostingHighLevelData_tbl");

            entity.Property(e => e.AccountExecutive)
                .HasMaxLength(51)
                .IsUnicode(false)
                .HasColumnName("Account Executive");
            entity.Property(e => e.AccountManager)
                .HasMaxLength(51)
                .IsUnicode(false)
                .HasColumnName("Account Manager");
            entity.Property(e => e.ActualCrew).HasColumnName("actual_crew");
            entity.Property(e => e.ActualEquipment).HasColumnName("actual_equipment");
            entity.Property(e => e.ActualEquipmentOrdered).HasColumnName("actual_equipment_ordered");
            entity.Property(e => e.ActualEquipmentShoptime).HasColumnName("actual_equipment_shoptime");
            entity.Property(e => e.ActualExpenses)
                .HasColumnType("money")
                .HasColumnName("actual_expenses");
            entity.Property(e => e.ActualNonUsaEquipment).HasColumnName("actual_NonUSA_equipment");
            entity.Property(e => e.ActualUsaEquipment).HasColumnName("actual_USA_equipment");
            entity.Property(e => e.BidCrew).HasColumnName("bid_crew");
            entity.Property(e => e.BidEquipmentBenchmark)
                .HasColumnType("numeric(38, 19)")
                .HasColumnName("bid_equipment_benchmark");
            entity.Property(e => e.BidEquipmentProposal).HasColumnName("bid_equipment_proposal");
            entity.Property(e => e.BidExpenses).HasColumnName("bid_expenses");
            entity.Property(e => e.Company)
                .HasMaxLength(70)
                .IsUnicode(false);
            entity.Property(e => e.CrewCost).HasColumnName("crew_cost");
            entity.Property(e => e.ExtraCrew)
                .HasColumnType("money")
                .HasColumnName("extra_crew");
            entity.Property(e => e.ExtraEquipmentCost)
                .HasColumnType("numeric(38, 9)")
                .HasColumnName("extra_equipment_cost");
            entity.Property(e => e.ExtraExpenses)
                .HasColumnType("money")
                .HasColumnName("extra_expenses");
            entity.Property(e => e.ExtraInvoices)
                .HasColumnType("money")
                .HasColumnName("extra_invoices");
            entity.Property(e => e.HomeWarehouse)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Home Warehouse");
            entity.Property(e => e.InvoicedEquipment).HasColumnName("invoiced_equipment");
            entity.Property(e => e.InvoicedEquipmentNonUsa).HasColumnName("invoiced_equipmentNonUSA");
            entity.Property(e => e.InvoicedLabor).HasColumnName("invoiced_labor");
            entity.Property(e => e.InvoicedLaborNonUsa).HasColumnName("invoiced_laborNonUSA");
            entity.Property(e => e.InvoicedOther).HasColumnName("invoiced_other");
            entity.Property(e => e.InvoicedOtherNonUsa).HasColumnName("invoiced_otherNonUSA");
            entity.Property(e => e.Project)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Project #");
            entity.Property(e => e.ProjectDescription)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Project Description");
            entity.Property(e => e.PropType)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("Prop. Type");
            entity.Property(e => e.QuoteCrew).HasColumnName("quote_crew");
            entity.Property(e => e.QuoteEquipmentActual).HasColumnName("quote_equipment_actual");
            entity.Property(e => e.QuoteEquipmentBenchmark).HasColumnName("quote_equipment_benchmark");
            entity.Property(e => e.QuoteExpenses).HasColumnName("quote_expenses");
            entity.Property(e => e.SubrentedEquipment)
                .HasColumnType("money")
                .HasColumnName("subrented_equipment");
        });

        modelBuilder.Entity<JobTypesInMyDivision>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("JobTypes_In_My_Division");

            entity.Property(e => e.Abraearningscodeprefix)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("abraearningscodeprefix");
            entity.Property(e => e.Hours).HasColumnName("hours");
            entity.Property(e => e.InMyDivision)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.IsActive).HasColumnName("isActive");
            entity.Property(e => e.IsQualification).HasColumnName("is_qualification");
            entity.Property(e => e.Jobdesc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("jobdesc");
            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("jobtype");
        });

        modelBuilder.Entity<JpjinvoiceImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("JPJInvoiceImport");

            entity.Property(e => e.InvoiceNo).HasColumnName("Invoice No");
        });

        modelBuilder.Entity<KanbanUsersPartsView>(entity =>
        {
            entity.HasKey(e => new { e.Userid, e.Partno });

            entity.Property(e => e.Userid)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("userid");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Partactive)
                .IsRequired()
                .HasDefaultValueSql("('1')")
                .HasColumnName("partactive");
        });

        modelBuilder.Entity<KnownClairTourTestSchemaDifference>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.ColumnName).HasMaxLength(4000);
            entity.Property(e => e.Difference)
                .HasMaxLength(56)
                .IsUnicode(false);
            entity.Property(e => e.Notes)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.ObjectName).HasMaxLength(128);
            entity.Property(e => e.ReviewAction)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReviewDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TableName).HasMaxLength(1035);
            entity.Property(e => e.Type).HasMaxLength(60);
        });

        modelBuilder.Entity<Language>(entity =>
        {
            entity.HasKey(e => e.Languagecd);

            entity.ToTable("languages");

            entity.Property(e => e.Languagecd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("languagecd");
            entity.Property(e => e.LanguageDesc)
                .HasMaxLength(50)
                .HasColumnName("languageDesc");

            entity.HasMany(d => d.Empnos).WithMany(p => p.Languagecds)
                .UsingEntity<Dictionary<string, object>>(
                    "EmployeeLanguage",
                    r => r.HasOne<Peemployee>().WithMany()
                        .HasForeignKey("Empno")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_EmployeeLanguages_peemployee"),
                    l => l.HasOne<Language>().WithMany()
                        .HasForeignKey("Languagecd")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_EmployeeLanguages_languages"),
                    j =>
                    {
                        j.HasKey("Languagecd", "Empno");
                        j.ToTable("EmployeeLanguages");
                        j.IndexerProperty<string>("Languagecd")
                            .HasMaxLength(10)
                            .IsUnicode(false)
                            .HasDefaultValue("")
                            .HasColumnName("languagecd");
                        j.IndexerProperty<string>("Empno")
                            .HasMaxLength(10)
                            .IsUnicode(false)
                            .HasDefaultValue("")
                            .HasColumnName("empno");
                    });
        });

        modelBuilder.Entity<LateReturn>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("late_returns");

            entity.Property(e => e.Commodity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("commodity");
            entity.Property(e => e.Entitydesc)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("entitydesc");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.EstQty).HasColumnName("est_qty");
            entity.Property(e => e.LineNo).HasColumnName("line_no");
            entity.Property(e => e.Locationcd).HasColumnName("locationcd");
            entity.Property(e => e.MfgDesc)
                .HasMaxLength(250)
                .HasColumnName("mfg_desc");
            entity.Property(e => e.Opsmgr)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("opsmgr");
            entity.Property(e => e.OriginWarehouse)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Partdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Proptype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("proptype");
            entity.Property(e => e.Respempno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("respempno");
            entity.Property(e => e.ReturnWarehouse)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SecondaryOpsEmpno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("secondaryOpsEmpno");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("todate");
            entity.Property(e => e.Trandate)
                .HasColumnType("datetime")
                .HasColumnName("trandate");
        });

        modelBuilder.Entity<LatestLogon>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("LatestLogons");

            entity.Property(e => e.LastLogonUtc)
                .HasPrecision(3)
                .HasColumnName("LastLogonUTC");
            entity.Property(e => e.LogonCount).HasColumnName("logonCount");
            entity.Property(e => e.UserName)
                .HasMaxLength(128)
                .HasColumnName("user_name");
        });

        modelBuilder.Entity<LatestLogonApplication>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("LatestLogonApplications");

            entity.Property(e => e.LastLogonUtc)
                .HasPrecision(3)
                .HasColumnName("LastLogonUTC");
            entity.Property(e => e.LogonCount).HasColumnName("logonCount");
            entity.Property(e => e.ProgramName)
                .HasMaxLength(128)
                .HasColumnName("program_name");
            entity.Property(e => e.UserName)
                .HasMaxLength(128)
                .HasColumnName("user_name");
        });

        modelBuilder.Entity<LatestLogonApplicationsFilteredApplicationList>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("LatestLogonApplications_Filtered_Application_List");

            entity.Property(e => e.ProgramName)
                .HasMaxLength(256)
                .HasColumnName("program_name");
        });

        modelBuilder.Entity<LatestUserActivity>(entity =>
        {
            entity.HasKey(e => new { e.ServerName, e.LoginName, e.HostName, e.AppName });

            entity.ToTable("LatestUserActivity");

            entity.HasIndex(e => new { e.AppName, e.LoginName, e.DbConnectionTimeUtc }, "IX_LatestUserActivity__by_ConnectionTime");

            entity.Property(e => e.ServerName).HasMaxLength(16);
            entity.Property(e => e.LoginName).HasMaxLength(128);
            entity.Property(e => e.HostName)
                .HasMaxLength(16)
                .HasColumnName("host_name");
            entity.Property(e => e.AppName)
                .HasMaxLength(128)
                .HasColumnName("app_name");
            entity.Property(e => e.DbConnectionTimeUtc)
                .HasPrecision(3)
                .HasColumnName("DbConnectionTimeUTC");
            entity.Property(e => e.UserActivityTimeUtc)
                .HasPrecision(3)
                .HasColumnName("UserActivityTimeUTC");
        });

        modelBuilder.Entity<LatestWarehouseCycleCount>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("latest_warehouse_cycle_counts");

            entity.Property(e => e.Lastcount)
                .HasColumnType("datetime")
                .HasColumnName("lastcount");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Warehouse)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("warehouse");
        });

        modelBuilder.Entity<Lessor>(entity =>
        {
            entity.HasKey(e => e.LessorCode);

            entity.ToTable("Lessor");

            entity.Property(e => e.LessorCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LessorName)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LinkedPart>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("linked_parts");

            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.LinkedQty).HasColumnName("linkedQty");
            entity.Property(e => e.ParentQty).HasColumnName("parentQty");
            entity.Property(e => e.ParentSerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("parentSerial_no");
            entity.Property(e => e.Parentpartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("parentpartno");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Receipt)
                .HasColumnType("datetime")
                .HasColumnName("receipt");
        });

        modelBuilder.Entity<LockedProject>(entity =>
        {
            entity.HasKey(e => new { e.ServerName, e.SessionId, e.Entityno });

            entity.HasIndex(e => e.Entityno, "IX_LockedProjects__by_Project");

            entity.Property(e => e.ServerName)
                .HasMaxLength(16)
                .HasDefaultValueSql("(@@servername)");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.HostName)
                .HasMaxLength(16)
                .HasDefaultValueSql("(host_name())");
            entity.Property(e => e.LockDate).HasDefaultValueSql("(sysdatetimeoffset())");
            entity.Property(e => e.LoginName)
                .HasMaxLength(128)
                .HasDefaultValueSql("(original_login())");
            entity.Property(e => e.SessionLoginTime)
                .HasColumnType("datetime")
                .HasColumnName("session_login_time");
        });

        modelBuilder.Entity<Manufacturer>(entity =>
        {
            entity.HasKey(e => e.IdManufacturer);

            entity.ToTable("Manufacturer");

            entity.HasIndex(e => e.ManufacturerDesc, "UC_Manufacturer_ManufacturerDesc").IsUnique();

            entity.Property(e => e.IdManufacturer).HasColumnName("idManufacturer");
            entity.Property(e => e.DefaultCountryOfOrigin)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.FileStorageGuid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("FileStorageGUID");
            entity.Property(e => e.ManufacturerDesc)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.DefaultCountryOfOriginNavigation).WithMany(p => p.Manufacturers)
                .HasForeignKey(d => d.DefaultCountryOfOrigin)
                .HasConstraintName("FK_Manufacturer__DefaultCountryOfOrigin");
        });

        modelBuilder.Entity<ManufacturerInfo>(entity =>
        {
            entity.HasKey(e => e.ManufacturerId);

            entity.ToTable("MANUFACTURER_INFO", "IFS");

            entity.Property(e => e.ManufacturerId)
                .HasMaxLength(20)
                .HasColumnName("MANUFACTURER_ID");
            entity.Property(e => e.AssociationNo)
                .HasMaxLength(50)
                .HasColumnName("ASSOCIATION_NO");
            entity.Property(e => e.Country)
                .HasMaxLength(2)
                .HasColumnName("COUNTRY");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("CREATION_DATE");
            entity.Property(e => e.DefaultDomain)
                .HasMaxLength(5)
                .HasColumnName("DEFAULT_DOMAIN");
            entity.Property(e => e.DefaultLanguage)
                .HasMaxLength(2)
                .HasColumnName("DEFAULT_LANGUAGE");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .HasColumnName("NAME");
            entity.Property(e => e.Party)
                .HasMaxLength(20)
                .HasColumnName("PARTY");
            entity.Property(e => e.PartyType)
                .HasMaxLength(20)
                .HasColumnName("PARTY_TYPE");
            entity.Property(e => e.Rowkey)
                .HasMaxLength(50)
                .HasColumnName("ROWKEY");
            entity.Property(e => e.Rowversion).HasColumnName("ROWVERSION");
        });

        modelBuilder.Entity<MassTransferStaging>(entity =>
        {
            entity.HasKey(e => new { e.SessionId, e.Partno, e.UniqueNo, e.FromBatchNo, e.FromBld, e.FromDept, e.FromArea, e.Row, e.SerialNo, e.ParentuniqueNo });

            entity.ToTable("MassTransferStaging");

            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.FromBatchNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fromBatchNo");
            entity.Property(e => e.FromBld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fromBld");
            entity.Property(e => e.FromDept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fromDept");
            entity.Property(e => e.FromArea)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fromArea");
            entity.Property(e => e.Row)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Pieces).HasColumnName("pieces");
            entity.Property(e => e.TfrQty).HasColumnName("tfrQty");
            entity.Property(e => e.ToArea)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("toArea");
            entity.Property(e => e.ToBatchNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("toBatchNo");
            entity.Property(e => e.ToBld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("toBld");
            entity.Property(e => e.ToDept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("toDept");
        });

        modelBuilder.Entity<MassTransferStagingV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("MassTransferStaging_v");

            entity.Property(e => e.FromArea)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fromArea");
            entity.Property(e => e.FromBatchNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fromBatchNo");
            entity.Property(e => e.FromBld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fromBld");
            entity.Property(e => e.FromDept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fromDept");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Row)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.SessionId).HasColumnName("session_id");
            entity.Property(e => e.TfrQty).HasColumnName("tfrQty");
            entity.Property(e => e.ToArea)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("toArea");
            entity.Property(e => e.ToBatchNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("toBatchNo");
            entity.Property(e => e.ToBld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("toBld");
            entity.Property(e => e.ToDept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("toDept");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<MatchingNamedContact>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("MatchingNamedContacts", "Contact");

            entity.Property(e => e.CustomerId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CustomerID");
            entity.Property(e => e.Department)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EmployeeID");
            entity.Property(e => e.Location)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Organization)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PaylocityId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PaylocityID");
            entity.Property(e => e.PictureFilePath).IsUnicode(false);
            entity.Property(e => e.PodioId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PodioID");
            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Title)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UnifiedContactId).HasColumnName("UnifiedContactID");
            entity.Property(e => e.VendorId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VendorID");
        });

        modelBuilder.Entity<MeasurementPurpose>(entity =>
        {
            entity.HasKey(e => e.Purpose);

            entity.ToTable("MeasurementPurpose", "SpeakerTest");

            entity.Property(e => e.Purpose)
                .HasMaxLength(25)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MergedJobBudgetsPartsTransactionsTbl>(entity =>
        {
            entity.HasKey(e => new { e.Bld, e.Partno, e.Fromdate });

            entity.ToTable("merged_job_budgets_parts_transactions_tbl");

            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("fromdate");
            entity.Property(e => e.CumulativeQty).HasColumnName("cumulative_qty");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("todate");

            entity.HasOne(d => d.PartnoNavigation).WithMany(p => p.MergedJobBudgetsPartsTransactionsTbls)
                .HasForeignKey(d => d.Partno)
                .HasConstraintName("FK_merged_job_budgets_parts_transactions_tbl_inpart");
        });

        modelBuilder.Entity<MetaDataVersion>(entity =>
        {
            entity.HasKey(e => e.MetaDataVersionNumber);

            entity.ToTable("MetaDataVersion", "SpeakerTest");

            entity.HasIndex(e => new { e.MetaDataVersionNumber, e.ValidFrom }, "UC_MetaDataVersion_VersionValidFrom").IsUnique();

            entity.Property(e => e.MetaDataVersionNumber).ValueGeneratedNever();
            entity.Property(e => e.ValidFrom).HasDefaultValueSql("(sysdatetimeoffset())");
        });

        modelBuilder.Entity<Month>(entity =>
        {
            entity.HasKey(e => new { e.Year, e.Month1 });

            entity.HasIndex(e => e.EndDate, "IX_EndDate").IsUnique();

            entity.HasIndex(e => e.StartDate, "IX_StartDate").IsUnique();

            entity.Property(e => e.Month1).HasColumnName("Month");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Mrperioddef>(entity =>
        {
            entity.HasKey(e => e.Primekey)
                .IsClustered(false)
                .HasFillFactor(90);

            entity.ToTable("mrperioddef");

            entity.HasIndex(e => e.Startdate, "mrpdidx").HasFillFactor(90);

            entity.HasIndex(e => e.PeriodNo, "mrperioddefpk")
                .IsUnique()
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("primekey");
            entity.Property(e => e.Enddate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Length).HasColumnName("length");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
            entity.Property(e => e.PeriodNo).HasColumnName("period_no");
            entity.Property(e => e.PrevLength).HasColumnName("prev_length");
            entity.Property(e => e.Startdate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("startdate");
        });

        modelBuilder.Entity<Muapprole>(entity =>
        {
            entity.HasKey(e => e.EssSecurityAccount);

            entity.ToTable("muapprole");

            entity.HasIndex(e => e.Rowguid, "index_1544187458")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.EssSecurityAccount)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ess_security_account");
            entity.Property(e => e.EssSecurityPassword)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ess_security_password");
            entity.Property(e => e.Rowguid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("rowguid");
        });

        modelBuilder.Entity<Muaprform>(entity =>
        {
            entity.HasKey(e => e.Primekey)
                .IsClustered(false)
                .HasFillFactor(90);

            entity.ToTable("muaprform");

            entity.HasIndex(e => e.Formname, "muaprformpk")
                .IsUnique()
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("primekey");
            entity.Property(e => e.CanChange)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("can_change");
            entity.Property(e => e.ChainAlias)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("chain_alias");
            entity.Property(e => e.DetailButton)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("detail_button");
            entity.Property(e => e.DetailTable)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("detail_table");
            entity.Property(e => e.DisplayButton)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("display_button");
            entity.Property(e => e.Fieldname1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fieldname1");
            entity.Property(e => e.Fieldname2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fieldname2");
            entity.Property(e => e.Fieldname3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fieldname3");
            entity.Property(e => e.Fieldname4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fieldname4");
            entity.Property(e => e.Fieldname5)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fieldname5");
            entity.Property(e => e.Fieldname6)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fieldname6");
            entity.Property(e => e.Fieldname7)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fieldname7");
            entity.Property(e => e.Fieldname8)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fieldname8");
            entity.Property(e => e.Fieldname9)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fieldname9");
            entity.Property(e => e.Formname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("formname");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
            entity.Property(e => e.ObjType)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("obj_type");
        });

        modelBuilder.Entity<Mudbmsinfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("mudbmsinfo");

            entity.Property(e => e.Bintim)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("bintim");
            entity.Property(e => e.Dba)
                .HasMaxLength(128)
                .HasColumnName("dba");
            entity.Property(e => e.Dbname)
                .HasMaxLength(128)
                .HasColumnName("dbname");
            entity.Property(e => e.ServerType)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("server_type");
            entity.Property(e => e.SessionId)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("session_id");
            entity.Property(e => e.Username)
                .HasMaxLength(128)
                .HasColumnName("username");
        });

        modelBuilder.Entity<Muexcludecheckoutscanout20151203>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("muexcludecheckoutscanout20151203");

            entity.Property(e => e.Cmndsel)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cmndsel");
            entity.Property(e => e.Packagecd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("packagecd");
            entity.Property(e => e.Userid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("userid");
        });

        modelBuilder.Entity<Muformsecurity>(entity =>
        {
            entity.HasKey(e => e.Primekey)
                .IsClustered(false)
                .HasFillFactor(90);

            entity.ToTable("muformsecurity");

            entity.HasIndex(e => new { e.Formname, e.Fieldname, e.Colname, e.Userid, e.GroupRole }, "muformsecuritypk")
                .IsUnique()
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("primekey");
            entity.Property(e => e.Colname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("colname");
            entity.Property(e => e.Fieldname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fieldname");
            entity.Property(e => e.Formname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("formname");
            entity.Property(e => e.GroupRole)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("group_role");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
            entity.Property(e => e.NotVisibleEnabled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("not_visible_enabled");
            entity.Property(e => e.Userid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("userid");
        });

        modelBuilder.Entity<Muhlpfld>(entity =>
        {
            entity.HasKey(e => e.Primekey)
                .IsClustered(false)
                .HasFillFactor(90);

            entity.ToTable("muhlpfld");

            entity.HasIndex(e => new { e.Formname, e.Fieldname, e.Colname, e.Menuname, e.Noteseq }, "muhlpfldpk")
                .IsUnique()
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("primekey");
            entity.Property(e => e.Colname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("colname");
            entity.Property(e => e.Fieldname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fieldname");
            entity.Property(e => e.Formname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("formname");
            entity.Property(e => e.Helptext)
                .HasMaxLength(79)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("helptext");
            entity.Property(e => e.Menuname)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("menuname");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Noteseq).HasColumnName("noteseq");
            entity.Property(e => e.Subname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("subname");
        });

        modelBuilder.Entity<Muhlpref>(entity =>
        {
            entity.HasKey(e => e.Primekey)
                .IsClustered(false)
                .HasFillFactor(90);

            entity.ToTable("muhlpref");

            entity.HasIndex(e => new { e.Formname, e.Fieldname, e.Colname, e.Menuname }, "muhlprefpk")
                .IsUnique()
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("primekey");
            entity.Property(e => e.Colname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("colname");
            entity.Property(e => e.Colref)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("colref");
            entity.Property(e => e.Fieldname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fieldname");
            entity.Property(e => e.Fieldref)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fieldref");
            entity.Property(e => e.Formname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("formname");
            entity.Property(e => e.Formref)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("formref");
            entity.Property(e => e.Menuname)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("menuname");
            entity.Property(e => e.Menuref)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("menuref");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
        });

        modelBuilder.Entity<Muhlpscr>(entity =>
        {
            entity.HasKey(e => e.Primekey)
                .IsClustered(false)
                .HasFillFactor(90);

            entity.ToTable("muhlpscr");

            entity.HasIndex(e => new { e.Formname, e.Menuname }, "muhlpscrpk")
                .IsUnique()
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("primekey");
            entity.Property(e => e.Filename)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("filename");
            entity.Property(e => e.Formname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("formname");
            entity.Property(e => e.Menuname)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("menuname");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Subname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("subname");
        });

        modelBuilder.Entity<Mulistvieworder>(entity =>
        {
            entity.HasKey(e => new { e.Formname, e.Userid, e.Itemname, e.Position });

            entity.ToTable("mulistvieworder");

            entity.Property(e => e.Formname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("formname");
            entity.Property(e => e.Userid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("userid");
            entity.Property(e => e.Itemname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("itemname");
            entity.Property(e => e.Position).HasColumnName("position");
        });

        modelBuilder.Entity<Mulistviewsort>(entity =>
        {
            entity.HasKey(e => e.Primekey)
                .IsClustered(false)
                .HasFillFactor(90);

            entity.ToTable("mulistviewsort");

            entity.HasIndex(e => new { e.Formname, e.Userid, e.SortNo }, "mulistviewsortpk")
                .IsUnique()
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("primekey");
            entity.Property(e => e.AscDesc)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("asc_desc");
            entity.Property(e => e.Formname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("formname");
            entity.Property(e => e.Itemname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("itemname");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
            entity.Property(e => e.SortNo).HasColumnName("sort_no");
            entity.Property(e => e.Userid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("userid");
        });

        modelBuilder.Entity<Mumenu>(entity =>
        {
            entity.HasKey(e => new { e.Packagecd, e.Cmndsel });

            entity.ToTable("mumenus");

            entity.HasIndex(e => new { e.Packagecd, e.Menuname, e.Menuseqno }, "IX_seqno").IsUnique();

            entity.Property(e => e.Packagecd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("packagecd");
            entity.Property(e => e.Cmndsel)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("cmndsel");
            entity.Property(e => e.Appexec)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("appexec");
            entity.Property(e => e.Appframe)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("appframe");
            entity.Property(e => e.CExecPath)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("c_exec_path");
            entity.Property(e => e.Cmndline)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("cmndline");
            entity.Property(e => e.ExcludeFormfeed)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("exclude_formfeed");
            entity.Property(e => e.Menudesc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("menudesc");
            entity.Property(e => e.Menuname)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("menuname");
            entity.Property(e => e.Menuseqno).HasColumnName("menuseqno");
            entity.Property(e => e.Menutitle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("menutitle");
            entity.Property(e => e.Menutype)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("menutype");
            entity.Property(e => e.Menuverify)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("menuverify");
            entity.Property(e => e.Prevmenu)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("prevmenu");
            entity.Property(e => e.Qbfframe)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("qbfframe");
            entity.Property(e => e.Qbfmode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("qbfmode");
            entity.Property(e => e.Rptname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("rptname");

            entity.HasMany(d => d.Users).WithMany(p => p.Mumenus)
                .UsingEntity<Dictionary<string, object>>(
                    "Muexclude",
                    r => r.HasOne<Pjtfrusr>().WithMany()
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_muexclude_pjtfrusr"),
                    l => l.HasOne<Mumenu>().WithMany()
                        .HasForeignKey("Packagecd", "Cmndsel")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_muexclude_mumenus"),
                    j =>
                    {
                        j.HasKey("Packagecd", "Cmndsel", "Userid");
                        j.ToTable("muexclude");
                        j.IndexerProperty<string>("Packagecd")
                            .HasMaxLength(2)
                            .IsUnicode(false)
                            .HasDefaultValue("")
                            .HasColumnName("packagecd");
                        j.IndexerProperty<string>("Cmndsel")
                            .HasMaxLength(10)
                            .IsUnicode(false)
                            .HasDefaultValue("")
                            .HasColumnName("cmndsel");
                        j.IndexerProperty<string>("Userid")
                            .HasMaxLength(30)
                            .IsUnicode(false)
                            .HasDefaultValue("")
                            .HasColumnName("userid");
                    });
        });

        modelBuilder.Entity<Mumessage>(entity =>
        {
            entity.HasKey(e => e.Primekey)
                .IsClustered(false)
                .HasFillFactor(90);

            entity.ToTable("mumessages");

            entity.HasIndex(e => e.MsgNo, "mumessagespk")
                .IsUnique()
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("primekey");
            entity.Property(e => e.MsgLine)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("msg_line");
            entity.Property(e => e.MsgNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("msg_no");
            entity.Property(e => e.MsgText)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("msg_text");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
        });

        modelBuilder.Entity<Muobject>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("muobjects");

            entity.Property(e => e.Relid)
                .HasMaxLength(128)
                .HasColumnName("relid");
            entity.Property(e => e.Relowner)
                .HasMaxLength(128)
                .HasColumnName("relowner");
        });

        modelBuilder.Entity<Mupackage>(entity =>
        {
            entity.HasKey(e => e.Primekey).HasFillFactor(90);

            entity.ToTable("mupackage");

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("primekey");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Packagecd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("packagecd");
        });

        modelBuilder.Entity<Muprinter>(entity =>
        {
            entity.HasKey(e => e.Primekey)
                .IsClustered(false)
                .HasFillFactor(90);

            entity.ToTable("muprinter");

            entity.HasIndex(e => e.Prtseqno, "muprinterpk")
                .IsUnique()
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("primekey");
            entity.Property(e => e.ClientOnline)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("client_online");
            entity.Property(e => e.Cmndline)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("cmndline");
            entity.Property(e => e.LinesPerPage).HasColumnName("lines_per_page");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
            entity.Property(e => e.NumberOfCopies).HasColumnName("number_of_copies");
            entity.Property(e => e.Prtdefault)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("prtdefault");
            entity.Property(e => e.Prtdesc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("prtdesc");
            entity.Property(e => e.Prtseqno).HasColumnName("prtseqno");
        });

        modelBuilder.Entity<Murunbatch>(entity =>
        {
            entity.HasKey(e => e.Primekey)
                .IsClustered(false)
                .HasFillFactor(90);

            entity.ToTable("murunbatch");

            entity.HasIndex(e => new { e.SendSessionId, e.Batchtime, e.Seqno }, "murunbatchpk")
                .IsUnique()
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("primekey");
            entity.Property(e => e.Batchname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("batchname");
            entity.Property(e => e.Batchtime).HasColumnName("batchtime");
            entity.Property(e => e.Cmndline)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("cmndline");
            entity.Property(e => e.EncryptUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("encrypt_user");
            entity.Property(e => e.ExcludeFormfeed)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("exclude_formfeed");
            entity.Property(e => e.JobType)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("job_type");
            entity.Property(e => e.LinesPerPage).HasColumnName("lines_per_page");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
            entity.Property(e => e.NumberOfCopies).HasColumnName("number_of_copies");
            entity.Property(e => e.Outputfilename)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("outputfilename");
            entity.Property(e => e.Parm1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("parm1");
            entity.Property(e => e.Parm10)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("parm10");
            entity.Property(e => e.Parm11)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("parm11");
            entity.Property(e => e.Parm12)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("parm12");
            entity.Property(e => e.Parm13)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("parm13");
            entity.Property(e => e.Parm14)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("parm14");
            entity.Property(e => e.Parm15)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("parm15");
            entity.Property(e => e.Parm2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("parm2");
            entity.Property(e => e.Parm3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("parm3");
            entity.Property(e => e.Parm4)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("parm4");
            entity.Property(e => e.Parm5)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("parm5");
            entity.Property(e => e.Parm6)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("parm6");
            entity.Property(e => e.Parm7)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("parm7");
            entity.Property(e => e.Parm8)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("parm8");
            entity.Property(e => e.Parm9)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("parm9");
            entity.Property(e => e.Pgmname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pgmname");
            entity.Property(e => e.Priority).HasColumnName("priority");
            entity.Property(e => e.RecSessionId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("rec_session_id");
            entity.Property(e => e.Runflags)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("runflags");
            entity.Property(e => e.Runtime)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("runtime");
            entity.Property(e => e.SendSessionId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("send_session_id");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.Username)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("username");
        });

        modelBuilder.Entity<Musubmit>(entity =>
        {
            entity.HasKey(e => e.Primekey)
                .IsClustered(false)
                .HasFillFactor(90);

            entity.ToTable("musubmit");

            entity.HasIndex(e => e.Subseqno, "musubmitpk")
                .IsUnique()
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("primekey");
            entity.Property(e => e.Cmndline)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("cmndline");
            entity.Property(e => e.Datetime)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("datetime");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Priority).HasColumnName("priority");
            entity.Property(e => e.Subdefault)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("subdefault");
            entity.Property(e => e.Subdesc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("subdesc");
            entity.Property(e => e.Subseqno).HasColumnName("subseqno");
        });

        modelBuilder.Entity<Muuserprt>(entity =>
        {
            entity.HasKey(e => e.Primekey)
                .IsClustered(false)
                .HasFillFactor(90);

            entity.ToTable("muuserprt");

            entity.HasIndex(e => new { e.Username, e.SessionId }, "muuserprtpk")
                .IsUnique()
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("primekey");
            entity.Property(e => e.Cmndlineparam)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("cmndlineparam");
            entity.Property(e => e.LinesPerPage).HasColumnName("lines_per_page");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
            entity.Property(e => e.NumberOfCopies).HasColumnName("number_of_copies");
            entity.Property(e => e.Prtseqno).HasColumnName("prtseqno");
            entity.Property(e => e.SessionId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("session_id");
            entity.Property(e => e.Username)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("username");
        });

        modelBuilder.Entity<Muusersub>(entity =>
        {
            entity.HasKey(e => e.Primekey)
                .IsClustered(false)
                .HasFillFactor(90);

            entity.ToTable("muusersub");

            entity.HasIndex(e => new { e.Username, e.SessionId }, "muusersubpk")
                .IsUnique()
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("primekey");
            entity.Property(e => e.Datetime)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("datetime");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Priority).HasColumnName("priority");
            entity.Property(e => e.SessionId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("session_id");
            entity.Property(e => e.Subseqno).HasColumnName("subseqno");
            entity.Property(e => e.Username)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("username");
        });

        modelBuilder.Entity<Muyesno>(entity =>
        {
            entity.HasKey(e => e.Primekey).HasFillFactor(90);

            entity.ToTable("muyesno");

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("primekey");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Yesnocode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("yesnocode");
            entity.Property(e => e.Yesnodesc)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("yesnodesc");
        });

        modelBuilder.Entity<MyCompanyVisible>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("my_company_visible");

            entity.Property(e => e.CompanyCode)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MyFinesseEmailNotification>(entity =>
        {
            entity.HasKey(e => new { e.IdQuery, e.UserName });

            entity.ToTable(tb => tb.HasTrigger("TR_MyFinesseEmailNotifications_SetNextNotification"));

            entity.Property(e => e.IdQuery).HasColumnName("id_query");
            entity.Property(e => e.UserName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("user_name");
            entity.Property(e => e.AttachCsv)
                .HasDefaultValue(true)
                .HasColumnName("AttachCSV");
            entity.Property(e => e.EmbedTable).HasDefaultValue(true);
            entity.Property(e => e.Frequency)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.LastNotificationUtc)
                .HasPrecision(0)
                .HasColumnName("LastNotificationUTC");
            entity.Property(e => e.NextNotificationUtc)
                .HasPrecision(0)
                .HasColumnName("NextNotificationUTC");

            entity.HasOne(d => d.FrequencyNavigation).WithMany(p => p.MyFinesseEmailNotifications)
                .HasForeignKey(d => d.Frequency)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MyFinesseEmailNotification__Frequency");

            entity.HasOne(d => d.IdQueryNavigation).WithMany(p => p.MyFinesseEmailNotifications)
                .HasForeignKey(d => d.IdQuery)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MyFinesseEmailNotifications__id_query");

            entity.HasOne(d => d.UserNameNavigation).WithMany(p => p.MyFinesseEmailNotifications)
                .HasForeignKey(d => d.UserName)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MyFinesseEmailNotifications__user_name");
        });

        modelBuilder.Entity<MyFinesseEmailNotificationsSysproRelatedDeleted20250204>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MyFinesseEmailNotifications_SysproRelatedDeleted20250204");

            entity.Property(e => e.AttachCsv).HasColumnName("AttachCSV");
            entity.Property(e => e.Frequency)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.IdQuery).HasColumnName("id_query");
            entity.Property(e => e.LastNotificationUtc)
                .HasPrecision(0)
                .HasColumnName("LastNotificationUTC");
            entity.Property(e => e.NextNotificationUtc)
                .HasPrecision(0)
                .HasColumnName("NextNotificationUTC");
            entity.Property(e => e.UserName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("user_name");
        });

        modelBuilder.Entity<MyFinesseMultiGridConfig>(entity =>
        {
            entity.HasKey(e => new { e.UserName, e.Tabname, e.Row, e.Col });

            entity.ToTable("myFinesseMultiGridConfig");

            entity.Property(e => e.UserName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("user_name");
            entity.Property(e => e.Tabname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tabname");
            entity.Property(e => e.Row).HasColumnName("row");
            entity.Property(e => e.Col).HasColumnName("col");
            entity.Property(e => e.Colspan).HasColumnName("colspan");
            entity.Property(e => e.IdQuery).HasColumnName("id_query");
            entity.Property(e => e.Rowspan).HasColumnName("rowspan");

            entity.HasOne(d => d.UserNameNavigation).WithMany(p => p.MyFinesseMultiGridConfigs)
                .HasForeignKey(d => d.UserName)
                .HasConstraintName("FK_myFinesseMultiGridConfig_pjtfrusr");
        });

        modelBuilder.Entity<MyFinesseNavigationCollapsedCategory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("myFinesse_Navigation_Collapsed_Categories");

            entity.Property(e => e.Category)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("category");
        });

        modelBuilder.Entity<MyFinesseNavigationCollapsedCategory1>(entity =>
        {
            entity.HasKey(e => new { e.UserName, e.Category });

            entity.ToTable("myFinesseNavigationCollapsedCategories");

            entity.Property(e => e.UserName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("user_name");
            entity.Property(e => e.Category)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("category");

            entity.HasOne(d => d.CategoryNavigation).WithMany(p => p.MyFinesseNavigationCollapsedCategory1s)
                .HasForeignKey(d => d.Category)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_myFinesseNavigationCollaspedCategories__category");
        });

        modelBuilder.Entity<MyFinesseQueriesCategory>(entity =>
        {
            entity.HasKey(e => e.Category);

            entity.Property(e => e.Category)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("category");
            entity.Property(e => e.Sortorder).HasColumnName("sortorder");
        });

        modelBuilder.Entity<MyFinesseQueriesColumnMinWidth>(entity =>
        {
            entity.HasKey(e => new { e.IdQuery, e.ColumnName });

            entity.Property(e => e.IdQuery).HasColumnName("id_query");
            entity.Property(e => e.ColumnName)
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.IdQueryNavigation).WithMany(p => p.MyFinesseQueriesColumnMinWidths)
                .HasForeignKey(d => d.IdQuery)
                .HasConstraintName("FK_MyFinesseQueriesMinColumnWidths__id_query");
        });

        modelBuilder.Entity<MyFinesseQuery>(entity =>
        {
            entity.HasKey(e => e.IdQuery);

            entity.ToTable(tb => tb.HasTrigger("TR_MyFinesseQueries__Print_id_query"));

            entity.HasIndex(e => new { e.Category, e.Querycaption }, "CK_MyFinesseQueries").IsUnique();

            entity.HasIndex(e => e.Querycaption, "IX_MyFinesseQueries_CaptionMustBeUniqueBecauseMyFinesseMultiGridWillBreakOtherwise").IsUnique();

            entity.Property(e => e.IdQuery).HasColumnName("id_query");
            entity.Property(e => e.AutoRefresh).HasDefaultValue(true);
            entity.Property(e => e.Category)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("category");
            entity.Property(e => e.IsInquiry)
                .HasDefaultValue(true)
                .HasColumnName("is_inquiry");
            entity.Property(e => e.IsPublic).HasColumnName("is_public");
            entity.Property(e => e.IsTimelineview).HasColumnName("is_timelineview");
            entity.Property(e => e.Querycaption)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("querycaption");
            entity.Property(e => e.Sortorder).HasColumnName("sortorder");
            entity.Property(e => e.Sqlquery)
                .IsUnicode(false)
                .HasColumnName("SQLQuery");

            entity.HasOne(d => d.CategoryNavigation).WithMany(p => p.MyFinesseQueries)
                .HasForeignKey(d => d.Category)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MyFinesseQueries__MyFinesseQueriesCategories");
        });

        modelBuilder.Entity<MyFinesseQueryRun>(entity =>
        {
            entity.HasKey(e => new { e.ServerName, e.RunDateUtc, e.Username, e.IdQuery, e.ElapsedMilliseconds });

            entity.HasIndex(e => e.IdQuery, "IX_MyFinesseQueryRuns__by__id_query");

            entity.Property(e => e.ServerName)
                .HasMaxLength(128)
                .HasDefaultValueSql("(@@servername)");
            entity.Property(e => e.RunDateUtc)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnName("RunDateUTC");
            entity.Property(e => e.Username)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("username");
            entity.Property(e => e.IdQuery).HasColumnName("id_query");

            entity.HasOne(d => d.IdQueryNavigation).WithMany(p => p.MyFinesseQueryRuns)
                .HasForeignKey(d => d.IdQuery)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MyFinesseQueryRuns__id_query");
        });

        modelBuilder.Entity<MyFinesseQueryRunsAverage>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("MyFinesseQueryRuns_Averages");

            entity.Property(e => e.Category)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("category");
            entity.Property(e => e.IdQuery).HasColumnName("id_query");
            entity.Property(e => e.Querycaption)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("querycaption");
            entity.Property(e => e.Username)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("username");
        });

        modelBuilder.Entity<MyFinesseTimelineViewColumn>(entity =>
        {
            entity.HasKey(e => e.IdQuery);

            entity.Property(e => e.IdQuery)
                .ValueGeneratedNever()
                .HasColumnName("id_query");
            entity.Property(e => e.CodeColumn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("codeColumn");
            entity.Property(e => e.DescriptionColumn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descriptionColumn");
            entity.Property(e => e.EnddateColumn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("enddateColumn");
            entity.Property(e => e.IdTimelineType).HasColumnName("id_TimelineType");
            entity.Property(e => e.StartdateColumn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("startdateColumn");
            entity.Property(e => e.StatusColumn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("statusColumn");

            entity.HasOne(d => d.IdQueryNavigation).WithOne(p => p.MyFinesseTimelineViewColumn)
                .HasForeignKey<MyFinesseTimelineViewColumn>(d => d.IdQuery)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MyFinesseTimelineViewColumns_MyFinesseQueries");

            entity.HasOne(d => d.IdTimelineTypeNavigation).WithMany(p => p.MyFinesseTimelineViewColumns)
                .HasForeignKey(d => d.IdTimelineType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MyFinesseTimelineViewType_MyFinesseTimelineViewTypes");
        });

        modelBuilder.Entity<MyFinesseTimelineViewType>(entity =>
        {
            entity.HasKey(e => e.IdTimelineType);

            entity.Property(e => e.IdTimelineType).HasColumnName("id_TimelineType");
            entity.Property(e => e.TimelineType)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MyFinesseUpdate>(entity =>
        {
            entity.HasKey(e => e.IdMyFinesseUpdate);

            entity.ToTable("MyFinesseUpdate");

            entity.Property(e => e.IdMyFinesseUpdate).HasColumnName("id_MyFinesseUpdate");
            entity.Property(e => e.Cmndsel)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cmndsel");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.Hyperlink)
                .IsUnicode(false)
                .HasColumnName("hyperlink");
            entity.Property(e => e.Note)
                .IsUnicode(false)
                .HasColumnName("note");
            entity.Property(e => e.Packagecd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("packagecd");
            entity.Property(e => e.Topic)
                .IsUnicode(false)
                .HasColumnName("topic");
            entity.Property(e => e.UseridAuthor)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("userid_author");

            entity.HasOne(d => d.UseridAuthorNavigation).WithMany(p => p.MyFinesseUpdates)
                .HasForeignKey(d => d.UseridAuthor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MyFinesseUpdate_userid_author");

            entity.HasOne(d => d.Mumenu).WithMany(p => p.MyFinesseUpdates)
                .HasForeignKey(d => new { d.Packagecd, d.Cmndsel })
                .HasConstraintName("FK_MyFinesseUpdate_packagecd");
        });

        modelBuilder.Entity<MyFinesseUpdate2019>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MyFinesseUpdate2019");

            entity.Property(e => e.Cmndsel)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cmndsel");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.Hyperlink)
                .IsUnicode(false)
                .HasColumnName("hyperlink");
            entity.Property(e => e.IdMyFinesseUpdate)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_MyFinesseUpdate");
            entity.Property(e => e.Note)
                .IsUnicode(false)
                .HasColumnName("note");
            entity.Property(e => e.Packagecd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("packagecd");
            entity.Property(e => e.Topic)
                .IsUnicode(false)
                .HasColumnName("topic");
            entity.Property(e => e.UseridAuthor)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("userid_author");
        });

        modelBuilder.Entity<MyUserInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("my_user_info");

            entity.Property(e => e.AvailabilityEstoffsetHours).HasColumnName("AvailabilityESTOffsetHours");
            entity.Property(e => e.CompanyCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConversionFactorFromInches).HasColumnName("conversionFactorFromInches");
            entity.Property(e => e.ConversionFactorFromPounds).HasColumnName("conversionFactorFromPounds");
            entity.Property(e => e.Culture)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("culture");
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.DefaultBillingCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DefaultDivision)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DefaultPrinterPaperSize)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DefaultPropType)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.DoubleclickProgramNoProject)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("doubleclick_program_NoProject");
            entity.Property(e => e.DoubleclickProgramProject)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("doubleclick_program_Project");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.Empname)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("empname");
            entity.Property(e => e.FirstDayOfWeek)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.IdLanguage).HasColumnName("id_language");
            entity.Property(e => e.OwnerEntity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("owner_entity");
            entity.Property(e => e.SalesForecastGroup)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SqlFirstDayOfWeek).HasColumnName("SQL_FirstDayOfWeek");
            entity.Property(e => e.StartupProgram)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("startup_program");
            entity.Property(e => e.TimezoneName).HasMaxLength(128);
            entity.Property(e => e.TourEntity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tour_entity");
            entity.Property(e => e.Unitoflength)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("unitoflength");
            entity.Property(e => e.Unitofweight)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("unitofweight");
            entity.Property(e => e.UserName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("user_name");
            entity.Property(e => e.WarehouseEntity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("warehouse_entity");
        });

        modelBuilder.Entity<MyWarehouseVisible>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("my_warehouse_visible");

            entity.Property(e => e.WarehouseCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<NewElecCategory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("newElecCategories");
        });

        modelBuilder.Entity<NotDuplicate>(entity =>
        {
            entity.HasKey(e => new { e.GroupName, e.UnifiedContactId }).HasName("PK_Not_Link");

            entity.ToTable("NotDuplicates", "Contact");

            entity.Property(e => e.GroupName)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.UnifiedContactId).HasColumnName("UnifiedContactID");
        });

        modelBuilder.Entity<NotificationWarehouseEmailRecipient>(entity =>
        {
            entity.HasKey(e => new { e.WarehouseCode, e.PropType });

            entity.Property(e => e.WarehouseCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PropType)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Recipients)
                .HasMaxLength(2000)
                .IsUnicode(false);

            entity.HasOne(d => d.PropTypeNavigation).WithMany(p => p.NotificationWarehouseEmailRecipients)
                .HasForeignKey(d => d.PropType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NotificationWarehouseEmailRecipients__PropType");

            entity.HasOne(d => d.WarehouseCodeNavigation).WithMany(p => p.NotificationWarehouseEmailRecipients)
                .HasForeignKey(d => d.WarehouseCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NotificationWarehouseEmailRecipients__WarehouseCode");
        });

        modelBuilder.Entity<OePayTermsNetDaysBaseDate>(entity =>
        {
            entity.HasKey(e => e.BaseDatecd);

            entity.ToTable("oePayTermsNetDaysBaseDate");

            entity.Property(e => e.BaseDatecd)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Oeacctmatrix>(entity =>
        {
            entity.HasKey(e => e.Primekey)
                .IsClustered(false)
                .HasFillFactor(90);

            entity.ToTable("oeacctmatrix");

            entity.HasIndex(e => e.Matrixcd, "oeacctmatrixpk")
                .IsUnique()
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("primekey");
            entity.Property(e => e.Activeind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("activeind");
            entity.Property(e => e.Cost).HasColumnName("cost");
            entity.Property(e => e.Costacctacq)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("costacctacq");
            entity.Property(e => e.Costacctacqcr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("costacctacqcr");
            entity.Property(e => e.Costacctcr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("costacctcr");
            entity.Property(e => e.Costacctdb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("costacctdb");
            entity.Property(e => e.Costacctlab)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("costacctlab");
            entity.Property(e => e.Costacctlabcr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("costacctlabcr");
            entity.Property(e => e.Costacctoh1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("costacctoh1");
            entity.Property(e => e.Costacctoh1cr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("costacctoh1cr");
            entity.Property(e => e.Costacctoh2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("costacctoh2");
            entity.Property(e => e.Costacctoh2cr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("costacctoh2cr");
            entity.Property(e => e.Costacctout)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("costacctout");
            entity.Property(e => e.Costacctoutcr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("costacctoutcr");
            entity.Property(e => e.Costgl)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("costgl");
            entity.Property(e => e.Discacctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("discacctcd");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComputedColumnSql("(left([saleacctcr],charindex('-',[saleacctcr])-(1)))", false)
                .HasColumnName("entityno");
            entity.Property(e => e.Fcacctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fcacctcd");
            entity.Property(e => e.Matrixcd)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("matrixcd");
            entity.Property(e => e.Matrixdesc)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("matrixdesc");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Price).HasColumnName("price");
            entity.Property(e => e.Ref1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref1");
            entity.Property(e => e.Ref2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref2");
            entity.Property(e => e.Ref3)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref3");
            entity.Property(e => e.Ref4)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref5");
            entity.Property(e => e.Ref6)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref6");
            entity.Property(e => e.Ref7)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref7");
            entity.Property(e => e.Ref8)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref8");
            entity.Property(e => e.Saleacctcr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("saleacctcr");
            entity.Property(e => e.Saleacctdb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("saleacctdb");
            entity.Property(e => e.Salegl)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("salegl");
            entity.Property(e => e.Saleind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("saleind");
            entity.Property(e => e.Uom)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("uom");
        });

        modelBuilder.Entity<Oearmove>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("oearmove");

            entity.Property(e => e.Acctno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("acctno");
            entity.Property(e => e.Accttype)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("accttype");
            entity.Property(e => e.AltDesc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("alt_desc");
            entity.Property(e => e.AltUcost).HasColumnName("alt_ucost");
            entity.Property(e => e.AltUprice).HasColumnName("alt_uprice");
            entity.Property(e => e.Area)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("area");
            entity.Property(e => e.Aritem).HasColumnName("aritem");
            entity.Property(e => e.Batchno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("batchno");
            entity.Property(e => e.Bay)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bay");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bld");
            entity.Property(e => e.Catalogno)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("catalogno");
            entity.Property(e => e.Container)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("container");
            entity.Property(e => e.Containercnt).HasColumnName("containercnt");
            entity.Property(e => e.Coqtyshipped).HasColumnName("coqtyshipped");
            entity.Property(e => e.Custno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("custno");
            entity.Property(e => e.Custpo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("custpo");
            entity.Property(e => e.Custpodate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("custpodate");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dept");
            entity.Property(e => e.Depth).HasColumnName("depth");
            entity.Property(e => e.DiscDays).HasColumnName("disc_days");
            entity.Property(e => e.DiscFxpc)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("disc_fxpc");
            entity.Property(e => e.DiscRate).HasColumnName("disc_rate");
            entity.Property(e => e.Discamt)
                .HasColumnType("money")
                .HasColumnName("discamt");
            entity.Property(e => e.Discdate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("discdate");
            entity.Property(e => e.Dref1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dref1");
            entity.Property(e => e.Dref10)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dref10");
            entity.Property(e => e.Dref11)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dref11");
            entity.Property(e => e.Dref2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dref2");
            entity.Property(e => e.Dref3)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dref3");
            entity.Property(e => e.Dref4)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dref4");
            entity.Property(e => e.Dref5)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dref5");
            entity.Property(e => e.Dref6)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dref6");
            entity.Property(e => e.Dref7)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dref7");
            entity.Property(e => e.Dref8)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dref8");
            entity.Property(e => e.Dref9)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dref9");
            entity.Property(e => e.Duedate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("duedate");
            entity.Property(e => e.Enterdate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("enterdate");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("entityno");
            entity.Property(e => e.EomInd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("eom_ind");
            entity.Property(e => e.FobCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fob_code");
            entity.Property(e => e.FobPoint)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fob_point");
            entity.Property(e => e.Freightbill)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("freightbill");
            entity.Property(e => e.Frghtmatrix)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("frghtmatrix");
            entity.Property(e => e.Invcopy)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("invcopy");
            entity.Property(e => e.Invcopypid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("invcopypid");
            entity.Property(e => e.Invdate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("invdate");
            entity.Property(e => e.Invmonth).HasColumnName("invmonth");
            entity.Property(e => e.Invno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("invno");
            entity.Property(e => e.Invyear).HasColumnName("invyear");
            entity.Property(e => e.Item).HasColumnName("item");
            entity.Property(e => e.Labelnote)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("labelnote");
            entity.Property(e => e.Length).HasColumnName("length");
            entity.Property(e => e.Linetotal)
                .HasColumnType("money")
                .HasColumnName("linetotal");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("locationcd");
            entity.Property(e => e.Matrixcd)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("matrixcd");
            entity.Property(e => e.Matrixcd1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("matrixcd1");
            entity.Property(e => e.Matrixcd2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("matrixcd2");
            entity.Property(e => e.Matrixcd3)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("matrixcd3");
            entity.Property(e => e.Matrixcd4)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("matrixcd4");
            entity.Property(e => e.NetDays).HasColumnName("net_days");
            entity.Property(e => e.Optdate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("optdate");
            entity.Property(e => e.OrderCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("order_code");
            entity.Property(e => e.Orderno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("orderno");
            entity.Property(e => e.Packinglist)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("packinglist");
            entity.Property(e => e.Paytermscd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("paytermscd");
            entity.Property(e => e.Pickqty).HasColumnName("pickqty");
            entity.Property(e => e.Pieces).HasColumnName("pieces");
            entity.Property(e => e.Ref1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref1");
            entity.Property(e => e.Ref2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref2");
            entity.Property(e => e.Ref3)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref3");
            entity.Property(e => e.Ref4)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref5");
            entity.Property(e => e.RevdueDate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("revdue_date");
            entity.Property(e => e.RevisedQty).HasColumnName("revised_qty");
            entity.Property(e => e.Row)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("row");
            entity.Property(e => e.Salesmancd1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("salesmancd1");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("serial_no");
            entity.Property(e => e.ShipWeight).HasColumnName("ship_weight");
            entity.Property(e => e.Shipcharge)
                .HasColumnType("money")
                .HasColumnName("shipcharge");
            entity.Property(e => e.Shipdate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("shipdate");
            entity.Property(e => e.Shipno)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("shipno");
            entity.Property(e => e.Shipqty).HasColumnName("shipqty");
            entity.Property(e => e.ShipviaCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("shipvia_code");
            entity.Property(e => e.Subno)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("subno");
            entity.Property(e => e.Tax1).HasColumnName("tax1");
            entity.Property(e => e.Tax2).HasColumnName("tax2");
            entity.Property(e => e.Tax3).HasColumnName("tax3");
            entity.Property(e => e.Tax4).HasColumnName("tax4");
            entity.Property(e => e.TaxCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tax_code");
            entity.Property(e => e.Taxable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("taxable");
            entity.Property(e => e.Taxdesc1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("taxdesc1");
            entity.Property(e => e.Taxdesc2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("taxdesc2");
            entity.Property(e => e.Taxdesc3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("taxdesc3");
            entity.Property(e => e.Taxdesc4)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("taxdesc4");
            entity.Property(e => e.Taxline)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("taxline");
            entity.Property(e => e.Tid)
                .ValueGeneratedOnAdd()
                .HasColumnName("tid");
            entity.Property(e => e.Tier)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tier");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("unique_no");
            entity.Property(e => e.UnitMeas)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("unit_meas");
            entity.Property(e => e.Upddt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("upddt");
            entity.Property(e => e.Width).HasColumnName("width");
        });

        modelBuilder.Entity<Oecustbill>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("oecustbill");

            entity.Property(e => e.Abnnumber)
                .HasMaxLength(50)
                .HasColumnName("ABNNumber");
            entity.Property(e => e.Accountno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("accountno");
            entity.Property(e => e.Activeind).HasColumnName("activeind");
            entity.Property(e => e.Addr1)
                .HasMaxLength(35)
                .HasColumnName("addr1");
            entity.Property(e => e.Addr2)
                .HasMaxLength(35)
                .HasColumnName("addr2");
            entity.Property(e => e.Addr3)
                .HasMaxLength(403)
                .HasColumnName("addr3");
            entity.Property(e => e.Arcurr)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("arcurr");
            entity.Property(e => e.Arover120)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("arover120");
            entity.Property(e => e.Arover30)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("arover30");
            entity.Property(e => e.Arover60)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("arover60");
            entity.Property(e => e.Arover90)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("arover90");
            entity.Property(e => e.Attention)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("attention");
            entity.Property(e => e.BillToName)
                .HasMaxLength(100)
                .HasColumnName("bill_to_name");
            entity.Property(e => e.City)
                .HasMaxLength(35)
                .HasColumnName("city");
            entity.Property(e => e.CompRating)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("comp_rating");
            entity.Property(e => e.Contact)
                .HasMaxLength(100)
                .HasColumnName("contact");
            entity.Property(e => e.Correspondence)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("correspondence");
            entity.Property(e => e.Country)
                .HasMaxLength(2)
                .HasColumnName("country");
            entity.Property(e => e.County)
                .HasMaxLength(2)
                .HasColumnName("county");
            entity.Property(e => e.Credithold)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("credithold");
            entity.Property(e => e.Creditlmt)
                .HasColumnType("numeric(8, 2)")
                .HasColumnName("creditlmt");
            entity.Property(e => e.Currencycd)
                .HasMaxLength(3)
                .HasColumnName("currencycd");
            entity.Property(e => e.Custclass)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("custclass");
            entity.Property(e => e.Custno)
                .HasMaxLength(20)
                .HasColumnName("custno");
            entity.Property(e => e.DBRating)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("d_b_rating");
            entity.Property(e => e.DealNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("deal_no");
            entity.Property(e => e.Discount).HasColumnName("discount");
            entity.Property(e => e.Dunningcnt).HasColumnName("dunningcnt");
            entity.Property(e => e.Email2)
                .HasMaxLength(4000)
                .HasColumnName("email2");
            entity.Property(e => e.Ext)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ext");
            entity.Property(e => e.Fax)
                .HasMaxLength(4000)
                .HasColumnName("fax");
            entity.Property(e => e.FscmCage)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("fscm_cage");
            entity.Property(e => e.Highbal)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("highbal");
            entity.Property(e => e.IdLanguage).HasColumnName("id_language");
            entity.Property(e => e.InvoiceFolder)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Invoicecopies).HasColumnName("invoicecopies");
            entity.Property(e => e.LastDunning)
                .HasColumnType("datetime")
                .HasColumnName("last_dunning");
            entity.Property(e => e.LastInvoice)
                .HasMaxLength(23)
                .IsUnicode(false)
                .HasColumnName("last_invoice");
            entity.Property(e => e.Lastcollection)
                .HasColumnType("datetime")
                .HasColumnName("lastcollection");
            entity.Property(e => e.Lastfeeearnedcd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("lastfeeearnedcd");
            entity.Property(e => e.Lastyrcosts)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("lastyrcosts");
            entity.Property(e => e.Lastyrother)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("lastyrother");
            entity.Property(e => e.Lastyrrtrn)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("lastyrrtrn");
            entity.Property(e => e.Lastyrsales)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("lastyrsales");
            entity.Property(e => e.Mtdcosts)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("mtdcosts");
            entity.Property(e => e.Mtdother)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("mtdother");
            entity.Property(e => e.Mtdrtrn)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("mtdrtrn");
            entity.Property(e => e.Mtdsales)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("mtdsales");
            entity.Property(e => e.Nextcollection)
                .HasColumnType("datetime")
                .HasColumnName("nextcollection");
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .HasColumnName("notes");
            entity.Property(e => e.Oeused)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("oeused");
            entity.Property(e => e.Paytermscd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("paytermscd");
            entity.Property(e => e.Phone)
                .HasMaxLength(35)
                .HasColumnName("phone");
            entity.Property(e => e.Priority).HasColumnName("priority");
            entity.Property(e => e.State)
                .HasMaxLength(35)
                .HasColumnName("state");
            entity.Property(e => e.Subno)
                .HasMaxLength(50)
                .HasColumnName("subno");
            entity.Property(e => e.Taxexempt)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("taxexempt");
            entity.Property(e => e.TaxexemptNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("taxexempt_no");
            entity.Property(e => e.Telex)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("telex");
            entity.Property(e => e.Telmktrepcd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("telmktrepcd");
            entity.Property(e => e.Telmktreploc)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("telmktreploc");
            entity.Property(e => e.Usenet)
                .HasMaxLength(1000)
                .HasColumnName("usenet");
            entity.Property(e => e.VatidentificationNumber)
                .HasMaxLength(50)
                .HasColumnName("VATIdentificationNumber");
            entity.Property(e => e.Vatstatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("VATStatus");
            entity.Property(e => e.Voicemail)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("voicemail");
            entity.Property(e => e.Ytdcosts)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("ytdcosts");
            entity.Property(e => e.Ytdother)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("ytdother");
            entity.Property(e => e.Ytdrtrn)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("ytdrtrn");
            entity.Property(e => e.Ytdsales)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("ytdsales");
            entity.Property(e => e.Zip)
                .HasMaxLength(35)
                .HasColumnName("zip");
        });

        modelBuilder.Entity<OecustbillOld>(entity =>
        {
            entity.HasKey(e => new { e.Custno, e.Subno }).HasFillFactor(90);

            entity.ToTable("oecustbill_old");

            entity.Property(e => e.Custno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("custno");
            entity.Property(e => e.Subno)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("subno");
            entity.Property(e => e.Abnnumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ABNNumber");
            entity.Property(e => e.Accountno)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("accountno");
            entity.Property(e => e.Activeind)
                .HasDefaultValue(true)
                .HasColumnName("activeind");
            entity.Property(e => e.Addr1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("addr1");
            entity.Property(e => e.Addr2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("addr2");
            entity.Property(e => e.Addr3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("addr3");
            entity.Property(e => e.Arcurr)
                .HasColumnType("money")
                .HasColumnName("arcurr");
            entity.Property(e => e.Arover120)
                .HasColumnType("money")
                .HasColumnName("arover120");
            entity.Property(e => e.Arover30)
                .HasColumnType("money")
                .HasColumnName("arover30");
            entity.Property(e => e.Arover60)
                .HasColumnType("money")
                .HasColumnName("arover60");
            entity.Property(e => e.Arover90)
                .HasColumnType("money")
                .HasColumnName("arover90");
            entity.Property(e => e.Attention)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("attention");
            entity.Property(e => e.BillToName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bill_to_name");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("city");
            entity.Property(e => e.CompRating)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("comp_rating");
            entity.Property(e => e.Contact)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("contact");
            entity.Property(e => e.Correspondence)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("correspondence");
            entity.Property(e => e.Country)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("country");
            entity.Property(e => e.County)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("county");
            entity.Property(e => e.Credithold)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("credithold");
            entity.Property(e => e.Creditlmt)
                .HasDefaultValue(999999m)
                .HasColumnType("money")
                .HasColumnName("creditlmt");
            entity.Property(e => e.Currencycd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("currencycd");
            entity.Property(e => e.Custclass)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("custclass");
            entity.Property(e => e.DBRating)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("d_b_rating");
            entity.Property(e => e.DealNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("deal_no");
            entity.Property(e => e.Discount).HasColumnName("discount");
            entity.Property(e => e.Dunningcnt).HasColumnName("dunningcnt");
            entity.Property(e => e.Email2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("email2");
            entity.Property(e => e.Ext)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ext");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fax");
            entity.Property(e => e.FscmCage)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fscm_cage");
            entity.Property(e => e.Highbal)
                .HasColumnType("money")
                .HasColumnName("highbal");
            entity.Property(e => e.IdLanguage).HasColumnName("id_language");
            entity.Property(e => e.InvoiceFolder)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Invoicecopies).HasColumnName("invoicecopies");
            entity.Property(e => e.LastDunning)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("last_dunning");
            entity.Property(e => e.LastInvoice)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("last_invoice");
            entity.Property(e => e.Lastcollection)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("lastcollection");
            entity.Property(e => e.Lastfeeearnedcd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("lastfeeearnedcd");
            entity.Property(e => e.Lastyrcosts)
                .HasColumnType("money")
                .HasColumnName("lastyrcosts");
            entity.Property(e => e.Lastyrother)
                .HasColumnType("money")
                .HasColumnName("lastyrother");
            entity.Property(e => e.Lastyrrtrn)
                .HasColumnType("money")
                .HasColumnName("lastyrrtrn");
            entity.Property(e => e.Lastyrsales)
                .HasColumnType("money")
                .HasColumnName("lastyrsales");
            entity.Property(e => e.Mtdcosts)
                .HasColumnType("money")
                .HasColumnName("mtdcosts");
            entity.Property(e => e.Mtdother)
                .HasColumnType("money")
                .HasColumnName("mtdother");
            entity.Property(e => e.Mtdrtrn)
                .HasColumnType("money")
                .HasColumnName("mtdrtrn");
            entity.Property(e => e.Mtdsales)
                .HasColumnType("money")
                .HasColumnName("mtdsales");
            entity.Property(e => e.Nextcollection)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("nextcollection");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("notes");
            entity.Property(e => e.Oeused)
                .HasColumnType("money")
                .HasColumnName("oeused");
            entity.Property(e => e.Paytermscd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("paytermscd");
            entity.Property(e => e.Phone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("phone");
            entity.Property(e => e.Priority).HasColumnName("priority");
            entity.Property(e => e.State)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("state");
            entity.Property(e => e.Taxexempt)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("taxexempt");
            entity.Property(e => e.TaxexemptNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("taxexempt_no");
            entity.Property(e => e.Telex)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("telex");
            entity.Property(e => e.Telmktrepcd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("telmktrepcd");
            entity.Property(e => e.Telmktreploc)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("telmktreploc");
            entity.Property(e => e.Usenet)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("usenet");
            entity.Property(e => e.VatidentificationNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VATIdentificationNumber");
            entity.Property(e => e.Vatstatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("VATStatus");
            entity.Property(e => e.Voicemail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("voicemail");
            entity.Property(e => e.Ytdcosts)
                .HasColumnType("money")
                .HasColumnName("ytdcosts");
            entity.Property(e => e.Ytdother)
                .HasColumnType("money")
                .HasColumnName("ytdother");
            entity.Property(e => e.Ytdrtrn)
                .HasColumnType("money")
                .HasColumnName("ytdrtrn");
            entity.Property(e => e.Ytdsales)
                .HasColumnType("money")
                .HasColumnName("ytdsales");
            entity.Property(e => e.Zip)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zip");

            entity.HasOne(d => d.IdLanguageNavigation).WithMany(p => p.OecustbillOlds)
                .HasForeignKey(d => d.IdLanguage)
                .HasConstraintName("FK_oecustbill_old__id_language");

            entity.HasOne(d => d.VatstatusNavigation).WithMany(p => p.OecustbillOlds)
                .HasForeignKey(d => d.Vatstatus)
                .HasConstraintName("FK_oecustbill_old__VATStatus");
        });

        modelBuilder.Entity<Oecustomer>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("oecustomer");

            entity.Property(e => e.Activeind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("activeind");
            entity.Property(e => e.Arcurr)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("arcurr");
            entity.Property(e => e.Arover120)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("arover120");
            entity.Property(e => e.Arover30)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("arover30");
            entity.Property(e => e.Arover60)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("arover60");
            entity.Property(e => e.Arover90)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("arover90");
            entity.Property(e => e.BoAllow)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("bo_allow");
            entity.Property(e => e.CompRating)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("comp_rating");
            entity.Property(e => e.CompanySize)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("company_size");
            entity.Property(e => e.Credithold)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("credithold");
            entity.Property(e => e.Creditlmt)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("creditlmt");
            entity.Property(e => e.CustName)
                .HasMaxLength(100)
                .HasColumnName("cust_name");
            entity.Property(e => e.Custclass)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("custclass");
            entity.Property(e => e.Custno)
                .HasMaxLength(20)
                .HasColumnName("custno");
            entity.Property(e => e.DBRating)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("d_b_rating");
            entity.Property(e => e.Dunningcnt).HasColumnName("dunningcnt");
            entity.Property(e => e.Enterdate).HasColumnName("enterdate");
            entity.Property(e => e.FileStorageGuid).HasColumnName("FileStorageGUID");
            entity.Property(e => e.FscmCage)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("fscm_cage");
            entity.Property(e => e.Highbal)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("highbal");
            entity.Property(e => e.IndustryType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("industry_type");
            entity.Property(e => e.LastContact)
                .HasMaxLength(23)
                .IsUnicode(false)
                .HasColumnName("last_contact");
            entity.Property(e => e.LastDunning)
                .HasMaxLength(23)
                .IsUnicode(false)
                .HasColumnName("last_dunning");
            entity.Property(e => e.LastYrSale)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("last_yr_sale");
            entity.Property(e => e.Lastactivity)
                .HasMaxLength(23)
                .IsUnicode(false)
                .HasColumnName("lastactivity");
            entity.Property(e => e.Lastyrcosts)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("lastyrcosts");
            entity.Property(e => e.Lastyrother)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("lastyrother");
            entity.Property(e => e.Lastyrrtrn)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("lastyrrtrn");
            entity.Property(e => e.Lastyrsales)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("lastyrsales");
            entity.Property(e => e.Matrixcd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("matrixcd");
            entity.Property(e => e.Misc)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("misc");
            entity.Property(e => e.Mtdcosts)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("mtdcosts");
            entity.Property(e => e.Mtdother)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("mtdother");
            entity.Property(e => e.Mtdrtrn)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("mtdrtrn");
            entity.Property(e => e.Mtdsales)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("mtdsales");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .HasColumnName("NAME");
            entity.Property(e => e.NextContact)
                .HasMaxLength(23)
                .IsUnicode(false)
                .HasColumnName("next_contact");
            entity.Property(e => e.NextObjective)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("next_objective");
            entity.Property(e => e.Oeused)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("oeused");
            entity.Property(e => e.PrevYrSale)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("prev_yr_sale");
            entity.Property(e => e.Probability).HasColumnName("probability");
            entity.Property(e => e.Ref1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ref1");
            entity.Property(e => e.Ref2)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ref2");
            entity.Property(e => e.Ref3)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ref3");
            entity.Property(e => e.Ref4)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ref5");
            entity.Property(e => e.Ref6)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ref6");
            entity.Property(e => e.Ref7)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ref7");
            entity.Property(e => e.Ref8)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ref8");
            entity.Property(e => e.ReferredBy)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("referred_by");
            entity.Property(e => e.Reminder)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("reminder");
            entity.Property(e => e.Rptform)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("rptform");
            entity.Property(e => e.Ytdcosts)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("ytdcosts");
            entity.Property(e => e.Ytdother)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("ytdother");
            entity.Property(e => e.Ytdrtrn)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("ytdrtrn");
            entity.Property(e => e.Ytdsales)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("ytdsales");
        });

        modelBuilder.Entity<OecustomerOld>(entity =>
        {
            entity.HasKey(e => e.Custno).HasFillFactor(90);

            entity.ToTable("oecustomer_old");

            entity.Property(e => e.Custno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("custno");
            entity.Property(e => e.Activeind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("activeind");
            entity.Property(e => e.Arcurr)
                .HasColumnType("money")
                .HasColumnName("arcurr");
            entity.Property(e => e.Arover120)
                .HasColumnType("money")
                .HasColumnName("arover120");
            entity.Property(e => e.Arover30)
                .HasColumnType("money")
                .HasColumnName("arover30");
            entity.Property(e => e.Arover60)
                .HasColumnType("money")
                .HasColumnName("arover60");
            entity.Property(e => e.Arover90)
                .HasColumnType("money")
                .HasColumnName("arover90");
            entity.Property(e => e.BoAllow)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bo_allow");
            entity.Property(e => e.CompRating)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("comp_rating");
            entity.Property(e => e.CompanySize)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("company_size");
            entity.Property(e => e.Credithold)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("credithold");
            entity.Property(e => e.Creditlmt)
                .HasColumnType("money")
                .HasColumnName("creditlmt");
            entity.Property(e => e.CustName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComputedColumnSql("([name])", false)
                .HasColumnName("cust_name");
            entity.Property(e => e.Custclass)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("custclass");
            entity.Property(e => e.DBRating)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("d_b_rating");
            entity.Property(e => e.Dunningcnt).HasColumnName("dunningcnt");
            entity.Property(e => e.Enterdate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("enterdate");
            entity.Property(e => e.FileStorageGuid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("FileStorageGUID");
            entity.Property(e => e.FscmCage)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fscm_cage");
            entity.Property(e => e.Highbal)
                .HasColumnType("money")
                .HasColumnName("highbal");
            entity.Property(e => e.IndustryType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("industry_type");
            entity.Property(e => e.LastContact)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("last_contact");
            entity.Property(e => e.LastDunning)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("last_dunning");
            entity.Property(e => e.LastYrSale)
                .HasColumnType("money")
                .HasColumnName("last_yr_sale");
            entity.Property(e => e.Lastactivity)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("lastactivity");
            entity.Property(e => e.Lastyrcosts)
                .HasColumnType("money")
                .HasColumnName("lastyrcosts");
            entity.Property(e => e.Lastyrother)
                .HasColumnType("money")
                .HasColumnName("lastyrother");
            entity.Property(e => e.Lastyrrtrn)
                .HasColumnType("money")
                .HasColumnName("lastyrrtrn");
            entity.Property(e => e.Lastyrsales)
                .HasColumnType("money")
                .HasColumnName("lastyrsales");
            entity.Property(e => e.Matrixcd)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("matrixcd");
            entity.Property(e => e.Misc)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("misc");
            entity.Property(e => e.Mtdcosts)
                .HasColumnType("money")
                .HasColumnName("mtdcosts");
            entity.Property(e => e.Mtdother)
                .HasColumnType("money")
                .HasColumnName("mtdother");
            entity.Property(e => e.Mtdrtrn)
                .HasColumnType("money")
                .HasColumnName("mtdrtrn");
            entity.Property(e => e.Mtdsales)
                .HasColumnType("money")
                .HasColumnName("mtdsales");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("name");
            entity.Property(e => e.NextContact)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("next_contact");
            entity.Property(e => e.NextObjective)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("next_objective");
            entity.Property(e => e.Oeused)
                .HasColumnType("money")
                .HasColumnName("oeused");
            entity.Property(e => e.PrevYrSale)
                .HasColumnType("money")
                .HasColumnName("prev_yr_sale");
            entity.Property(e => e.Probability).HasColumnName("probability");
            entity.Property(e => e.Ref1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref1");
            entity.Property(e => e.Ref2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref2");
            entity.Property(e => e.Ref3)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref3");
            entity.Property(e => e.Ref4)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref5");
            entity.Property(e => e.Ref6)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref6");
            entity.Property(e => e.Ref7)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref7");
            entity.Property(e => e.Ref8)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref8");
            entity.Property(e => e.ReferredBy)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("referred_by");
            entity.Property(e => e.Reminder)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("reminder");
            entity.Property(e => e.Rptform)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("rptform");
            entity.Property(e => e.Ytdcosts)
                .HasColumnType("money")
                .HasColumnName("ytdcosts");
            entity.Property(e => e.Ytdother)
                .HasColumnType("money")
                .HasColumnName("ytdother");
            entity.Property(e => e.Ytdrtrn)
                .HasColumnType("money")
                .HasColumnName("ytdrtrn");
            entity.Property(e => e.Ytdsales)
                .HasColumnType("money")
                .HasColumnName("ytdsales");
        });

        modelBuilder.Entity<Oedeal>(entity =>
        {
            entity.HasKey(e => e.Primekey)
                .IsClustered(false)
                .HasFillFactor(90);

            entity.ToTable("oedeals");

            entity.HasIndex(e => new { e.Custclass, e.DealNo }, "oedealsidx").HasFillFactor(90);

            entity.HasIndex(e => new { e.Catalogclass, e.DealNo }, "oedealspk")
                .IsUnique()
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("primekey");
            entity.Property(e => e.Catalogclass)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("catalogclass");
            entity.Property(e => e.Custclass)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("custclass");
            entity.Property(e => e.DealBegin)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("deal_begin");
            entity.Property(e => e.DealEnd)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("deal_end");
            entity.Property(e => e.DealExplain)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("deal_explain");
            entity.Property(e => e.DealNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("deal_no");
            entity.Property(e => e.Discount).HasColumnName("discount");
            entity.Property(e => e.MaximumQty).HasColumnName("maximum_qty");
            entity.Property(e => e.MinimumQty).HasColumnName("minimum_qty");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Ref1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref1");
            entity.Property(e => e.Ref2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref2");
            entity.Property(e => e.Ref3)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref3");
            entity.Property(e => e.Ref4)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref5");
            entity.Property(e => e.Ref6)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref6");
            entity.Property(e => e.Ref7)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref7");
            entity.Property(e => e.Ref8)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref8");
        });

        modelBuilder.Entity<Oelocation>(entity =>
        {
            entity.HasKey(e => e.Primekey)
                .IsClustered(false)
                .HasFillFactor(90);

            entity.ToTable("oelocation");

            entity.HasIndex(e => e.Locationcd, "oelocationpk")
                .IsUnique()
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("primekey");
            entity.Property(e => e.AccountsLogoOverride)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AccountsPayableEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AccountsReceivableEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Addr1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("addr1");
            entity.Property(e => e.Addr2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("addr2");
            entity.Property(e => e.Addr3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("addr3");
            entity.Property(e => e.AutoGeneratedInvoiceNameFormat)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.AutoInvoiceGeneration)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("city");
            entity.Property(e => e.Contact)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("contact");
            entity.Property(e => e.Country)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("country");
            entity.Property(e => e.Countrycode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("countrycode");
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.CustomerInvoiceSubFolderFormat)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.Extension)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("extension");
            entity.Property(e => e.Fax)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fax");
            entity.Property(e => e.FooterFilename)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Frghtmatrix)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("frghtmatrix");
            entity.Property(e => e.InvoicingTaxGroupId).HasColumnName("InvoicingTaxGroupID");
            entity.Property(e => e.Invoicingprefix)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("invoicingprefix");
            entity.Property(e => e.LocationFax)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("location_fax");
            entity.Property(e => e.LocationPhone)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("location_phone");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("locationcd");
            entity.Property(e => e.LogoFilename)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("logo_filename");
            entity.Property(e => e.MotorCertSignatureFilename)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("motor_cert_signature_filename");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Name)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("name");
            entity.Property(e => e.NextInvoiceSequenceNo)
                .HasDefaultValueSql("('')")
                .HasColumnName("next_invoice_sequence_no");
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("phone");
            entity.Property(e => e.PublicName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PurchasingEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.QuoteEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Ref1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref1");
            entity.Property(e => e.Ref2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref2");
            entity.Property(e => e.Ref3)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref3");
            entity.Property(e => e.Ref4)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref5");
            entity.Property(e => e.Ref6)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref6");
            entity.Property(e => e.Ref7)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref7");
            entity.Property(e => e.Ref8)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref8");
            entity.Property(e => e.ShippingAddr1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("shipping_addr1");
            entity.Property(e => e.ShippingAddr2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("shipping_addr2");
            entity.Property(e => e.ShippingAddr3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("shipping_addr3");
            entity.Property(e => e.ShippingCity)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("shipping_city");
            entity.Property(e => e.ShippingCountry)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("shipping_country");
            entity.Property(e => e.ShippingCountrycode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("shipping_countrycode");
            entity.Property(e => e.ShippingState)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("shipping_state");
            entity.Property(e => e.ShippingStateLong)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("shipping_state_long");
            entity.Property(e => e.ShippingZip)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("shipping_zip");
            entity.Property(e => e.State)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("state");
            entity.Property(e => e.SteelCertSignatureFilename)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("steel_cert_signature_filename");
            entity.Property(e => e.WebAddress)
                .IsUnicode(false)
                .HasColumnName("web_address");
            entity.Property(e => e.Zip)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zip");

            entity.HasOne(d => d.AutoInvoiceGenerationNavigation).WithMany(p => p.Oelocations)
                .HasForeignKey(d => d.AutoInvoiceGeneration)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_oelocation_AugoInvoiceGeneration");

            entity.HasOne(d => d.CountrycodeNavigation).WithMany(p => p.OelocationCountrycodeNavigations)
                .HasForeignKey(d => d.Countrycode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_oelocation_countrycode");

            entity.HasOne(d => d.CurrencyNavigation).WithMany(p => p.Oelocations)
                .HasForeignKey(d => d.Currency)
                .HasConstraintName("FK_oelocation_Currency");

            entity.HasOne(d => d.InvoicingTaxGroup).WithMany(p => p.Oelocations)
                .HasForeignKey(d => d.InvoicingTaxGroupId)
                .HasConstraintName("FK_oelocation_InvoicingTaxGroup");

            entity.HasOne(d => d.ShippingCountrycodeNavigation).WithMany(p => p.OelocationShippingCountrycodeNavigations)
                .HasForeignKey(d => d.ShippingCountrycode)
                .HasConstraintName("FK_oelocation_shipping_countrycode");
        });

        modelBuilder.Entity<Oelogo>(entity =>
        {
            entity.HasKey(e => e.Primekey).HasFillFactor(90);

            entity.ToTable("oelogos");

            entity.HasIndex(e => new { e.Oelocationcd, e.Aplocationcd, e.Entityno }, "oelogospk")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("primekey");
            entity.Property(e => e.Aplocationcd)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("aplocationcd");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("entityno");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Oelocationcd)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("oelocationcd");
            entity.Property(e => e.Oelogo1)
                .HasColumnType("image")
                .HasColumnName("oelogo");
        });

        modelBuilder.Entity<Oepayterm>(entity =>
        {
            entity.HasKey(e => e.Primekey)
                .IsClustered(false)
                .HasFillFactor(90);

            entity.ToTable("oepayterms");

            entity.HasIndex(e => e.IfstermsCode, "UC_oepayterms_IFSTermsCode")
                .IsUnique()
                .HasFilter("([IFSTermsCode] IS NOT NULL)");

            entity.HasIndex(e => e.Paytermscd, "oepaytermspk")
                .IsUnique()
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("primekey");
            entity.Property(e => e.Age1).HasColumnName("age1");
            entity.Property(e => e.Age2).HasColumnName("age2");
            entity.Property(e => e.Age3).HasColumnName("age3");
            entity.Property(e => e.Age4).HasColumnName("age4");
            entity.Property(e => e.Age5).HasColumnName("age5");
            entity.Property(e => e.Agesource)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("agesource");
            entity.Property(e => e.BaseDatecd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("ServDate");
            entity.Property(e => e.DiscDays).HasColumnName("disc_days");
            entity.Property(e => e.DiscFxpc)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("disc_fxpc");
            entity.Property(e => e.DiscRate).HasColumnName("disc_rate");
            entity.Property(e => e.Dundays).HasColumnName("dundays");
            entity.Property(e => e.Dunsource)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dunsource");
            entity.Property(e => e.EomInd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("eom_ind");
            entity.Property(e => e.Finfxpc)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("finfxpc");
            entity.Property(e => e.Finmatrixcd)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("finmatrixcd");
            entity.Property(e => e.Finrate).HasColumnName("finrate");
            entity.Property(e => e.Finsource)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("finsource");
            entity.Property(e => e.IfstermsCode)
                .HasMaxLength(20)
                .HasColumnName("IFSTermsCode");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasColumnName("isActive");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
            entity.Property(e => e.NetDays).HasColumnName("net_days");
            entity.Property(e => e.Paytermscd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("paytermscd");
            entity.Property(e => e.Paytermsdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("paytermsdesc");

            entity.HasOne(d => d.BaseDatecdNavigation).WithMany(p => p.Oepayterms)
                .HasForeignKey(d => d.BaseDatecd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_oepayterms_oePayTermsNetDaysBaseDate");

            entity.HasMany(d => d.IfstermsCodes).WithMany(p => p.Paytermscds)
                .UsingEntity<Dictionary<string, object>>(
                    "FinessePayTermsToIfsmapping",
                    r => r.HasOne<IfspaymentTerm>().WithMany()
                        .HasForeignKey("IfstermsCode")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_FinessePayTermsToIFSMapping_IFSTermsCode"),
                    l => l.HasOne<Oepayterm>().WithMany()
                        .HasPrincipalKey("Paytermscd")
                        .HasForeignKey("Paytermscd")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_FinessePayTermsToIFSMapping_oepayterms"),
                    j =>
                    {
                        j.HasKey("Paytermscd", "IfstermsCode");
                        j.ToTable("FinessePayTermsToIFSMapping");
                        j.IndexerProperty<string>("Paytermscd")
                            .HasMaxLength(10)
                            .IsUnicode(false)
                            .HasColumnName("paytermscd");
                        j.IndexerProperty<string>("IfstermsCode")
                            .HasMaxLength(50)
                            .HasColumnName("IFSTermsCode");
                    });
        });

        modelBuilder.Entity<Oesalesman>(entity =>
        {
            entity.HasKey(e => e.Salesmancd).HasFillFactor(90);

            entity.ToTable("oesalesman");

            entity.Property(e => e.Salesmancd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("salesmancd");
            entity.Property(e => e.Addr1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("addr1");
            entity.Property(e => e.Addr2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("addr2");
            entity.Property(e => e.Addr3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("addr3");
            entity.Property(e => e.CashOnly)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("cash_only");
            entity.Property(e => e.City)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("city");
            entity.Property(e => e.CommCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("comm_code");
            entity.Property(e => e.Commission).HasColumnName("commission");
            entity.Property(e => e.Country)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("country");
            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("empno");
            entity.Property(e => e.Extension)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("extension");
            entity.Property(e => e.Fax)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fax");
            entity.Property(e => e.HowPaid)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("how_paid");
            entity.Property(e => e.InOutFlag)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("in_out_flag");
            entity.Property(e => e.Lastyrcosts)
                .HasColumnType("money")
                .HasColumnName("lastyrcosts");
            entity.Property(e => e.Lastyrother)
                .HasColumnType("money")
                .HasColumnName("lastyrother");
            entity.Property(e => e.Lastyrrtrn)
                .HasColumnType("money")
                .HasColumnName("lastyrrtrn");
            entity.Property(e => e.Lastyrsales)
                .HasColumnType("money")
                .HasColumnName("lastyrsales");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("locationcd");
            entity.Property(e => e.Mtdcosts)
                .HasColumnType("money")
                .HasColumnName("mtdcosts");
            entity.Property(e => e.Mtdother)
                .HasColumnType("money")
                .HasColumnName("mtdother");
            entity.Property(e => e.Mtdrtrn)
                .HasColumnType("money")
                .HasColumnName("mtdrtrn");
            entity.Property(e => e.Mtdsales)
                .HasColumnType("money")
                .HasColumnName("mtdsales");
            entity.Property(e => e.Name)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("name");
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("phone");
            entity.Property(e => e.Ref1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref1");
            entity.Property(e => e.Ref2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref2");
            entity.Property(e => e.Ref3)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref3");
            entity.Property(e => e.Ref4)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref5");
            entity.Property(e => e.Ref6)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref6");
            entity.Property(e => e.Ref7)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref7");
            entity.Property(e => e.Ref8)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref8");
            entity.Property(e => e.State)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("state");
            entity.Property(e => e.TaxId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tax_id");
            entity.Property(e => e.Telex)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("telex");
            entity.Property(e => e.Usenet)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("usenet");
            entity.Property(e => e.Voicemail)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("voicemail");
            entity.Property(e => e.WhenPaid)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("when_paid");
            entity.Property(e => e.Ytdcosts)
                .HasColumnType("money")
                .HasColumnName("ytdcosts");
            entity.Property(e => e.Ytdother)
                .HasColumnType("money")
                .HasColumnName("ytdother");
            entity.Property(e => e.Ytdrtrn)
                .HasColumnType("money")
                .HasColumnName("ytdrtrn");
            entity.Property(e => e.Ytdsales)
                .HasColumnType("money")
                .HasColumnName("ytdsales");
            entity.Property(e => e.Zip)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zip");
        });

        modelBuilder.Entity<Oeshipaddr>(entity =>
        {
            entity.HasKey(e => new { e.Custno, e.Subno, e.Shipno }).HasFillFactor(90);

            entity.ToTable("oeshipaddr");

            entity.Property(e => e.Custno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("custno");
            entity.Property(e => e.Subno)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("subno");
            entity.Property(e => e.Shipno)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("shipno");
            entity.Property(e => e.Addr1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("addr1");
            entity.Property(e => e.Addr2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("addr2");
            entity.Property(e => e.Addr3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("addr3");
            entity.Property(e => e.Attention)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("attention");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("city");
            entity.Property(e => e.Contact)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("contact");
            entity.Property(e => e.Correspondence)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("correspondence");
            entity.Property(e => e.Country)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("country");
            entity.Property(e => e.County)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("county");
            entity.Property(e => e.Currencycd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("currencycd");
            entity.Property(e => e.Custclass)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("custclass");
            entity.Property(e => e.DealNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("deal_no");
            entity.Property(e => e.Discount).HasColumnName("discount");
            entity.Property(e => e.Email2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("email2");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("entityno");
            entity.Property(e => e.Ext)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ext");
            entity.Property(e => e.Fax)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fax");
            entity.Property(e => e.FscmCage)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fscm_cage");
            entity.Property(e => e.Invoicecopies).HasColumnName("invoicecopies");
            entity.Property(e => e.LastShipped)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("last_shipped");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("locationcd");
            entity.Property(e => e.Matrixcd)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("matrixcd");
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("phone");
            entity.Property(e => e.Priority).HasColumnName("priority");
            entity.Property(e => e.Salesmancd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("salesmancd");
            entity.Property(e => e.Salutation)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("salutation");
            entity.Property(e => e.ShipToName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ship_to_name");
            entity.Property(e => e.Shipcomplete)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("shipcomplete");
            entity.Property(e => e.ShipviaCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("shipvia_code");
            entity.Property(e => e.State)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("state");
            entity.Property(e => e.Tax1).HasColumnName("tax1");
            entity.Property(e => e.Tax2).HasColumnName("tax2");
            entity.Property(e => e.Tax3).HasColumnName("tax3");
            entity.Property(e => e.Tax4).HasColumnName("tax4");
            entity.Property(e => e.Tax5).HasColumnName("tax5");
            entity.Property(e => e.TaxCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tax_code");
            entity.Property(e => e.Telex)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("telex");
            entity.Property(e => e.Usenet)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("usenet");
            entity.Property(e => e.Voicemail)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("voicemail");
            entity.Property(e => e.Zip)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zip");
        });

        modelBuilder.Entity<OetaxCode>(entity =>
        {
            entity.HasKey(e => e.Primekey)
                .IsClustered(false)
                .HasFillFactor(90);

            entity.ToTable("oetax_codes");

            entity.HasIndex(e => e.TaxCode, "oetax_codespk")
                .IsUnique()
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("primekey");
            entity.Property(e => e.Matrixcd1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("matrixcd1");
            entity.Property(e => e.Matrixcd2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("matrixcd2");
            entity.Property(e => e.Matrixcd3)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("matrixcd3");
            entity.Property(e => e.Matrixcd4)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("matrixcd4");
            entity.Property(e => e.Matrixcd5)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("matrixcd5");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Tax1).HasColumnName("tax1");
            entity.Property(e => e.Tax2).HasColumnName("tax2");
            entity.Property(e => e.Tax3).HasColumnName("tax3");
            entity.Property(e => e.Tax4).HasColumnName("tax4");
            entity.Property(e => e.Tax5).HasColumnName("tax5");
            entity.Property(e => e.TaxCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tax_code");
            entity.Property(e => e.Taxdesc1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("taxdesc1");
            entity.Property(e => e.Taxdesc2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("taxdesc2");
            entity.Property(e => e.Taxdesc3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("taxdesc3");
            entity.Property(e => e.Taxdesc4)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("taxdesc4");
            entity.Property(e => e.Taxdesc5)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("taxdesc5");
        });

        modelBuilder.Entity<OldAmpChannelCorrectionCurf>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("OldAmpChannelCorrectionCurves", "SpeakerTest");

            entity.Property(e => e.AmpBarcode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AmpPowerChannelIrid).HasColumnName("AmpPowerChannelIRID");
            entity.Property(e => e.BreakInCurrentCorrectionIrid).HasColumnName("BreakInCurrentCorrectionIRID");
            entity.Property(e => e.BreakInVoltageCorrectionIrid).HasColumnName("BreakInVoltageCorrectionIRID");
        });

        modelBuilder.Entity<OldCabinetComponentTestMeasurementUserEnteredFailure>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("oldCabinetComponentTestMeasurementUserEnteredFailure", "SpeakerTest");

            entity.HasIndex(e => new { e.StackTestId, e.CurveId }, "UC_CabinetComponentTestMeasurementUserEnteredFailure_StackTestCurve").IsUnique();

            entity.Property(e => e.CurveId).HasColumnName("CurveID");
            entity.Property(e => e.FailureDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.StackTestId).HasColumnName("StackTestID");

            entity.HasOne(d => d.Curve).WithMany()
                .HasForeignKey(d => d.CurveId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CabinetComponentTestMeasurementUserEnteredFailure_CurveID");

            entity.HasOne(d => d.StackTest).WithMany()
                .HasForeignKey(d => d.StackTestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CabinetComponentTestMeasurementUserEnteredFailure_StackTestID");
        });

        modelBuilder.Entity<OrderedPartsChangesStagingArea>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.Partno, e.ChangeDate });

            entity.ToTable("OrderedPartsChangesStagingArea");

            entity.HasIndex(e => e.ChangeDate, "IX_changetime");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.ChangeDate)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnName("changeDate");
            entity.Property(e => e.NewEnddate)
                .HasColumnType("datetime")
                .HasColumnName("new_enddate");
            entity.Property(e => e.NewEstQty).HasColumnName("new_est_qty");
            entity.Property(e => e.NewMfgDesc)
                .HasMaxLength(250)
                .HasColumnName("new_mfg_desc");
            entity.Property(e => e.NewStartdate)
                .HasColumnType("datetime")
                .HasColumnName("new_startdate");
            entity.Property(e => e.OldEnddate)
                .HasColumnType("datetime")
                .HasColumnName("old_enddate");
            entity.Property(e => e.OldEstQty).HasColumnName("old_est_qty");
            entity.Property(e => e.OldMfgDesc)
                .HasMaxLength(250)
                .HasColumnName("old_mfg_desc");
            entity.Property(e => e.OldStartdate)
                .HasColumnType("datetime")
                .HasColumnName("old_startdate");
            entity.Property(e => e.TransactionId).HasColumnName("transaction_id");
            entity.Property(e => e.Userid)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("userid");
        });

        modelBuilder.Entity<OrderedPartsListParentAndChild>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("OrderedPartsListParentAndChildren");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.EstQty).HasColumnName("est_qty");
            entity.Property(e => e.Parentpartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("parentpartno");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
        });

        modelBuilder.Entity<Outcome>(entity =>
        {
            entity.ToTable("Outcomes", "SpeakerTest");

            entity.Property(e => e.OutcomeId)
                .ValueGeneratedNever()
                .HasColumnName("OutcomeID");
            entity.Property(e => e.IsFail).HasComputedColumnSql("(CONVERT([bit],(1)-[IsPass]))", false);
        });

        modelBuilder.Entity<OutputPatching>(entity =>
        {
            entity.HasKey(e => e.OutputPatching1);

            entity.ToTable("OutputPatching", "SpeakerTest");

            entity.Property(e => e.OutputPatching1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OutputPatching");
        });

        modelBuilder.Entity<OvertimeRate>(entity =>
        {
            entity.HasKey(e => e.RateType).IsClustered(false);

            entity.Property(e => e.RateType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.RateDesc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<ParentsWithChildrenWithMismatchedOwnership>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Parents_with_children_with_mismatched_ownerships");

            entity.Property(e => e.Category)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ChildBarcode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ChildOwner)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ChildPartDesc)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.ChildPartNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Entitydesc)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("entitydesc");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.ParentBarcode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ParentOwner)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ParentPartDesc)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.ParentPartNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReturnDate).HasColumnType("datetime");
            entity.Property(e => e.Wh)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("WH");
        });

        modelBuilder.Entity<PartAttachment>(entity =>
        {
            entity.HasKey(e => new { e.Partno, e.AttachmentType, e.AttachmentPath });

            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.AttachmentType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AttachmentPath)
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.AttachmentTypeNavigation).WithMany(p => p.PartAttachments)
                .HasForeignKey(d => d.AttachmentType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PartAttachments_AttachmentType");

            entity.HasOne(d => d.PartnoNavigation).WithMany(p => p.PartAttachments)
                .HasForeignKey(d => d.Partno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PartAttachments_partno");
        });

        modelBuilder.Entity<PartBidValue>(entity =>
        {
            entity.HasKey(e => new { e.Partno, e.Currency, e.Valuetype });

            entity.ToTable(tb => tb.HasTrigger("TR_PartBidValues_TrackHistory"));

            entity.HasIndex(e => new { e.Valuetype, e.Currency, e.Partno }, "IX_value_and_currency").IsUnique();

            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.Valuetype)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("valuetype");
            entity.Property(e => e.Bidvalue).HasColumnName("bidvalue");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

            entity.HasOne(d => d.CurrencyNavigation).WithMany(p => p.PartBidValues)
                .HasForeignKey(d => d.Currency)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PartBidValues_Currency");

            entity.HasOne(d => d.PartnoNavigation).WithMany(p => p.PartBidValues)
                .HasForeignKey(d => d.Partno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_inpart_bidvalue_inpart");

            entity.HasOne(d => d.UpdatedByNavigation).WithMany(p => p.PartBidValues)
                .HasForeignKey(d => d.UpdatedBy)
                .HasConstraintName("FK_PartBidValues__pjtfrusr");

            entity.HasOne(d => d.ValuetypeNavigation).WithMany(p => p.PartBidValues)
                .HasForeignKey(d => d.Valuetype)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PartBidValues_valuetype");
        });

        modelBuilder.Entity<PartBidValueType>(entity =>
        {
            entity.HasKey(e => e.BidValueType);

            entity.Property(e => e.BidValueType)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PartBidValuesHistory>(entity =>
        {
            entity.HasKey(e => new { e.Partno, e.Currency, e.Valuetype, e.ValidFromUtc });

            entity.ToTable("PartBidValuesHistory");

            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.Valuetype)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("valuetype");
            entity.Property(e => e.ValidFromUtc)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnName("ValidFromUTC");
            entity.Property(e => e.Bidvalue).HasColumnName("bidvalue");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(128)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.RemovedBy).HasMaxLength(128);
            entity.Property(e => e.ValidToUtc).HasColumnName("ValidToUTC");
        });

        modelBuilder.Entity<PartCatalog>(entity =>
        {
            entity.HasKey(e => e.PartNo).HasName("PK_IFS_PART_CATALOG");

            entity.ToTable("PART_CATALOG", "IFS");

            entity.Property(e => e.PartNo)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("PART_NO");
            entity.Property(e => e.AllowAsNotConsumed)
                .HasMaxLength(5)
                .HasColumnName("ALLOW_AS_NOT_CONSUMED");
            entity.Property(e => e.CatchUnitEnabled)
                .HasMaxLength(5)
                .HasColumnName("CATCH_UNIT_ENABLED");
            entity.Property(e => e.CestCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CEST_CODE");
            entity.Property(e => e.ComponentLotRule)
                .HasMaxLength(20)
                .HasColumnName("COMPONENT_LOT_RULE");
            entity.Property(e => e.ConditionCodeUsage)
                .HasMaxLength(20)
                .HasColumnName("CONDITION_CODE_USAGE");
            entity.Property(e => e.Configurable)
                .HasMaxLength(20)
                .HasColumnName("CONFIGURABLE");
            entity.Property(e => e.CustWarrantyId).HasColumnName("CUST_WARRANTY_ID");
            entity.Property(e => e.Description)
                .HasMaxLength(200)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.EngSerialTrackingCode)
                .HasMaxLength(20)
                .HasColumnName("ENG_SERIAL_TRACKING_CODE");
            entity.Property(e => e.FciCode)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("FCI_CODE");
            entity.Property(e => e.FreightFactor).HasColumnName("FREIGHT_FACTOR");
            entity.Property(e => e.InfoText)
                .HasMaxLength(2000)
                .HasColumnName("INFO_TEXT");
            entity.Property(e => e.InputUnitMeasGroupId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("INPUT_UNIT_MEAS_GROUP_ID");
            entity.Property(e => e.LotQuantityRule)
                .HasMaxLength(20)
                .HasColumnName("LOT_QUANTITY_RULE");
            entity.Property(e => e.LotTrackingCode)
                .HasMaxLength(30)
                .HasColumnName("LOT_TRACKING_CODE");
            entity.Property(e => e.MultilevelTracking)
                .HasMaxLength(20)
                .HasColumnName("MULTILEVEL_TRACKING");
            entity.Property(e => e.PartMainGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PART_MAIN_GROUP");
            entity.Property(e => e.PositionPart)
                .HasMaxLength(20)
                .HasColumnName("POSITION_PART");
            entity.Property(e => e.ProductTypeClassif)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PRODUCT_TYPE_CLASSIF");
            entity.Property(e => e.ProductTypeClassifDb)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("PRODUCT_TYPE_CLASSIF_DB");
            entity.Property(e => e.ReceiptIssueSerialTrack)
                .HasMaxLength(20)
                .HasColumnName("RECEIPT_ISSUE_SERIAL_TRACK");
            entity.Property(e => e.Rowkey)
                .HasMaxLength(50)
                .HasColumnName("ROWKEY");
            entity.Property(e => e.Rowversion)
                .HasColumnType("datetime")
                .HasColumnName("ROWVERSION");
            entity.Property(e => e.SerialRule)
                .HasMaxLength(20)
                .HasColumnName("SERIAL_RULE");
            entity.Property(e => e.SerialTrackingCode)
                .HasMaxLength(30)
                .HasColumnName("SERIAL_TRACKING_CODE");
            entity.Property(e => e.StdNameId)
                .HasColumnType("numeric(10, 0)")
                .HasColumnName("STD_NAME_ID");
            entity.Property(e => e.StopArrivalIssuedSerial)
                .HasMaxLength(5)
                .HasColumnName("STOP_ARRIVAL_ISSUED_SERIAL");
            entity.Property(e => e.StopNewSerialInRma)
                .HasMaxLength(20)
                .HasColumnName("STOP_NEW_SERIAL_IN_RMA");
            entity.Property(e => e.SubLotRule)
                .HasMaxLength(20)
                .HasColumnName("SUB_LOT_RULE");
            entity.Property(e => e.SupWarrantyId).HasColumnName("SUP_WARRANTY_ID");
            entity.Property(e => e.TechnicalDrawingNo)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("TECHNICAL_DRAWING_NO");
            entity.Property(e => e.UnitCode)
                .HasMaxLength(30)
                .HasColumnName("UNIT_CODE");
            entity.Property(e => e.UomForVolumeNet)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("UOM_FOR_VOLUME_NET");
            entity.Property(e => e.UomForWeightNet)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("UOM_FOR_WEIGHT_NET");
            entity.Property(e => e.VolumeNet).HasColumnName("VOLUME_NET");
            entity.Property(e => e.WeightNet).HasColumnName("WEIGHT_NET");
        });

        modelBuilder.Entity<PartCatalogTab>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PART_CATALOG_TAB", "IFS");

            entity.Property(e => e.AllowAsNotConsumed).HasColumnName("ALLOW_AS_NOT_CONSUMED");
            entity.Property(e => e.CatchUnitEnabled).HasColumnName("CATCH_UNIT_ENABLED");
            entity.Property(e => e.CestCode).HasColumnName("CEST_CODE");
            entity.Property(e => e.ComponentLotRule).HasColumnName("COMPONENT_LOT_RULE");
            entity.Property(e => e.ConditionCodeUsage).HasColumnName("CONDITION_CODE_USAGE");
            entity.Property(e => e.Configurable).HasColumnName("CONFIGURABLE");
            entity.Property(e => e.CustWarrantyId)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CUST_WARRANTY_ID");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.EngSerialTrackingCode).HasColumnName("ENG_SERIAL_TRACKING_CODE");
            entity.Property(e => e.FciCode).HasColumnName("FCI_CODE");
            entity.Property(e => e.FreightFactor)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("FREIGHT_FACTOR");
            entity.Property(e => e.InfoText).HasColumnName("INFO_TEXT");
            entity.Property(e => e.InputUnitMeasGroupId).HasColumnName("INPUT_UNIT_MEAS_GROUP_ID");
            entity.Property(e => e.LotQuantityRule).HasColumnName("LOT_QUANTITY_RULE");
            entity.Property(e => e.LotTrackingCode).HasColumnName("LOT_TRACKING_CODE");
            entity.Property(e => e.MultilevelTracking).HasColumnName("MULTILEVEL_TRACKING");
            entity.Property(e => e.PartMainGroup).HasColumnName("PART_MAIN_GROUP");
            entity.Property(e => e.PartNo).HasColumnName("PART_NO");
            entity.Property(e => e.PositionPart).HasColumnName("POSITION_PART");
            entity.Property(e => e.ProductTypeClassif).HasColumnName("PRODUCT_TYPE_CLASSIF");
            entity.Property(e => e.ReceiptIssueSerialTrack).HasColumnName("RECEIPT_ISSUE_SERIAL_TRACK");
            entity.Property(e => e.Rowkey).HasColumnName("ROWKEY");
            entity.Property(e => e.Rowversion).HasColumnName("ROWVERSION");
            entity.Property(e => e.SerialRule).HasColumnName("SERIAL_RULE");
            entity.Property(e => e.SerialTrackingCode).HasColumnName("SERIAL_TRACKING_CODE");
            entity.Property(e => e.StdNameId).HasColumnName("STD_NAME_ID");
            entity.Property(e => e.StopArrivalIssuedSerial).HasColumnName("STOP_ARRIVAL_ISSUED_SERIAL");
            entity.Property(e => e.StopNewSerialInRma).HasColumnName("STOP_NEW_SERIAL_IN_RMA");
            entity.Property(e => e.SubLotRule).HasColumnName("SUB_LOT_RULE");
            entity.Property(e => e.SupWarrantyId)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SUP_WARRANTY_ID");
            entity.Property(e => e.TechnicalDrawingNo).HasColumnName("TECHNICAL_DRAWING_NO");
            entity.Property(e => e.UnitCode).HasColumnName("UNIT_CODE");
            entity.Property(e => e.UomForVolumeNet).HasColumnName("UOM_FOR_VOLUME_NET");
            entity.Property(e => e.UomForWeightNet).HasColumnName("UOM_FOR_WEIGHT_NET");
            entity.Property(e => e.VolumeNet)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("VOLUME_NET");
            entity.Property(e => e.WeightNet)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("WEIGHT_NET");
        });

        modelBuilder.Entity<PartChangesToNotify>(entity =>
        {
            entity.ToTable("PartChangesToNotify", "IFS");

            entity.HasIndex(e => new { e.PartNumber, e.PartDescription, e.MessageType }, "UQ_PartChangesToNotify").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ID");
            entity.Property(e => e.MessageType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PartDescription)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.PartNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RawBody).HasColumnName("Raw_Body");
            entity.Property(e => e.RawError).HasColumnName("Raw_Error");
            entity.Property(e => e.RecordCreatedAt)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RecordUpdatedAt)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<PartCheckinNotification>(entity =>
        {
            entity.HasKey(e => new { e.UniqueNo, e.Subject }).IsClustered(false);

            entity.ToTable("partCheckinNotifications");

            entity.HasIndex(e => e.UniqueNo, "IX_unique_no").IsClustered();

            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.Subject)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("subject");
            entity.Property(e => e.CopyRecipients)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("copy_recipients");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.Message)
                .IsUnicode(false)
                .HasColumnName("message");
            entity.Property(e => e.Project)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("project");
            entity.Property(e => e.Recipients)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("recipients");
            entity.Property(e => e.UserCreated)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("user_created");
            entity.Property(e => e.Warehouse)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("warehouse");

            entity.HasOne(d => d.ProjectNavigation).WithMany(p => p.PartCheckinNotifications)
                .HasForeignKey(d => d.Project)
                .HasConstraintName("FK_partCheckinNotifications_glentities");

            entity.HasOne(d => d.WarehouseNavigation).WithMany(p => p.PartCheckinNotifications)
                .HasForeignKey(d => d.Warehouse)
                .HasConstraintName("FK_partCheckinNotifications_Warehouse");
        });

        modelBuilder.Entity<PartCommoditySubcategory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("part_commodity_subcategory");

            entity.Property(e => e.Commodity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("commodity");
            entity.Property(e => e.Subcategory)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("subcategory");
        });

        modelBuilder.Entity<PartDemandsDirection>(entity =>
        {
            entity.HasKey(e => e.Direction);

            entity.HasIndex(e => e.WhichWarehouse, "UC_which_warehouse").IsUnique();

            entity.Property(e => e.Direction)
                .ValueGeneratedNever()
                .HasColumnName("direction");
            entity.Property(e => e.WhichWarehouse)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("which_warehouse");
        });

        modelBuilder.Entity<PartDemandsReturningLeavingInFuture>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("part_demands_returning_leaving_in_future");

            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("engactivecd");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("fromdate");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Src)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("src");
        });

        modelBuilder.Entity<PartDemandsReturningLeftAlready>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("part_demands_returning_left_already");

            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("engactivecd");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("fromdate");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Src)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("src");
        });

        modelBuilder.Entity<PartGroup>(entity =>
        {
            entity.HasKey(e => e.PartGroup1);

            entity.Property(e => e.PartGroup1)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("PartGroup");
            entity.Property(e => e.FileStorageGuid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("FileStorageGUID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsGlobalPartGroup).HasColumnName("isGlobalPartGroup");
        });

        modelBuilder.Entity<PartGroupsBulkSave>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PartGroupsBulkSave");

            entity.Property(e => e.FileStorageGuid).HasColumnName("FileStorageGUID");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.PartGroupNew)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("PartGroup_new");
            entity.Property(e => e.PartGroupOld)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("PartGroup_old");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<PartGroupsPart>(entity =>
        {
            entity.HasKey(e => new { e.PartGroup, e.Partno });

            entity.Property(e => e.PartGroup)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");

            entity.HasOne(d => d.PartGroupNavigation).WithMany(p => p.PartGroupsParts)
                .HasForeignKey(d => d.PartGroup)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PartGroupsParts_PartGroup");

            entity.HasOne(d => d.PartnoNavigation).WithMany(p => p.PartGroupsParts)
                .HasForeignKey(d => d.Partno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PartGroupsParts_inpart");
        });

        modelBuilder.Entity<PartGroupsPartsBulkSave>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PartGroupsPartsBulkSave");

            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.PartGroupNew)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("PartGroup_new");
            entity.Property(e => e.PartGroupOld)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("PartGroup_old");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<PartLocationHistory>(entity =>
        {
            entity.HasKey(e => new { e.Bld, e.Batchno, e.Dept, e.Partno, e.StartDate, e.Parentpartno }).IsClustered(false);

            entity.ToTable("PartLocationHistory");

            entity.HasIndex(e => new { e.Bld, e.Batchno, e.Dept, e.Partno, e.StartDate, e.Parentpartno }, "IX_PartLocationHistory").IsUnique();

            entity.HasIndex(e => new { e.EndDate, e.StartDate }, "IX_enddate");

            entity.HasIndex(e => new { e.Partno, e.Batchno, e.Bld, e.StartDate, e.Dept }, "IX_part_and_batch");

            entity.HasIndex(e => new { e.Partno, e.Bld, e.Batchno, e.StartDate, e.Dept }, "IX_part_and_bld");

            entity.HasIndex(e => new { e.Batchno, e.StartDate, e.EndDate }, "IX_project");

            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.Parentpartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("parentpartno");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.Onhand).HasColumnName("onhand");

            entity.HasOne(d => d.EndDateNavigation).WithMany(p => p.PartLocationHistoryEndDateNavigations).HasForeignKey(d => d.EndDate);

            entity.HasOne(d => d.PartnoNavigation).WithMany(p => p.PartLocationHistories)
                .HasForeignKey(d => d.Partno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PartLocationHistory_inpart");

            entity.HasOne(d => d.StartDateNavigation).WithMany(p => p.PartLocationHistoryStartDateNavigations)
                .HasForeignKey(d => d.StartDate)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<PartLocationHistoryRollupDay>(entity =>
        {
            entity.HasKey(e => e.Date).HasName("PK_PartLocationHistoryRollupDates");

            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.IsIndexed).HasDefaultValue(true);
        });

        modelBuilder.Entity<PartLocationHistoryRollupTable>(entity =>
        {
            entity.HasKey(e => new { e.Date, e.Dept, e.Bld }).IsClustered(false);

            entity.ToTable("PartLocationHistoryRollup_table");

            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dept");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bld");
        });

        modelBuilder.Entity<PartManufacturer>(entity =>
        {
            entity.HasKey(e => new { e.PartNo, e.ManufacturerNo });

            entity.ToTable("PART_MANUFACTURER", "IFS");

            entity.Property(e => e.PartNo)
                .HasMaxLength(25)
                .HasColumnName("PART_NO");
            entity.Property(e => e.ManufacturerNo)
                .HasMaxLength(20)
                .HasColumnName("MANUFACTURER_NO");
            entity.Property(e => e.DateChanged)
                .HasColumnType("datetime")
                .HasColumnName("DATE_CHANGED");
            entity.Property(e => e.DateCreated)
                .HasColumnType("datetime")
                .HasColumnName("DATE_CREATED");
            entity.Property(e => e.Note)
                .HasMaxLength(2000)
                .HasColumnName("NOTE");
            entity.Property(e => e.PreferredManufacturer)
                .HasMaxLength(20)
                .HasColumnName("PREFERRED_MANUFACTURER");
            entity.Property(e => e.QualifiedManufacturer)
                .HasMaxLength(20)
                .HasColumnName("QUALIFIED_MANUFACTURER");
            entity.Property(e => e.Rowkey)
                .HasMaxLength(50)
                .HasColumnName("ROWKEY");
            entity.Property(e => e.Rowversion)
                .HasColumnType("datetime")
                .HasColumnName("ROWVERSION");
            entity.Property(e => e.UserChanged)
                .HasMaxLength(30)
                .HasColumnName("USER_CHANGED");
            entity.Property(e => e.UserCreated)
                .HasMaxLength(30)
                .HasColumnName("USER_CREATED");
        });

        modelBuilder.Entity<PartNoComparison>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PartNoComparison", "varko");

            entity.Property(e => e.PartNo1Qty).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PartNo2Qty).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Ratio).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<PartNumberExistenceReference>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PartNumberExistenceReference");

            entity.Property(e => e.Partdesc)
                .HasMaxLength(500)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
        });

        modelBuilder.Entity<PartPriceUpdateBulkSave>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PartPriceUpdateBulkSave");

            entity.Property(e => e.NewSellingPrice).HasColumnName("newSellingPrice");
            entity.Property(e => e.Partdesc).HasColumnName("partdesc");
            entity.Property(e => e.Partno).HasColumnName("partno");
            entity.Property(e => e.RentalValueUsd).HasColumnName("RentalValueUSD");
            entity.Property(e => e.UnitCost).HasColumnType("decimal(20, 5)");
        });

        modelBuilder.Entity<PartPrimaryCategory>(entity =>
        {
            entity.HasKey(e => e.PrimaryCategoryCode);

            entity.Property(e => e.PrimaryCategoryCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.PrimaryCategoryDesc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<PartPrimaryToSecondaryCategory>(entity =>
        {
            entity.HasKey(e => new { e.PrimaryCategoryCode, e.SecondaryCategoryCode }).HasName("PK_SecondaryCategoryCode");

            entity.Property(e => e.PrimaryCategoryCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.SecondaryCategoryCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");

            entity.HasOne(d => d.PrimaryCategoryCodeNavigation).WithMany(p => p.PartPrimaryToSecondaryCategories)
                .HasForeignKey(d => d.PrimaryCategoryCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PartPrimaryToSecondaryCategories_PrimaryCategoryCode");
        });

        modelBuilder.Entity<PartProperty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Part_Properties");

            entity.Property(e => e.CategoryDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdCategory).HasColumnName("id_Category");
            entity.Property(e => e.IdPropertyType).HasColumnName("id_PropertyType");
            entity.Property(e => e.Note)
                .IsUnicode(false)
                .HasColumnName("note");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.PropertyTypeDescription)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PropertyTypeShortDesc)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Value)
                .HasColumnType("sql_variant")
                .HasColumnName("value");
        });

        modelBuilder.Entity<PartProperty1>(entity =>
        {
            entity.HasKey(e => new { e.Partno, e.IdPropertyType, e.Seqno });

            entity.ToTable("PartProperties");

            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.IdPropertyType).HasColumnName("id_PropertyType");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Note)
                .IsUnicode(false)
                .HasColumnName("note");
            entity.Property(e => e.Value)
                .IsUnicode(false)
                .HasColumnName("value");

            entity.HasOne(d => d.IdPropertyTypeNavigation).WithMany(p => p.PartProperty1s)
                .HasForeignKey(d => d.IdPropertyType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PK_PartProperties_PartPropertyTypes");

            entity.HasOne(d => d.PartnoNavigation).WithMany(p => p.PartProperty1s)
                .HasForeignKey(d => d.Partno)
                .HasConstraintName("PK_PartProperties_inpart");
        });

        modelBuilder.Entity<PartPropertyType>(entity =>
        {
            entity.HasKey(e => e.IdPropertyType);

            entity.HasIndex(e => e.DeviceIdPropertyType, "UC_PartPropertyTypes_Device_id_PropertyType")
                .IsUnique()
                .HasFilter("([Device_id_PropertyType] IS NOT NULL)");

            entity.Property(e => e.IdPropertyType).HasColumnName("id_PropertyType");
            entity.Property(e => e.DeviceIdPropertyType).HasColumnName("Device_id_PropertyType");
            entity.Property(e => e.IdCategory).HasColumnName("id_Category");
            entity.Property(e => e.PropertyTypeDescription)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PropertyTypeShortDesc)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.IdCategoryNavigation).WithMany(p => p.PartPropertyTypes)
                .HasForeignKey(d => d.IdCategory)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PartPropertyTypes__PartPropertyTypeCategories");
        });

        modelBuilder.Entity<PartPropertyTypeCategory>(entity =>
        {
            entity.HasKey(e => e.IdCategory);

            entity.Property(e => e.IdCategory).HasColumnName("id_Category");
            entity.Property(e => e.CategoryDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PartSecondaryCategoriesBackUp>(entity =>
        {
            entity.HasKey(e => new { e.SecondaryCategoryCode, e.Commodity });

            entity.ToTable("PartSecondaryCategories_BackUp");

            entity.Property(e => e.SecondaryCategoryCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Commodity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("commodity");
            entity.Property(e => e.FileStorageGuid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("FileStorageGUID");
            entity.Property(e => e.PrimaryCategoryCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SecondaryCategoryDesc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");

            entity.HasOne(d => d.CommodityNavigation).WithMany(p => p.PartSecondaryCategoriesBackUps)
                .HasForeignKey(d => d.Commodity)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PartSecondaryCategories_incommodity");
        });

        modelBuilder.Entity<PartSecondaryCategoriesBulkSave>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PartSecondaryCategoriesBulkSave");

            entity.Property(e => e.Commodity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("commodity");
            entity.Property(e => e.FileStorageGuid).HasColumnName("FileStorageGUID");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.PrimaryCategoryCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SecondaryCategoryCodeNew)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SecondaryCategoryCode_new");
            entity.Property(e => e.SecondaryCategoryCodeOld)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SecondaryCategoryCode_old");
            entity.Property(e => e.SecondaryCategoryDesc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<PartSecondaryCategory>(entity =>
        {
            entity.HasKey(e => new { e.SecondaryCategoryCode, e.Commodity });

            entity.Property(e => e.SecondaryCategoryCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Commodity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("commodity");
            entity.Property(e => e.FileStorageGuid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("FileStorageGUID");
            entity.Property(e => e.PrimaryCategoryCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SecondaryCategoryDesc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");

            entity.HasOne(d => d.CommodityNavigation).WithMany(p => p.PartSecondaryCategories)
                .HasForeignKey(d => d.Commodity)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_incommodity");
        });

        modelBuilder.Entity<PartSubhireNote>(entity =>
        {
            entity.HasKey(e => e.Partno);

            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.SubhireNotes).IsUnicode(false);

            entity.HasOne(d => d.PartnoNavigation).WithOne(p => p.PartSubhireNote)
                .HasForeignKey<PartSubhireNote>(d => d.Partno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PartSubhireNotes_partno");
        });

        modelBuilder.Entity<PartSubhireVendor>(entity =>
        {
            entity.HasKey(e => new { e.Partno, e.Vendno, e.Siteno });

            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Vendno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("vendno");
            entity.Property(e => e.Siteno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("siteno");
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.DeliveryRate).HasColumnType("money");
            entity.Property(e => e.Notes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("notes");
            entity.Property(e => e.Rate).HasColumnType("money");
            entity.Property(e => e.RateType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ReturnRate).HasColumnType("money");

            entity.HasOne(d => d.CurrencyNavigation).WithMany(p => p.PartSubhireVendors)
                .HasForeignKey(d => d.Currency)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PartSubhireVendors_currency");

            entity.HasOne(d => d.PartnoNavigation).WithMany(p => p.PartSubhireVendors)
                .HasForeignKey(d => d.Partno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PartSubhireVendors_inpart");
        });

        modelBuilder.Entity<PartTagIdea>(entity =>
        {
            entity.HasKey(e => new { e.Partno, e.Tag });

            entity.ToTable(tb => tb.HasTrigger("TR_PartTagIdeas_TrackHistory"));

            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Tag)
                .HasMaxLength(200)
                .IsUnicode(false);

            entity.HasOne(d => d.PartnoNavigation).WithMany(p => p.PartTagIdeas)
                .HasForeignKey(d => d.Partno)
                .HasConstraintName("FK_PartTagIdeas");
        });

        modelBuilder.Entity<PartTagIdeasHistory>(entity =>
        {
            entity.HasKey(e => new { e.Partno, e.Tag, e.ValidFromUtc });

            entity.ToTable("PartTagIdeasHistory");

            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Tag)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ValidFromUtc)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnName("ValidFromUTC");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(128)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.RemovedBy).HasMaxLength(128);
            entity.Property(e => e.ValidToUtc).HasColumnName("ValidToUTC");
        });

        modelBuilder.Entity<PartTransactionsExternal>(entity =>
        {
            entity.HasKey(e => new { e.SourceType, e.SourceKey, e.Partno, e.Bld, e.Date });

            entity.ToTable("PartTransactionsExternal", tb => tb.HasTrigger("TR_PartTransactionsExternal__update_related_to_parts"));

            entity.HasIndex(e => new { e.Bld, e.Partno, e.Date, e.SourceType, e.SourceKey }, "UC_PartTransactionsExternal_by_location").IsUnique();

            entity.HasIndex(e => new { e.Partno, e.Date, e.Bld }, "UC_PartTransactionsExternal_by_part");

            entity.Property(e => e.SourceType)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.SourceKey)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Qty).HasColumnName("qty");

            entity.HasOne(d => d.BldNavigation).WithMany(p => p.PartTransactionsExternals)
                .HasForeignKey(d => d.Bld)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PartTransactionsExternal_Warehouse");

            entity.HasOne(d => d.PartnoNavigation).WithMany(p => p.PartTransactionsExternals)
                .HasForeignKey(d => d.Partno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PartTransactionsExternal_inpart");
        });

        modelBuilder.Entity<PartsDemandsLeavingInFuture>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("parts_demands_leaving_in_future");

            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("engactivecd");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("fromdate");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Src)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("src");
        });

        modelBuilder.Entity<PartsDemandsLeftAlready>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("parts_demands_left_already");

            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("engactivecd");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("fromdate");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Src)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("src");
        });

        modelBuilder.Entity<PartsDemandsLeftEarly>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("parts_demands_left_early");

            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("engactivecd");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("fromdate");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Src)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("src");
        });

        modelBuilder.Entity<PartsImportedFromPlus420250307>(entity =>
        {
            entity.HasKey(e => e.Partno).HasName("PK_PartsImportedFromPlus4");

            entity.ToTable("PartsImportedFromPlus4_20250307");

            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Commmodity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("commmodity");
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.DepthUom).HasColumnName("depth_uom");
            entity.Property(e => e.IdManufacturer).HasColumnName("idManufacturer");
            entity.Property(e => e.ItemId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("item_id");
            entity.Property(e => e.LeadSource)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("lead_source");
            entity.Property(e => e.LengthUom).HasColumnName("length_uom");
            entity.Property(e => e.Locationcd).HasColumnName("locationcd");
            entity.Property(e => e.ModelNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.Package)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("package");
            entity.Property(e => e.Partdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.Projpercent).HasColumnName("projpercent");
            entity.Property(e => e.RentalValueUsd).HasColumnName("RentalValueUSD");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SKU");
            entity.Property(e => e.Source)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("source");
            entity.Property(e => e.UserCreated)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UserModified)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.WidthUom).HasColumnName("width_uom");
        });

        modelBuilder.Entity<PartsListWeightsValue>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("parts_list_weights_values");

            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Partslistcubic).HasColumnName("partslistcubic");
            entity.Property(e => e.Partslistvalue).HasColumnName("partslistvalue");
            entity.Property(e => e.Partslistweight).HasColumnName("partslistweight");
        });

        modelBuilder.Entity<PartsMergeHistory>(entity =>
        {
            entity.HasKey(e => new { e.Partno, e.DateMergedUtc });

            entity.ToTable("PartsMergeHistory");

            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("partno");
            entity.Property(e => e.DateMergedUtc)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnName("DateMergedUTC");
            entity.Property(e => e.IsPartMergedInto).HasColumnName("isPartMergedInto");
        });

        modelBuilder.Entity<PartsOutCountByProject>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Parts_Out_Count_By_Project");

            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Entitydesc)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("entitydesc");
        });

        modelBuilder.Entity<PartsThatHadPricesUpdate>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PartsThatHadPricesUpdate");

            entity.Property(e => e.Partno).HasColumnName("partno");
        });

        modelBuilder.Entity<PartsThatNeedFilesZipped>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PartsThatNeedFilesZipped");

            entity.Property(e => e.Partno).HasColumnName("partno");
        });

        modelBuilder.Entity<PartsToCheckIn>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("parts_to_check_in");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.EstQty).HasColumnName("est_qty");
            entity.Property(e => e.LineNo).HasColumnName("line_no");
            entity.Property(e => e.MfgDesc)
                .HasMaxLength(250)
                .HasColumnName("mfg_desc");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("todate");
        });

        modelBuilder.Entity<PartsWithOpenRepairTicket>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("parts_with_open_repair_ticket");

            entity.Property(e => e.IdActivity).HasColumnName("id_activity");
            entity.Property(e => e.IdTicket).HasColumnName("id_ticket");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<PatTestDevice>(entity =>
        {
            entity.HasKey(e => e.TestDevice);

            entity.Property(e => e.TestDevice)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("test_device");
            entity.Property(e => e.SortOrder).HasColumnName("sort_order");
        });

        modelBuilder.Entity<PatTestResult>(entity =>
        {
            entity.HasKey(e => e.IdPatTestResult);

            entity.Property(e => e.IdPatTestResult).HasColumnName("id_PatTestResult");
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.ProtectionClass).IsUnicode(false);
            entity.Property(e => e.TestDate)
                .HasColumnType("datetime")
                .HasColumnName("test_date");
            entity.Property(e => e.TestDevice)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("test_device");
            entity.Property(e => e.TestResult).HasColumnName("test_result");
            entity.Property(e => e.TestType)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("test_type");
            entity.Property(e => e.TestUserid)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("test_userid");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.VisualInspection).IsUnicode(false);

            entity.HasOne(d => d.TestDeviceNavigation).WithMany(p => p.PatTestResults)
                .HasForeignKey(d => d.TestDevice)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PatTestResults_PatTestDevices");

            entity.HasOne(d => d.TestTypeNavigation).WithMany(p => p.PatTestResults)
                .HasForeignKey(d => d.TestType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PatTestResults_PatTestTypes");
        });

        modelBuilder.Entity<PatTestType>(entity =>
        {
            entity.HasKey(e => e.TestType);

            entity.Property(e => e.TestType)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("test_type");
            entity.Property(e => e.SortOrder).HasColumnName("sort_order");
        });

        modelBuilder.Entity<Patching>(entity =>
        {
            entity.HasKey(e => e.Patching1);

            entity.ToTable("Patching", "SpeakerTest");

            entity.Property(e => e.Patching1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Patching");
        });

        modelBuilder.Entity<PayingPerDiemStatusType>(entity =>
        {
            entity.HasKey(e => e.PayingPerDiemStatusCode).IsClustered(false);

            entity.Property(e => e.PayingPerDiemStatusCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.PayingPerDiemStatusDesc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<PaylocityAddress>(entity =>
        {
            entity.HasKey(e => new { e.PaylocityId, e.Type }).HasName("PK_Paylocity_Address");

            entity.ToTable("PaylocityAddress", "Contact", tb => tb.HasTrigger("TR_Paylocity_sync_UnifiedAddress"));

            entity.Property(e => e.PaylocityId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PaylocityID");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.AddressLine1)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AddressLine2)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AddressLine3)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AddressLine4)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Country)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PostalCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StateProvince)
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.Paylocity).WithMany(p => p.PaylocityAddresses)
                .HasForeignKey(d => d.PaylocityId)
                .HasConstraintName("FK_PaylocityAddress_Contact");
        });

        modelBuilder.Entity<PaylocityContact>(entity =>
        {
            entity.HasKey(e => e.PaylocityId).HasName("PK_Paylocity");

            entity.ToTable("PaylocityContact", "Contact", tb =>
                {
                    tb.HasTrigger("TR_Paylocity_insert_UnifiedContact");
                    tb.HasTrigger("TR_Paylocity_update_UnifiedContact");
                });

            entity.Property(e => e.PaylocityId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PaylocityID");
            entity.Property(e => e.Department)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.JobCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Location)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Organization)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.PictureFilePath).IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Title)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<PaylocityEmail>(entity =>
        {
            entity.HasKey(e => new { e.PaylocityId, e.Type }).HasName("PK_Paylocity_Email");

            entity.ToTable("PaylocityEmail", "Contact", tb => tb.HasTrigger("TR_Paylocity_sync_UnifiedEmail"));

            entity.Property(e => e.PaylocityId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PaylocityID");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.EmailAddress)
                .HasMaxLength(200)
                .IsUnicode(false);

            entity.HasOne(d => d.Paylocity).WithMany(p => p.PaylocityEmails)
                .HasForeignKey(d => d.PaylocityId)
                .HasConstraintName("FK_PaylocityEmail_Contact");

            entity.HasOne(d => d.TypeNavigation).WithMany(p => p.PaylocityEmails)
                .HasForeignKey(d => d.Type)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PaylocityEmail_Type");
        });

        modelBuilder.Entity<PaylocityPhone>(entity =>
        {
            entity.HasKey(e => new { e.PaylocityId, e.Type }).HasName("PK_Paylocity_Phone");

            entity.ToTable("PaylocityPhone", "Contact", tb => tb.HasTrigger("TR_Paylocity_sync_UnifiedPhone"));

            entity.Property(e => e.PaylocityId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PaylocityID");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Paylocity).WithMany(p => p.PaylocityPhones)
                .HasForeignKey(d => d.PaylocityId)
                .HasConstraintName("FK_Paylocity_Phone_Contact");

            entity.HasOne(d => d.TypeNavigation).WithMany(p => p.PaylocityPhones)
                .HasForeignKey(d => d.Type)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Paylocity_Phone_Type");
        });

        modelBuilder.Entity<PeEmployeeDuplicateMap>(entity =>
        {
            entity.HasKey(e => e.OldEmpno);

            entity.ToTable("peEmployeeDuplicateMap");

            entity.Property(e => e.OldEmpno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("old_empno");
            entity.Property(e => e.NewEmpno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("new_empno");

            entity.HasOne(d => d.NewEmpnoNavigation).WithMany(p => p.PeEmployeeDuplicateMapNewEmpnoNavigations)
                .HasForeignKey(d => d.NewEmpno)
                .HasConstraintName("FK_peEmployeeDuplicateMap_peemployee__new_empno");

            entity.HasOne(d => d.OldEmpnoNavigation).WithOne(p => p.PeEmployeeDuplicateMapOldEmpnoNavigation)
                .HasForeignKey<PeEmployeeDuplicateMap>(d => d.OldEmpno)
                .HasConstraintName("FK_peEmployeeDuplicateMap_peemployee__old_empno");
        });

        modelBuilder.Entity<PeEmployeeTraining>(entity =>
        {
            entity.HasKey(e => new { e.Empno, e.Topic, e.TrainingDate });

            entity.ToTable("peEmployeeTraining");

            entity.HasIndex(e => new { e.Topic, e.Empno, e.TrainingDate }, "IX_ByTopic").IsUnique();

            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.Topic)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("topic");
            entity.Property(e => e.TrainingDate)
                .HasColumnType("datetime")
                .HasColumnName("trainingDate");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(128)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("createdBy");
            entity.Property(e => e.DateCreated)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dateCreated");
            entity.Property(e => e.DateModified)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dateModified");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(128)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("modifiedBy");
            entity.Property(e => e.TrainingDateEnd)
                .HasColumnType("datetime")
                .HasColumnName("trainingDateEnd");

            entity.HasOne(d => d.EmpnoNavigation).WithMany(p => p.PeEmployeeTrainings)
                .HasForeignKey(d => d.Empno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_peEmployeeTraining_peemployee");

            entity.HasOne(d => d.TopicNavigation).WithMany(p => p.PeEmployeeTrainings)
                .HasForeignKey(d => d.Topic)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_peEmployeeTraining_peTrainingTopics");
        });

        modelBuilder.Entity<PeEmployeeTrainingTopic>(entity =>
        {
            entity.HasKey(e => new { e.Empno, e.Topic, e.TrainingDateStart });

            entity.ToTable("peEmployeeTrainingTopics");

            entity.HasIndex(e => new { e.Topic, e.Empno, e.TrainingDateStart }, "IX_ByTopic_Date").IsUnique();

            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.Topic)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("topic");
            entity.Property(e => e.TrainingDateStart).HasColumnName("trainingDateStart");
            entity.Property(e => e.Classname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("classname");
            entity.Property(e => e.Instructor)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("instructor");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.TrainingDateEnd).HasColumnName("trainingDateEnd");

            entity.HasOne(d => d.EmpnoNavigation).WithMany(p => p.PeEmployeeTrainingTopics)
                .HasForeignKey(d => d.Empno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_peEmployeeTrainingTopics_peemployee");

            entity.HasOne(d => d.TopicNavigation).WithMany(p => p.PeEmployeeTrainingTopics)
                .HasForeignKey(d => d.Topic)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_peEmployeeTrainingTopics_peTrainingTopics");

            entity.HasOne(d => d.PeTrainingClass).WithMany(p => p.PeEmployeeTrainingTopics)
                .HasForeignKey(d => new { d.Classname, d.Startdate })
                .HasConstraintName("FK_peEmployeeTrainingTopics_peTrainingClass");
        });

        modelBuilder.Entity<PeEmployeeTrainingTopicsBulkSave>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("peEmployeeTrainingTopicsBulkSave");

            entity.Property(e => e.Classname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("classname");
            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.Instructor)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("instructor");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.Startdate).HasColumnName("startdate");
            entity.Property(e => e.Topic)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("topic");
            entity.Property(e => e.TrainingDateEnd).HasColumnName("trainingDateEnd");
            entity.Property(e => e.TrainingDateStart).HasColumnName("trainingDateStart");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<PePayPeriod>(entity =>
        {
            entity.HasKey(e => e.StartDate);

            entity.ToTable("pePayPeriods");

            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.HasOne(d => d.EndDateNavigation).WithMany(p => p.PePayPeriodEndDateNavigations)
                .HasForeignKey(d => d.EndDate)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pePayPeriods_Dates_EndDate");

            entity.HasOne(d => d.StartDateNavigation).WithOne(p => p.PePayPeriodStartDateNavigation)
                .HasForeignKey<PePayPeriod>(d => d.StartDate)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pePayPeriods_Dates_StartDate");
        });

        modelBuilder.Entity<PePayrollRun>(entity =>
        {
            entity.HasKey(e => e.PayrollRunDate);

            entity.ToTable("pePayrollRuns");

            entity.Property(e => e.PayrollRunDate).HasColumnType("datetime");
            entity.Property(e => e.Userid)
                .HasMaxLength(128)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("userid");
        });

        modelBuilder.Entity<PePayrollRunDatum>(entity =>
        {
            entity.HasKey(e => new { e.ValidFrom, e.PeriodStart, e.Empno, e.Entityno, e.Jobtype, e.StartDate, e.PayMultiplier }).IsClustered(false);

            entity.ToTable("pePayrollRunData");

            entity.HasIndex(e => e.ValidFrom, "IX_ValidFrom");

            entity.HasIndex(e => e.ValidTo, "IX_ValidTo");

            entity.HasIndex(e => new { e.ValidTo, e.PeriodStart, e.Empno }, "IX_pePayrollRunData").IsClustered();

            entity.HasIndex(e => new { e.ValidTo, e.Entityno }, "IX_project");

            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
            entity.Property(e => e.PeriodStart).HasColumnType("datetime");
            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("jobtype");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.Payamt).HasColumnName("payamt");
            entity.Property(e => e.Payrate).HasColumnName("payrate");
            entity.Property(e => e.Paytype)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("paytype");
            entity.Property(e => e.ValidTo).HasColumnType("datetime");

            entity.HasOne(d => d.PeriodStartNavigation).WithMany(p => p.PePayrollRunData)
                .HasForeignKey(d => d.PeriodStart)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pePayrollRunData_pePayPeriods");

            entity.HasOne(d => d.ValidFromNavigation).WithMany(p => p.PePayrollRunDatumValidFromNavigations)
                .HasForeignKey(d => d.ValidFrom)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pePayrollRunData_pePayrollRuns__ValidFrom");

            entity.HasOne(d => d.ValidToNavigation).WithMany(p => p.PePayrollRunDatumValidToNavigations)
                .HasForeignKey(d => d.ValidTo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pePayrollRunData_pePayrollRuns__ValidTo");
        });

        modelBuilder.Entity<PeTrainingClass>(entity =>
        {
            entity.HasKey(e => new { e.Classname, e.Startdate });

            entity.ToTable("peTrainingClass");

            entity.Property(e => e.Classname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("classname");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Instructor)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("instructor");
            entity.Property(e => e.Note)
                .HasMaxLength(2000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PeTrainingClassBulkSave>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("peTrainingClassBulkSave");

            entity.Property(e => e.Classname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("classname");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Instructor)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("instructor");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Note)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<PeTrainingClassBulkSave2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("peTrainingClassBulkSave2");

            entity.Property(e => e.ClassnameNew)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("classname_new");
            entity.Property(e => e.ClassnameOld)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("classname_old");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Instructor)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("instructor");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Note)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.StartDateNew)
                .HasColumnType("datetime")
                .HasColumnName("StartDate_new");
            entity.Property(e => e.StartDateOld)
                .HasColumnType("datetime")
                .HasColumnName("StartDate_old");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<PeTrainingClassStudent>(entity =>
        {
            entity.HasKey(e => new { e.Classname, e.Startdate, e.Empno });

            entity.ToTable("peTrainingClassStudents");

            entity.Property(e => e.Classname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("classname");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.FinalGrade)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.FirstTour)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.Notes)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.Termination).HasColumnType("datetime");

            entity.HasOne(d => d.EmpnoNavigation).WithMany(p => p.PeTrainingClassStudents)
                .HasForeignKey(d => d.Empno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_peTrainingClassStudents_peEmployee");

            entity.HasOne(d => d.PeTrainingClass).WithMany(p => p.PeTrainingClassStudents)
                .HasForeignKey(d => new { d.Classname, d.Startdate })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_peTrainingClassStudents_peTrainingClass");
        });

        modelBuilder.Entity<PeTrainingClassStudentsBulkSave>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("peTrainingClassStudentsBulkSave");

            entity.Property(e => e.Classname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("classname");
            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.FinalGrade)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.FirstTour)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Notes)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.Termination).HasColumnType("datetime");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<PeTrainingClassTopic>(entity =>
        {
            entity.HasKey(e => new { e.Classname, e.Startdate, e.Topic });

            entity.ToTable("peTrainingClassTopics");

            entity.Property(e => e.Classname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("classname");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.Topic)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("topic");
            entity.Property(e => e.Notes)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("notes");
            entity.Property(e => e.TopicCovered).HasColumnName("topicCovered");
            entity.Property(e => e.TopicEndDate)
                .HasColumnType("datetime")
                .HasColumnName("topicEndDate");
            entity.Property(e => e.TopicStartDate)
                .HasColumnType("datetime")
                .HasColumnName("topicStartDate");

            entity.HasOne(d => d.TopicNavigation).WithMany(p => p.PeTrainingClassTopics)
                .HasForeignKey(d => d.Topic)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_peTrainingClassTopics_peTrainingTopics");

            entity.HasOne(d => d.PeTrainingClass).WithMany(p => p.PeTrainingClassTopics)
                .HasForeignKey(d => new { d.Classname, d.Startdate })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_peTrainingClassTopics_peTrainingClass");
        });

        modelBuilder.Entity<PeTrainingClassTopicsBulkSave>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("peTrainingClassTopicsBulkSave");

            entity.Property(e => e.Classname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("classname");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Notes)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("notes");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.Topic)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("topic");
            entity.Property(e => e.TopicCovered).HasColumnName("topicCovered");
            entity.Property(e => e.TopicEndDate)
                .HasColumnType("datetime")
                .HasColumnName("topicEndDate");
            entity.Property(e => e.TopicStartDate)
                .HasColumnType("datetime")
                .HasColumnName("topicStartDate");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<PeTrainingTopic>(entity =>
        {
            entity.HasKey(e => e.Topic);

            entity.ToTable("peTrainingTopics");

            entity.Property(e => e.Topic)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("topic");
            entity.Property(e => e.FileStorageGuid).HasColumnName("fileStorageGUID");
            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("jobtype");
            entity.Property(e => e.Note)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.ParentNodeDescription)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.JobtypeNavigation).WithMany(p => p.PeTrainingTopics)
                .HasForeignKey(d => d.Jobtype)
                .HasConstraintName("FK_peTrainingTopics_pejob");

            entity.HasOne(d => d.ParentNodeDescriptionNavigation).WithMany(p => p.PeTrainingTopics)
                .HasForeignKey(d => d.ParentNodeDescription)
                .HasConstraintName("FK_peTrainingTopics_EmployeeTrainingTreeStructureCategories");
        });

        modelBuilder.Entity<PeTrainingTopicsBulkSave>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("peTrainingTopicsBulkSave");

            entity.Property(e => e.FileStorageGuid).HasColumnName("fileStorageGUID");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("jobtype");
            entity.Property(e => e.Note)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.ParentNodeDescription)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.Topic)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("topic");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<PeTrainingTopicsBulkSave2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("peTrainingTopicsBulkSave2");

            entity.Property(e => e.FileStorageGuid).HasColumnName("fileStorageGUID");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("jobtype");
            entity.Property(e => e.Note)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.ParentNodeDescription)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.TopicNew)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("topic_new");
            entity.Property(e => e.TopicOld)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("topic_old");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<PeTrainingTopicsDevice>(entity =>
        {
            entity.HasKey(e => new { e.Topic, e.Partno });

            entity.ToTable("peTrainingTopicsDevices");

            entity.Property(e => e.Topic)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("topic");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("partno");

            entity.HasOne(d => d.TopicNavigation).WithMany(p => p.PeTrainingTopicsDevices)
                .HasForeignKey(d => d.Topic)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_peTrainingTopicsDevices_Topic");
        });

        modelBuilder.Entity<PeTrainingTopicsDevicesBulkSave>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("peTrainingTopicsDevicesBulkSave");

            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Partdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("partno");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.Topic)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("topic");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<Pebank>(entity =>
        {
            entity.HasKey(e => e.Primekey)
                .IsClustered(false)
                .HasFillFactor(90);

            entity.ToTable("pebank");

            entity.HasIndex(e => new { e.Bankno, e.Payperiod }, "pebankpk")
                .IsUnique()
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("primekey");
            entity.Property(e => e.Acctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("acctcd");
            entity.Property(e => e.Bankno)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bankno");
            entity.Property(e => e.Chklineup).HasColumnName("chklineup");
            entity.Property(e => e.Descr)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("descr");
            entity.Property(e => e.Maxcheck).HasColumnName("maxcheck");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Payperiod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("payperiod");
        });

        modelBuilder.Entity<Pebankvw>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("pebankvw");

            entity.Property(e => e.Acctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("acctcd");
            entity.Property(e => e.Bankno)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("bankno");
        });

        modelBuilder.Entity<Pedivision>(entity =>
        {
            entity.HasKey(e => e.Primekey)
                .IsClustered(false)
                .HasFillFactor(90);

            entity.ToTable("pedivision");

            entity.HasIndex(e => e.Division, "pedivisionpk")
                .IsUnique()
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("primekey");
            entity.Property(e => e.Addr1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("addr1");
            entity.Property(e => e.Addr2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("addr2");
            entity.Property(e => e.Addr3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("addr3");
            entity.Property(e => e.City)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("city");
            entity.Property(e => e.Divdesc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("divdesc");
            entity.Property(e => e.Division)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("division");
            entity.Property(e => e.InternalOrg)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("internal_org");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Pool)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pool");
            entity.Property(e => e.Ref1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref1");
            entity.Property(e => e.Ref2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref2");
            entity.Property(e => e.Ref3)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref3");
            entity.Property(e => e.Ref4)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref5");
            entity.Property(e => e.Ref6)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref6");
            entity.Property(e => e.State)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("state");
            entity.Property(e => e.Zip)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zip");

            entity.HasOne(d => d.InternalOrgNavigation).WithMany(p => p.Pedivisions)
                .HasForeignKey(d => d.InternalOrg)
                .HasConstraintName("FK_pedivision_company");
        });

        modelBuilder.Entity<PedivisionVisible>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("pedivision_visible");

            entity.Property(e => e.Addr1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("addr1");
            entity.Property(e => e.Addr2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("addr2");
            entity.Property(e => e.Addr3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("addr3");
            entity.Property(e => e.CanEditEmployee).HasColumnName("can_edit_employee");
            entity.Property(e => e.CanEditPayRate).HasColumnName("can_edit_pay_rate");
            entity.Property(e => e.CanSeePayRate).HasColumnName("can_see_pay_rate");
            entity.Property(e => e.City)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("city");
            entity.Property(e => e.Divdesc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("divdesc");
            entity.Property(e => e.Division)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("division");
            entity.Property(e => e.InternalOrg)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("internal_org");
            entity.Property(e => e.MsreplTranVersion).HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Pool)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("pool");
            entity.Property(e => e.Primekey).HasColumnName("primekey");
            entity.Property(e => e.Ref1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ref1");
            entity.Property(e => e.Ref2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ref2");
            entity.Property(e => e.Ref3)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ref3");
            entity.Property(e => e.Ref4)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ref5");
            entity.Property(e => e.Ref6)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ref6");
            entity.Property(e => e.State)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("state");
            entity.Property(e => e.Zip)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("zip");
        });

        modelBuilder.Entity<Peeeoc>(entity =>
        {
            entity.HasKey(e => e.Primekey)
                .IsClustered(false)
                .HasFillFactor(90);

            entity.ToTable("peeeoc");

            entity.HasIndex(e => e.Eeoccd, "peeeocpk")
                .IsUnique()
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("primekey");
            entity.Property(e => e.Eeoccd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("eeoccd");
            entity.Property(e => e.Eeocdesc)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("eeocdesc");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
        });

        modelBuilder.Entity<PeemVisibleDivision>(entity =>
        {
            entity.HasKey(e => new { e.Userid, e.Division });

            entity.ToTable("peem_visible_divisions", tb => tb.HasTrigger("x_Auditpeem_visible_divisions"));

            entity.Property(e => e.Userid)
                .HasMaxLength(128)
                .HasColumnName("userid");
            entity.Property(e => e.Division)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("division");
            entity.Property(e => e.CanEditEmployee).HasColumnName("can_edit_employee");
            entity.Property(e => e.CanEditPayRate).HasColumnName("can_edit_pay_rate");
            entity.Property(e => e.CanSeePayRate).HasColumnName("can_see_pay_rate");

            entity.HasOne(d => d.DivisionNavigation).WithMany(p => p.PeemVisibleDivisions)
                .HasPrincipalKey(p => p.Division)
                .HasForeignKey(d => d.Division)
                .HasConstraintName("FK_peem_visible_divisions__pedivision");
        });

        modelBuilder.Entity<PeemVisibleDivisionsA>(entity =>
        {
            entity.HasKey(e => e.AtransactionId).IsClustered(false);

            entity.ToTable("peem_visible_divisionsA");

            entity.Property(e => e.AtransactionId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ATransactionID");
            entity.Property(e => e.AdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnName("ADateTime");
            entity.Property(e => e.ArecordAction).HasColumnName("ARecordAction");
            entity.Property(e => e.Atransaction).HasColumnName("ATransaction");
            entity.Property(e => e.AuserId)
                .IsUnicode(false)
                .HasColumnName("AUserID");
            entity.Property(e => e.CanEditEmployee).HasColumnName("can_edit_employee");
            entity.Property(e => e.CanEditPayRate).HasColumnName("can_edit_pay_rate");
            entity.Property(e => e.CanSeePayRate).HasColumnName("can_see_pay_rate");
            entity.Property(e => e.Division)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("division");
            entity.Property(e => e.Userid)
                .HasMaxLength(128)
                .HasColumnName("userid");
        });

        modelBuilder.Entity<PeempReview>(entity =>
        {
            entity.HasKey(e => new { e.Empno, e.Date, e.Rating });

            entity.ToTable("peempReviews");

            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.Rating)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("rating");
            entity.Property(e => e.AttitudeNotes).IsUnicode(false);
            entity.Property(e => e.AttitudeRating)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CommunicationSkillsNotes).IsUnicode(false);
            entity.Property(e => e.CommunicationSkillsRating)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CreationTime).HasColumnType("datetime");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("notes");
            entity.Property(e => e.ResponsibilityNotes).IsUnicode(false);
            entity.Property(e => e.ResponsibilityRating)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SafetyConscientiousnessNotes).IsUnicode(false);
            entity.Property(e => e.SafetyConscientiousnessRating)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TechnicalSkillsNotes).IsUnicode(false);
            entity.Property(e => e.TechnicalSkillsRating)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.UserCreated)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.UserModified)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.HasOne(d => d.EmpnoNavigation).WithMany(p => p.PeempReviews)
                .HasForeignKey(d => d.Empno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_peempReviews_empno");

            entity.HasOne(d => d.EntitynoNavigation).WithMany(p => p.PeempReviews)
                .HasForeignKey(d => d.Entityno)
                .HasConstraintName("FK_peempReviews_entityno");

            entity.HasOne(d => d.UserCreatedNavigation).WithMany(p => p.PeempReviewUserCreatedNavigations)
                .HasForeignKey(d => d.UserCreated)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_peempReviews_UserCreated");

            entity.HasOne(d => d.UserModifiedNavigation).WithMany(p => p.PeempReviewUserModifiedNavigations)
                .HasForeignKey(d => d.UserModified)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_peempReviews_UserModified");
        });

        modelBuilder.Entity<Peempacct>(entity =>
        {
            entity.HasKey(e => e.Primekey)
                .IsClustered(false)
                .HasFillFactor(90);

            entity.ToTable("peempacct");

            entity.HasIndex(e => new { e.Empno, e.Bankid, e.Acctid }, "peempacctpk")
                .IsUnique()
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("primekey");
            entity.Property(e => e.Acctid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("acctid");
            entity.Property(e => e.Bankid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bankid");
            entity.Property(e => e.Bankname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bankname");
            entity.Property(e => e.ChkSavCd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("chk_sav_cd");
            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("empno");
            entity.Property(e => e.Maxamt)
                .HasColumnType("money")
                .HasColumnName("maxamt");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
        });

        modelBuilder.Entity<Peempcompany>(entity =>
        {
            entity.HasKey(e => e.Companyno);

            entity.ToTable("peempcompany");

            entity.Property(e => e.Companyno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("companyno");
            entity.Property(e => e.Addr1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("addr1");
            entity.Property(e => e.Addr2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("addr2");
            entity.Property(e => e.Addr3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("addr3");
            entity.Property(e => e.City)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("city");
            entity.Property(e => e.Companyfax)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("companyfax");
            entity.Property(e => e.Companyname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("companyname");
            entity.Property(e => e.Companyname2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("companyname2");
            entity.Property(e => e.Companynotes)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("companynotes");
            entity.Property(e => e.Companyphone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("companyphone");
            entity.Property(e => e.Companystatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("A")
                .HasColumnName("companystatus");
            entity.Property(e => e.Companywebaddress)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("companywebaddress");
            entity.Property(e => e.Contactcellphone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("contactcellphone");
            entity.Property(e => e.Contactemail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("contactemail");
            entity.Property(e => e.Contactfax)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("contactfax");
            entity.Property(e => e.Contactfirstname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("contactfirstname");
            entity.Property(e => e.Contactlastname)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("contactlastname");
            entity.Property(e => e.Contactofficephone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("contactofficephone");
            entity.Property(e => e.Contactother1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("contactother1");
            entity.Property(e => e.Contactother2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("contactother2");
            entity.Property(e => e.Country)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("country");
            entity.Property(e => e.Defaultproptype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("defaultproptype");
            entity.Property(e => e.State)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("state");
            entity.Property(e => e.Zip)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zip");

            entity.HasOne(d => d.DefaultproptypeNavigation).WithMany(p => p.Peempcompanies)
                .HasForeignKey(d => d.Defaultproptype)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_peempcompany_pjproptype");
        });

        modelBuilder.Entity<Peemployee>(entity =>
        {
            entity.HasKey(e => e.Empno);

            entity.ToTable("peemployee", tb =>
                {
                    tb.HasTrigger("TR_Employee_insert_UnifiedContact");
                    tb.HasTrigger("TR_Employee_update_UnifiedContact");
                    tb.HasTrigger("TR_peemployee_TrackHistory");
                    tb.HasTrigger("TR_peemployee_disallow_duplicate_user_name");
                    tb.HasTrigger("TR_peemployee_prevent_subs_changing_to_regular");
                    tb.HasTrigger("peemployee_1");
                    tb.HasTrigger("x_Auditpeemployee");
                });

            entity.HasIndex(e => e.Ref2, "IX_AbraPayroll");

            entity.HasIndex(e => e.UserName, "IX_user");

            entity.HasIndex(e => e.ISolvedId, "UC_peemployee_iSolvedID")
                .IsUnique()
                .HasFilter("([iSolvedID] IS NOT NULL)");

            entity.HasIndex(e => e.Ssn, "peempidx").HasFillFactor(90);

            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("empno");
            entity.Property(e => e.Acctid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("acctid");
            entity.Property(e => e.Addr1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("addr1");
            entity.Property(e => e.Addr2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("addr2");
            entity.Property(e => e.Addr3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("addr3");
            entity.Property(e => e.Airport)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("airport");
            entity.Property(e => e.AlienExpiredate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("alien_expiredate");
            entity.Property(e => e.Alienno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("alienno");
            entity.Property(e => e.Autodeposit)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("autodeposit");
            entity.Property(e => e.Bankid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bankid");
            entity.Property(e => e.Billgoal).HasColumnName("billgoal");
            entity.Property(e => e.Birthdate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("birthdate");
            entity.Property(e => e.Birthplace)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("birthplace");
            entity.Property(e => e.Cellphone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("cellphone");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("city");
            entity.Property(e => e.Countrycode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("countrycode");
            entity.Property(e => e.CovidvaccineStatusCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("COVIDVaccineStatusCode");
            entity.Property(e => e.Dietary)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("dietary");
            entity.Property(e => e.DriversLicense)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.DriversLicenseExpire)
                .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified))
                .HasColumnType("datetime");
            entity.Property(e => e.DriversLicenseState)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("email");
            entity.Property(e => e.EmergencyName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("emergency_name");
            entity.Property(e => e.EmergencyPhone1)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("emergency_phone1");
            entity.Property(e => e.EmergencyPhone2)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("emergency_phone2");
            entity.Property(e => e.EmergencyRelation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("emergency_relation");
            entity.Property(e => e.EmpDriversLicenseScan)
                .IsUnicode(false)
                .HasColumnName("empDriversLicenseScan");
            entity.Property(e => e.EmpHeadShotFilePath)
                .IsUnicode(false)
                .HasColumnName("empHeadShotFilePath");
            entity.Property(e => e.EmpPassportScanFilePath)
                .IsUnicode(false)
                .HasColumnName("empPassportScanFilePath");
            entity.Property(e => e.Empcompanyno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empcompanyno");
            entity.Property(e => e.Empstatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("A")
                .HasColumnName("empstatus");
            entity.Property(e => e.Exemptions).HasColumnName("exemptions");
            entity.Property(e => e.ExpireDate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("expire_date");
            entity.Property(e => e.Fax)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fax");
            entity.Property(e => e.Filestat)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("filestat");
            entity.Property(e => e.Firstname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("firstname");
            entity.Property(e => e.Frioff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("frioff");
            entity.Property(e => e.Fullname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComputedColumnSql("(CONVERT([varchar](100),isnull(nullif([ManualFullName],''),(isnull(nullif(replace([nickname],'\"',''),''),[firstname])+' ')+[lastname])))", false)
                .HasColumnName("fullname");
            entity.Property(e => e.Gradecd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("gradecd");
            entity.Property(e => e.Groupno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("groupno");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Hiredate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("hiredate");
            entity.Property(e => e.ISolvedId).HasColumnName("iSolvedID");
            entity.Property(e => e.Issuecountry)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("issuecountry");
            entity.Property(e => e.Issuedate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("issuedate");
            entity.Property(e => e.Issueplace)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("issueplace");
            entity.Property(e => e.JobTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastPayRaiseDate).HasColumnType("datetime");
            entity.Property(e => e.Lastgross)
                .HasColumnType("money")
                .HasColumnName("lastgross");
            entity.Property(e => e.Lastname)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("lastname");
            entity.Property(e => e.Lastnet)
                .HasColumnType("money")
                .HasColumnName("lastnet");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("locationcd");
            entity.Property(e => e.ManualFullName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Midname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("midname");
            entity.Property(e => e.Monoff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("monoff");
            entity.Property(e => e.Nationality)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("nationality");
            entity.Property(e => e.Nickname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("nickname");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("notes");
            entity.Property(e => e.OfficeDirectPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OtherEcontact)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OtherEContact");
            entity.Property(e => e.Passportno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("passportno");
            entity.Property(e => e.Phone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("phone");
            entity.Property(e => e.Prev1lastgross)
                .HasColumnType("money")
                .HasColumnName("prev1lastgross");
            entity.Property(e => e.Prev1lastnet)
                .HasColumnType("money")
                .HasColumnName("prev1lastnet");
            entity.Property(e => e.Prev1ptdgross)
                .HasColumnType("money")
                .HasColumnName("prev1ptdgross");
            entity.Property(e => e.Prev1ptdnet)
                .HasColumnType("money")
                .HasColumnName("prev1ptdnet");
            entity.Property(e => e.Prev1qtdgross)
                .HasColumnType("money")
                .HasColumnName("prev1qtdgross");
            entity.Property(e => e.Prev1qtdnet)
                .HasColumnType("money")
                .HasColumnName("prev1qtdnet");
            entity.Property(e => e.Prev1ytdgross)
                .HasColumnType("money")
                .HasColumnName("prev1ytdgross");
            entity.Property(e => e.Prev1ytdnet)
                .HasColumnType("money")
                .HasColumnName("prev1ytdnet");
            entity.Property(e => e.Prev2lastgross)
                .HasColumnType("money")
                .HasColumnName("prev2lastgross");
            entity.Property(e => e.Prev2lastnet)
                .HasColumnType("money")
                .HasColumnName("prev2lastnet");
            entity.Property(e => e.Prev2ptdgross)
                .HasColumnType("money")
                .HasColumnName("prev2ptdgross");
            entity.Property(e => e.Prev2ptdnet)
                .HasColumnType("money")
                .HasColumnName("prev2ptdnet");
            entity.Property(e => e.Prev2qtdgross)
                .HasColumnType("money")
                .HasColumnName("prev2qtdgross");
            entity.Property(e => e.Prev2qtdnet)
                .HasColumnType("money")
                .HasColumnName("prev2qtdnet");
            entity.Property(e => e.Prev2ytdgross)
                .HasColumnType("money")
                .HasColumnName("prev2ytdgross");
            entity.Property(e => e.Prev2ytdnet)
                .HasColumnType("money")
                .HasColumnName("prev2ytdnet");
            entity.Property(e => e.Prev3lastgross)
                .HasColumnType("money")
                .HasColumnName("prev3lastgross");
            entity.Property(e => e.Prev3lastnet)
                .HasColumnType("money")
                .HasColumnName("prev3lastnet");
            entity.Property(e => e.Prev3ptdgross)
                .HasColumnType("money")
                .HasColumnName("prev3ptdgross");
            entity.Property(e => e.Prev3ptdnet)
                .HasColumnType("money")
                .HasColumnName("prev3ptdnet");
            entity.Property(e => e.Prev3qtdgross)
                .HasColumnType("money")
                .HasColumnName("prev3qtdgross");
            entity.Property(e => e.Prev3qtdnet)
                .HasColumnType("money")
                .HasColumnName("prev3qtdnet");
            entity.Property(e => e.Prev3ytdgross)
                .HasColumnType("money")
                .HasColumnName("prev3ytdgross");
            entity.Property(e => e.Prev3ytdnet)
                .HasColumnType("money")
                .HasColumnName("prev3ytdnet");
            entity.Property(e => e.Prev4lastgross)
                .HasColumnType("money")
                .HasColumnName("prev4lastgross");
            entity.Property(e => e.Prev4lastnet)
                .HasColumnType("money")
                .HasColumnName("prev4lastnet");
            entity.Property(e => e.Prev4ptdgross)
                .HasColumnType("money")
                .HasColumnName("prev4ptdgross");
            entity.Property(e => e.Prev4ptdnet)
                .HasColumnType("money")
                .HasColumnName("prev4ptdnet");
            entity.Property(e => e.Prev4qtdgross)
                .HasColumnType("money")
                .HasColumnName("prev4qtdgross");
            entity.Property(e => e.Prev4qtdnet)
                .HasColumnType("money")
                .HasColumnName("prev4qtdnet");
            entity.Property(e => e.Prev4ytdgross)
                .HasColumnType("money")
                .HasColumnName("prev4ytdgross");
            entity.Property(e => e.Prev4ytdnet)
                .HasColumnType("money")
                .HasColumnName("prev4ytdnet");
            entity.Property(e => e.Prev5lastgross)
                .HasColumnType("money")
                .HasColumnName("prev5lastgross");
            entity.Property(e => e.Prev5lastnet)
                .HasColumnType("money")
                .HasColumnName("prev5lastnet");
            entity.Property(e => e.Prev5ptdgross)
                .HasColumnType("money")
                .HasColumnName("prev5ptdgross");
            entity.Property(e => e.Prev5ptdnet)
                .HasColumnType("money")
                .HasColumnName("prev5ptdnet");
            entity.Property(e => e.Prev5qtdgross)
                .HasColumnType("money")
                .HasColumnName("prev5qtdgross");
            entity.Property(e => e.Prev5qtdnet)
                .HasColumnType("money")
                .HasColumnName("prev5qtdnet");
            entity.Property(e => e.Prev5ytdgross)
                .HasColumnType("money")
                .HasColumnName("prev5ytdgross");
            entity.Property(e => e.Prev5ytdnet)
                .HasColumnType("money")
                .HasColumnName("prev5ytdnet");
            entity.Property(e => e.Ptdgross)
                .HasColumnType("money")
                .HasColumnName("ptdgross");
            entity.Property(e => e.Ptdnet)
                .HasColumnType("money")
                .HasColumnName("ptdnet");
            entity.Property(e => e.Qtdgross)
                .HasColumnType("money")
                .HasColumnName("qtdgross");
            entity.Property(e => e.Qtdnet)
                .HasColumnType("money")
                .HasColumnName("qtdnet");
            entity.Property(e => e.Ref1)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref1");
            entity.Property(e => e.Ref2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref2");
            entity.Property(e => e.Ref3)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref3");
            entity.Property(e => e.Ref4)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref5");
            entity.Property(e => e.Satoff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("satoff");
            entity.Property(e => e.SecondEmpPassportIssuePlace)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SecondEmpPassportScanFilePath)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SecondPassportExpirationDate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime");
            entity.Property(e => e.SecondPassportIssueCountry)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SecondPassportIssueDate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime");
            entity.Property(e => e.SecondPassportNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Shiftno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("shiftno");
            entity.Property(e => e.SignatureFilename)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("signature_filename");
            entity.Property(e => e.Smoker)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("smoker");
            entity.Property(e => e.Spouse)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("spouse");
            entity.Property(e => e.Ssn)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ssn");
            entity.Property(e => e.State)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("state");
            entity.Property(e => e.Sunoff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("sunoff");
            entity.Property(e => e.Termcode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("termcode");
            entity.Property(e => e.Termdate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("termdate");
            entity.Property(e => e.Thuroff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("thuroff");
            entity.Property(e => e.Travelrestrictions)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("travelrestrictions");
            entity.Property(e => e.Tueoff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tueoff");
            entity.Property(e => e.UserName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("user_name");
            entity.Property(e => e.Wedoff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wedoff");
            entity.Property(e => e.Ytdgross)
                .HasColumnType("money")
                .HasColumnName("ytdgross");
            entity.Property(e => e.Ytdnet)
                .HasColumnType("money")
                .HasColumnName("ytdnet");
            entity.Property(e => e.Zip)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zip");

            entity.HasOne(d => d.CountrycodeNavigation).WithMany(p => p.Peemployees)
                .HasForeignKey(d => d.Countrycode)
                .HasConstraintName("FK_peemployee_countrycode");

            entity.HasOne(d => d.EmpcompanynoNavigation).WithMany(p => p.Peemployees)
                .HasForeignKey(d => d.Empcompanyno)
                .HasConstraintName("FK_peemployee_peempcompany");

            entity.HasOne(d => d.EmployeeDepartmentNavigation).WithMany(p => p.Peemployees)
                .HasForeignKey(d => d.EmployeeDepartment)
                .HasConstraintName("FK_Employee_Department");

            entity.HasOne(d => d.EmpstatusNavigation).WithMany(p => p.Peemployees)
                .HasForeignKey(d => d.Empstatus)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_peemployee_EmployeeStatus");

            entity.HasOne(d => d.GradecdNavigation).WithMany(p => p.Peemployees)
                .HasForeignKey(d => d.Gradecd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_peemployee_pejob");

            entity.HasOne(d => d.GroupnoNavigation).WithMany(p => p.Peemployees)
                .HasPrincipalKey(p => p.Division)
                .HasForeignKey(d => d.Groupno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_peemployee_pedivision");

            entity.HasOne(d => d.LocationcdNavigation).WithMany(p => p.Peemployees)
                .HasForeignKey(d => d.Locationcd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_peemployee_warehouse");

            entity.HasMany(d => d.Jobtypes).WithMany(p => p.Empnos)
                .UsingEntity<Dictionary<string, object>>(
                    "PeEmployeeJobType",
                    r => r.HasOne<Pejob>().WithMany()
                        .HasForeignKey("Jobtype")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_peEmployeeJobTypes_pejob"),
                    l => l.HasOne<Peemployee>().WithMany()
                        .HasForeignKey("Empno")
                        .HasConstraintName("FK_peEmployeeJobTypes_peemployee"),
                    j =>
                    {
                        j.HasKey("Empno", "Jobtype");
                        j.ToTable("peEmployeeJobTypes");
                        j.HasIndex(new[] { "Jobtype", "Empno" }, "IX_jobtype").IsUnique();
                        j.IndexerProperty<string>("Empno")
                            .HasMaxLength(10)
                            .IsUnicode(false)
                            .HasColumnName("empno");
                        j.IndexerProperty<string>("Jobtype")
                            .HasMaxLength(10)
                            .IsUnicode(false)
                            .HasColumnName("jobtype");
                    });
        });

        modelBuilder.Entity<PeemployeeA>(entity =>
        {
            entity.HasKey(e => e.AtransactionId).IsClustered(false);

            entity.ToTable("peemployeeA");

            entity.Property(e => e.AtransactionId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ATransactionID");
            entity.Property(e => e.Acctid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("acctid");
            entity.Property(e => e.AdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnName("ADateTime");
            entity.Property(e => e.Addr1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("addr1");
            entity.Property(e => e.Addr2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("addr2");
            entity.Property(e => e.Addr3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("addr3");
            entity.Property(e => e.Airport)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("airport");
            entity.Property(e => e.AlienExpiredate)
                .HasColumnType("datetime")
                .HasColumnName("alien_expiredate");
            entity.Property(e => e.Alienno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("alienno");
            entity.Property(e => e.ArecordAction).HasColumnName("ARecordAction");
            entity.Property(e => e.Atransaction).HasColumnName("ATransaction");
            entity.Property(e => e.AuserId)
                .IsUnicode(false)
                .HasColumnName("AUserID");
            entity.Property(e => e.Autodeposit)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("autodeposit");
            entity.Property(e => e.Bankid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("bankid");
            entity.Property(e => e.Billgoal).HasColumnName("billgoal");
            entity.Property(e => e.Birthdate)
                .HasColumnType("datetime")
                .HasColumnName("birthdate");
            entity.Property(e => e.Birthplace)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("birthplace");
            entity.Property(e => e.Cellphone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cellphone");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("city");
            entity.Property(e => e.Countrycode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("countrycode");
            entity.Property(e => e.CovidvaccineStatusCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("COVIDVaccineStatusCode");
            entity.Property(e => e.Dietary)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dietary");
            entity.Property(e => e.DriversLicense)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DriversLicenseExpire).HasColumnType("datetime");
            entity.Property(e => e.DriversLicenseState)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.EmergencyName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("emergency_name");
            entity.Property(e => e.EmergencyPhone1)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("emergency_phone1");
            entity.Property(e => e.EmergencyPhone2)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("emergency_phone2");
            entity.Property(e => e.EmergencyRelation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("emergency_relation");
            entity.Property(e => e.EmpDriversLicenseScan)
                .IsUnicode(false)
                .HasColumnName("empDriversLicenseScan");
            entity.Property(e => e.EmpHeadShotFilePath)
                .IsUnicode(false)
                .HasColumnName("empHeadShotFilePath");
            entity.Property(e => e.EmpPassportScanFilePath)
                .IsUnicode(false)
                .HasColumnName("empPassportScanFilePath");
            entity.Property(e => e.Empcompanyno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empcompanyno");
            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.Empstatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("empstatus");
            entity.Property(e => e.Exemptions).HasColumnName("exemptions");
            entity.Property(e => e.ExpireDate)
                .HasColumnType("datetime")
                .HasColumnName("expire_date");
            entity.Property(e => e.Fax)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("fax");
            entity.Property(e => e.Filestat)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("filestat");
            entity.Property(e => e.Firstname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("firstname");
            entity.Property(e => e.Frioff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("frioff");
            entity.Property(e => e.Gradecd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("gradecd");
            entity.Property(e => e.Groupno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("groupno");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.Hiredate)
                .HasColumnType("datetime")
                .HasColumnName("hiredate");
            entity.Property(e => e.ISolvedId).HasColumnName("iSolvedID");
            entity.Property(e => e.Issuecountry)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("issuecountry");
            entity.Property(e => e.Issuedate)
                .HasColumnType("datetime")
                .HasColumnName("issuedate");
            entity.Property(e => e.Issueplace)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("issueplace");
            entity.Property(e => e.JobTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastPayRaiseDate).HasColumnType("datetime");
            entity.Property(e => e.Lastgross)
                .HasColumnType("money")
                .HasColumnName("lastgross");
            entity.Property(e => e.Lastname)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("lastname");
            entity.Property(e => e.Lastnet)
                .HasColumnType("money")
                .HasColumnName("lastnet");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("locationcd");
            entity.Property(e => e.ManualFullName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Midname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("midname");
            entity.Property(e => e.Monoff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("monoff");
            entity.Property(e => e.Nationality)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nationality");
            entity.Property(e => e.Nickname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("nickname");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("notes");
            entity.Property(e => e.OfficeDirectPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OtherEcontact)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OtherEContact");
            entity.Property(e => e.Passportno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("passportno");
            entity.Property(e => e.Phone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("phone");
            entity.Property(e => e.Prev1lastgross)
                .HasColumnType("money")
                .HasColumnName("prev1lastgross");
            entity.Property(e => e.Prev1lastnet)
                .HasColumnType("money")
                .HasColumnName("prev1lastnet");
            entity.Property(e => e.Prev1ptdgross)
                .HasColumnType("money")
                .HasColumnName("prev1ptdgross");
            entity.Property(e => e.Prev1ptdnet)
                .HasColumnType("money")
                .HasColumnName("prev1ptdnet");
            entity.Property(e => e.Prev1qtdgross)
                .HasColumnType("money")
                .HasColumnName("prev1qtdgross");
            entity.Property(e => e.Prev1qtdnet)
                .HasColumnType("money")
                .HasColumnName("prev1qtdnet");
            entity.Property(e => e.Prev1ytdgross)
                .HasColumnType("money")
                .HasColumnName("prev1ytdgross");
            entity.Property(e => e.Prev1ytdnet)
                .HasColumnType("money")
                .HasColumnName("prev1ytdnet");
            entity.Property(e => e.Prev2lastgross)
                .HasColumnType("money")
                .HasColumnName("prev2lastgross");
            entity.Property(e => e.Prev2lastnet)
                .HasColumnType("money")
                .HasColumnName("prev2lastnet");
            entity.Property(e => e.Prev2ptdgross)
                .HasColumnType("money")
                .HasColumnName("prev2ptdgross");
            entity.Property(e => e.Prev2ptdnet)
                .HasColumnType("money")
                .HasColumnName("prev2ptdnet");
            entity.Property(e => e.Prev2qtdgross)
                .HasColumnType("money")
                .HasColumnName("prev2qtdgross");
            entity.Property(e => e.Prev2qtdnet)
                .HasColumnType("money")
                .HasColumnName("prev2qtdnet");
            entity.Property(e => e.Prev2ytdgross)
                .HasColumnType("money")
                .HasColumnName("prev2ytdgross");
            entity.Property(e => e.Prev2ytdnet)
                .HasColumnType("money")
                .HasColumnName("prev2ytdnet");
            entity.Property(e => e.Prev3lastgross)
                .HasColumnType("money")
                .HasColumnName("prev3lastgross");
            entity.Property(e => e.Prev3lastnet)
                .HasColumnType("money")
                .HasColumnName("prev3lastnet");
            entity.Property(e => e.Prev3ptdgross)
                .HasColumnType("money")
                .HasColumnName("prev3ptdgross");
            entity.Property(e => e.Prev3ptdnet)
                .HasColumnType("money")
                .HasColumnName("prev3ptdnet");
            entity.Property(e => e.Prev3qtdgross)
                .HasColumnType("money")
                .HasColumnName("prev3qtdgross");
            entity.Property(e => e.Prev3qtdnet)
                .HasColumnType("money")
                .HasColumnName("prev3qtdnet");
            entity.Property(e => e.Prev3ytdgross)
                .HasColumnType("money")
                .HasColumnName("prev3ytdgross");
            entity.Property(e => e.Prev3ytdnet)
                .HasColumnType("money")
                .HasColumnName("prev3ytdnet");
            entity.Property(e => e.Prev4lastgross)
                .HasColumnType("money")
                .HasColumnName("prev4lastgross");
            entity.Property(e => e.Prev4lastnet)
                .HasColumnType("money")
                .HasColumnName("prev4lastnet");
            entity.Property(e => e.Prev4ptdgross)
                .HasColumnType("money")
                .HasColumnName("prev4ptdgross");
            entity.Property(e => e.Prev4ptdnet)
                .HasColumnType("money")
                .HasColumnName("prev4ptdnet");
            entity.Property(e => e.Prev4qtdgross)
                .HasColumnType("money")
                .HasColumnName("prev4qtdgross");
            entity.Property(e => e.Prev4qtdnet)
                .HasColumnType("money")
                .HasColumnName("prev4qtdnet");
            entity.Property(e => e.Prev4ytdgross)
                .HasColumnType("money")
                .HasColumnName("prev4ytdgross");
            entity.Property(e => e.Prev4ytdnet)
                .HasColumnType("money")
                .HasColumnName("prev4ytdnet");
            entity.Property(e => e.Prev5lastgross)
                .HasColumnType("money")
                .HasColumnName("prev5lastgross");
            entity.Property(e => e.Prev5lastnet)
                .HasColumnType("money")
                .HasColumnName("prev5lastnet");
            entity.Property(e => e.Prev5ptdgross)
                .HasColumnType("money")
                .HasColumnName("prev5ptdgross");
            entity.Property(e => e.Prev5ptdnet)
                .HasColumnType("money")
                .HasColumnName("prev5ptdnet");
            entity.Property(e => e.Prev5qtdgross)
                .HasColumnType("money")
                .HasColumnName("prev5qtdgross");
            entity.Property(e => e.Prev5qtdnet)
                .HasColumnType("money")
                .HasColumnName("prev5qtdnet");
            entity.Property(e => e.Prev5ytdgross)
                .HasColumnType("money")
                .HasColumnName("prev5ytdgross");
            entity.Property(e => e.Prev5ytdnet)
                .HasColumnType("money")
                .HasColumnName("prev5ytdnet");
            entity.Property(e => e.Ptdgross)
                .HasColumnType("money")
                .HasColumnName("ptdgross");
            entity.Property(e => e.Ptdnet)
                .HasColumnType("money")
                .HasColumnName("ptdnet");
            entity.Property(e => e.Qtdgross)
                .HasColumnType("money")
                .HasColumnName("qtdgross");
            entity.Property(e => e.Qtdnet)
                .HasColumnType("money")
                .HasColumnName("qtdnet");
            entity.Property(e => e.Ref1)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ref1");
            entity.Property(e => e.Ref2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ref2");
            entity.Property(e => e.Ref3)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ref3");
            entity.Property(e => e.Ref4)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ref5");
            entity.Property(e => e.Satoff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("satoff");
            entity.Property(e => e.SecondEmpPassportIssuePlace)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SecondEmpPassportScanFilePath)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SecondPassportExpirationDate).HasColumnType("datetime");
            entity.Property(e => e.SecondPassportIssueCountry)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SecondPassportIssueDate).HasColumnType("datetime");
            entity.Property(e => e.SecondPassportNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Shiftno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("shiftno");
            entity.Property(e => e.SignatureFilename)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("signature_filename");
            entity.Property(e => e.Smoker)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("smoker");
            entity.Property(e => e.Spouse)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("spouse");
            entity.Property(e => e.Ssn)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ssn");
            entity.Property(e => e.State)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("state");
            entity.Property(e => e.Sunoff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sunoff");
            entity.Property(e => e.Termcode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("termcode");
            entity.Property(e => e.Termdate)
                .HasColumnType("datetime")
                .HasColumnName("termdate");
            entity.Property(e => e.Thuroff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("thuroff");
            entity.Property(e => e.Travelrestrictions)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("travelrestrictions");
            entity.Property(e => e.Tueoff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("tueoff");
            entity.Property(e => e.UserName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("user_name");
            entity.Property(e => e.Wedoff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("wedoff");
            entity.Property(e => e.Ytdgross)
                .HasColumnType("money")
                .HasColumnName("ytdgross");
            entity.Property(e => e.Ytdnet)
                .HasColumnType("money")
                .HasColumnName("ytdnet");
            entity.Property(e => e.Zip)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("zip");
        });

        modelBuilder.Entity<PeemployeeHistory>(entity =>
        {
            entity.HasKey(e => new { e.Empno, e.ValidFromUtc });

            entity.ToTable("peemployeeHistory");

            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.ValidFromUtc)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnName("ValidFromUTC");
            entity.Property(e => e.Acctid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("acctid");
            entity.Property(e => e.Addr1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("addr1");
            entity.Property(e => e.Addr2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("addr2");
            entity.Property(e => e.Addr3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("addr3");
            entity.Property(e => e.Airport)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("airport");
            entity.Property(e => e.AlienExpiredate)
                .HasColumnType("datetime")
                .HasColumnName("alien_expiredate");
            entity.Property(e => e.Alienno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("alienno");
            entity.Property(e => e.Autodeposit)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("autodeposit");
            entity.Property(e => e.Bankid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("bankid");
            entity.Property(e => e.Billgoal).HasColumnName("billgoal");
            entity.Property(e => e.Birthdate)
                .HasColumnType("datetime")
                .HasColumnName("birthdate");
            entity.Property(e => e.Birthplace)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("birthplace");
            entity.Property(e => e.Cellphone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cellphone");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("city");
            entity.Property(e => e.Countrycode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("countrycode");
            entity.Property(e => e.CovidvaccineStatusCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("COVIDVaccineStatusCode");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(128)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.Dietary)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dietary");
            entity.Property(e => e.DriversLicense)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DriversLicenseExpire).HasColumnType("datetime");
            entity.Property(e => e.DriversLicenseState)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.EmergencyName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("emergency_name");
            entity.Property(e => e.EmergencyPhone1)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("emergency_phone1");
            entity.Property(e => e.EmergencyPhone2)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("emergency_phone2");
            entity.Property(e => e.EmergencyRelation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("emergency_relation");
            entity.Property(e => e.EmpDriversLicenseScan)
                .IsUnicode(false)
                .HasColumnName("empDriversLicenseScan");
            entity.Property(e => e.EmpHeadShotFilePath)
                .IsUnicode(false)
                .HasColumnName("empHeadShotFilePath");
            entity.Property(e => e.EmpPassportScanFilePath)
                .IsUnicode(false)
                .HasColumnName("empPassportScanFilePath");
            entity.Property(e => e.Empcompanyno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empcompanyno");
            entity.Property(e => e.Empstatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("empstatus");
            entity.Property(e => e.Exemptions).HasColumnName("exemptions");
            entity.Property(e => e.ExpireDate)
                .HasColumnType("datetime")
                .HasColumnName("expire_date");
            entity.Property(e => e.Fax)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("fax");
            entity.Property(e => e.Filestat)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("filestat");
            entity.Property(e => e.Firstname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("firstname");
            entity.Property(e => e.Frioff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("frioff");
            entity.Property(e => e.Gradecd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("gradecd");
            entity.Property(e => e.Groupno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("groupno");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.Hiredate)
                .HasColumnType("datetime")
                .HasColumnName("hiredate");
            entity.Property(e => e.ISolvedId).HasColumnName("iSolvedID");
            entity.Property(e => e.Issuecountry)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("issuecountry");
            entity.Property(e => e.Issuedate)
                .HasColumnType("datetime")
                .HasColumnName("issuedate");
            entity.Property(e => e.Issueplace)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("issueplace");
            entity.Property(e => e.JobTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastPayRaiseDate).HasColumnType("datetime");
            entity.Property(e => e.Lastgross)
                .HasColumnType("money")
                .HasColumnName("lastgross");
            entity.Property(e => e.Lastname)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("lastname");
            entity.Property(e => e.Lastnet)
                .HasColumnType("money")
                .HasColumnName("lastnet");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("locationcd");
            entity.Property(e => e.Midname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("midname");
            entity.Property(e => e.Monoff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("monoff");
            entity.Property(e => e.Nationality)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nationality");
            entity.Property(e => e.Nickname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("nickname");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("notes");
            entity.Property(e => e.OfficeDirectPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OtherEcontact)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OtherEContact");
            entity.Property(e => e.Passportno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("passportno");
            entity.Property(e => e.Phone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("phone");
            entity.Property(e => e.Prev1lastgross)
                .HasColumnType("money")
                .HasColumnName("prev1lastgross");
            entity.Property(e => e.Prev1lastnet)
                .HasColumnType("money")
                .HasColumnName("prev1lastnet");
            entity.Property(e => e.Prev1ptdgross)
                .HasColumnType("money")
                .HasColumnName("prev1ptdgross");
            entity.Property(e => e.Prev1ptdnet)
                .HasColumnType("money")
                .HasColumnName("prev1ptdnet");
            entity.Property(e => e.Prev1qtdgross)
                .HasColumnType("money")
                .HasColumnName("prev1qtdgross");
            entity.Property(e => e.Prev1qtdnet)
                .HasColumnType("money")
                .HasColumnName("prev1qtdnet");
            entity.Property(e => e.Prev1ytdgross)
                .HasColumnType("money")
                .HasColumnName("prev1ytdgross");
            entity.Property(e => e.Prev1ytdnet)
                .HasColumnType("money")
                .HasColumnName("prev1ytdnet");
            entity.Property(e => e.Prev2lastgross)
                .HasColumnType("money")
                .HasColumnName("prev2lastgross");
            entity.Property(e => e.Prev2lastnet)
                .HasColumnType("money")
                .HasColumnName("prev2lastnet");
            entity.Property(e => e.Prev2ptdgross)
                .HasColumnType("money")
                .HasColumnName("prev2ptdgross");
            entity.Property(e => e.Prev2ptdnet)
                .HasColumnType("money")
                .HasColumnName("prev2ptdnet");
            entity.Property(e => e.Prev2qtdgross)
                .HasColumnType("money")
                .HasColumnName("prev2qtdgross");
            entity.Property(e => e.Prev2qtdnet)
                .HasColumnType("money")
                .HasColumnName("prev2qtdnet");
            entity.Property(e => e.Prev2ytdgross)
                .HasColumnType("money")
                .HasColumnName("prev2ytdgross");
            entity.Property(e => e.Prev2ytdnet)
                .HasColumnType("money")
                .HasColumnName("prev2ytdnet");
            entity.Property(e => e.Prev3lastgross)
                .HasColumnType("money")
                .HasColumnName("prev3lastgross");
            entity.Property(e => e.Prev3lastnet)
                .HasColumnType("money")
                .HasColumnName("prev3lastnet");
            entity.Property(e => e.Prev3ptdgross)
                .HasColumnType("money")
                .HasColumnName("prev3ptdgross");
            entity.Property(e => e.Prev3ptdnet)
                .HasColumnType("money")
                .HasColumnName("prev3ptdnet");
            entity.Property(e => e.Prev3qtdgross)
                .HasColumnType("money")
                .HasColumnName("prev3qtdgross");
            entity.Property(e => e.Prev3qtdnet)
                .HasColumnType("money")
                .HasColumnName("prev3qtdnet");
            entity.Property(e => e.Prev3ytdgross)
                .HasColumnType("money")
                .HasColumnName("prev3ytdgross");
            entity.Property(e => e.Prev3ytdnet)
                .HasColumnType("money")
                .HasColumnName("prev3ytdnet");
            entity.Property(e => e.Prev4lastgross)
                .HasColumnType("money")
                .HasColumnName("prev4lastgross");
            entity.Property(e => e.Prev4lastnet)
                .HasColumnType("money")
                .HasColumnName("prev4lastnet");
            entity.Property(e => e.Prev4ptdgross)
                .HasColumnType("money")
                .HasColumnName("prev4ptdgross");
            entity.Property(e => e.Prev4ptdnet)
                .HasColumnType("money")
                .HasColumnName("prev4ptdnet");
            entity.Property(e => e.Prev4qtdgross)
                .HasColumnType("money")
                .HasColumnName("prev4qtdgross");
            entity.Property(e => e.Prev4qtdnet)
                .HasColumnType("money")
                .HasColumnName("prev4qtdnet");
            entity.Property(e => e.Prev4ytdgross)
                .HasColumnType("money")
                .HasColumnName("prev4ytdgross");
            entity.Property(e => e.Prev4ytdnet)
                .HasColumnType("money")
                .HasColumnName("prev4ytdnet");
            entity.Property(e => e.Prev5lastgross)
                .HasColumnType("money")
                .HasColumnName("prev5lastgross");
            entity.Property(e => e.Prev5lastnet)
                .HasColumnType("money")
                .HasColumnName("prev5lastnet");
            entity.Property(e => e.Prev5ptdgross)
                .HasColumnType("money")
                .HasColumnName("prev5ptdgross");
            entity.Property(e => e.Prev5ptdnet)
                .HasColumnType("money")
                .HasColumnName("prev5ptdnet");
            entity.Property(e => e.Prev5qtdgross)
                .HasColumnType("money")
                .HasColumnName("prev5qtdgross");
            entity.Property(e => e.Prev5qtdnet)
                .HasColumnType("money")
                .HasColumnName("prev5qtdnet");
            entity.Property(e => e.Prev5ytdgross)
                .HasColumnType("money")
                .HasColumnName("prev5ytdgross");
            entity.Property(e => e.Prev5ytdnet)
                .HasColumnType("money")
                .HasColumnName("prev5ytdnet");
            entity.Property(e => e.Ptdgross)
                .HasColumnType("money")
                .HasColumnName("ptdgross");
            entity.Property(e => e.Ptdnet)
                .HasColumnType("money")
                .HasColumnName("ptdnet");
            entity.Property(e => e.Qtdgross)
                .HasColumnType("money")
                .HasColumnName("qtdgross");
            entity.Property(e => e.Qtdnet)
                .HasColumnType("money")
                .HasColumnName("qtdnet");
            entity.Property(e => e.Ref1)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ref1");
            entity.Property(e => e.Ref2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ref2");
            entity.Property(e => e.Ref3)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ref3");
            entity.Property(e => e.Ref4)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ref5");
            entity.Property(e => e.RemovedBy).HasMaxLength(128);
            entity.Property(e => e.Satoff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("satoff");
            entity.Property(e => e.Shiftno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("shiftno");
            entity.Property(e => e.SignatureFilename)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("signature_filename");
            entity.Property(e => e.Smoker)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("smoker");
            entity.Property(e => e.Spouse)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("spouse");
            entity.Property(e => e.Ssn)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ssn");
            entity.Property(e => e.State)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("state");
            entity.Property(e => e.Sunoff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sunoff");
            entity.Property(e => e.Termcode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("termcode");
            entity.Property(e => e.Termdate)
                .HasColumnType("datetime")
                .HasColumnName("termdate");
            entity.Property(e => e.Thuroff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("thuroff");
            entity.Property(e => e.Travelrestrictions)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("travelrestrictions");
            entity.Property(e => e.Tueoff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("tueoff");
            entity.Property(e => e.UserName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("user_name");
            entity.Property(e => e.ValidToUtc).HasColumnName("ValidToUTC");
            entity.Property(e => e.Wedoff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("wedoff");
            entity.Property(e => e.Ytdgross)
                .HasColumnType("money")
                .HasColumnName("ytdgross");
            entity.Property(e => e.Ytdnet)
                .HasColumnType("money")
                .HasColumnName("ytdnet");
            entity.Property(e => e.Zip)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("zip");
        });

        modelBuilder.Entity<PeemployeeHistoryTemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("peemployeeHistory_Temp");

            entity.Property(e => e.Acctid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("acctid");
            entity.Property(e => e.Addr1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("addr1");
            entity.Property(e => e.Addr2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("addr2");
            entity.Property(e => e.Addr3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("addr3");
            entity.Property(e => e.Airport)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("airport");
            entity.Property(e => e.AlienExpiredate)
                .HasColumnType("datetime")
                .HasColumnName("alien_expiredate");
            entity.Property(e => e.Alienno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("alienno");
            entity.Property(e => e.Autodeposit)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("autodeposit");
            entity.Property(e => e.Bankid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("bankid");
            entity.Property(e => e.Billgoal).HasColumnName("billgoal");
            entity.Property(e => e.Birthdate)
                .HasColumnType("datetime")
                .HasColumnName("birthdate");
            entity.Property(e => e.Birthplace)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("birthplace");
            entity.Property(e => e.Cellphone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cellphone");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("city");
            entity.Property(e => e.Countrycode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("countrycode");
            entity.Property(e => e.CovidvaccineStatusCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("COVIDVaccineStatusCode");
            entity.Property(e => e.CreatedBy).HasMaxLength(128);
            entity.Property(e => e.Dietary)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dietary");
            entity.Property(e => e.DriversLicense)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DriversLicenseExpire).HasColumnType("datetime");
            entity.Property(e => e.DriversLicenseState)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.EmergencyName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("emergency_name");
            entity.Property(e => e.EmergencyPhone1)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("emergency_phone1");
            entity.Property(e => e.EmergencyPhone2)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("emergency_phone2");
            entity.Property(e => e.EmergencyRelation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("emergency_relation");
            entity.Property(e => e.EmpDriversLicenseScan)
                .IsUnicode(false)
                .HasColumnName("empDriversLicenseScan");
            entity.Property(e => e.EmpHeadShotFilePath)
                .IsUnicode(false)
                .HasColumnName("empHeadShotFilePath");
            entity.Property(e => e.EmpPassportScanFilePath)
                .IsUnicode(false)
                .HasColumnName("empPassportScanFilePath");
            entity.Property(e => e.Empcompanyno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empcompanyno");
            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.Empstatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("empstatus");
            entity.Property(e => e.Exemptions).HasColumnName("exemptions");
            entity.Property(e => e.ExpireDate)
                .HasColumnType("datetime")
                .HasColumnName("expire_date");
            entity.Property(e => e.Fax)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("fax");
            entity.Property(e => e.Filestat)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("filestat");
            entity.Property(e => e.Firstname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("firstname");
            entity.Property(e => e.Frioff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("frioff");
            entity.Property(e => e.Gradecd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("gradecd");
            entity.Property(e => e.Groupno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("groupno");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.Hiredate)
                .HasColumnType("datetime")
                .HasColumnName("hiredate");
            entity.Property(e => e.ISolvedId).HasColumnName("iSolvedID");
            entity.Property(e => e.Issuecountry)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("issuecountry");
            entity.Property(e => e.Issuedate)
                .HasColumnType("datetime")
                .HasColumnName("issuedate");
            entity.Property(e => e.Issueplace)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("issueplace");
            entity.Property(e => e.JobTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastPayRaiseDate).HasColumnType("datetime");
            entity.Property(e => e.Lastgross)
                .HasColumnType("money")
                .HasColumnName("lastgross");
            entity.Property(e => e.Lastname)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("lastname");
            entity.Property(e => e.Lastnet)
                .HasColumnType("money")
                .HasColumnName("lastnet");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("locationcd");
            entity.Property(e => e.Midname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("midname");
            entity.Property(e => e.Monoff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("monoff");
            entity.Property(e => e.Nationality)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nationality");
            entity.Property(e => e.Nickname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("nickname");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("notes");
            entity.Property(e => e.OfficeDirectPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OtherEcontact)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OtherEContact");
            entity.Property(e => e.Passportno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("passportno");
            entity.Property(e => e.Phone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("phone");
            entity.Property(e => e.Prev1lastgross)
                .HasColumnType("money")
                .HasColumnName("prev1lastgross");
            entity.Property(e => e.Prev1lastnet)
                .HasColumnType("money")
                .HasColumnName("prev1lastnet");
            entity.Property(e => e.Prev1ptdgross)
                .HasColumnType("money")
                .HasColumnName("prev1ptdgross");
            entity.Property(e => e.Prev1ptdnet)
                .HasColumnType("money")
                .HasColumnName("prev1ptdnet");
            entity.Property(e => e.Prev1qtdgross)
                .HasColumnType("money")
                .HasColumnName("prev1qtdgross");
            entity.Property(e => e.Prev1qtdnet)
                .HasColumnType("money")
                .HasColumnName("prev1qtdnet");
            entity.Property(e => e.Prev1ytdgross)
                .HasColumnType("money")
                .HasColumnName("prev1ytdgross");
            entity.Property(e => e.Prev1ytdnet)
                .HasColumnType("money")
                .HasColumnName("prev1ytdnet");
            entity.Property(e => e.Prev2lastgross)
                .HasColumnType("money")
                .HasColumnName("prev2lastgross");
            entity.Property(e => e.Prev2lastnet)
                .HasColumnType("money")
                .HasColumnName("prev2lastnet");
            entity.Property(e => e.Prev2ptdgross)
                .HasColumnType("money")
                .HasColumnName("prev2ptdgross");
            entity.Property(e => e.Prev2ptdnet)
                .HasColumnType("money")
                .HasColumnName("prev2ptdnet");
            entity.Property(e => e.Prev2qtdgross)
                .HasColumnType("money")
                .HasColumnName("prev2qtdgross");
            entity.Property(e => e.Prev2qtdnet)
                .HasColumnType("money")
                .HasColumnName("prev2qtdnet");
            entity.Property(e => e.Prev2ytdgross)
                .HasColumnType("money")
                .HasColumnName("prev2ytdgross");
            entity.Property(e => e.Prev2ytdnet)
                .HasColumnType("money")
                .HasColumnName("prev2ytdnet");
            entity.Property(e => e.Prev3lastgross)
                .HasColumnType("money")
                .HasColumnName("prev3lastgross");
            entity.Property(e => e.Prev3lastnet)
                .HasColumnType("money")
                .HasColumnName("prev3lastnet");
            entity.Property(e => e.Prev3ptdgross)
                .HasColumnType("money")
                .HasColumnName("prev3ptdgross");
            entity.Property(e => e.Prev3ptdnet)
                .HasColumnType("money")
                .HasColumnName("prev3ptdnet");
            entity.Property(e => e.Prev3qtdgross)
                .HasColumnType("money")
                .HasColumnName("prev3qtdgross");
            entity.Property(e => e.Prev3qtdnet)
                .HasColumnType("money")
                .HasColumnName("prev3qtdnet");
            entity.Property(e => e.Prev3ytdgross)
                .HasColumnType("money")
                .HasColumnName("prev3ytdgross");
            entity.Property(e => e.Prev3ytdnet)
                .HasColumnType("money")
                .HasColumnName("prev3ytdnet");
            entity.Property(e => e.Prev4lastgross)
                .HasColumnType("money")
                .HasColumnName("prev4lastgross");
            entity.Property(e => e.Prev4lastnet)
                .HasColumnType("money")
                .HasColumnName("prev4lastnet");
            entity.Property(e => e.Prev4ptdgross)
                .HasColumnType("money")
                .HasColumnName("prev4ptdgross");
            entity.Property(e => e.Prev4ptdnet)
                .HasColumnType("money")
                .HasColumnName("prev4ptdnet");
            entity.Property(e => e.Prev4qtdgross)
                .HasColumnType("money")
                .HasColumnName("prev4qtdgross");
            entity.Property(e => e.Prev4qtdnet)
                .HasColumnType("money")
                .HasColumnName("prev4qtdnet");
            entity.Property(e => e.Prev4ytdgross)
                .HasColumnType("money")
                .HasColumnName("prev4ytdgross");
            entity.Property(e => e.Prev4ytdnet)
                .HasColumnType("money")
                .HasColumnName("prev4ytdnet");
            entity.Property(e => e.Prev5lastgross)
                .HasColumnType("money")
                .HasColumnName("prev5lastgross");
            entity.Property(e => e.Prev5lastnet)
                .HasColumnType("money")
                .HasColumnName("prev5lastnet");
            entity.Property(e => e.Prev5ptdgross)
                .HasColumnType("money")
                .HasColumnName("prev5ptdgross");
            entity.Property(e => e.Prev5ptdnet)
                .HasColumnType("money")
                .HasColumnName("prev5ptdnet");
            entity.Property(e => e.Prev5qtdgross)
                .HasColumnType("money")
                .HasColumnName("prev5qtdgross");
            entity.Property(e => e.Prev5qtdnet)
                .HasColumnType("money")
                .HasColumnName("prev5qtdnet");
            entity.Property(e => e.Prev5ytdgross)
                .HasColumnType("money")
                .HasColumnName("prev5ytdgross");
            entity.Property(e => e.Prev5ytdnet)
                .HasColumnType("money")
                .HasColumnName("prev5ytdnet");
            entity.Property(e => e.Ptdgross)
                .HasColumnType("money")
                .HasColumnName("ptdgross");
            entity.Property(e => e.Ptdnet)
                .HasColumnType("money")
                .HasColumnName("ptdnet");
            entity.Property(e => e.Qtdgross)
                .HasColumnType("money")
                .HasColumnName("qtdgross");
            entity.Property(e => e.Qtdnet)
                .HasColumnType("money")
                .HasColumnName("qtdnet");
            entity.Property(e => e.Ref1)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ref1");
            entity.Property(e => e.Ref2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ref2");
            entity.Property(e => e.Ref3)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ref3");
            entity.Property(e => e.Ref4)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ref5");
            entity.Property(e => e.RemovedBy).HasMaxLength(128);
            entity.Property(e => e.Satoff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("satoff");
            entity.Property(e => e.Shiftno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("shiftno");
            entity.Property(e => e.SignatureFilename)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("signature_filename");
            entity.Property(e => e.Smoker)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("smoker");
            entity.Property(e => e.Spouse)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("spouse");
            entity.Property(e => e.Ssn)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ssn");
            entity.Property(e => e.State)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("state");
            entity.Property(e => e.Sunoff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sunoff");
            entity.Property(e => e.Termcode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("termcode");
            entity.Property(e => e.Termdate)
                .HasColumnType("datetime")
                .HasColumnName("termdate");
            entity.Property(e => e.Thuroff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("thuroff");
            entity.Property(e => e.Travelrestrictions)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("travelrestrictions");
            entity.Property(e => e.Tueoff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("tueoff");
            entity.Property(e => e.UserName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("user_name");
            entity.Property(e => e.ValidFromUtc).HasColumnName("ValidFromUTC");
            entity.Property(e => e.ValidToUtc).HasColumnName("ValidToUTC");
            entity.Property(e => e.Wedoff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("wedoff");
            entity.Property(e => e.Ytdgross)
                .HasColumnType("money")
                .HasColumnName("ytdgross");
            entity.Property(e => e.Ytdnet)
                .HasColumnType("money")
                .HasColumnName("ytdnet");
            entity.Property(e => e.Zip)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("zip");
        });

        modelBuilder.Entity<PeemployeeRef4>(entity =>
        {
            entity.HasKey(e => e.Ref4);

            entity.ToTable("peemployee_ref4");

            entity.Property(e => e.Ref4)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ref4");
            entity.Property(e => e.IncludeInAbraPayroll).HasDefaultValue(true);
            entity.Property(e => e.IncludeInJobCosting)
                .HasDefaultValue(true)
                .HasColumnName("include_in_job_costing");
            entity.Property(e => e.Ref4description)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ref4description");
        });

        modelBuilder.Entity<PeemployeeTemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("peemployee_Temp");

            entity.Property(e => e.Acctid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("acctid");
            entity.Property(e => e.Addr1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("addr1");
            entity.Property(e => e.Addr2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("addr2");
            entity.Property(e => e.Addr3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("addr3");
            entity.Property(e => e.Airport)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("airport");
            entity.Property(e => e.AlienExpiredate)
                .HasColumnType("datetime")
                .HasColumnName("alien_expiredate");
            entity.Property(e => e.Alienno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("alienno");
            entity.Property(e => e.Autodeposit)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("autodeposit");
            entity.Property(e => e.Bankid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("bankid");
            entity.Property(e => e.Billgoal).HasColumnName("billgoal");
            entity.Property(e => e.Birthdate)
                .HasColumnType("datetime")
                .HasColumnName("birthdate");
            entity.Property(e => e.Birthplace)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("birthplace");
            entity.Property(e => e.Cellphone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cellphone");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("city");
            entity.Property(e => e.Countrycode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("countrycode");
            entity.Property(e => e.CovidvaccineStatusCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("COVIDVaccineStatusCode");
            entity.Property(e => e.Dietary)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dietary");
            entity.Property(e => e.DriversLicense)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DriversLicenseExpire).HasColumnType("datetime");
            entity.Property(e => e.DriversLicenseState)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.EmergencyName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("emergency_name");
            entity.Property(e => e.EmergencyPhone1)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("emergency_phone1");
            entity.Property(e => e.EmergencyPhone2)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("emergency_phone2");
            entity.Property(e => e.EmergencyRelation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("emergency_relation");
            entity.Property(e => e.EmpDriversLicenseScan)
                .IsUnicode(false)
                .HasColumnName("empDriversLicenseScan");
            entity.Property(e => e.EmpHeadShotFilePath)
                .IsUnicode(false)
                .HasColumnName("empHeadShotFilePath");
            entity.Property(e => e.EmpPassportScanFilePath)
                .IsUnicode(false)
                .HasColumnName("empPassportScanFilePath");
            entity.Property(e => e.Empcompanyno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empcompanyno");
            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.Empstatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("empstatus");
            entity.Property(e => e.Exemptions).HasColumnName("exemptions");
            entity.Property(e => e.ExpireDate)
                .HasColumnType("datetime")
                .HasColumnName("expire_date");
            entity.Property(e => e.Fax)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("fax");
            entity.Property(e => e.Filestat)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("filestat");
            entity.Property(e => e.Firstname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("firstname");
            entity.Property(e => e.Frioff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("frioff");
            entity.Property(e => e.Gradecd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("gradecd");
            entity.Property(e => e.Groupno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("groupno");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.Hiredate)
                .HasColumnType("datetime")
                .HasColumnName("hiredate");
            entity.Property(e => e.ISolvedId).HasColumnName("iSolvedID");
            entity.Property(e => e.Issuecountry)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("issuecountry");
            entity.Property(e => e.Issuedate)
                .HasColumnType("datetime")
                .HasColumnName("issuedate");
            entity.Property(e => e.Issueplace)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("issueplace");
            entity.Property(e => e.JobTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastPayRaiseDate).HasColumnType("datetime");
            entity.Property(e => e.Lastgross)
                .HasColumnType("money")
                .HasColumnName("lastgross");
            entity.Property(e => e.Lastname)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("lastname");
            entity.Property(e => e.Lastnet)
                .HasColumnType("money")
                .HasColumnName("lastnet");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("locationcd");
            entity.Property(e => e.ManualFullName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Midname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("midname");
            entity.Property(e => e.Monoff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("monoff");
            entity.Property(e => e.Nationality)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nationality");
            entity.Property(e => e.Nickname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("nickname");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("notes");
            entity.Property(e => e.OfficeDirectPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OtherEcontact)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OtherEContact");
            entity.Property(e => e.Passportno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("passportno");
            entity.Property(e => e.Phone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("phone");
            entity.Property(e => e.Prev1lastgross)
                .HasColumnType("money")
                .HasColumnName("prev1lastgross");
            entity.Property(e => e.Prev1lastnet)
                .HasColumnType("money")
                .HasColumnName("prev1lastnet");
            entity.Property(e => e.Prev1ptdgross)
                .HasColumnType("money")
                .HasColumnName("prev1ptdgross");
            entity.Property(e => e.Prev1ptdnet)
                .HasColumnType("money")
                .HasColumnName("prev1ptdnet");
            entity.Property(e => e.Prev1qtdgross)
                .HasColumnType("money")
                .HasColumnName("prev1qtdgross");
            entity.Property(e => e.Prev1qtdnet)
                .HasColumnType("money")
                .HasColumnName("prev1qtdnet");
            entity.Property(e => e.Prev1ytdgross)
                .HasColumnType("money")
                .HasColumnName("prev1ytdgross");
            entity.Property(e => e.Prev1ytdnet)
                .HasColumnType("money")
                .HasColumnName("prev1ytdnet");
            entity.Property(e => e.Prev2lastgross)
                .HasColumnType("money")
                .HasColumnName("prev2lastgross");
            entity.Property(e => e.Prev2lastnet)
                .HasColumnType("money")
                .HasColumnName("prev2lastnet");
            entity.Property(e => e.Prev2ptdgross)
                .HasColumnType("money")
                .HasColumnName("prev2ptdgross");
            entity.Property(e => e.Prev2ptdnet)
                .HasColumnType("money")
                .HasColumnName("prev2ptdnet");
            entity.Property(e => e.Prev2qtdgross)
                .HasColumnType("money")
                .HasColumnName("prev2qtdgross");
            entity.Property(e => e.Prev2qtdnet)
                .HasColumnType("money")
                .HasColumnName("prev2qtdnet");
            entity.Property(e => e.Prev2ytdgross)
                .HasColumnType("money")
                .HasColumnName("prev2ytdgross");
            entity.Property(e => e.Prev2ytdnet)
                .HasColumnType("money")
                .HasColumnName("prev2ytdnet");
            entity.Property(e => e.Prev3lastgross)
                .HasColumnType("money")
                .HasColumnName("prev3lastgross");
            entity.Property(e => e.Prev3lastnet)
                .HasColumnType("money")
                .HasColumnName("prev3lastnet");
            entity.Property(e => e.Prev3ptdgross)
                .HasColumnType("money")
                .HasColumnName("prev3ptdgross");
            entity.Property(e => e.Prev3ptdnet)
                .HasColumnType("money")
                .HasColumnName("prev3ptdnet");
            entity.Property(e => e.Prev3qtdgross)
                .HasColumnType("money")
                .HasColumnName("prev3qtdgross");
            entity.Property(e => e.Prev3qtdnet)
                .HasColumnType("money")
                .HasColumnName("prev3qtdnet");
            entity.Property(e => e.Prev3ytdgross)
                .HasColumnType("money")
                .HasColumnName("prev3ytdgross");
            entity.Property(e => e.Prev3ytdnet)
                .HasColumnType("money")
                .HasColumnName("prev3ytdnet");
            entity.Property(e => e.Prev4lastgross)
                .HasColumnType("money")
                .HasColumnName("prev4lastgross");
            entity.Property(e => e.Prev4lastnet)
                .HasColumnType("money")
                .HasColumnName("prev4lastnet");
            entity.Property(e => e.Prev4ptdgross)
                .HasColumnType("money")
                .HasColumnName("prev4ptdgross");
            entity.Property(e => e.Prev4ptdnet)
                .HasColumnType("money")
                .HasColumnName("prev4ptdnet");
            entity.Property(e => e.Prev4qtdgross)
                .HasColumnType("money")
                .HasColumnName("prev4qtdgross");
            entity.Property(e => e.Prev4qtdnet)
                .HasColumnType("money")
                .HasColumnName("prev4qtdnet");
            entity.Property(e => e.Prev4ytdgross)
                .HasColumnType("money")
                .HasColumnName("prev4ytdgross");
            entity.Property(e => e.Prev4ytdnet)
                .HasColumnType("money")
                .HasColumnName("prev4ytdnet");
            entity.Property(e => e.Prev5lastgross)
                .HasColumnType("money")
                .HasColumnName("prev5lastgross");
            entity.Property(e => e.Prev5lastnet)
                .HasColumnType("money")
                .HasColumnName("prev5lastnet");
            entity.Property(e => e.Prev5ptdgross)
                .HasColumnType("money")
                .HasColumnName("prev5ptdgross");
            entity.Property(e => e.Prev5ptdnet)
                .HasColumnType("money")
                .HasColumnName("prev5ptdnet");
            entity.Property(e => e.Prev5qtdgross)
                .HasColumnType("money")
                .HasColumnName("prev5qtdgross");
            entity.Property(e => e.Prev5qtdnet)
                .HasColumnType("money")
                .HasColumnName("prev5qtdnet");
            entity.Property(e => e.Prev5ytdgross)
                .HasColumnType("money")
                .HasColumnName("prev5ytdgross");
            entity.Property(e => e.Prev5ytdnet)
                .HasColumnType("money")
                .HasColumnName("prev5ytdnet");
            entity.Property(e => e.Ptdgross)
                .HasColumnType("money")
                .HasColumnName("ptdgross");
            entity.Property(e => e.Ptdnet)
                .HasColumnType("money")
                .HasColumnName("ptdnet");
            entity.Property(e => e.Qtdgross)
                .HasColumnType("money")
                .HasColumnName("qtdgross");
            entity.Property(e => e.Qtdnet)
                .HasColumnType("money")
                .HasColumnName("qtdnet");
            entity.Property(e => e.Ref1)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ref1");
            entity.Property(e => e.Ref2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ref2");
            entity.Property(e => e.Ref3)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ref3");
            entity.Property(e => e.Ref4)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ref5");
            entity.Property(e => e.Satoff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("satoff");
            entity.Property(e => e.SecondEmpPassportIssuePlace)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SecondEmpPassportScanFilePath)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SecondPassportExpirationDate).HasColumnType("datetime");
            entity.Property(e => e.SecondPassportIssueCountry)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SecondPassportIssueDate).HasColumnType("datetime");
            entity.Property(e => e.SecondPassportNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Shiftno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("shiftno");
            entity.Property(e => e.SignatureFilename)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("signature_filename");
            entity.Property(e => e.Smoker)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("smoker");
            entity.Property(e => e.Spouse)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("spouse");
            entity.Property(e => e.Ssn)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ssn");
            entity.Property(e => e.State)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("state");
            entity.Property(e => e.Sunoff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sunoff");
            entity.Property(e => e.Termcode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("termcode");
            entity.Property(e => e.Termdate)
                .HasColumnType("datetime")
                .HasColumnName("termdate");
            entity.Property(e => e.Thuroff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("thuroff");
            entity.Property(e => e.Travelrestrictions)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("travelrestrictions");
            entity.Property(e => e.Tueoff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("tueoff");
            entity.Property(e => e.UserName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("user_name");
            entity.Property(e => e.Wedoff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("wedoff");
            entity.Property(e => e.Ytdgross)
                .HasColumnType("money")
                .HasColumnName("ytdgross");
            entity.Property(e => e.Ytdnet)
                .HasColumnType("money")
                .HasColumnName("ytdnet");
            entity.Property(e => e.Zip)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("zip");
        });

        modelBuilder.Entity<Peempmisc>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("peempmisc");

            entity.Property(e => e.Airport)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("airport");
            entity.Property(e => e.AlienExpiredate)
                .HasColumnType("datetime")
                .HasColumnName("alien_expiredate");
            entity.Property(e => e.Alienno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("alienno");
            entity.Property(e => e.Birthdate)
                .HasColumnType("datetime")
                .HasColumnName("birthdate");
            entity.Property(e => e.Birthplace)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("birthplace");
            entity.Property(e => e.Cellphone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cellphone");
            entity.Property(e => e.Dietary)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dietary");
            entity.Property(e => e.DriversLicense)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DriversLicenseExpire).HasColumnType("datetime");
            entity.Property(e => e.DriversLicenseState)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.EmergencyName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("emergency_name");
            entity.Property(e => e.EmergencyPhone1)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("emergency_phone1");
            entity.Property(e => e.EmergencyPhone2)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("emergency_phone2");
            entity.Property(e => e.EmergencyRelation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("emergency_relation");
            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.ExpireDate)
                .HasColumnType("datetime")
                .HasColumnName("expire_date");
            entity.Property(e => e.Fax)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("fax");
            entity.Property(e => e.Issuecountry)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("issuecountry");
            entity.Property(e => e.Issuedate)
                .HasColumnType("datetime")
                .HasColumnName("issuedate");
            entity.Property(e => e.Issueplace)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("issueplace");
            entity.Property(e => e.Nationality)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nationality");
            entity.Property(e => e.Nickname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("nickname");
            entity.Property(e => e.OtherEcontact)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OtherEContact");
            entity.Property(e => e.Passportno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("passportno");
            entity.Property(e => e.Smoker)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("smoker");
            entity.Property(e => e.Spouse)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("spouse");
            entity.Property(e => e.Travelrestrictions)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("travelrestrictions");
        });

        modelBuilder.Entity<Peempnote>(entity =>
        {
            entity.HasKey(e => e.Primekey)
                .IsClustered(false)
                .HasFillFactor(90);

            entity.ToTable("peempnotes");

            entity.HasIndex(e => new { e.Empno, e.NoteNo }, "peempnotespk")
                .IsUnique()
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("primekey");
            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("empno");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
            entity.Property(e => e.NoteNo).HasColumnName("note_no");
            entity.Property(e => e.NoteText)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("note_text");
        });

        modelBuilder.Entity<Peemptran>(entity =>
        {
            entity.HasKey(e => e.Primekey).HasFillFactor(90);

            entity.ToTable("peemptran");

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("primekey");
            entity.Property(e => e.Acctid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("acctid");
            entity.Property(e => e.Addr1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("addr1");
            entity.Property(e => e.Addr2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("addr2");
            entity.Property(e => e.Addr3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("addr3");
            entity.Property(e => e.Autodeposit)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("autodeposit");
            entity.Property(e => e.Bankid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bankid");
            entity.Property(e => e.Bankno)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bankno");
            entity.Property(e => e.Billgoal).HasColumnName("billgoal");
            entity.Property(e => e.Billrate).HasColumnName("billrate");
            entity.Property(e => e.City)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("city");
            entity.Property(e => e.Credacctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("credacctcd");
            entity.Property(e => e.Distacctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("distacctcd");
            entity.Property(e => e.Distind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("distind");
            entity.Property(e => e.Distrate).HasColumnName("distrate");
            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("empno");
            entity.Property(e => e.Empstatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("empstatus");
            entity.Property(e => e.Enddate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Eref1)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("eref1");
            entity.Property(e => e.Eref2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("eref2");
            entity.Property(e => e.Eref3)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("eref3");
            entity.Property(e => e.Eref4)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("eref4");
            entity.Property(e => e.Eref5)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("eref5");
            entity.Property(e => e.Exemptions).HasColumnName("exemptions");
            entity.Property(e => e.Filestat)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("filestat");
            entity.Property(e => e.Firstname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("firstname");
            entity.Property(e => e.Frioff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("frioff");
            entity.Property(e => e.Gradecd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("gradecd");
            entity.Property(e => e.Groupno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("groupno");
            entity.Property(e => e.Guarantee)
                .HasColumnType("money")
                .HasColumnName("guarantee");
            entity.Property(e => e.Hiredate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("hiredate");
            entity.Property(e => e.Lastname)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("lastname");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("locationcd");
            entity.Property(e => e.Midname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("midname");
            entity.Property(e => e.Monoff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("monoff");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Othour).HasColumnName("othour");
            entity.Property(e => e.Otrate).HasColumnName("otrate");
            entity.Property(e => e.Payacctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("payacctcd");
            entity.Property(e => e.Paydesc)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("paydesc");
            entity.Property(e => e.Payperiod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("payperiod");
            entity.Property(e => e.Payrate).HasColumnName("payrate");
            entity.Property(e => e.Payseq).HasColumnName("payseq");
            entity.Property(e => e.Paytype)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("paytype");
            entity.Property(e => e.Phone)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("phone");
            entity.Property(e => e.Posno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("posno");
            entity.Property(e => e.Pref1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pref1");
            entity.Property(e => e.Pref2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pref2");
            entity.Property(e => e.Pref3)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pref3");
            entity.Property(e => e.Pref4)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pref4");
            entity.Property(e => e.Pref5)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pref5");
            entity.Property(e => e.Pref6)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("pref6");
            entity.Property(e => e.Satoff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("satoff");
            entity.Property(e => e.Shiftno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("shiftno");
            entity.Property(e => e.Ssn)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ssn");
            entity.Property(e => e.Startdate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.State)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("state");
            entity.Property(e => e.Sunoff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("sunoff");
            entity.Property(e => e.Thuroff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("thuroff");
            entity.Property(e => e.Transcd)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("transcd");
            entity.Property(e => e.Transdate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("transdate");
            entity.Property(e => e.Tueoff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("tueoff");
            entity.Property(e => e.Updtime)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("updtime");
            entity.Property(e => e.Wedoff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("wedoff");
            entity.Property(e => e.Zip)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zip");
        });

        modelBuilder.Entity<Pejob>(entity =>
        {
            entity.HasKey(e => e.Jobtype);

            entity.ToTable("pejob", tb => tb.HasTrigger("TR_pejob_alert_about_new_crewbidvalues"));

            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("jobtype");
            entity.Property(e => e.AbraHourlyPayCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.AbraHourlyPayCodePrefix)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Avgamt)
                .HasDefaultValue(0.0)
                .HasColumnName("avgamt");
            entity.Property(e => e.Beginamt).HasColumnName("beginamt");
            entity.Property(e => e.Endamt).HasColumnName("endamt");
            entity.Property(e => e.Enddate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Hours).HasColumnName("hours");
            entity.Property(e => e.ISolvedDepartment)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("11")
                .HasColumnName("iSolvedDepartment");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasColumnName("isActive");
            entity.Property(e => e.IsEngineerInCharge).HasColumnName("isEngineerInCharge");
            entity.Property(e => e.IsGigMe).HasColumnName("isGigMe");
            entity.Property(e => e.IsPaid).HasDefaultValue(true);
            entity.Property(e => e.IsQualification)
                .HasDefaultValue(true)
                .HasColumnName("is_qualification");
            entity.Property(e => e.IsVehicle).HasColumnName("isVehicle");
            entity.Property(e => e.Jobdesc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("jobdesc");
            entity.Property(e => e.OvertimeHours).HasDefaultValue(12.0);
            entity.Property(e => e.Ref1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref1");
            entity.Property(e => e.Ref2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref2");
            entity.Property(e => e.Ref3)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref3");
            entity.Property(e => e.Ref4)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref5");
            entity.Property(e => e.Ref6)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref6");
            entity.Property(e => e.Startdate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("startdate");

            entity.HasOne(d => d.AbraHourlyPayCodeNavigation).WithMany(p => p.Pejobs)
                .HasForeignKey(d => d.AbraHourlyPayCode)
                .HasConstraintName("FK_pejob_AbraHourlyCode");

            entity.HasOne(d => d.AbraHourlyPayCodePrefixNavigation).WithMany(p => p.Pejobs)
                .HasForeignKey(d => d.AbraHourlyPayCodePrefix)
                .HasConstraintName("FK_pepay_AbraHourlyPayCodePrefix");
        });

        modelBuilder.Entity<PejobTranslation>(entity =>
        {
            entity.HasKey(e => new { e.Jobtype, e.IdLanguage });

            entity.ToTable("pejobTranslations");

            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("jobtype");
            entity.Property(e => e.IdLanguage).HasColumnName("id_language");
            entity.Property(e => e.Jobdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("jobdesc");

            entity.HasOne(d => d.IdLanguageNavigation).WithMany(p => p.PejobTranslations)
                .HasForeignKey(d => d.IdLanguage)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pejobTranslations_xlat_languages");

            entity.HasOne(d => d.JobtypeNavigation).WithMany(p => p.PejobTranslations)
                .HasForeignKey(d => d.Jobtype)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pejobTranslations_pejob");
        });

        modelBuilder.Entity<Pejobsub>(entity =>
        {
            entity.HasKey(e => e.Primekey)
                .IsClustered(false)
                .HasFillFactor(90);

            entity.ToTable("pejobsub");

            entity.HasIndex(e => new { e.Jobtype, e.Startdate }, "pejobsubpk")
                .IsUnique()
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("primekey");
            entity.Property(e => e.Avgamt).HasColumnName("avgamt");
            entity.Property(e => e.Beginamt).HasColumnName("beginamt");
            entity.Property(e => e.Endamt).HasColumnName("endamt");
            entity.Property(e => e.Enddate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("jobtype");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Startdate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("startdate");
        });

        modelBuilder.Entity<Pemilitary>(entity =>
        {
            entity.HasKey(e => e.Primekey)
                .IsClustered(false)
                .HasFillFactor(90);

            entity.ToTable("pemilitary");

            entity.HasIndex(e => e.Militarycd, "pemilitarypk")
                .IsUnique()
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("primekey");
            entity.Property(e => e.Militarycd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("militarycd");
            entity.Property(e => e.Militarydesc)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("militarydesc");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
        });

        modelBuilder.Entity<Pepay>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("pepay");

            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.Paydesc)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("paydesc");
            entity.Property(e => e.Payperiod)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("payperiod");
            entity.Property(e => e.Payrate).HasColumnName("payrate");
            entity.Property(e => e.Paytype)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("paytype");
        });

        modelBuilder.Entity<Pepayjobtypevw>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("pepayjobtypevw");

            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("jobtype");
            entity.Property(e => e.Payrate).HasColumnName("payrate");
            entity.Property(e => e.Paytype)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("paytype");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
        });

        modelBuilder.Entity<Peposition>(entity =>
        {
            entity.HasKey(e => e.Primekey)
                .IsClustered(false)
                .HasFillFactor(90);

            entity.ToTable("peposition");

            entity.HasIndex(e => e.Posno, "pepositionpk")
                .IsUnique()
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("primekey");
            entity.Property(e => e.Deptno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("deptno");
            entity.Property(e => e.Division)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("division");
            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("empno");
            entity.Property(e => e.Enddate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("jobtype");
            entity.Property(e => e.Mgrposno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("mgrposno");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Posdesc)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("posdesc");
            entity.Property(e => e.Posno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("posno");
            entity.Property(e => e.Ref1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref1");
            entity.Property(e => e.Ref2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref2");
            entity.Property(e => e.Ref3)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref3");
            entity.Property(e => e.Ref4)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref5");
            entity.Property(e => e.Ref6)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref6");
            entity.Property(e => e.Startdate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("startdate");
        });

        modelBuilder.Entity<PerDiemPayer>(entity =>
        {
            entity.HasKey(e => e.Payer).IsClustered(false);

            entity.ToTable("PerDiemPayer");

            entity.Property(e => e.Payer)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("payer");
            entity.Property(e => e.Sortorder).HasColumnName("sortorder");
        });

        modelBuilder.Entity<PermissionGroup>(entity =>
        {
            entity.HasKey(e => e.PermissionName).HasName("PK_PermissionGroup_permission_name");

            entity.ToTable("PermissionGroup", "ApiGateway");

            entity.Property(e => e.PermissionName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("permission_name");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("description");
            entity.Property(e => e.Parent)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("parent");
            entity.Property(e => e.Type)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("type");
        });

        modelBuilder.Entity<Person>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Person");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Name)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PersonInfo>(entity =>
        {
            entity.HasKey(e => e.PersonId);

            entity.ToTable("PERSON_INFO", "IFS");

            entity.Property(e => e.PersonId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PERSON_ID");
            entity.Property(e => e.Alias)
                .HasMaxLength(100)
                .HasColumnName("ALIAS");
            entity.Property(e => e.AlternativeName)
                .HasMaxLength(100)
                .HasColumnName("ALTERNATIVE_NAME");
            entity.Property(e => e.BirthName)
                .HasMaxLength(100)
                .HasColumnName("BIRTH_NAME");
            entity.Property(e => e.BlockedForUse)
                .HasMaxLength(20)
                .HasColumnName("BLOCKED_FOR_USE");
            entity.Property(e => e.BlockedForUseSupplier)
                .HasMaxLength(20)
                .HasColumnName("BLOCKED_FOR_USE_SUPPLIER");
            entity.Property(e => e.ContactCustomers)
                .HasMaxLength(4000)
                .HasColumnName("CONTACT_CUSTOMERS");
            entity.Property(e => e.ContactSuppliers)
                .HasMaxLength(4000)
                .HasColumnName("CONTACT_SUPPLIERS");
            entity.Property(e => e.Country)
                .HasMaxLength(2)
                .HasColumnName("COUNTRY");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("CREATION_DATE");
            entity.Property(e => e.CustomerContact)
                .HasMaxLength(20)
                .HasColumnName("CUSTOMER_CONTACT");
            entity.Property(e => e.DefaultDomain)
                .HasMaxLength(5)
                .HasColumnName("DEFAULT_DOMAIN");
            entity.Property(e => e.DefaultLanguage)
                .HasMaxLength(2)
                .HasColumnName("DEFAULT_LANGUAGE");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .HasColumnName("FIRST_NAME");
            entity.Property(e => e.Inactive)
                .HasMaxLength(5)
                .HasColumnName("INACTIVE");
            entity.Property(e => e.Initials)
                .HasMaxLength(100)
                .HasColumnName("INITIALS");
            entity.Property(e => e.JobTitle)
                .HasMaxLength(100)
                .HasColumnName("JOB_TITLE");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .HasColumnName("LAST_NAME");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .HasColumnName("MIDDLE_NAME");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .HasColumnName("NAME");
            entity.Property(e => e.Party)
                .HasMaxLength(20)
                .HasColumnName("PARTY");
            entity.Property(e => e.PartyType)
                .HasMaxLength(20)
                .HasColumnName("PARTY_TYPE");
            entity.Property(e => e.PictureId).HasColumnName("PICTURE_ID");
            entity.Property(e => e.PictureThumbnailId).HasColumnName("PICTURE_THUMBNAIL_ID");
            entity.Property(e => e.Prefix)
                .HasMaxLength(100)
                .HasColumnName("PREFIX");
            entity.Property(e => e.Protected)
                .HasMaxLength(5)
                .HasColumnName("PROTECTED");
            entity.Property(e => e.Rowkey)
                .HasMaxLength(50)
                .HasColumnName("ROWKEY");
            entity.Property(e => e.Rowstate)
                .HasMaxLength(20)
                .HasColumnName("ROWSTATE");
            entity.Property(e => e.Rowversion)
                .HasColumnType("datetime")
                .HasColumnName("ROWVERSION");
            entity.Property(e => e.SupplierContact)
                .HasMaxLength(20)
                .HasColumnName("SUPPLIER_CONTACT");
            entity.Property(e => e.Title)
                .HasMaxLength(100)
                .HasColumnName("TITLE");
            entity.Property(e => e.UpdateConBlockForCrmObjs).HasColumnName("UPDATE_CON_BLOCK_FOR_CRM_OBJS");
            entity.Property(e => e.UserId)
                .HasMaxLength(30)
                .HasColumnName("USER_ID");
            entity.Property(e => e.WarrantyRep)
                .HasMaxLength(5)
                .HasColumnName("WARRANTY_REP");
        });

        modelBuilder.Entity<PersonInfoTab>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PERSON_INFO_TAB", "IFS");

            entity.Property(e => e.Alias).HasColumnName("ALIAS");
            entity.Property(e => e.AlternativeName).HasColumnName("ALTERNATIVE_NAME");
            entity.Property(e => e.BirthName).HasColumnName("BIRTH_NAME");
            entity.Property(e => e.BlockedForUse).HasColumnName("BLOCKED_FOR_USE");
            entity.Property(e => e.BlockedForUseSupplier).HasColumnName("BLOCKED_FOR_USE_SUPPLIER");
            entity.Property(e => e.Country).HasColumnName("COUNTRY");
            entity.Property(e => e.CreationDate).HasColumnName("CREATION_DATE");
            entity.Property(e => e.CustomerContact).HasColumnName("CUSTOMER_CONTACT");
            entity.Property(e => e.DefaultDomain).HasColumnName("DEFAULT_DOMAIN");
            entity.Property(e => e.DefaultLanguage).HasColumnName("DEFAULT_LANGUAGE");
            entity.Property(e => e.FirstName).HasColumnName("FIRST_NAME");
            entity.Property(e => e.Inactive).HasColumnName("INACTIVE");
            entity.Property(e => e.Initials).HasColumnName("INITIALS");
            entity.Property(e => e.JobTitle).HasColumnName("JOB_TITLE");
            entity.Property(e => e.LastName).HasColumnName("LAST_NAME");
            entity.Property(e => e.MiddleName).HasColumnName("MIDDLE_NAME");
            entity.Property(e => e.Name).HasColumnName("NAME");
            entity.Property(e => e.Party).HasColumnName("PARTY");
            entity.Property(e => e.PartyType).HasColumnName("PARTY_TYPE");
            entity.Property(e => e.PersonId).HasColumnName("PERSON_ID");
            entity.Property(e => e.PictureId)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PICTURE_ID");
            entity.Property(e => e.PictureThumbnailId)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PICTURE_THUMBNAIL_ID");
            entity.Property(e => e.Prefix).HasColumnName("PREFIX");
            entity.Property(e => e.Protected).HasColumnName("PROTECTED");
            entity.Property(e => e.Rowkey).HasColumnName("ROWKEY");
            entity.Property(e => e.Rowstate).HasColumnName("ROWSTATE");
            entity.Property(e => e.Rowversion).HasColumnName("ROWVERSION");
            entity.Property(e => e.SupplierContact).HasColumnName("SUPPLIER_CONTACT");
            entity.Property(e => e.Title).HasColumnName("TITLE");
            entity.Property(e => e.UserId).HasColumnName("USER_ID");
            entity.Property(e => e.WarrantyRep).HasColumnName("WARRANTY_REP");
        });

        modelBuilder.Entity<Peskill>(entity =>
        {
            entity.HasKey(e => e.Primekey)
                .IsClustered(false)
                .HasFillFactor(90);

            entity.ToTable("peskill");

            entity.HasIndex(e => e.Skill, "peskillpk")
                .IsUnique()
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("primekey");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Skill)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("skill");
            entity.Property(e => e.Skilldesc)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("skilldesc");
        });

        modelBuilder.Entity<Pestate>(entity =>
        {
            entity.HasKey(e => e.Primekey)
                .IsClustered(false)
                .HasFillFactor(90);

            entity.ToTable("pestate");

            entity.HasIndex(e => e.State, "pestatepk")
                .IsUnique()
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("primekey");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
            entity.Property(e => e.State)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("state");
            entity.Property(e => e.Statedesc)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("statedesc");
        });

        modelBuilder.Entity<Petermcode>(entity =>
        {
            entity.HasKey(e => e.Primekey)
                .IsClustered(false)
                .HasFillFactor(90);

            entity.ToTable("petermcode");

            entity.HasIndex(e => e.Termcode, "petermcodepk")
                .IsUnique()
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("primekey");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Termcode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("termcode");
            entity.Property(e => e.Termdesc)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("termdesc");
        });

        modelBuilder.Entity<Pew2emp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("pew2emp");

            entity.Property(e => e.Addr1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("addr1");
            entity.Property(e => e.Addr2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("addr2");
            entity.Property(e => e.Addr3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("addr3");
            entity.Property(e => e.Addr4)
                .HasMaxLength(39)
                .IsUnicode(false)
                .HasColumnName("addr4");
            entity.Property(e => e.Empname)
                .HasMaxLength(72)
                .IsUnicode(false)
                .HasColumnName("empname");
            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.Ssn)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ssn");
        });

        modelBuilder.Entity<PhoneDataSourceFieldMap>(entity =>
        {
            entity.HasKey(e => new { e.Source, e.Type }).HasName("PK_PhoneData_SourceFieldMap");

            entity.ToTable("PhoneDataSourceFieldMap", "Contact");

            entity.Property(e => e.Source)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MultipleAllowed).HasDefaultValue(true);
            entity.Property(e => e.Value)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.SourceNavigation).WithMany(p => p.PhoneDataSourceFieldMaps)
                .HasForeignKey(d => d.Source)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PhoneDataSourceFieldMap_Source");

            entity.HasOne(d => d.TypeNavigation).WithMany(p => p.PhoneDataSourceFieldMaps)
                .HasForeignKey(d => d.Type)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PhoneDataSourceFieldMap_Type");
        });

        modelBuilder.Entity<PjBillSchedule>(entity =>
        {
            entity.HasKey(e => e.Billschedule);

            entity.ToTable("pjBillSchedules");

            entity.Property(e => e.Billschedule)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("billschedule");
            entity.Property(e => e.ScheduleName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Pjbdgtpick>(entity =>
        {
            entity.HasKey(e => new { e.Username, e.Bintim, e.Project });

            entity.ToTable("pjbdgtpick");

            entity.Property(e => e.Username)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("username");
            entity.Property(e => e.Bintim)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bintim");
            entity.Property(e => e.Project)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("project");
        });

        modelBuilder.Entity<Pjcarnet>(entity =>
        {
            entity.HasKey(e => e.Primekey).HasFillFactor(90);

            entity.ToTable("pjcarnet");

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("primekey");
            entity.Property(e => e.Cost).HasColumnName("cost");
            entity.Property(e => e.Depth)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("depth");
            entity.Property(e => e.Entitydesc)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("entitydesc");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("entityno");
            entity.Property(e => e.Itemtype).HasColumnName("itemtype");
            entity.Property(e => e.Length)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("length");
            entity.Property(e => e.MaterialDesc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("material_desc");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Partdesc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("partdesc");
            entity.Property(e => e.Partentityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("partentityno");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("partno");
            entity.Property(e => e.Partrev)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("partrev");
            entity.Property(e => e.Projpercent).HasColumnName("projpercent");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("serial_no");
            entity.Property(e => e.Source)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("source");
            entity.Property(e => e.Subitem).HasColumnName("subitem");
            entity.Property(e => e.Subtype).HasColumnName("subtype");
            entity.Property(e => e.Userid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("userid");
            entity.Property(e => e.Usertime)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("usertime");
            entity.Property(e => e.Width)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("width");
        });

        modelBuilder.Entity<Pjempassign>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.Jobtype, e.Empno, e.Fromdate }).IsClustered(false);

            entity.ToTable("pjempassign", tb =>
                {
                    tb.HasTrigger("TR_pjempassignTrackHistory");
                    tb.HasTrigger("TR_pjempassign_prevent_overlaps");
                    tb.HasTrigger("TR_pjempassign_track_BidProjectCrewChanges");
                    tb.HasTrigger("d_Auditpjempassign");
                    tb.HasTrigger("i_Auditpjempassign");
                    tb.HasTrigger("u_Auditpjempassign");
                });

            entity.HasIndex(e => new { e.StatusCode, e.Fromdate, e.Todate }, "IX_StatusCode_and_dates");

            entity.HasIndex(e => new { e.Entityno, e.EmplineNo }, "IX_project");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("entityno");
            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("jobtype");
            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("empno");
            entity.Property(e => e.Fromdate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("fromdate");
            entity.Property(e => e.ChangeNo).HasColumnName("change_no");
            entity.Property(e => e.EmplineNo)
                .HasDefaultValueSql("('')")
                .HasColumnName("empline_no");
            entity.Property(e => e.EstHours).HasColumnName("est_hours");
            entity.Property(e => e.GigMeAvailabilityRequestId).HasColumnName("GigMeAvailabilityRequestID");
            entity.Property(e => e.GigMeAvailabilityRequester)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.HoursPerDay).HasComputedColumnSql("([est_hours]/((1)+datediff(day,[fromdate],[todate])))", false);
            entity.Property(e => e.IsPerDiemBillableStatusCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("U");
            entity.Property(e => e.Note)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PayingPerDiemStatusCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("U");
            entity.Property(e => e.PdRfiEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("pd_rfi_entityno");
            entity.Property(e => e.PdRfiSeqno).HasColumnName("pd_rfi_seqno");
            entity.Property(e => e.Ponumber).HasColumnName("PONumber");
            entity.Property(e => e.RaId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ra_id");
            entity.Property(e => e.RfiEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("rfi_entityno");
            entity.Property(e => e.RfiSeqno).HasColumnName("rfi_seqno");
            entity.Property(e => e.StatusCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("A")
                .IsFixedLength();
            entity.Property(e => e.SubInvoiceNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Todate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("todate");

            entity.HasOne(d => d.EmpnoNavigation).WithMany(p => p.Pjempassigns)
                .HasForeignKey(d => d.Empno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pjempassign_peemployee");

            entity.HasOne(d => d.IsPerDiemBillableStatusCodeNavigation).WithMany(p => p.Pjempassigns)
                .HasForeignKey(d => d.IsPerDiemBillableStatusCode)
                .HasConstraintName("FK_pjempassign_IsPerDiemBillableStatusTypes");

            entity.HasOne(d => d.JobtypeNavigation).WithMany(p => p.Pjempassigns)
                .HasForeignKey(d => d.Jobtype)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pjempassign_pejob");

            entity.HasOne(d => d.PayingPerDiemStatusCodeNavigation).WithMany(p => p.Pjempassigns)
                .HasForeignKey(d => d.PayingPerDiemStatusCode)
                .HasConstraintName("FK_pjempassign_PayingPerDiemStatusTypes");

            entity.HasOne(d => d.StatusCodeNavigation).WithMany(p => p.Pjempassigns)
                .HasForeignKey(d => d.StatusCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pjempassign_EmployeeAssignmentStatus");

            entity.HasOne(d => d.Rfi).WithMany(p => p.PjempassignRfis)
                .HasForeignKey(d => new { d.PdRfiEntityno, d.PdRfiSeqno })
                .HasConstraintName("FK_pjempassign_PD_RFI");

            entity.HasOne(d => d.RfiNavigation).WithMany(p => p.PjempassignRfiNavigations)
                .HasForeignKey(d => new { d.RfiEntityno, d.RfiSeqno })
                .HasConstraintName("FK_pjempassign_RFI");

            entity.HasOne(d => d.Pjjobbudget).WithMany(p => p.Pjempassigns)
                .HasPrincipalKey(p => new { p.Entityno, p.Jobtype, p.EmplineNo })
                .HasForeignKey(d => new { d.Entityno, d.Jobtype, d.EmplineNo })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pjempassign_pjjobbudget");
        });

        modelBuilder.Entity<PjempassignA>(entity =>
        {
            entity.HasKey(e => e.AtransactionId).IsClustered(false);

            entity.ToTable("pjempassignA");

            entity.Property(e => e.AtransactionId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ATransactionID");
            entity.Property(e => e.AdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnName("ADateTime");
            entity.Property(e => e.ArecordAction).HasColumnName("ARecordAction");
            entity.Property(e => e.Atransaction).HasColumnName("ATransaction");
            entity.Property(e => e.AuserId)
                .IsUnicode(false)
                .HasColumnName("AUserID");
            entity.Property(e => e.ChangeNo).HasColumnName("change_no");
            entity.Property(e => e.EmplineNo).HasColumnName("empline_no");
            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.EstHours).HasColumnName("est_hours");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("fromdate");
            entity.Property(e => e.GigMeAvailabilityRequestId).HasColumnName("GigMeAvailabilityRequestID");
            entity.Property(e => e.GigMeAvailabilityRequester)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.IsPerDiemBillableStatusCode)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("jobtype");
            entity.Property(e => e.Note)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PayingPerDiemStatusCode)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.PdRfiEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("pd_rfi_entityno");
            entity.Property(e => e.PdRfiSeqno).HasColumnName("pd_rfi_seqno");
            entity.Property(e => e.Ponumber).HasColumnName("PONumber");
            entity.Property(e => e.RaId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ra_id");
            entity.Property(e => e.RfiEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("rfi_entityno");
            entity.Property(e => e.RfiSeqno).HasColumnName("rfi_seqno");
            entity.Property(e => e.StatusCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubInvoiceNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("todate");
        });

        modelBuilder.Entity<PjempassignDtl>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("pjempassign_dtl");

            entity.Property(e => e.Demand).HasColumnName("demand");
            entity.Property(e => e.EmplineNo).HasColumnName("empline_no");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("fromdate");
            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("jobtype");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("todate");
        });

        modelBuilder.Entity<PjempassignHistory>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.Jobtype, e.Empno, e.Fromdate, e.ValidFromUtc });

            entity.ToTable("pjempassignHistory");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("jobtype");
            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("fromdate");
            entity.Property(e => e.ValidFromUtc)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnName("ValidFromUTC");
            entity.Property(e => e.ChangeNo).HasColumnName("change_no");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(128)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.EmplineNo).HasColumnName("empline_no");
            entity.Property(e => e.EstHours).HasColumnName("est_hours");
            entity.Property(e => e.GigMeAvailabilityRequestId).HasColumnName("GigMeAvailabilityRequestID");
            entity.Property(e => e.GigMeAvailabilityRequester)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.IsPerDiemBillableStatusCode)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Note)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PayingPerDiemStatusCode)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.PdRfiEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("pd_rfi_entityno");
            entity.Property(e => e.PdRfiSeqno).HasColumnName("pd_rfi_seqno");
            entity.Property(e => e.Ponumber).HasColumnName("PONumber");
            entity.Property(e => e.RaId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ra_id");
            entity.Property(e => e.RemovedBy).HasMaxLength(128);
            entity.Property(e => e.RfiEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("rfi_entityno");
            entity.Property(e => e.RfiSeqno).HasColumnName("rfi_seqno");
            entity.Property(e => e.StatusCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("todate");
            entity.Property(e => e.ValidToUtc).HasColumnName("ValidToUTC");
        });

        modelBuilder.Entity<PjempassignTemp>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.Jobtype, e.Empno, e.Fromdate }).IsClustered(false);

            entity.ToTable("pjempassign_Temp");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("jobtype");
            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("fromdate");
            entity.Property(e => e.ChangeNo).HasColumnName("change_no");
            entity.Property(e => e.EmplineNo).HasColumnName("empline_no");
            entity.Property(e => e.EstHours).HasColumnName("est_hours");
            entity.Property(e => e.GigMeAvailabilityRequestId).HasColumnName("GigMeAvailabilityRequestID");
            entity.Property(e => e.GigMeAvailabilityRequester)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.HoursPerDay).HasComputedColumnSql("([est_hours]/((1)+datediff(day,[fromdate],[todate])))", false);
            entity.Property(e => e.IsPerDiemBillableStatusCode)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Note)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PayingPerDiemStatusCode)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.PdRfiEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("pd_rfi_entityno");
            entity.Property(e => e.PdRfiSeqno).HasColumnName("pd_rfi_seqno");
            entity.Property(e => e.Ponumber).HasColumnName("PONumber");
            entity.Property(e => e.RaId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ra_id");
            entity.Property(e => e.RfiEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("rfi_entityno");
            entity.Property(e => e.RfiSeqno).HasColumnName("rfi_seqno");
            entity.Property(e => e.StatusCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubInvoiceNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("todate");
        });

        modelBuilder.Entity<Pjinvratetype>(entity =>
        {
            entity.HasKey(e => e.Ratetype);

            entity.ToTable("pjinvratetype");

            entity.Property(e => e.Ratetype)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("ratetype");
            entity.Property(e => e.Perioddays).HasColumnName("perioddays");
            entity.Property(e => e.Ratedesc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ratedesc");
            entity.Property(e => e.ShortRateDesc)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Pjjobbudexp>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.Partno });

            entity.ToTable("pjjobbudexp", tb =>
                {
                    tb.HasTrigger("TR_pjjobbudexp__pjjobbudexp_history_RecentlyChangedProjects");
                    tb.HasTrigger("TR_pjjobbudexp__track_BidProjectPartChanges");
                    tb.HasTrigger("TR_pjjobbudexp__track_changes_into_OrderedPartsChangesStagingArea");
                    tb.HasTrigger("TR_pjjobbudexp__update_related_to_parts");
                    tb.HasTrigger("TR_pjjobbudexp_disallow_changing_part_numbers_with_checked_out_parts");
                    tb.HasTrigger("TR_pjjobbudexp_disallow_deleting_checked_out_parts_ordered");
                    tb.HasTrigger("TR_pjjobbudexp_track_changes_into_pjjobbudexp_indexViewTable");
                    tb.HasTrigger("TR_pjjobbudexp_track_changes_into_pjjobbudexp_indexViewTable-bak");
                    tb.HasTrigger("x_Auditpjjobbudexp");
                });

            entity.HasIndex(e => new { e.Partno, e.Entityno }, "IX_for_invcal").IsUnique();

            entity.HasIndex(e => new { e.Entityno, e.Partno }, "IX_pjjobbudexp").IsUnique();

            entity.HasIndex(e => e.Todate, "IX_todate");

            entity.HasIndex(e => e.Trandate, "IX_trandate");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("entityno");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("partno");
            entity.Property(e => e.ChangeDate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("change_date");
            entity.Property(e => e.EstAmount)
                .HasColumnType("money")
                .HasColumnName("est_amount");
            entity.Property(e => e.EstQty).HasColumnName("est_qty");
            entity.Property(e => e.EstRevAmount)
                .HasColumnType("money")
                .HasColumnName("est_rev_amount");
            entity.Property(e => e.EstRevTotal)
                .HasColumnType("money")
                .HasColumnName("est_rev_total");
            entity.Property(e => e.EstUnitAmount)
                .HasColumnType("money")
                .HasColumnName("est_unit_amount");
            entity.Property(e => e.Expcd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("expcd");
            entity.Property(e => e.LineNo).HasColumnName("line_no");
            entity.Property(e => e.Markup).HasColumnName("markup");
            entity.Property(e => e.Matrixcd)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("matrixcd");
            entity.Property(e => e.MfgDesc)
                .HasMaxLength(250)
                .HasDefaultValue("")
                .HasColumnName("mfg_desc");
            entity.Property(e => e.MfgNo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("mfg_no");
            entity.Property(e => e.NoteInternal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Partentityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("RENT")
                .HasColumnName("partentityno");
            entity.Property(e => e.Partrev)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("partrev");
            entity.Property(e => e.PriceLevelValue).HasDefaultValue(1.0);
            entity.Property(e => e.QuantityToSubhire).HasDefaultValue(0);
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Todate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("todate");
            entity.Property(e => e.Trandate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("trandate");

            entity.HasOne(d => d.EntitynoNavigation).WithMany(p => p.Pjjobbudexps)
                .HasForeignKey(d => d.Entityno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pjjobbudexp_glentities");

            entity.HasOne(d => d.MatrixcdNavigation).WithMany(p => p.Pjjobbudexps)
                .HasPrincipalKey(p => p.Matrixcd)
                .HasForeignKey(d => d.Matrixcd)
                .HasConstraintName("FK_pjjobbudexp_oeacctmatrix");

            entity.HasOne(d => d.PartnoNavigation).WithMany(p => p.Pjjobbudexps)
                .HasForeignKey(d => d.Partno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pjjobbudexp_inpart");
        });

        modelBuilder.Entity<PjjobbudexpA>(entity =>
        {
            entity.HasKey(e => e.AtransactionId).IsClustered(false);

            entity.ToTable("pjjobbudexpA");

            entity.Property(e => e.AtransactionId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ATransactionID");
            entity.Property(e => e.AdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnName("ADateTime");
            entity.Property(e => e.ArecordAction).HasColumnName("ARecordAction");
            entity.Property(e => e.Atransaction).HasColumnName("ATransaction");
            entity.Property(e => e.AuserId)
                .IsUnicode(false)
                .HasColumnName("AUserID");
            entity.Property(e => e.ChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("change_date");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.EstAmount)
                .HasColumnType("money")
                .HasColumnName("est_amount");
            entity.Property(e => e.EstQty).HasColumnName("est_qty");
            entity.Property(e => e.EstRevAmount)
                .HasColumnType("money")
                .HasColumnName("est_rev_amount");
            entity.Property(e => e.EstRevTotal)
                .HasColumnType("money")
                .HasColumnName("est_rev_total");
            entity.Property(e => e.EstUnitAmount)
                .HasColumnType("money")
                .HasColumnName("est_unit_amount");
            entity.Property(e => e.Expcd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("expcd");
            entity.Property(e => e.LineNo).HasColumnName("line_no");
            entity.Property(e => e.Markup).HasColumnName("markup");
            entity.Property(e => e.Matrixcd)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("matrixcd");
            entity.Property(e => e.MfgDesc)
                .HasMaxLength(250)
                .HasColumnName("mfg_desc");
            entity.Property(e => e.MfgNo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("mfg_no");
            entity.Property(e => e.NoteInternal)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Partentityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partentityno");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Partrev)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("partrev");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("todate");
            entity.Property(e => e.Trandate)
                .HasColumnType("datetime")
                .HasColumnName("trandate");
        });

        modelBuilder.Entity<PjjobbudexpHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("pjjobbudexp_history");

            entity.HasIndex(e => e.Partno, "IX_partno");

            entity.HasIndex(e => new { e.Enddate, e.Entityno, e.Partno }, "IX_pjjobbudexp_history")
                .IsUnique()
                .IsClustered();

            entity.Property(e => e.Enddate)
                .HasColumnType("smalldatetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.EstQty).HasColumnName("est_qty");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Startdate)
                .HasColumnType("smalldatetime")
                .HasColumnName("startdate");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("todate");
            entity.Property(e => e.Trandate)
                .HasColumnType("datetime")
                .HasColumnName("trandate");

            entity.HasOne(d => d.PartnoNavigation).WithMany()
                .HasForeignKey(d => d.Partno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pjjobbudexp_history_inpart");
        });

        modelBuilder.Entity<PjjobbudexpHistoryRecentlyChangedProject>(entity =>
        {
            entity.HasKey(e => e.Entityno);

            entity.ToTable("pjjobbudexp_history_RecentlyChangedProjects");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
        });

        modelBuilder.Entity<PjjobbudexpIndexViewTable>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.Partno });

            entity.ToTable("pjjobbudexp_indexViewTable");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("entityno");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("partno");
            entity.Property(e => e.EstQty).HasColumnName("est_qty");
            entity.Property(e => e.EstUnitAmount)
                .HasColumnType("money")
                .HasColumnName("est_unit_amount");
            entity.Property(e => e.LineNo).HasColumnName("line_no");
            entity.Property(e => e.Markup).HasColumnName("markup");
            entity.Property(e => e.MfgDesc)
                .HasMaxLength(250)
                .HasColumnName("mfg_desc");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Todate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("todate");
            entity.Property(e => e.Trandate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("trandate");
        });

        modelBuilder.Entity<PjjobbudexpIndexViewTableStagingArea>(entity =>
        {
            entity.HasKey(e => new { e.Partno, e.Entityno });

            entity.ToTable("pjjobbudexp_indexViewTable_StagingArea", tb => tb.HasTrigger("TR_pjjobbudexp_indexViewTable_StagingArea_send_service_broker_message"));

            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("partno");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("entityno");
            entity.Property(e => e.EstQty).HasColumnName("est_qty");
            entity.Property(e => e.EstUnitAmount)
                .HasColumnType("money")
                .HasColumnName("est_unit_amount");
            entity.Property(e => e.LineNo).HasColumnName("line_no");
            entity.Property(e => e.Markup).HasColumnName("markup");
            entity.Property(e => e.MfgDesc)
                .HasMaxLength(250)
                .HasColumnName("mfg_desc");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("todate");
            entity.Property(e => e.Trandate)
                .HasColumnType("datetime")
                .HasColumnName("trandate");
        });

        modelBuilder.Entity<PjjobbudexpQtyFix>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("pjjobbudexpQtyFix");

            entity.Property(e => e.Entityno).HasColumnName("entityno");
            entity.Property(e => e.NewPartQty).HasColumnName("newPart#Qty");
            entity.Property(e => e.TotalOfBothCheckedOut).HasColumnName("totalOfBothCheckedOut");
        });

        modelBuilder.Entity<PjjobbudexpTemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("pjjobbudexp_Temp");

            entity.Property(e => e.ChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("change_date");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.EstAmount)
                .HasColumnType("money")
                .HasColumnName("est_amount");
            entity.Property(e => e.EstQty).HasColumnName("est_qty");
            entity.Property(e => e.EstRevAmount)
                .HasColumnType("money")
                .HasColumnName("est_rev_amount");
            entity.Property(e => e.EstRevTotal)
                .HasColumnType("money")
                .HasColumnName("est_rev_total");
            entity.Property(e => e.EstUnitAmount)
                .HasColumnType("money")
                .HasColumnName("est_unit_amount");
            entity.Property(e => e.Expcd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("expcd");
            entity.Property(e => e.LineNo).HasColumnName("line_no");
            entity.Property(e => e.Markup).HasColumnName("markup");
            entity.Property(e => e.Matrixcd)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("matrixcd");
            entity.Property(e => e.MfgDesc)
                .HasMaxLength(250)
                .HasColumnName("mfg_desc");
            entity.Property(e => e.MfgNo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("mfg_no");
            entity.Property(e => e.NoteInternal)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Partentityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partentityno");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Partrev)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("partrev");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("todate");
            entity.Property(e => e.Trandate)
                .HasColumnType("datetime")
                .HasColumnName("trandate");
        });

        modelBuilder.Entity<Pjjobbudexpfix>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("pjjobbudexpfix");

            entity.Property(e => e.ChangeDate).HasColumnName("change_date");
            entity.Property(e => e.Entityno).HasColumnName("entityno");
            entity.Property(e => e.EstAmount).HasColumnName("est_amount");
            entity.Property(e => e.EstQty).HasColumnName("est_qty");
            entity.Property(e => e.EstRevAmount).HasColumnName("est_rev_amount");
            entity.Property(e => e.EstRevTotal).HasColumnName("est_rev_total");
            entity.Property(e => e.EstUnitAmount).HasColumnName("est_unit_amount");
            entity.Property(e => e.Expcd).HasColumnName("expcd");
            entity.Property(e => e.Expdesc).HasColumnName("expdesc");
            entity.Property(e => e.LineNo).HasColumnName("line_no");
            entity.Property(e => e.Markup).HasColumnName("markup");
            entity.Property(e => e.Matrixcd).HasColumnName("matrixcd");
            entity.Property(e => e.MfgDesc).HasColumnName("mfg_desc");
            entity.Property(e => e.MfgNo).HasColumnName("mfg_no");
            entity.Property(e => e.Partentityno).HasColumnName("partentityno");
            entity.Property(e => e.Partno).HasColumnName("partno");
            entity.Property(e => e.Partrev).HasColumnName("partrev");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Todate).HasColumnName("todate");
            entity.Property(e => e.Trandate).HasColumnName("trandate");
        });

        modelBuilder.Entity<Pjjobbudget>(entity =>
        {
            entity.HasKey(e => e.Primekey)
                .IsClustered(false)
                .HasFillFactor(90);

            entity.ToTable("pjjobbudget", tb =>
                {
                    tb.HasTrigger("TR_pjjobbudget_track_BidProjectJobChanges");
                    tb.HasTrigger("x_Auditpjjobbudget");
                });

            entity.HasIndex(e => new { e.Fromdate, e.Todate }, "IX_date");

            entity.HasIndex(e => new { e.Entityno, e.Jobtype, e.EmplineNo }, "IX_pjjobbudget")
                .IsUnique()
                .IsClustered();

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("primekey");
            entity.Property(e => e.ChangeDate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("change_date");
            entity.Property(e => e.ChangeNo).HasColumnName("change_no");
            entity.Property(e => e.CrewSize).HasColumnName("crew_size");
            entity.Property(e => e.EmplineNo)
                .HasDefaultValueSql("('')")
                .HasColumnName("empline_no");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("entityno");
            entity.Property(e => e.EstHours).HasColumnName("est_hours");
            entity.Property(e => e.EstRate).HasColumnName("est_rate");
            entity.Property(e => e.EstRevRate).HasColumnName("est_rev_rate");
            entity.Property(e => e.EstRevTotal)
                .HasColumnType("money")
                .HasColumnName("est_rev_total");
            entity.Property(e => e.EstTotal)
                .HasColumnType("money")
                .HasColumnName("est_total");
            entity.Property(e => e.Fromdate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("fromdate");
            entity.Property(e => e.Jobdesc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("jobdesc");
            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("jobtype");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
            entity.Property(e => e.OpBegTime).HasColumnName("op_beg_time");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Todate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("todate");

            entity.HasOne(d => d.EntitynoNavigation).WithMany(p => p.Pjjobbudgets)
                .HasForeignKey(d => d.Entityno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pjjobbudget_glentities");

            entity.HasOne(d => d.JobtypeNavigation).WithMany(p => p.Pjjobbudgets)
                .HasForeignKey(d => d.Jobtype)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pjjobbudget_pejob");
        });

        modelBuilder.Entity<PjjobbudgetTemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("pjjobbudget_Temp");

            entity.Property(e => e.ChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("change_date");
            entity.Property(e => e.ChangeNo).HasColumnName("change_no");
            entity.Property(e => e.CrewSize).HasColumnName("crew_size");
            entity.Property(e => e.EmplineNo).HasColumnName("empline_no");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.EstHours).HasColumnName("est_hours");
            entity.Property(e => e.EstRate).HasColumnName("est_rate");
            entity.Property(e => e.EstRevRate).HasColumnName("est_rev_rate");
            entity.Property(e => e.EstRevTotal)
                .HasColumnType("money")
                .HasColumnName("est_rev_total");
            entity.Property(e => e.EstTotal)
                .HasColumnType("money")
                .HasColumnName("est_total");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("fromdate");
            entity.Property(e => e.Jobdesc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("jobdesc");
            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("jobtype");
            entity.Property(e => e.MsreplTranVersion).HasColumnName("msrepl_tran_version");
            entity.Property(e => e.OpBegTime).HasColumnName("op_beg_time");
            entity.Property(e => e.Primekey).HasColumnName("primekey");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("todate");
        });

        modelBuilder.Entity<Pjjobbudgetum>(entity =>
        {
            entity.HasKey(e => e.AtransactionId).IsClustered(false);

            entity.ToTable("pjjobbudgetA");

            entity.Property(e => e.AtransactionId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ATransactionID");
            entity.Property(e => e.AdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnName("ADateTime");
            entity.Property(e => e.ArecordAction).HasColumnName("ARecordAction");
            entity.Property(e => e.Atransaction).HasColumnName("ATransaction");
            entity.Property(e => e.AuserId)
                .IsUnicode(false)
                .HasColumnName("AUserID");
            entity.Property(e => e.ChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("change_date");
            entity.Property(e => e.ChangeNo).HasColumnName("change_no");
            entity.Property(e => e.CrewSize).HasColumnName("crew_size");
            entity.Property(e => e.EmplineNo).HasColumnName("empline_no");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.EstHours).HasColumnName("est_hours");
            entity.Property(e => e.EstRate).HasColumnName("est_rate");
            entity.Property(e => e.EstRevRate).HasColumnName("est_rev_rate");
            entity.Property(e => e.EstRevTotal)
                .HasColumnType("money")
                .HasColumnName("est_rev_total");
            entity.Property(e => e.EstTotal)
                .HasColumnType("money")
                .HasColumnName("est_total");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("fromdate");
            entity.Property(e => e.Jobdesc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("jobdesc");
            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("jobtype");
            entity.Property(e => e.MsreplTranVersion).HasColumnName("msrepl_tran_version");
            entity.Property(e => e.OpBegTime).HasColumnName("op_beg_time");
            entity.Property(e => e.Primekey).HasColumnName("primekey");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("todate");
        });

        modelBuilder.Entity<Pjjobbudinfo>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.Seqno });

            entity.ToTable("pjjobbudinfo");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("entityno");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.ChangeNo).HasColumnName("change_no");
            entity.Property(e => e.Displayind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("displayind");
            entity.Property(e => e.NoteVal1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("note_val1");
            entity.Property(e => e.NoteVal2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("note_val2");
            entity.Property(e => e.NoteVal3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("note_val3");
            entity.Property(e => e.Notetype)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("notetype");
        });

        modelBuilder.Entity<Pjjobbudsch>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("pjjobbudsch");

            entity.Property(e => e.ChangeNo).HasColumnName("change_no");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
        });

        modelBuilder.Entity<Pjjobexpense>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.Seqno });

            entity.ToTable("pjjobexpenses", tb => tb.HasTrigger("tr_fixed_expenses_may_not_be_attached_to_multiple_periods_from_pjjobexpenses"));

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Category)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("C")
                .HasColumnName("category");
            entity.Property(e => e.Cost)
                .HasComputedColumnSql("([item_cost]*[item_qty])", false)
                .HasColumnName("cost");
            entity.Property(e => e.Expcd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("expcd");
            entity.Property(e => e.Expdesc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("expdesc");
            entity.Property(e => e.ItemCost).HasColumnName("item_cost");
            entity.Property(e => e.ItemQty).HasColumnName("item_qty");
            entity.Property(e => e.Notes)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("notes");
            entity.Property(e => e.PeriodType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("period_type");

            entity.HasOne(d => d.EntitynoNavigation).WithMany(p => p.Pjjobexpenses)
                .HasForeignKey(d => d.Entityno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pjjobexpenses_glentities");

            entity.HasOne(d => d.ExpcdNavigation).WithMany(p => p.Pjjobexpenses)
                .HasForeignKey(d => d.Expcd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pjjobexpenses_apexpcode");

            entity.HasOne(d => d.PeriodTypeNavigation).WithMany(p => p.Pjjobexpenses)
                .HasForeignKey(d => d.PeriodType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pjjobexpenses_ExpensePeriodTypes");
        });

        modelBuilder.Entity<Pjjobrevenue>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.Seqno });

            entity.ToTable("pjjobrevenue", tb => tb.HasTrigger("TR_pjjobrevenue__history"));

            entity.HasIndex(e => new { e.Startdate, e.Enddate }, "IX_date");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.Enddate)
                .HasColumnType("smalldatetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Notes)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("notes");
            entity.Property(e => e.Startdate)
                .HasColumnType("smalldatetime")
                .HasColumnName("startdate");

            entity.HasOne(d => d.EntitynoNavigation).WithMany(p => p.Pjjobrevenues)
                .HasForeignKey(d => d.Entityno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pjjobrevenue_glentities");
        });

        modelBuilder.Entity<PjjobrevenueHistory>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.Seqno, e.ValidFrom });

            entity.ToTable("pjjobrevenue_history");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.CreatedBy).HasMaxLength(128);
            entity.Property(e => e.Enddate)
                .HasColumnType("smalldatetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Notes)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("notes");
            entity.Property(e => e.RemovedBy).HasMaxLength(128);
            entity.Property(e => e.Startdate)
                .HasColumnType("smalldatetime")
                .HasColumnName("startdate");
            entity.Property(e => e.ValidTo).HasColumnType("datetime");
        });

        modelBuilder.Entity<Pjproptype>(entity =>
        {
            entity.HasKey(e => e.Proptype);

            entity.ToTable("pjproptype");

            entity.Property(e => e.Proptype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("proptype");
            entity.Property(e => e.BenchmarkFactor).HasDefaultValue(0.01);
            entity.Property(e => e.BidValueType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DefaultBillSchedule)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.DoIntercompanyBilling).HasDefaultValue(true);
            entity.Property(e => e.IsCrewBilledViaRfi)
                .HasDefaultValue(true)
                .HasColumnName("IsCrewBilledViaRFI");
            entity.Property(e => e.IsLeavingWarehouse).HasDefaultValue(true);
            entity.Property(e => e.IsSalesOrderPropType).HasColumnName("isSalesOrderPropType");
            entity.Property(e => e.IsWarehouseDependent).HasDefaultValue(true);
            entity.Property(e => e.ShowInGui)
                .HasDefaultValue(true)
                .HasColumnName("ShowInGUI");
            entity.Property(e => e.Typedesc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("typedesc");

            entity.HasOne(d => d.BidValueTypeNavigation).WithMany(p => p.Pjproptypes)
                .HasForeignKey(d => d.BidValueType)
                .HasConstraintName("FK_pjproptype_bidvaluetype");

            entity.HasOne(d => d.DefaultBillScheduleNavigation).WithMany(p => p.Pjproptypes)
                .HasForeignKey(d => d.DefaultBillSchedule)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pjproptype__DefaultBillSchedule");
        });

        modelBuilder.Entity<PjproptypeIndexViewTable>(entity =>
        {
            entity.HasKey(e => e.Proptype);

            entity.ToTable("pjproptype_IndexViewTable");

            entity.Property(e => e.Proptype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("proptype");
        });

        modelBuilder.Entity<Pjtfrusr>(entity =>
        {
            entity.HasKey(e => e.UserName);

            entity.ToTable("pjtfrusr");

            entity.Property(e => e.UserName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("user_name");
            entity.Property(e => e.BarcodeSequenceType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Culture)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("culture");
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.DefaultBillingCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DefaultPropType)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.DoubleclickProgramNoProject)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("doubleclick_program_NoProject");
            entity.Property(e => e.DoubleclickProgramProject)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("doubleclick_program_Project");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.Empname)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("empname");
            entity.Property(e => e.IdLanguage)
                .HasDefaultValue(1)
                .HasColumnName("id_language");
            entity.Property(e => e.IdMyFinesseUpdate)
                .HasDefaultValueSql("('-1')")
                .HasColumnName("id_MyFinesseUpdate");
            entity.Property(e => e.Initials)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.LastGlobalActivity).HasColumnType("datetime");
            entity.Property(e => e.OwnerEntity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("owner_entity");
            entity.Property(e => e.PhoneExtension)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.StartupProgram)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("startup_program");
            entity.Property(e => e.TourEntity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tour_entity");
            entity.Property(e => e.Unitoflength)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("unitoflength");
            entity.Property(e => e.Unitofweight)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("unitofweight");
            entity.Property(e => e.VisibleOnInOutBoard).HasDefaultValue(true);
            entity.Property(e => e.WarehouseEntity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("warehouse_entity");

            entity.HasOne(d => d.BarcodeSequenceTypeNavigation).WithMany(p => p.Pjtfrusrs)
                .HasForeignKey(d => d.BarcodeSequenceType)
                .HasConstraintName("FK_pjtfrusr_BarcodeSequenceType");

            entity.HasOne(d => d.CurrencyNavigation).WithMany(p => p.Pjtfrusrs)
                .HasForeignKey(d => d.Currency)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pjtfrusr_Currency");

            entity.HasOne(d => d.DefaultBillingCompanyNavigation).WithMany(p => p.Pjtfrusrs)
                .HasForeignKey(d => d.DefaultBillingCompany)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pjtfrusr_Company");

            entity.HasOne(d => d.DefaultPropTypeNavigation).WithMany(p => p.Pjtfrusrs)
                .HasForeignKey(d => d.DefaultPropType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pjtfrusr_pjproptype");

            entity.HasOne(d => d.IdLanguageNavigation).WithMany(p => p.Pjtfrusrs)
                .HasForeignKey(d => d.IdLanguage)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pjtfrusr_id_language");

            entity.HasOne(d => d.OwnerEntityNavigation).WithMany(p => p.Pjtfrusrs)
                .HasForeignKey(d => d.OwnerEntity)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pjtfrusr_EquipmentOwner");

            entity.HasOne(d => d.UnitoflengthNavigation).WithMany(p => p.Pjtfrusrs)
                .HasForeignKey(d => d.Unitoflength)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pjtfrusr_unitoflength");

            entity.HasOne(d => d.UnitofweightNavigation).WithMany(p => p.Pjtfrusrs)
                .HasForeignKey(d => d.Unitofweight)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pjtfrusr_unitofweight");

            entity.HasOne(d => d.WarehouseEntityNavigation).WithMany(p => p.Pjtfrusrs)
                .HasForeignKey(d => d.WarehouseEntity)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pjtfrusr_Warehouse");

            entity.HasMany(d => d.CompanyCodes).WithMany(p => p.UserNames)
                .UsingEntity<Dictionary<string, object>>(
                    "CompanyInvoiceUndoer",
                    r => r.HasOne<Company>().WithMany()
                        .HasForeignKey("CompanyCode")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CompanyInvoiceUndoers_company"),
                    l => l.HasOne<Pjtfrusr>().WithMany()
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CompanyInvoiceUndoers_pjtfrusr"),
                    j =>
                    {
                        j.HasKey("UserName", "CompanyCode");
                        j.ToTable("CompanyInvoiceUndoers");
                        j.IndexerProperty<string>("UserName")
                            .HasMaxLength(30)
                            .IsUnicode(false)
                            .HasColumnName("user_name");
                        j.IndexerProperty<string>("CompanyCode")
                            .HasMaxLength(50)
                            .IsUnicode(false);
                    });

            entity.HasMany(d => d.CompanyCodesNavigation).WithMany(p => p.UserNamesNavigation)
                .UsingEntity<Dictionary<string, object>>(
                    "CompanyVisible",
                    r => r.HasOne<Company>().WithMany()
                        .HasForeignKey("CompanyCode")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CompanyVisible_Company"),
                    l => l.HasOne<Pjtfrusr>().WithMany()
                        .HasForeignKey("UserName")
                        .HasConstraintName("FK_CompanyVisible_pjtfrusr"),
                    j =>
                    {
                        j.HasKey("UserName", "CompanyCode");
                        j.ToTable("CompanyVisible");
                        j.HasIndex(new[] { "CompanyCode", "UserName" }, "UC_Company").IsUnique();
                        j.IndexerProperty<string>("UserName")
                            .HasMaxLength(30)
                            .IsUnicode(false)
                            .HasColumnName("user_name");
                        j.IndexerProperty<string>("CompanyCode")
                            .HasMaxLength(50)
                            .IsUnicode(false);
                    });

            entity.HasMany(d => d.IdQueries).WithMany(p => p.UserNames)
                .UsingEntity<Dictionary<string, object>>(
                    "MyFinesseQueriesPermission",
                    r => r.HasOne<MyFinesseQuery>().WithMany()
                        .HasForeignKey("IdQuery")
                        .HasConstraintName("FK_myFinesseQueriesPermissions_myFinesseQueries"),
                    l => l.HasOne<Pjtfrusr>().WithMany()
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_MyFinesseQueriesPermissions_pjtfrusr"),
                    j =>
                    {
                        j.HasKey("UserName", "IdQuery").IsClustered(false);
                        j.ToTable("myFinesseQueriesPermissions");
                        j.IndexerProperty<string>("UserName")
                            .HasMaxLength(30)
                            .IsUnicode(false)
                            .HasColumnName("user_name");
                        j.IndexerProperty<short>("IdQuery").HasColumnName("id_query");
                    });

            entity.HasMany(d => d.WarehouseCodes).WithMany(p => p.UserNames)
                .UsingEntity<Dictionary<string, object>>(
                    "WarehouseVisible",
                    r => r.HasOne<Warehouse>().WithMany()
                        .HasForeignKey("WarehouseCode")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_WarehouseVisible_Warehouse"),
                    l => l.HasOne<Pjtfrusr>().WithMany()
                        .HasForeignKey("UserName")
                        .HasConstraintName("FK_WarehouseVisible_pjtfrusr"),
                    j =>
                    {
                        j.HasKey("UserName", "WarehouseCode");
                        j.ToTable("WarehouseVisible");
                        j.IndexerProperty<string>("UserName")
                            .HasMaxLength(30)
                            .IsUnicode(false)
                            .HasColumnName("user_name");
                        j.IndexerProperty<string>("WarehouseCode")
                            .HasMaxLength(10)
                            .IsUnicode(false);
                    });
        });

        modelBuilder.Entity<Plus4BarcodesToBeCreated20250307>(entity =>
        {
            entity.HasKey(e => new { e.UniqueNo, e.Partno, e.Batchno, e.Bld, e.Dept, e.Row, e.SerialNo });

            entity.ToTable("Plus4BarcodesToBeCreated_20250307");

            entity.HasIndex(e => e.UniqueNo, "UC_Plus4BarcodesToBeCreated_unique_no_for_barcoded_items")
                .IsUnique()
                .HasFilter("([unique_no]<>'')");

            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.Row)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.Acctno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("acctno");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.Ponumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PONumber");
            entity.Property(e => e.ProjectElementId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("project_element_id");
            entity.Property(e => e.Ref4)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ref5");
            entity.Property(e => e.SerialId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("serial_id");
        });

        modelBuilder.Entity<Pm2AssignedCrew>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("pm2AssignedCrew");

            entity.HasIndex(e => new { e.SessionId, e.Entityno, e.Jobtype, e.EmpnoNew, e.FromdateNew }, "IX_pm2AssignedCrew").IsClustered();

            entity.Property(e => e.EmplineNo).HasColumnName("empline_no");
            entity.Property(e => e.EmpnoNew)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno_new");
            entity.Property(e => e.EmpnoOld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno_old");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.EstHours).HasColumnName("est_hours");
            entity.Property(e => e.FromdateNew)
                .HasColumnType("datetime")
                .HasColumnName("fromdate_new");
            entity.Property(e => e.FromdateOld)
                .HasColumnType("datetime")
                .HasColumnName("fromdate_old");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsPerDiemBillableStatusCode)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("jobtype");
            entity.Property(e => e.Note)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PayingPerDiemStatusCode)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.PdRfiEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("pd_rfi_entityno");
            entity.Property(e => e.PdRfiSeqno).HasColumnName("pd_rfi_seqno");
            entity.Property(e => e.Ponumber).HasColumnName("PONumber");
            entity.Property(e => e.RfiEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("rfi_entityno");
            entity.Property(e => e.RfiSeqno).HasColumnName("rfi_seqno");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.StatusCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("A")
                .IsFixedLength();
            entity.Property(e => e.SubInvoiceNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("todate");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");

            entity.HasOne(d => d.StatusCodeNavigation).WithMany()
                .HasForeignKey(d => d.StatusCode)
                .HasConstraintName("FK_pm2AssignedCrew_EmployeeAssignmentStatus");
        });

        modelBuilder.Entity<Pm2BidExpense>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("pm2BidExpenses");

            entity.Property(e => e.Category)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("category");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Expcd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("expcd");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.ItemCost).HasColumnName("item_cost");
            entity.Property(e => e.ItemQty).HasColumnName("item_qty");
            entity.Property(e => e.Notes)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("notes");
            entity.Property(e => e.PeriodType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("period_type");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<Pm2BidRevenue>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("pm2BidRevenue");

            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.Enddate)
                .HasColumnType("smalldatetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Notes)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("notes");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.Startdate)
                .HasColumnType("smalldatetime")
                .HasColumnName("startdate");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<Pm2Crew>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("pm2Crew");

            entity.HasIndex(e => new { e.SessionId, e.Entityno, e.JobtypeNew, e.EmplineNo }, "IX_pm2Crew").IsClustered();

            entity.Property(e => e.CrewSize).HasColumnName("crew_size");
            entity.Property(e => e.EmplineNo).HasColumnName("empline_no");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.EstHours).HasColumnName("est_hours");
            entity.Property(e => e.EstRate).HasColumnName("est_rate");
            entity.Property(e => e.EstTotal)
                .HasColumnType("money")
                .HasColumnName("est_total");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("fromdate");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Jobdesc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("jobdesc");
            entity.Property(e => e.JobtypeNew)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("jobtype_new");
            entity.Property(e => e.JobtypeOld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("jobtype_old");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("todate");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<Pm2Equipment>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("pm2Equipment");

            entity.HasIndex(e => new { e.SessionId, e.Entityno, e.PartnoOld }, "IX_pm2Equipment").IsClustered();

            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Matrixcd)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("matrixcd");
            entity.Property(e => e.MfgNo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("mfg_no");
            entity.Property(e => e.NoteInternal)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Notes).HasMaxLength(250);
            entity.Property(e => e.PartDescription)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.PartnoNew)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno_new");
            entity.Property(e => e.PartnoOld)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno_old");
            entity.Property(e => e.Pieces).HasColumnName("pieces");
            entity.Property(e => e.QuantityToSubhire).HasDefaultValue(0.0);
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.UnitPrice).HasColumnType("money");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<Pm2EquipmentSubhire>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("pm2EquipmentSubhires");

            entity.Property(e => e.BillableDays).HasColumnName("billabledays");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.InvoiceNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.LineNo).HasColumnName("line_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Ponumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PONumber");
            entity.Property(e => e.RateType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.Siteno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("siteno");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.StatusCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
            entity.Property(e => e.Vendno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("vendno");
            entity.Property(e => e.VendorName)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Pm2FavoriteProjects>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("FavoriteProjects");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
                 entity.Property(e => e.Username)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("user_name");
          
        });
        //  modelBuilder.Entity<FavoriteProjects>(entity =>
        // {
        //     entity
        //         .HasNoKey()
        //         .ToTable("FavoriteProjects");

        //     entity.Property(e => e.Entityno)
        //         .HasMaxLength(50)
        //         .IsUnicode(false)
        //         .HasColumnName("entityno");
        //         entity.Property(e => e.Username)
        //         .HasMaxLength(50)
        //         .IsUnicode(false)
        //         .HasColumnName("user_name");
           
        // });

        modelBuilder.Entity<Pm2GetProjectBillingPeriodItems2V>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("pm2_get_project_billing_period_items_2_v");

            entity.Property(e => e.BidEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bid_entityno");
            entity.Property(e => e.BillingDays).HasColumnName("billingDays");
            entity.Property(e => e.Category)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("category");
            entity.Property(e => e.CrewEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("crew_entityno");
            entity.Property(e => e.CrewSeqno).HasColumnName("crew_seqno");
            entity.Property(e => e.EndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.EquipmentEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("equipment_entityno");
            entity.Property(e => e.ExpenseEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("expense_entityno");
            entity.Property(e => e.ExpenseSeqno).HasColumnName("expense_seqno");
            entity.Property(e => e.Itemno).HasColumnName("itemno");
            entity.Property(e => e.Periodno).HasColumnName("periodno");
            entity.Property(e => e.Rate).HasColumnName("rate");
            entity.Property(e => e.StartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.Status).HasColumnName("status");
        });

        modelBuilder.Entity<Pm2GetProjectBillingPeriodItemsV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("pm2_get_project_billing_period_items_v");

            entity.Property(e => e.BidEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bid_entityno");
            entity.Property(e => e.BillingDays).HasColumnName("billingDays");
            entity.Property(e => e.Category)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("category");
            entity.Property(e => e.CrewEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("crew_entityno");
            entity.Property(e => e.CrewSeqno).HasColumnName("crew_seqno");
            entity.Property(e => e.EndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.EquipmentEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("equipment_entityno");
            entity.Property(e => e.ExpenseEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("expense_entityno");
            entity.Property(e => e.ExpenseSeqno).HasColumnName("expense_seqno");
            entity.Property(e => e.Itemno).HasColumnName("itemno");
            entity.Property(e => e.Periodno).HasColumnName("periodno");
            entity.Property(e => e.Rate).HasColumnName("rate");
            entity.Property(e => e.StartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.Status).HasColumnName("status");
        });

        modelBuilder.Entity<Pm2GetProjectBillingPeriodItemsV07feb2025>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("pm2_get_project_billing_period_items_v-07FEB2025");

            entity.Property(e => e.BidEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bid_entityno");
            entity.Property(e => e.BillingDays).HasColumnName("billingDays");
            entity.Property(e => e.Category)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("category");
            entity.Property(e => e.CrewEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("crew_entityno");
            entity.Property(e => e.EndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.EquipmentEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("equipment_entityno");
            entity.Property(e => e.ExpenseEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("expense_entityno");
            entity.Property(e => e.ExpenseSeqno).HasColumnName("expense_seqno");
            entity.Property(e => e.Itemno).HasColumnName("itemno");
            entity.Property(e => e.Periodno).HasColumnName("periodno");
            entity.Property(e => e.Rate).HasColumnName("rate");
            entity.Property(e => e.StartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.Status).HasColumnName("status");
        });

        modelBuilder.Entity<Pm2Project>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("pm2Projects");

            entity.HasIndex(e => new { e.SessionId, e.EntitynoOld }, "IX_pm2Projects").IsClustered();

            entity.Property(e => e.AcctExecEmpno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("acctExecEmpno");
            entity.Property(e => e.Agency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("agency");
            entity.Property(e => e.Bidmarkup).HasColumnName("bidmarkup");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CrewOpsEmpno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("crewOpsEmpno");
            entity.Property(e => e.CrewPrep).HasColumnType("smalldatetime");
            entity.Property(e => e.CrmleadUrl)
                .IsUnicode(false)
                .HasColumnName("CRMLeadURL");
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.Custno)
                .HasMaxLength(20)
                .HasColumnName("custno");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("engactivecd");
            entity.Property(e => e.EngrEmpno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("engrEmpno");
            entity.Property(e => e.Entitydesc)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("entitydesc");
            entity.Property(e => e.EntitynoNew)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno_new");
            entity.Property(e => e.EntitynoOld)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno_old");
            entity.Property(e => e.Finactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("finactivecd");
            entity.Property(e => e.FirstShow).HasColumnType("smalldatetime");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.Industry)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("industry");
            entity.Property(e => e.InternalOrg)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("internal_org");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.LastShow).HasColumnType("smalldatetime");
            entity.Property(e => e.LeadTime)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("leadTime");
            entity.Property(e => e.LoadOut).HasColumnType("smalldatetime");
            entity.Property(e => e.Matrixcd)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("matrixcd");
            entity.Property(e => e.Note).IsUnicode(false);
            entity.Property(e => e.OeOrderno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("oe_orderno");
            entity.Property(e => e.Opsmgr)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("opsmgr");
            entity.Property(e => e.Plactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("plactivecd");
            entity.Property(e => e.PollstarArtistId).HasColumnName("PollstarArtistID");
            entity.Property(e => e.Probability).HasColumnName("probability");
            entity.Property(e => e.Propduedate)
                .HasColumnType("datetime")
                .HasColumnName("propduedate");
            entity.Property(e => e.Proptype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("proptype");
            entity.Property(e => e.ReferralProgramId).HasColumnName("ReferralProgramID");
            entity.Property(e => e.Respempno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("respempno");
            entity.Property(e => e.Rfplempno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RFPLEmpno");
            entity.Property(e => e.SecondaryCrewOpsEmpno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("secondaryCrewOpsEmpno");
            entity.Property(e => e.SecondaryOpsEmpno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("secondaryOpsEmpno");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.Sfactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sfactivecd");
            entity.Property(e => e.Shipno)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("shipno");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.Subno)
                .HasMaxLength(50)
                .HasColumnName("subno");
            entity.Property(e => e.TaxCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tax_code");
            entity.Property(e => e.TaxTypeKey)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TruckingVendNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<Pm2ProjectBillingItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("pm2ProjectBillingItems");

            entity.Property(e => e.BidEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bid_entityno");
            entity.Property(e => e.CrewEmplineNo).HasColumnName("crew_empline_no");
            entity.Property(e => e.CrewEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("crew_entityno");
            entity.Property(e => e.EquipmentEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("equipment_entityno");
            entity.Property(e => e.ExpenseEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("expense_entityno");
            entity.Property(e => e.ExpenseSeqno).HasColumnName("expense_seqno");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Itemno).HasColumnName("itemno");
            entity.Property(e => e.JobEmpno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("job_empno");
            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("jobtype");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<Pm2ProjectBillingPeriod>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("pm2ProjectBillingPeriods");

            entity.Property(e => e.BidEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bid_entityno");
            entity.Property(e => e.EndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.IsActive).HasColumnName("isActive");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.PeriodTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Periodno).HasColumnName("periodno");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.StartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<Pm2ProjectBillingPeriodItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("pm2ProjectBillingPeriodItems");

            entity.Property(e => e.AdjustedWeekly)
                .HasColumnType("money")
                .HasColumnName("adjustedWeekly");
            entity.Property(e => e.BidEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bid_entityno");
            entity.Property(e => e.BillingDays).HasColumnName("billingDays");
            entity.Property(e => e.EndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Itemno).HasColumnName("itemno");
            entity.Property(e => e.Periodno).HasColumnName("periodno");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.StartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<Pm2ProjectClientContact>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("pm2ProjectClientContacts");

            entity.Property(e => e.ContactNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.IdContactCategory).HasColumnName("id_ContactCategory");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<Pm2ProjectEmployeeOvertimeRate>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("pm2ProjectEmployeeOvertimeRates");

            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("empno");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("entityno");
            entity.Property(e => e.Fromdate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("fromdate");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("jobtype");
            entity.Property(e => e.RateType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<Pm2ProjectNote>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("pm2ProjectNotes");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<Pm2ProjectProductionSchedule>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("pm2ProjectProductionSchedule");

            entity.Property(e => e.DestinationDetail)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.EventType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Note)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.StartDateNew)
                .HasColumnType("datetime")
                .HasColumnName("StartDate_new");
            entity.Property(e => e.StartDateOld)
                .HasColumnType("datetime")
                .HasColumnName("StartDate_old");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
            entity.Property(e => e.VenueId).HasColumnName("VenueID");
        });

        modelBuilder.Entity<Pm2Rfi>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("pm2RFIs");

            entity.HasIndex(e => new { e.SessionId, e.Entityno, e.Seqno }, "IX_pm2RFIs").IsClustered();

            entity.Property(e => e.Acctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("acctcd");
            entity.Property(e => e.AeApproved)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ae_approved");
            entity.Property(e => e.AmApproved)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("am_approved");
            entity.Property(e => e.Billschedule)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("billschedule");
            entity.Property(e => e.Description)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("description");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.InvEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("inv_entityno");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Note)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("note");
            entity.Property(e => e.Numdays)
                .HasComputedColumnSql("((1)+datediff(day,[startdate],[enddate]))", false)
                .HasColumnName("numdays");
            entity.Property(e => e.Rate)
                .HasColumnType("money")
                .HasColumnName("rate");
            entity.Property(e => e.Ratetype)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ratetype");
            entity.Property(e => e.RevenueCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.Total).HasColumnName("total");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<PmmachdistHist>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("pmmachdist_hist");

            entity.Property(e => e.Acctper).HasColumnName("acctper");
            entity.Property(e => e.Acctyr).HasColumnName("acctyr");
            entity.Property(e => e.Addtime)
                .HasColumnType("datetime")
                .HasColumnName("addtime");
            entity.Property(e => e.Batchno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Billrate).HasColumnName("billrate");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Hours).HasColumnName("hours");
            entity.Property(e => e.Infoonly)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("infoonly");
            entity.Property(e => e.MachineNo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("machine_no");
            entity.Property(e => e.Pid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("pid");
            entity.Property(e => e.Rate).HasColumnName("rate");
            entity.Property(e => e.Ref1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ref1");
            entity.Property(e => e.Ref2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ref2");
            entity.Property(e => e.Ref3)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ref3");
            entity.Property(e => e.Ref4)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ref5");
            entity.Property(e => e.Ref6)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ref6");
            entity.Property(e => e.Ref7)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ref7");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Tidp).HasColumnName("tidp");
            entity.Property(e => e.Updtime)
                .HasColumnType("datetime")
                .HasColumnName("updtime");
            entity.Property(e => e.Workdate)
                .HasColumnType("datetime")
                .HasColumnName("workdate");
        });

        modelBuilder.Entity<Pocontrol>(entity =>
        {
            entity.HasKey(e => e.Company).HasFillFactor(90);

            entity.ToTable("pocontrol");

            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("company");
            entity.Property(e => e.Acctno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("acctno");
            entity.Property(e => e.Accttype)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("accttype");
            entity.Property(e => e.Blanketno).HasColumnName("blanketno");
            entity.Property(e => e.OrdernoOld).HasColumnName("orderno_old");
            entity.Property(e => e.Quoteno).HasColumnName("quoteno");
            entity.Property(e => e.ReqnoOld).HasColumnName("reqno_old");
        });

        modelBuilder.Entity<PodioAddress>(entity =>
        {
            entity.HasKey(e => new { e.PodioId, e.AddressLine1, e.City, e.StateProvince, e.PostalCode }).HasName("PK_Podio_Address");

            entity.ToTable("PodioAddress", "Contact", tb => tb.HasTrigger("TR_Podio_sync_UnifiedAddress"));

            entity.Property(e => e.PodioId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PodioID");
            entity.Property(e => e.AddressLine1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.City)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.StateProvince)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.PostalCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.AddressLine2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.AddressLine3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.AddressLine4)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Country)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");

            entity.HasOne(d => d.Podio).WithMany(p => p.PodioAddresses)
                .HasForeignKey(d => d.PodioId)
                .HasConstraintName("FK_Podio_Address_Contact");
        });

        modelBuilder.Entity<PodioContact>(entity =>
        {
            entity.HasKey(e => e.PodioId).HasName("PK__PodioCon__727E83EBB0AD55AB");

            entity.ToTable("PodioContact", "Contact", tb =>
                {
                    tb.HasTrigger("TR_Podio_insert_UnifiedContact");
                    tb.HasTrigger("TR_Podio_update_UnifiedContact");
                });

            entity.Property(e => e.PodioId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PodioID");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.OldProfileId).HasColumnName("OldProfileID");
            entity.Property(e => e.Organization)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Title)
                .HasMaxLength(150)
                .IsUnicode(false);

            entity.HasOne(d => d.StatusNavigation).WithMany(p => p.PodioContacts)
                .HasForeignKey(d => d.Status)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PodioCont_Status");
        });

        modelBuilder.Entity<PodioEmail>(entity =>
        {
            entity.HasKey(e => new { e.PodioId, e.EmailAddress }).HasName("PK_Podio_Email");

            entity.ToTable("PodioEmail", "Contact", tb => tb.HasTrigger("TR_Podio_sync_UnifiedEmail"));

            entity.Property(e => e.PodioId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PodioID");
            entity.Property(e => e.EmailAddress)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");

            entity.HasOne(d => d.Podio).WithMany(p => p.PodioEmails)
                .HasForeignKey(d => d.PodioId)
                .HasConstraintName("FK_Podio_Email_Contact");

            entity.HasOne(d => d.TypeNavigation).WithMany(p => p.PodioEmails)
                .HasForeignKey(d => d.Type)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Podio_Email_Type");
        });

        modelBuilder.Entity<PodioPhone>(entity =>
        {
            entity.HasKey(e => new { e.PodioId, e.PhoneNumber }).HasName("PK_Podio_Phone");

            entity.ToTable("PodioPhone", "Contact", tb => tb.HasTrigger("TR_Podio_sync_UnifiedPhone"));

            entity.Property(e => e.PodioId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PodioID");
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");

            entity.HasOne(d => d.Podio).WithMany(p => p.PodioPhones)
                .HasForeignKey(d => d.PodioId)
                .HasConstraintName("FK_Podio_Phone_Contact");

            entity.HasOne(d => d.TypeNavigation).WithMany(p => p.PodioPhones)
                .HasForeignKey(d => d.Type)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Podio_Phone_Type");
        });

        modelBuilder.Entity<PollstarArtist>(entity =>
        {
            entity.HasKey(e => e.ArtistId);

            entity.Property(e => e.ArtistId)
                .ValueGeneratedNever()
                .HasColumnName("ArtistID");
            entity.Property(e => e.ArtistName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CrmleadUrl)
                .IsUnicode(false)
                .HasColumnName("CRMLeadURL");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Genre)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasMany(d => d.SongkickArtists).WithMany(p => p.PollstarArtists)
                .UsingEntity<Dictionary<string, object>>(
                    "PollstarSongkickArtistLink",
                    r => r.HasOne<SongkickArtist>().WithMany()
                        .HasForeignKey("SongkickArtistId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_SongkickArtistID"),
                    l => l.HasOne<PollstarArtist>().WithMany()
                        .HasForeignKey("PollstarArtistId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_PollstarArtistID"),
                    j =>
                    {
                        j.HasKey("PollstarArtistId", "SongkickArtistId").HasName("PK__Pollstar__384F19609CCC48F0");
                        j.ToTable("PollstarSongkickArtistLink");
                        j.HasIndex(new[] { "SongkickArtistId", "PollstarArtistId" }, "UC_PollstarSongkickArtistLink_SongkickToPollstar").IsUnique();
                        j.IndexerProperty<int>("PollstarArtistId").HasColumnName("PollstarArtistID");
                        j.IndexerProperty<int>("SongkickArtistId").HasColumnName("SongkickArtistID");
                    });
        });

        modelBuilder.Entity<PollstarArtistLegacyIdtranslation>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PollstarArtistLegacyIDTranslation");

            entity.Property(e => e.ArtistId).HasColumnName("ArtistID");
            entity.Property(e => e.ArtistName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LegacyArtistId).HasColumnName("LegacyArtistID");
        });

        modelBuilder.Entity<PollstarArtistsBulkSave>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PollstarArtistsBulkSave");

            entity.Property(e => e.ArtistId).HasColumnName("ArtistID");
            entity.Property(e => e.ArtistName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Genre)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<PollstarArtistsEventsDateRangesInRegion>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Pollstar_Artists_Events_Date_Ranges_in_Regions");

            entity.Property(e => e.ArtistId).HasColumnName("ArtistID");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.Region)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.StartDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<PollstarArtistsEventsPerYearMonthInRegion>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Pollstar_Artists_Events_Per_Year_Month_in_Regions");

            entity.Property(e => e.ArtistId).HasColumnName("ArtistID");
            entity.Property(e => e.TheMonth).HasColumnName("theMonth");
            entity.Property(e => e.TheYear).HasColumnName("theYear");
        });

        modelBuilder.Entity<PollstarCity>(entity =>
        {
            entity.HasKey(e => e.CityId).HasName("PK__Pollstar__F2D21A965CB8CF39");

            entity.Property(e => e.CityId)
                .ValueGeneratedNever()
                .HasColumnName("CityID");
            entity.Property(e => e.DisplayName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Latitude).HasColumnType("decimal(11, 7)");
            entity.Property(e => e.Longitude).HasColumnType("decimal(11, 7)");
            entity.Property(e => e.Name)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.StateId).HasColumnName("StateID");
            entity.Property(e => e.Url).IsUnicode(false);
        });

        modelBuilder.Entity<PollstarEvent>(entity =>
        {
            entity.HasKey(e => new { e.PlayDate, e.ArtistId, e.VenueId, e.DateCreated, e.ActCode });

            entity.HasIndex(e => new { e.ArtistId, e.PlayDate }, "IX_PollstarEvents_by_Artist");

            entity.Property(e => e.PlayDate).HasColumnType("datetime");
            entity.Property(e => e.ArtistId).HasColumnName("ArtistID");
            entity.Property(e => e.VenueId).HasColumnName("VenueID");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.ActCode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.EventId).HasColumnName("EventID");
            entity.Property(e => e.StateId).HasColumnName("StateID");

            entity.HasOne(d => d.Artist).WithMany(p => p.PollstarEvents)
                .HasForeignKey(d => d.ArtistId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PollstarEvents__ArtistID");

            entity.HasOne(d => d.Venue).WithMany(p => p.PollstarEvents)
                .HasForeignKey(d => d.VenueId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PollstarEvents__VenueID");
        });

        modelBuilder.Entity<PollstarEventsBulkSave>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PollstarEventsBulkSave");

            entity.Property(e => e.ActCode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ArtistId).HasColumnName("ArtistID");
            entity.Property(e => e.EventId).HasColumnName("EventID");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.PlayDate).HasColumnType("datetime");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.StateId).HasColumnName("StateID");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
            entity.Property(e => e.VenueId).HasColumnName("VenueID");
        });

        modelBuilder.Entity<PollstarNewVenueTypeConversion>(entity =>
        {
            entity.HasKey(e => e.VenueTypeDesc).HasName("PK__Pollstar__8300D6C258537C3D");

            entity.ToTable("PollstarNewVenueTypeConversion");

            entity.Property(e => e.VenueTypeDesc)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.VenueCode)
                .HasMaxLength(5)
                .IsUnicode(false);

            entity.HasOne(d => d.VenueCodeNavigation).WithMany(p => p.PollstarNewVenueTypeConversions)
                .HasForeignKey(d => d.VenueCode)
                .HasConstraintName("FK_PollstarNewVenueTypeConversion_venueType");
        });

        modelBuilder.Entity<PollstarQtyArtistsPerVenueType>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Pollstar_Qty_Artists_per_Venue_Type");

            entity.Property(e => e.VenueType)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PollstarReaderHideArtistUntil>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Pollstar_Reader_Hide_Artist_Until");

            entity.Property(e => e.PollstarArtistId).HasColumnName("PollstarArtistID");
            entity.Property(e => e.SongkickArtistId).HasColumnName("SongkickArtistID");
        });

        modelBuilder.Entity<PollstarReaderHideArtistUntil1>(entity =>
        {
            entity.HasKey(e => new { e.PollstarArtistId, e.SongkickArtistId, e.UserName });

            entity.ToTable("PollstarReaderHideArtistUntil");

            entity.Property(e => e.PollstarArtistId).HasColumnName("PollstarArtistID");
            entity.Property(e => e.SongkickArtistId).HasColumnName("SongkickArtistID");
            entity.Property(e => e.UserName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("user_name");

            entity.HasOne(d => d.PollstarArtist).WithMany(p => p.PollstarReaderHideArtistUntil1s)
                .HasForeignKey(d => d.PollstarArtistId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PollstarReaderHideArtistUntil_PollstarArtists");

            entity.HasOne(d => d.UserNameNavigation).WithMany(p => p.PollstarReaderHideArtistUntil1s)
                .HasForeignKey(d => d.UserName)
                .HasConstraintName("FK_PollstarReaderHideArtistUntil_pjtfrusr");
        });

        modelBuilder.Entity<PollstarSongkickArtist>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PollstarSongkickArtist");

            entity.Property(e => e.ArtistName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CrmleadUrl)
                .IsUnicode(false)
                .HasColumnName("CRMLeadURL");
            entity.Property(e => e.Genre)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PollstarArtistId).HasColumnName("PollstarArtistID");
            entity.Property(e => e.SongkickArtistId).HasColumnName("SongkickArtistID");
            entity.Property(e => e.Source)
                .HasMaxLength(17)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PollstarSongkickEvent>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PollstarSongkickEvents");

            entity.Property(e => e.ActCode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.EventType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.MetroAreaId).HasColumnName("MetroAreaID");
            entity.Property(e => e.PlayDate).HasColumnType("datetime");
            entity.Property(e => e.PollstarArtistId).HasColumnName("PollstarArtistID");
            entity.Property(e => e.PollstarVenueId).HasColumnName("PollstarVenueID");
            entity.Property(e => e.SongkickArtistId).HasColumnName("SongkickArtistID");
            entity.Property(e => e.SongkickVenueId).HasColumnName("SongkickVenueID");
            entity.Property(e => e.Source)
                .HasMaxLength(17)
                .IsUnicode(false);
            entity.Property(e => e.StateId).HasColumnName("StateID");
            entity.Property(e => e.VenueCode)
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PollstarSongkickEventDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PollstarSongkickEventDetails");

            entity.Property(e => e.ActCode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Address1).HasMaxLength(250);
            entity.Property(e => e.Address2).HasMaxLength(250);
            entity.Property(e => e.ArtistName).HasMaxLength(250);
            entity.Property(e => e.CallingCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.City).HasMaxLength(50);
            entity.Property(e => e.Country)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CountryCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.EventType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Latitude).HasColumnType("decimal(11, 7)");
            entity.Property(e => e.Longitude).HasColumnType("decimal(12, 7)");
            entity.Property(e => e.MetroAreaId).HasColumnName("MetroAreaID");
            entity.Property(e => e.OarevOpPerShowHigh)
                .HasColumnType("money")
                .HasColumnName("OARevOpPerShowHigh");
            entity.Property(e => e.OarevOpPerShowLow)
                .HasColumnType("money")
                .HasColumnName("OARevOpPerShowLow");
            entity.Property(e => e.Phone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PollstarArtistId).HasColumnName("PollstarArtistID");
            entity.Property(e => e.PollstarVenueId).HasColumnName("PollstarVenueID");
            entity.Property(e => e.RevOpPerShowHigh).HasColumnType("money");
            entity.Property(e => e.RevOpPerShowLow).HasColumnType("money");
            entity.Property(e => e.SongkickArtistId).HasColumnName("SongkickArtistID");
            entity.Property(e => e.SongkickVenueId).HasColumnName("SongkickVenueID");
            entity.Property(e => e.Source)
                .HasMaxLength(17)
                .IsUnicode(false);
            entity.Property(e => e.StateCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StateId).HasColumnName("StateID");
            entity.Property(e => e.StateName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VenueCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.VenueName).HasMaxLength(250);
            entity.Property(e => e.Zip)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PollstarSongkickNewMatchingVenue>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Pollstar_Songkick_New_Matching_Venues");

            entity.Property(e => e.CallingCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Country)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CountryCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.LatDiff).HasColumnType("decimal(12, 7)");
            entity.Property(e => e.LngDiff).HasColumnType("decimal(13, 7)");
            entity.Property(e => e.PCity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("pCity");
            entity.Property(e => e.PLat)
                .HasColumnType("decimal(11, 7)")
                .HasColumnName("pLat");
            entity.Property(e => e.PLng)
                .HasColumnType("decimal(12, 7)")
                .HasColumnName("pLng");
            entity.Property(e => e.PZip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("pZip");
            entity.Property(e => e.PollstarAddress1)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PollstarVenueId).HasColumnName("PollstarVenueID");
            entity.Property(e => e.PollstarVenueName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.PsvlPollstarVenueId).HasColumnName("psvlPollstarVenueID");
            entity.Property(e => e.PsvlSongkickVenueId).HasColumnName("psvlSongkickVenueID");
            entity.Property(e => e.SCity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sCity");
            entity.Property(e => e.SLat)
                .HasColumnType("decimal(11, 7)")
                .HasColumnName("sLat");
            entity.Property(e => e.SLng)
                .HasColumnType("decimal(12, 7)")
                .HasColumnName("sLng");
            entity.Property(e => e.SZip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sZip");
            entity.Property(e => e.SongkickAddress1)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.SongkickVenueId).HasColumnName("SongkickVenueID");
            entity.Property(e => e.SongkickVenueName)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PollstarSongkickVenue>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PollstarSongkickVenue");

            entity.Property(e => e.Address1).HasMaxLength(250);
            entity.Property(e => e.Address2).HasMaxLength(250);
            entity.Property(e => e.CallingCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.City).HasMaxLength(50);
            entity.Property(e => e.Country)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CountryCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Latitude).HasColumnType("decimal(11, 7)");
            entity.Property(e => e.Longitude).HasColumnType("decimal(12, 7)");
            entity.Property(e => e.MetroAreaId).HasColumnName("MetroAreaID");
            entity.Property(e => e.Phone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PollstarVenueId).HasColumnName("PollstarVenueID");
            entity.Property(e => e.SongkickVenueId).HasColumnName("SongkickVenueID");
            entity.Property(e => e.Source)
                .HasMaxLength(17)
                .IsUnicode(false);
            entity.Property(e => e.StateCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StateName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VenueName).HasMaxLength(250);
            entity.Property(e => e.Zip)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PollstarSongkickVenueLink>(entity =>
        {
            entity.HasKey(e => new { e.PollstarVenueId, e.SongkickVenueId }).HasName("PK__Pollstar__49CBD991E8243BFC");

            entity.ToTable("PollstarSongkickVenueLink");

            entity.Property(e => e.PollstarVenueId).HasColumnName("PollstarVenueID");
            entity.Property(e => e.SongkickVenueId).HasColumnName("SongkickVenueID");

            entity.HasOne(d => d.PollstarVenue).WithMany(p => p.PollstarSongkickVenueLinks)
                .HasForeignKey(d => d.PollstarVenueId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PollstarVenueID");
        });

        modelBuilder.Entity<PollstarStateProvince>(entity =>
        {
            entity.ToTable("PollstarStateProvince");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("ID");
            entity.Property(e => e.Country)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Countrycode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("countrycode");
            entity.Property(e => e.Region)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.StateProvince)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("State_Province");

            entity.HasOne(d => d.CountrycodeNavigation).WithMany(p => p.PollstarStateProvinces)
                .HasForeignKey(d => d.Countrycode)
                .HasConstraintName("FK_PollstarStateProvice_Country");
        });

        modelBuilder.Entity<PollstarTempVenueType>(entity =>
        {
            entity.HasKey(e => new { e.VenueId, e.VenueTypeDesc });

            entity.Property(e => e.VenueId).HasColumnName("VenueID");
            entity.Property(e => e.VenueTypeDesc)
                .HasMaxLength(150)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PollstarTopArtist>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.ArtistId).HasColumnName("ArtistID");
            entity.Property(e => e.ArtistName)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PollstarVenue>(entity =>
        {
            entity.HasKey(e => e.VenueId);

            entity.Property(e => e.VenueId)
                .ValueGeneratedNever()
                .HasColumnName("VenueID");
            entity.Property(e => e.Address1)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Address2)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CountryCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.CountryDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Latitude).HasColumnType("decimal(11, 7)");
            entity.Property(e => e.Longitude).HasColumnType("decimal(12, 7)");
            entity.Property(e => e.Phone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StateCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StateName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VenueName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Website).IsUnicode(false);
            entity.Property(e => e.Zip)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PollstarVenueLegacyIdtranslation>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PollstarVenueLegacyIDTranslation");

            entity.Property(e => e.LegacyVenueId).HasColumnName("LegacyVenueID");
            entity.Property(e => e.VenueId).HasColumnName("VenueID");
            entity.Property(e => e.VenueName)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PollstarVenuesBulkSave>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PollstarVenuesBulkSave");

            entity.Property(e => e.Address1)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Address2)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CountryCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.CountryDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Phone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.StateCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StateName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
            entity.Property(e => e.VenueId).HasColumnName("VenueID");
            entity.Property(e => e.VenueName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Website).IsUnicode(false);
            entity.Property(e => e.Zip)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PollstarVenuesVenueType>(entity =>
        {
            entity.HasKey(e => e.VenueId);

            entity.ToTable("PollstarVenuesVenueType");

            entity.Property(e => e.VenueId)
                .ValueGeneratedNever()
                .HasColumnName("VenueID");
            entity.Property(e => e.VenueCode)
                .HasMaxLength(5)
                .IsUnicode(false);

            entity.HasOne(d => d.VenueCodeNavigation).WithMany(p => p.PollstarVenuesVenueTypes)
                .HasForeignKey(d => d.VenueCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PollstarVenuesVenueType_VenueCode");

            entity.HasOne(d => d.Venue).WithOne(p => p.PollstarVenuesVenueType)
                .HasForeignKey<PollstarVenuesVenueType>(d => d.VenueId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PollstarVenuesVenueType_VenueID");
        });

        modelBuilder.Entity<Popayterm>(entity =>
        {
            entity.HasKey(e => e.Paytermscd);

            entity.ToTable("popayterms");

            entity.Property(e => e.Paytermscd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("paytermscd");
            entity.Property(e => e.DiscDays).HasColumnName("disc_days");
            entity.Property(e => e.DiscFxpc)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("disc_fxpc");
            entity.Property(e => e.DiscRate).HasColumnName("disc_rate");
            entity.Property(e => e.EomInd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("eom_ind");
            entity.Property(e => e.NetDays).HasColumnName("net_days");
            entity.Property(e => e.Paytermsdesc)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("paytermsdesc");
        });

        modelBuilder.Entity<Povendor>(entity =>
        {
            entity.HasKey(e => e.Vendno).HasFillFactor(90);

            entity.ToTable("povendor", tb => tb.HasTrigger("TR_povendor__notify_about_new_vendors"));

            entity.Property(e => e.Vendno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("vendno");
            entity.Property(e => e.Acctid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("acctid");
            entity.Property(e => e.AchYn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ach_yn");
            entity.Property(e => e.Activeind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("activeind");
            entity.Property(e => e.Ap1099Ind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ap1099_ind");
            entity.Property(e => e.ApproveStat)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("approve_stat");
            entity.Property(e => e.Bank)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bank");
            entity.Property(e => e.Bankid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bankid");
            entity.Property(e => e.Bankname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("bankname");
            entity.Property(e => e.BusinessCd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("business_cd");
            entity.Property(e => e.BuyerCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("buyer_code");
            entity.Property(e => e.Caseregister)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("caseregister");
            entity.Property(e => e.ChkSavCd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("chk_sav_cd");
            entity.Property(e => e.Commodity1)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("commodity1");
            entity.Property(e => e.Commodity2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("commodity2");
            entity.Property(e => e.CompCertify)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("comp_certify");
            entity.Property(e => e.CompRating)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("comp_rating");
            entity.Property(e => e.CorporationInd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("corporation_ind");
            entity.Property(e => e.CurYrPo)
                .HasColumnType("money")
                .HasColumnName("cur_yr_po");
            entity.Property(e => e.DBRating)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("d_b_rating");
            entity.Property(e => e.Discount1).HasColumnName("discount1");
            entity.Property(e => e.Discount2).HasColumnName("discount2");
            entity.Property(e => e.EeocCertify)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("eeoc_certify");
            entity.Property(e => e.EeocType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("eeoc_type");
            entity.Property(e => e.Employeecnt).HasColumnName("employeecnt");
            entity.Property(e => e.Employeeind)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("employeeind");
            entity.Property(e => e.FileStorageGuid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("FileStorageGUID");
            entity.Property(e => e.InsrCertify)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("insr_certify");
            entity.Property(e => e.LaborSurplus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("labor_surplus");
            entity.Property(e => e.LastSurvey)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("last_survey");
            entity.Property(e => e.LastYrAp)
                .HasColumnType("money")
                .HasColumnName("last_yr_ap");
            entity.Property(e => e.LastYrDisc)
                .HasColumnType("money")
                .HasColumnName("last_yr_disc");
            entity.Property(e => e.LastYrPo)
                .HasColumnType("money")
                .HasColumnName("last_yr_po");
            entity.Property(e => e.LastYrSale)
                .HasColumnType("money")
                .HasColumnName("last_yr_sale");
            entity.Property(e => e.Lastactivity)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("lastactivity");
            entity.Property(e => e.MtdAp)
                .HasColumnType("money")
                .HasColumnName("mtd_ap");
            entity.Property(e => e.MtdDisc)
                .HasColumnType("money")
                .HasColumnName("mtd_disc");
            entity.Property(e => e.Parent)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("parent");
            entity.Property(e => e.Paytermscd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("paytermscd");
            entity.Property(e => e.PrevYrSale)
                .HasColumnType("money")
                .HasColumnName("prev_yr_sale");
            entity.Property(e => e.PrimUnion)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("prim_union");
            entity.Property(e => e.Problemcd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("problemcd");
            entity.Property(e => e.PublicInd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("public_ind");
            entity.Property(e => e.QcApproval)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("qc_approval");
            entity.Property(e => e.Ref1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref1");
            entity.Property(e => e.Ref2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref2");
            entity.Property(e => e.Ref3)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref3");
            entity.Property(e => e.Ref4)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref5");
            entity.Property(e => e.Ref6)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref6");
            entity.Property(e => e.Ref7)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref7");
            entity.Property(e => e.Ref8)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref8");
            entity.Property(e => e.SecondUnion)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("second_union");
            entity.Property(e => e.Taxid)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("taxid");
            entity.Property(e => e.Unioncontend)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("unioncontend");
            entity.Property(e => e.VendCustno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("vend_custno");
            entity.Property(e => e.VendReprom).HasColumnName("vend_reprom");
            entity.Property(e => e.VendorAbbr)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("vendor_abbr");
            entity.Property(e => e.VendorName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("vendor_name");
            entity.Property(e => e.YearFormed)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("year_formed");
            entity.Property(e => e.YtdAp)
                .HasColumnType("money")
                .HasColumnName("ytd_ap");
            entity.Property(e => e.YtdDisc)
                .HasColumnType("money")
                .HasColumnName("ytd_disc");

            entity.HasMany(d => d.IdContactCategories).WithMany(p => p.Vendnos)
                .UsingEntity<Dictionary<string, object>>(
                    "VendorsContactCategory",
                    r => r.HasOne<ContactCategory>().WithMany()
                        .HasForeignKey("IdContactCategory")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_VendorsContactCategories_ContactCategory"),
                    l => l.HasOne<Povendor>().WithMany()
                        .HasForeignKey("Vendno")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_VendorsContactCategories_povendor"),
                    j =>
                    {
                        j.HasKey("Vendno", "IdContactCategory");
                        j.ToTable("VendorsContactCategories");
                        j.IndexerProperty<string>("Vendno")
                            .HasMaxLength(10)
                            .IsUnicode(false)
                            .HasColumnName("vendno");
                        j.IndexerProperty<int>("IdContactCategory").HasColumnName("id_ContactCategory");
                    });
        });

        modelBuilder.Entity<Povendsite>(entity =>
        {
            entity.HasKey(e => new { e.Vendno, e.SiteNo }).HasFillFactor(90);

            entity.ToTable("povendsite", tb =>
                {
                    tb.HasTrigger("TR_Vendor_insert_UnifiedContact");
                    tb.HasTrigger("TR_Vendor_update_UnifiedContact");
                });

            entity.Property(e => e.Vendno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("vendno");
            entity.Property(e => e.SiteNo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("site_no");
            entity.Property(e => e.Abnnumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ABNNumber");
            entity.Property(e => e.Activeind)
                .HasDefaultValue(true)
                .HasColumnName("activeind");
            entity.Property(e => e.Address1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("address_1");
            entity.Property(e => e.Address2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("address_2");
            entity.Property(e => e.Address3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("address_3");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("city");
            entity.Property(e => e.Commodity1)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("commodity1");
            entity.Property(e => e.Commodity2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("commodity2");
            entity.Property(e => e.Contact)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("contact");
            entity.Property(e => e.Country)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("country");
            entity.Property(e => e.County)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("county");
            entity.Property(e => e.Currencycd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("currencycd");
            entity.Property(e => e.Email2)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("email2");
            entity.Property(e => e.Endshut)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("endshut");
            entity.Property(e => e.Extension)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("extension");
            entity.Property(e => e.Fax)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("fax");
            entity.Property(e => e.IdLanguage)
                .HasDefaultValue(2)
                .HasColumnName("id_language");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("notes");
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("phone");
            entity.Property(e => e.Ref1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref1");
            entity.Property(e => e.Ref2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref2");
            entity.Property(e => e.Ref3)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref3");
            entity.Property(e => e.Ref4)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref5");
            entity.Property(e => e.Ref6)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref6");
            entity.Property(e => e.Ref7)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref7");
            entity.Property(e => e.Ref8)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ref8");
            entity.Property(e => e.Startshut)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("startshut");
            entity.Property(e => e.State)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("state");
            entity.Property(e => e.Telex)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("telex");
            entity.Property(e => e.TransTime).HasColumnName("trans_time");
            entity.Property(e => e.Usenet)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("usenet");
            entity.Property(e => e.VatidentificationNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VATIdentificationNumber");
            entity.Property(e => e.Vatstatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("VATStatus");
            entity.Property(e => e.Voicemail)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("voicemail");
            entity.Property(e => e.Zipcode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("zipcode");

            entity.HasOne(d => d.IdLanguageNavigation).WithMany(p => p.Povendsites)
                .HasForeignKey(d => d.IdLanguage)
                .HasConstraintName("FK_povendsite__id_language");

            entity.HasOne(d => d.VatstatusNavigation).WithMany(p => p.Povendsites)
                .HasForeignKey(d => d.Vatstatus)
                .HasConstraintName("FK_povendsite__VATStatus");
        });

        modelBuilder.Entity<PrepBayAndDockList>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PrepBayAndDockList");

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.Location)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("location");
            entity.Property(e => e.Sortorder).HasColumnName("sortorder");
            entity.Property(e => e.Warehouse)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Probqueue>(entity =>
        {
            entity.HasKey(e => e.Primekey).HasFillFactor(90);

            entity.ToTable("probqueue");

            entity.Property(e => e.Primekey)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("primekey");
            entity.Property(e => e.Exctype)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("exctype");
            entity.Property(e => e.Frompartentityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("frompartentityno");
            entity.Property(e => e.Inproject)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("inproject");
            entity.Property(e => e.Lastentityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("lastentityno");
            entity.Property(e => e.Lastwarehouse)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("lastwarehouse");
            entity.Property(e => e.MsreplTranVersion)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Partdesc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("partno");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("serial_no");
            entity.Property(e => e.Sessionid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("sessionid");
            entity.Property(e => e.Trandate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("trandate");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<ProductionScheduleEventType>(entity =>
        {
            entity.HasKey(e => e.TypeCode);

            entity.ToTable("ProductionScheduleEventType");

            entity.Property(e => e.TypeCode)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.IsFirstLoadIn).HasColumnName("isFirstLoadIn");
            entity.Property(e => e.IsLastLoadOut).HasColumnName("isLastLoadOut");
            entity.Property(e => e.IsTrucking).HasColumnName("isTrucking");
            entity.Property(e => e.ShortDesc)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TypeDescription)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ProjCalNotesProj>(entity =>
        {
            entity.HasKey(e => e.ProjNoteId).IsClustered(false);

            entity.ToTable("ProjCalNotes_Proj");

            entity.HasIndex(e => new { e.Entityno, e.IsIncoming, e.IsPrivate }, "IX_ProjCalNotes_Proj").IsClustered();

            entity.Property(e => e.ProjNoteId).HasColumnName("ProjNoteID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(128)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("createdBy");
            entity.Property(e => e.DateCreated)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnType("datetime")
                .HasColumnName("dateCreated");
            entity.Property(e => e.DateModified)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnType("datetime")
                .HasColumnName("dateModified");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.IsIncoming).HasColumnName("is_incoming");
            entity.Property(e => e.IsPrivate).HasColumnName("is_private");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(128)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("modifiedBy");
            entity.Property(e => e.Note).HasMaxLength(2000);
            entity.Property(e => e.NoteTag).HasMaxLength(50);

            entity.HasOne(d => d.EntitynoNavigation).WithMany(p => p.ProjCalNotesProjs)
                .HasForeignKey(d => d.Entityno)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ProjCalNotes_Proj_glentities");
        });

        modelBuilder.Entity<ProjCalNotesWarehouse>(entity =>
        {
            entity.HasKey(e => e.WarehouseNoteId).IsClustered(false);

            entity.ToTable("ProjCalNotes_Warehouse");

            entity.HasIndex(e => new { e.Date, e.Warehouse, e.IsPrivate }, "IX_ProjCalNotes_Warehouse").IsClustered();

            entity.Property(e => e.WarehouseNoteId).HasColumnName("WarehouseNoteID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(128)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("createdBy");
            entity.Property(e => e.Date).HasColumnType("smalldatetime");
            entity.Property(e => e.DateCreated)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnType("datetime")
                .HasColumnName("dateCreated");
            entity.Property(e => e.DateModified)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnType("datetime")
                .HasColumnName("dateModified");
            entity.Property(e => e.IsPrivate).HasColumnName("is_private");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(128)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("modifiedBy");
            entity.Property(e => e.Note).HasMaxLength(2000);
            entity.Property(e => e.NoteTag).HasMaxLength(50);
            entity.Property(e => e.Warehouse)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("warehouse");

            entity.HasOne(d => d.WarehouseNavigation).WithMany(p => p.ProjCalNotesWarehouses)
                .HasForeignKey(d => d.Warehouse)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjCalNotes_Warehouse_Warehouse");
        });

        modelBuilder.Entity<ProjcalPartTodateException>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("projcal_part_todate_exceptions");

            entity.Property(e => e.CountBig).HasColumnName("_count_big");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("todate");
        });

        modelBuilder.Entity<ProjcalPartTrandateException>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("projcal_part_trandate_exceptions");

            entity.Property(e => e.CountBig).HasColumnName("_count_big");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Trandate)
                .HasColumnType("datetime")
                .HasColumnName("trandate");
        });

        modelBuilder.Entity<ProjectBillingCompany>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("project_billing_companies");

            entity.Property(e => e.BillingCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CBig).HasColumnName("cBig");
            entity.Property(e => e.RootEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("rootEntityno");
        });

        modelBuilder.Entity<ProjectBillingItem>(entity =>
        {
            entity.HasKey(e => new { e.BidEntityno, e.Itemno });

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("d_AuditProjectBillingItems");
                    tb.HasTrigger("i_AuditProjectBillingItems");
                    tb.HasTrigger("u_AuditProjectBillingItems");
                });

            entity.HasIndex(e => e.CrewEntityno, "ProjectBillingItems_crew_entityno").HasFilter("([crew_entityno] IS NOT NULL)");

            entity.HasIndex(e => e.EquipmentEntityno, "ProjectBillingItems_equipment_entityno").HasFilter("([equipment_entityno] IS NOT NULL)");

            entity.HasIndex(e => e.ExpenseEntityno, "ProjectBillingItems_expense_entityno").HasFilter("([expense_entityno] IS NOT NULL)");

            entity.Property(e => e.BidEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bid_entityno");
            entity.Property(e => e.Itemno).HasColumnName("itemno");
            entity.Property(e => e.CrewEmplineNo).HasColumnName("crew_empline_no");
            entity.Property(e => e.CrewEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("crew_entityno");
            entity.Property(e => e.EquipmentEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("equipment_entityno");
            entity.Property(e => e.ExpenseEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("expense_entityno");
            entity.Property(e => e.ExpenseSeqno).HasColumnName("expense_seqno");

            entity.HasOne(d => d.BidEntitynoNavigation).WithMany(p => p.ProjectBillingItemBidEntitynoNavigations)
                .HasForeignKey(d => d.BidEntityno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjectBillingItems_glentities__bid_entityno");

            entity.HasOne(d => d.EquipmentEntitynoNavigation).WithMany(p => p.ProjectBillingItemEquipmentEntitynoNavigations)
                .HasForeignKey(d => d.EquipmentEntityno)
                .HasConstraintName("FK_ProjectBillingItems_glentities__equipment_entityno");

            entity.HasOne(d => d.Pjjobexpense).WithMany(p => p.ProjectBillingItems)
                .HasForeignKey(d => new { d.ExpenseEntityno, d.ExpenseSeqno })
                .HasConstraintName("FK_ProjectBillingItems_pjjobexpenses");
        });

        modelBuilder.Entity<ProjectBillingItemsA>(entity =>
        {
            entity.HasKey(e => e.AtransactionId).IsClustered(false);

            entity.ToTable("ProjectBillingItemsA");

            entity.Property(e => e.AtransactionId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ATransactionID");
            entity.Property(e => e.AdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnName("ADateTime");
            entity.Property(e => e.ArecordAction).HasColumnName("ARecordAction");
            entity.Property(e => e.Atransaction).HasColumnName("ATransaction");
            entity.Property(e => e.AuserId)
                .IsUnicode(false)
                .HasColumnName("AUserID");
            entity.Property(e => e.BidEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bid_entityno");
            entity.Property(e => e.CrewEmplineNo).HasColumnName("crew_empline_no");
            entity.Property(e => e.CrewEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("crew_entityno");
            entity.Property(e => e.EquipmentEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("equipment_entityno");
            entity.Property(e => e.ExpenseEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("expense_entityno");
            entity.Property(e => e.ExpenseSeqno).HasColumnName("expense_seqno");
            entity.Property(e => e.Itemno).HasColumnName("itemno");
        });

        modelBuilder.Entity<ProjectBillingItemsDuration>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("project_billing_items_durations");

            entity.Property(e => e.BidEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bid_entityno");
            entity.Property(e => e.CBig).HasColumnName("cBig");
            entity.Property(e => e.IsEquipment).HasColumnName("isEquipment");
            entity.Property(e => e.Itemno).HasColumnName("itemno");
        });

        modelBuilder.Entity<ProjectBillingItemsRate>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("project_billing_items_rates");

            entity.Property(e => e.BidEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bid_entityno");
            entity.Property(e => e.Itemno).HasColumnName("itemno");
            entity.Property(e => e.RateMultiplier).HasColumnType("numeric(7, 6)");
        });

        modelBuilder.Entity<ProjectBillingPeriod>(entity =>
        {
            entity.HasKey(e => new { e.BidEntityno, e.Periodno });

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("d_AuditProjectBillingPeriods");
                    tb.HasTrigger("i_AuditProjectBillingPeriods");
                    tb.HasTrigger("u_AuditProjectBillingPeriods");
                });

            entity.Property(e => e.BidEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bid_entityno");
            entity.Property(e => e.Periodno).HasColumnName("periodno");
            entity.Property(e => e.EndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasColumnName("isActive");
            entity.Property(e => e.PeriodTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ShowOnQuoteReport).HasDefaultValue(true);
            entity.Property(e => e.StartDate).HasColumnType("smalldatetime");

            entity.HasOne(d => d.BidEntitynoNavigation).WithMany(p => p.ProjectBillingPeriods)
                .HasForeignKey(d => d.BidEntityno)
                .HasConstraintName("FK_ProjectBillingPeriods_glentities");
        });

        modelBuilder.Entity<ProjectBillingPeriodActiveItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Project_Billing_Period_Active_Items");

            entity.Property(e => e.BidEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bid_entityno");
            entity.Property(e => e.BillingDays).HasColumnName("billingDays");
            entity.Property(e => e.EndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.Itemno).HasColumnName("itemno");
            entity.Property(e => e.Periodno).HasColumnName("periodno");
            entity.Property(e => e.StartDate).HasColumnType("smalldatetime");
        });

        modelBuilder.Entity<ProjectBillingPeriodItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Project_Billing_Period_Items");

            entity.Property(e => e.BidEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bid_entityno");
            entity.Property(e => e.EndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.Grouptype)
                .HasMaxLength(28)
                .IsUnicode(false)
                .HasColumnName("grouptype");
            entity.Property(e => e.Itemno).HasColumnName("itemno");
            entity.Property(e => e.PeriodType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("period_type");
            entity.Property(e => e.Periodno).HasColumnName("periodno");
            entity.Property(e => e.Proptype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("proptype");
            entity.Property(e => e.Sortorder).HasColumnName("sortorder");
            entity.Property(e => e.StartDate).HasColumnType("smalldatetime");
        });

        modelBuilder.Entity<ProjectBillingPeriodItem1>(entity =>
        {
            entity.HasKey(e => new { e.BidEntityno, e.Periodno, e.Itemno });

            entity.ToTable("ProjectBillingPeriodItems", tb =>
                {
                    tb.HasTrigger("d_AuditProjectBillingPeriodItems");
                    tb.HasTrigger("i_AuditProjectBillingPeriodItems");
                    tb.HasTrigger("tr_fixed_expenses_may_not_be_attached_to_multiple_periods_from_ProjectBillingPeriodItems");
                    tb.HasTrigger("u_AuditProjectBillingPeriodItems");
                });

            entity.Property(e => e.BidEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bid_entityno");
            entity.Property(e => e.Periodno).HasColumnName("periodno");
            entity.Property(e => e.Itemno).HasColumnName("itemno");
            entity.Property(e => e.BillingDays).HasColumnName("billingDays");
            entity.Property(e => e.EndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.PeriodTotal).HasComputedColumnSql("(isnull([billingdays],datediff(day,[startdate],[enddate])+(1))*[ActualDailyRate])", false);
            entity.Property(e => e.StartDate).HasColumnType("smalldatetime");

            entity.HasOne(d => d.ProjectBillingItem).WithMany(p => p.ProjectBillingPeriodItem1s)
                .HasForeignKey(d => new { d.BidEntityno, d.Itemno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjectBillingPeriodItems_ProjectBillingItems");

            entity.HasOne(d => d.ProjectBillingPeriod).WithMany(p => p.ProjectBillingPeriodItem1s)
                .HasForeignKey(d => new { d.BidEntityno, d.Periodno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjectBillingPeriodItems_ProjectBillingPeriods");
        });

        modelBuilder.Entity<ProjectBillingPeriodItemsA>(entity =>
        {
            entity.HasKey(e => e.AtransactionId).IsClustered(false);

            entity.ToTable("ProjectBillingPeriodItemsA");

            entity.Property(e => e.AtransactionId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ATransactionID");
            entity.Property(e => e.AdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnName("ADateTime");
            entity.Property(e => e.ArecordAction).HasColumnName("ARecordAction");
            entity.Property(e => e.Atransaction).HasColumnName("ATransaction");
            entity.Property(e => e.AuserId)
                .IsUnicode(false)
                .HasColumnName("AUserID");
            entity.Property(e => e.BidEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bid_entityno");
            entity.Property(e => e.BillingDays).HasColumnName("billingDays");
            entity.Property(e => e.EndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.Itemno).HasColumnName("itemno");
            entity.Property(e => e.Periodno).HasColumnName("periodno");
            entity.Property(e => e.StartDate).HasColumnType("smalldatetime");
        });

        modelBuilder.Entity<ProjectBillingPeriodsA>(entity =>
        {
            entity.HasKey(e => e.AtransactionId).IsClustered(false);

            entity.ToTable("ProjectBillingPeriodsA");

            entity.Property(e => e.AtransactionId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ATransactionID");
            entity.Property(e => e.AdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnName("ADateTime");
            entity.Property(e => e.ArecordAction).HasColumnName("ARecordAction");
            entity.Property(e => e.Atransaction).HasColumnName("ATransaction");
            entity.Property(e => e.AuserId)
                .IsUnicode(false)
                .HasColumnName("AUserID");
            entity.Property(e => e.BidEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bid_entityno");
            entity.Property(e => e.EndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.IsActive).HasColumnName("isActive");
            entity.Property(e => e.PeriodTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Periodno).HasColumnName("periodno");
            entity.Property(e => e.StartDate).HasColumnType("smalldatetime");
        });

        modelBuilder.Entity<ProjectChargesStatusTemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ProjectChargesStatus_TEMP");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.MinInProcessChargeStartDate).HasColumnType("datetime");
            entity.Property(e => e.MinUnassignedChargeStartDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<ProjectChecklistCategory>(entity =>
        {
            entity.HasKey(e => e.Category);

            entity.ToTable("ProjectChecklistCategory");

            entity.Property(e => e.Category)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("category");
            entity.Property(e => e.Chronology).HasColumnName("chronology");
            entity.Property(e => e.Sortorder).HasColumnName("sortorder");
        });

        modelBuilder.Entity<ProjectChecklistItem>(entity =>
        {
            entity.HasKey(e => e.IdItem);

            entity.Property(e => e.IdItem).HasColumnName("id_item");
            entity.Property(e => e.Category)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("category");
            entity.Property(e => e.IsPublic).HasColumnName("isPublic");
            entity.Property(e => e.Item)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("item");
            entity.Property(e => e.Sortorder).HasColumnName("sortorder");
            entity.Property(e => e.Sqlquery)
                .IsUnicode(false)
                .HasColumnName("SQLquery");
            entity.Property(e => e.Subcategory)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("subcategory");

            entity.HasOne(d => d.ProjectChecklistSubCategory).WithMany(p => p.ProjectChecklistItems)
                .HasForeignKey(d => new { d.Category, d.Subcategory })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjectChecklistItems_ProjectChecklistSubCategory");

            entity.HasMany(d => d.Partnos).WithMany(p => p.IdItems)
                .UsingEntity<Dictionary<string, object>>(
                    "ProjectChecklistItemsPart",
                    r => r.HasOne<Inpart>().WithMany()
                        .HasForeignKey("Partno")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ProjectChecklistItemsParts_inpart"),
                    l => l.HasOne<ProjectChecklistItem>().WithMany()
                        .HasForeignKey("IdItem")
                        .HasConstraintName("FK_ProjectChecklistItemsParts_ProjectChecklistItems"),
                    j =>
                    {
                        j.HasKey("IdItem", "Partno");
                        j.ToTable("ProjectChecklistItemsParts");
                        j.IndexerProperty<int>("IdItem").HasColumnName("id_item");
                        j.IndexerProperty<string>("Partno")
                            .HasMaxLength(50)
                            .IsUnicode(false)
                            .HasColumnName("partno");
                    });

            entity.HasMany(d => d.UserNames).WithMany(p => p.IdItems)
                .UsingEntity<Dictionary<string, object>>(
                    "ProjectChecklistItemsUser",
                    r => r.HasOne<Pjtfrusr>().WithMany()
                        .HasForeignKey("UserName")
                        .HasConstraintName("FK_ProjectChecklistItemsUsers_pjtfrusr"),
                    l => l.HasOne<ProjectChecklistItem>().WithMany()
                        .HasForeignKey("IdItem")
                        .HasConstraintName("FK_ProjectChecklistItemsUsers_ProjectChecklistItems"),
                    j =>
                    {
                        j.HasKey("IdItem", "UserName");
                        j.ToTable("ProjectChecklistItemsUsers");
                        j.IndexerProperty<int>("IdItem").HasColumnName("id_item");
                        j.IndexerProperty<string>("UserName")
                            .HasMaxLength(30)
                            .IsUnicode(false)
                            .HasColumnName("user_name");
                    });
        });

        modelBuilder.Entity<ProjectChecklistSubCategory>(entity =>
        {
            entity.HasKey(e => new { e.Category, e.Subcategory });

            entity.ToTable("ProjectChecklistSubCategory");

            entity.Property(e => e.Category)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("category");
            entity.Property(e => e.Subcategory)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("subcategory");
            entity.Property(e => e.Sortorder).HasColumnName("sortorder");

            entity.HasOne(d => d.CategoryNavigation).WithMany(p => p.ProjectChecklistSubCategories)
                .HasForeignKey(d => d.Category)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjectChecklistSubCategory_ProjectChecklistCategory");
        });

        modelBuilder.Entity<ProjectChecklistValue>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.IdItem });

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.IdItem).HasColumnName("id_item");
            entity.Property(e => e.Checkvalue).HasColumnName("checkvalue");
            entity.Property(e => e.Datetime)
                .HasColumnType("datetime")
                .HasColumnName("datetime");
            entity.Property(e => e.Note)
                .IsUnicode(false)
                .HasColumnName("note");
            entity.Property(e => e.UserName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("user_name");

            entity.HasOne(d => d.EntitynoNavigation).WithMany(p => p.ProjectChecklistValues)
                .HasForeignKey(d => d.Entityno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjectChecklistValue_glentities");

            entity.HasOne(d => d.IdItemNavigation).WithMany(p => p.ProjectChecklistValues)
                .HasForeignKey(d => d.IdItem)
                .HasConstraintName("FK_ProjectChecklistValue_ProjectChecklistItems");

            entity.HasOne(d => d.UserNameNavigation).WithMany(p => p.ProjectChecklistValues)
                .HasForeignKey(d => d.UserName)
                .HasConstraintName("FK_ProjectChecklistValues_pjtfrusr");
        });

        modelBuilder.Entity<ProjectClientContact>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.IdContactCategory, e.ContactNo }).IsClustered(false);

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.IdContactCategory).HasColumnName("id_ContactCategory");
            entity.Property(e => e.ContactNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.EntitynoNavigation).WithMany(p => p.ProjectClientContacts)
                .HasForeignKey(d => d.Entityno)
                .HasConstraintName("FK_ProjectClientContacts__glentities");
        });

        modelBuilder.Entity<ProjectDefaultSuffix>(entity =>
        {
            entity.HasKey(e => e.Suffix);

            entity.Property(e => e.Suffix)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("suffix");
        });

        modelBuilder.Entity<ProjectEmployeeOvertimeRate>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.Jobtype, e.Empno, e.Fromdate, e.RateType }).IsClustered(false);

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("entityno");
            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("jobtype");
            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("empno");
            entity.Property(e => e.Fromdate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("fromdate");
            entity.Property(e => e.RateType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("");

            entity.HasOne(d => d.RateTypeNavigation).WithMany(p => p.ProjectEmployeeOvertimeRates)
                .HasForeignKey(d => d.RateType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjectEmployeeOvertimeRates_OverTimeRates");

            entity.HasOne(d => d.Pjempassign).WithMany(p => p.ProjectEmployeeOvertimeRates)
                .HasForeignKey(d => new { d.Entityno, d.Jobtype, d.Empno, d.Fromdate })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjectEmployeeOvertimeRates_pjempassign");
        });

        modelBuilder.Entity<ProjectEquipmentBenchmark>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Project_Equipment_Benchmarks");

            entity.Property(e => e.CBig).HasColumnName("cBig");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
        });

        modelBuilder.Entity<ProjectPriceLevel>(entity =>
        {
            entity.HasKey(e => e.PriceLevelValue);

            entity.Property(e => e.IsDefault).HasColumnName("isDefault");
            entity.Property(e => e.IsVisible).HasColumnName("isVisible");
        });

        modelBuilder.Entity<ProjectProductionSchedule>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.EventType, e.StartDate });

            entity.ToTable("ProjectProductionSchedule");

            entity.HasIndex(e => new { e.Entityno, e.EventType, e.StartDateDate }, "IX_ProjectProductionSchedule_by_StartDateDate");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.EventType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.BackgroundImageFile)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.DestinationDetail)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.Note)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.StartDateDate).HasComputedColumnSql("(CONVERT([date],[StartDate]))", false);
            entity.Property(e => e.VenueId).HasColumnName("VenueID");

            entity.HasOne(d => d.EntitynoNavigation).WithMany(p => p.ProjectProductionSchedules)
                .HasForeignKey(d => d.Entityno)
                .HasConstraintName("FK_ProjectProductionSchedule__glentities");

            entity.HasOne(d => d.EventTypeNavigation).WithMany(p => p.ProjectProductionSchedules)
                .HasForeignKey(d => d.EventType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjectProductionSchedule__ProductionScheduleEventType");

            entity.HasOne(d => d.Venue).WithMany(p => p.ProjectProductionSchedules)
                .HasForeignKey(d => d.VenueId)
                .HasConstraintName("FK_ProjectProductionSchedule__PollstarVenues");
        });

        modelBuilder.Entity<ProjectQuoteMonthlyTotal>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("project_quote_monthly_totals");

            entity.Property(e => e.BillingCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CrewRevenue).HasColumnType("money");
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.EquipmentRevenue).HasColumnType("money");
            entity.Property(e => e.ExpenseRevenue).HasColumnType("money");
            entity.Property(e => e.Probability).HasColumnName("probability");
            entity.Property(e => e.RevenueGroup)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Sfactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sfactivecd");
        });

        modelBuilder.Entity<ProjectQuoteMonthlyTotalsHistory>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.RevenueGroup, e.Year, e.Month, e.ValidFromUtc });

            entity.ToTable("ProjectQuoteMonthlyTotalsHistory");

            entity.HasIndex(e => new { e.ValidToUtc, e.Entityno, e.Year, e.Month }, "IX_ValidToUTC");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.RevenueGroup)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ValidFromUtc)
                .HasPrecision(0)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnName("ValidFromUTC");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CrewRevenue).HasColumnType("money");
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.EquipmentRevenue).HasColumnType("money");
            entity.Property(e => e.ExpenseRevenue).HasColumnType("money");
            entity.Property(e => e.Probability).HasColumnName("probability");
            entity.Property(e => e.Sfactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sfactivecd");
            entity.Property(e => e.TotalRevenue)
                .HasComputedColumnSql("(([equipmentrevenue]+[crewrevenue])+[expenserevenue])", false)
                .HasColumnType("money");
            entity.Property(e => e.TotalRevenueOnSalesForecast)
                .HasComputedColumnSql("(case when [sfactivecd]='I' then (0) else ([equipmentrevenue]+[crewrevenue])+[expenserevenue] end)", false)
                .HasColumnType("money");
            entity.Property(e => e.ValidToUtc)
                .HasPrecision(0)
                .HasColumnName("ValidToUTC");
        });

        modelBuilder.Entity<ProjectQuotedVsBenchmark>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Project_Quoted_vs_Benchmark");

            entity.Property(e => e.Bidroot)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bidroot");
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.Maxdate)
                .HasColumnType("smalldatetime")
                .HasColumnName("maxdate");
            entity.Property(e => e.Mindate)
                .HasColumnType("smalldatetime")
                .HasColumnName("mindate");
            entity.Property(e => e.Project)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("project");
        });

        modelBuilder.Entity<ProjectStatus>(entity =>
        {
            entity.HasKey(e => e.StatusCode);

            entity.ToTable("ProjectStatus");

            entity.Property(e => e.StatusCode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StatusDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ProjectsAttachmentTypesToCloudStorageFolder>(entity =>
        {
            entity.HasKey(e => new { e.AttachmentType, e.Entityno });

            entity.Property(e => e.AttachmentType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.DropBoxId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("dropBoxID");
            entity.Property(e => e.SharedFolderId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sharedFolderID");

            entity.HasOne(d => d.AttachmentTypeNavigation).WithMany(p => p.ProjectsAttachmentTypesToCloudStorageFolders)
                .HasForeignKey(d => d.AttachmentType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjectsAttachmentTypesToCloudStorageFolders_AttachmentTypes");

            entity.HasOne(d => d.EntitynoNavigation).WithMany(p => p.ProjectsAttachmentTypesToCloudStorageFolders)
                .HasForeignKey(d => d.Entityno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjectsAttachmentTypesToCloudStorageFolders_glentities");
        });

        modelBuilder.Entity<ProjectsByValueCheckedOut>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Projects_by_Value_Checked_Out");

            entity.Property(e => e.CompanyDesc)
                .HasMaxLength(70)
                .IsUnicode(false);
            entity.Property(e => e.Entitydesc)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("entitydesc");
            entity.Property(e => e.IsLate).HasColumnName("isLate");
            entity.Property(e => e.RootProject)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("rootProject");
            entity.Property(e => e.TotalValue).HasColumnName("totalValue");
        });

        modelBuilder.Entity<ProjectsCurrentlyHavingAvailabilityCalcuated>(entity =>
        {
            entity.HasKey(e => e.Entityno);

            entity.ToTable("ProjectsCurrentlyHavingAvailabilityCalcuated");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("entityno");
            entity.Property(e => e.LastTimeEquipmentOrProjectUpdatedUtc)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnName("LastTimeEquipmentOrProjectUpdatedUTC");
        });

        modelBuilder.Entity<ProjectsExceedingInsuranceThresholdAlreadyReported>(entity =>
        {
            entity.HasKey(e => e.Entityno);

            entity.ToTable("ProjectsExceedingInsuranceThresholdAlreadyReported");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.ReportDateUtc)
                .HasPrecision(0)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnName("ReportDateUTC");

            entity.HasOne(d => d.EntitynoNavigation).WithOne(p => p.ProjectsExceedingInsuranceThresholdAlreadyReported)
                .HasForeignKey<ProjectsExceedingInsuranceThresholdAlreadyReported>(d => d.Entityno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjectsExceedingInsuranceThresholdAlreadyReported_glentities");
        });

        modelBuilder.Entity<ProjectsHistory>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.ValidFromUtc });

            entity.ToTable("projects_history");

            entity.HasIndex(e => e.Entityno, "IX_projects_history__current").HasFilter("([ValidToUTC] IS NULL)");

            entity.HasIndex(e => new { e.ValidToUtc, e.ValidFromUtc }, "IX_projects_history_by_ValidTo");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.ValidFromUtc)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnName("ValidFromUTC");
            entity.Property(e => e.AcctExecEmpno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("acctExecEmpno");
            entity.Property(e => e.Agency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("agency");
            entity.Property(e => e.Bidmarkup).HasColumnName("bidmarkup");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(128)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.CrewOpsEmpno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("crewOpsEmpno");
            entity.Property(e => e.CrewPrep).HasColumnType("smalldatetime");
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.Custno)
                .HasMaxLength(40)
                .HasColumnName("custno");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("engactivecd");
            entity.Property(e => e.EngrEmpno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("engrEmpno");
            entity.Property(e => e.Entitydesc)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("entitydesc");
            entity.Property(e => e.Finactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("finactivecd");
            entity.Property(e => e.FirstShow).HasColumnType("smalldatetime");
            entity.Property(e => e.Industry)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("industry");
            entity.Property(e => e.InternalOrg)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("internal_org");
            entity.Property(e => e.LastShow).HasColumnType("smalldatetime");
            entity.Property(e => e.LoadOut).HasColumnType("smalldatetime");
            entity.Property(e => e.Opsmgr)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("opsmgr");
            entity.Property(e => e.Plactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("plactivecd");
            entity.Property(e => e.Propduedate)
                .HasColumnType("datetime")
                .HasColumnName("propduedate");
            entity.Property(e => e.Proptype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("proptype");
            entity.Property(e => e.ReferralProgramId).HasColumnName("ReferralProgramID");
            entity.Property(e => e.RemovedBy).HasMaxLength(128);
            entity.Property(e => e.Respempno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("respempno");
            entity.Property(e => e.Rfplempno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RFPLEmpno");
            entity.Property(e => e.SecondaryOpsEmpno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("secondaryOpsEmpno");
            entity.Property(e => e.Sfactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sfactivecd");
            entity.Property(e => e.Shipno)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("shipno");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.Subno)
                .HasMaxLength(100)
                .HasColumnName("subno");
            entity.Property(e => e.ValidToUtc).HasColumnName("ValidToUTC");
        });

        modelBuilder.Entity<ProjectsHistoryConflict20230120>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("projects_history_conflict20230120");

            entity.Property(e => e.AcctExecEmpno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("acctExecEmpno");
            entity.Property(e => e.Agency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("agency");
            entity.Property(e => e.Bidmarkup).HasColumnName("bidmarkup");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy).HasMaxLength(128);
            entity.Property(e => e.CrewPrep).HasColumnType("smalldatetime");
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.Custno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("custno");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("engactivecd");
            entity.Property(e => e.EngrEmpno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("engrEmpno");
            entity.Property(e => e.Entitydesc)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("entitydesc");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.ExchangeRateDate).HasColumnType("datetime");
            entity.Property(e => e.Finactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("finactivecd");
            entity.Property(e => e.FirstShow).HasColumnType("smalldatetime");
            entity.Property(e => e.Industry)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("industry");
            entity.Property(e => e.InternalOrg)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("internal_org");
            entity.Property(e => e.LastShow).HasColumnType("smalldatetime");
            entity.Property(e => e.LoadOut).HasColumnType("smalldatetime");
            entity.Property(e => e.Opsmgr)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("opsmgr");
            entity.Property(e => e.Plactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("plactivecd");
            entity.Property(e => e.Propduedate)
                .HasColumnType("datetime")
                .HasColumnName("propduedate");
            entity.Property(e => e.Proptype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("proptype");
            entity.Property(e => e.ReferralProgramId).HasColumnName("ReferralProgramID");
            entity.Property(e => e.RemovedBy).HasMaxLength(128);
            entity.Property(e => e.Respempno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("respempno");
            entity.Property(e => e.Rfplempno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RFPLEmpno");
            entity.Property(e => e.Sfactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sfactivecd");
            entity.Property(e => e.Shipno)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("shipno");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.Subno)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("subno");
            entity.Property(e => e.ValidFromUtc).HasColumnName("ValidFromUTC");
            entity.Property(e => e.ValidToUtc).HasColumnName("ValidToUTC");
        });

        modelBuilder.Entity<ProjectsHistoryTemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("projects_history_Temp");

            entity.Property(e => e.AcctExecEmpno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("acctExecEmpno");
            entity.Property(e => e.Agency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("agency");
            entity.Property(e => e.Bidmarkup).HasColumnName("bidmarkup");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy).HasMaxLength(128);
            entity.Property(e => e.CrewOpsEmpno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("crewOpsEmpno");
            entity.Property(e => e.CrewPrep).HasColumnType("smalldatetime");
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.Custno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("custno");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("engactivecd");
            entity.Property(e => e.EngrEmpno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("engrEmpno");
            entity.Property(e => e.Entitydesc)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("entitydesc");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Finactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("finactivecd");
            entity.Property(e => e.FirstShow).HasColumnType("smalldatetime");
            entity.Property(e => e.Industry)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("industry");
            entity.Property(e => e.InternalOrg)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("internal_org");
            entity.Property(e => e.LastShow).HasColumnType("smalldatetime");
            entity.Property(e => e.LoadOut).HasColumnType("smalldatetime");
            entity.Property(e => e.Opsmgr)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("opsmgr");
            entity.Property(e => e.Plactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("plactivecd");
            entity.Property(e => e.Propduedate)
                .HasColumnType("datetime")
                .HasColumnName("propduedate");
            entity.Property(e => e.Proptype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("proptype");
            entity.Property(e => e.ReferralProgramId).HasColumnName("ReferralProgramID");
            entity.Property(e => e.RemovedBy).HasMaxLength(128);
            entity.Property(e => e.Resolved).HasDefaultValue(false);
            entity.Property(e => e.Respempno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("respempno");
            entity.Property(e => e.Rfplempno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RFPLEmpno");
            entity.Property(e => e.SecondaryOpsEmpno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("secondaryOpsEmpno");
            entity.Property(e => e.Sfactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sfactivecd");
            entity.Property(e => e.Shipno)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("shipno");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.Subno)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("subno");
            entity.Property(e => e.ValidFromUtc).HasColumnName("ValidFromUTC");
            entity.Property(e => e.ValidToUtc).HasColumnName("ValidToUTC");
        });

        modelBuilder.Entity<ProjectsPartsOrderedAndCheckedOut>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("projects_parts_ordered_and_checked_out");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
        });

        modelBuilder.Entity<ProjectsPartsOrderedAndCheckedOutByInDateWh>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("projects_parts_ordered_and_checked_out_by_in_date_WH");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("todate");
            entity.Property(e => e.Warehouse)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("warehouse");
        });

        modelBuilder.Entity<ProjectsPartsOrderedAndCheckedOutByOutDateWh>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("projects_parts_ordered_and_checked_out_by_out_date_WH");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Trandate)
                .HasColumnType("datetime")
                .HasColumnName("trandate");
            entity.Property(e => e.Warehouse)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ProjectsUsersFoldersToCloudStorageFolder>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.UserFolderPath });

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.UserFolderPath)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AttachmentType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CloudFolderTemplate)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DropboxFolderId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CS_AS")
                .HasColumnName("dropboxFolderID");
            entity.Property(e => e.IdLevel)
                .HasDefaultValue(2)
                .HasColumnName("id_Level");

            entity.HasOne(d => d.EntitynoNavigation).WithMany(p => p.ProjectsUsersFoldersToCloudStorageFolders)
                .HasForeignKey(d => d.Entityno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjectsUsersFoldersToCloudStorageFolders_glentities");
        });

        modelBuilder.Entity<PurchaseOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Purchase_Order");

            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdPurchaseOrder).HasColumnName("idPurchaseOrder");
            entity.Property(e => e.IsCrew).HasColumnName("isCrew");
            entity.Property(e => e.IsSubhire).HasColumnName("isSubhire");
            entity.Property(e => e.Podescription)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("PODescription");
            entity.Property(e => e.Ponumber).HasColumnName("PONumber");
            entity.Property(e => e.Vendno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("vendno");
            entity.Property(e => e.VendsiteNo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("vendsite_no");
        });

        modelBuilder.Entity<PurchaseOrder1>(entity =>
        {
            entity.HasKey(e => e.Ponumber);

            entity.ToTable("PurchaseOrder", tb =>
                {
                    tb.HasTrigger("TR_PurchaseOrder__Unassign_Canceled_or_Deleted_POs");
                    tb.HasTrigger("TR_PurchaseOrder_check_dates");
                    tb.HasTrigger("d_AuditPurchaseOrder");
                    tb.HasTrigger("i_AuditPurchaseOrder");
                    tb.HasTrigger("u_AuditPurchaseOrder");
                    tb.HasTrigger("x_AuditPurchaseOrder");
                });

            entity.HasIndex(e => e.Entityno, "IX_PurchaseOrder_entityno");

            entity.Property(e => e.Ponumber)
                .ValueGeneratedNever()
                .HasColumnName("PONumber");
            entity.Property(e => e.CanceledBy)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CanceledDate).HasColumnType("datetime");
            entity.Property(e => e.CollAddr1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CollAddr2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CollAddr3)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CollCity)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CollCompanyName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CollCompanyPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CollContactEmail)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CollContactName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CollContactPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CollCountryCd)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.CollProvince)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CollStateCd)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.CollZip)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CollectionInstructions).IsUnicode(false);
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DelAddr1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DelAddr2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DelAddr3)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DelCity)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DelCountryCd)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.DelProvince)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DelStateCd)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.DelZip)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.DeliveryInstructions).IsUnicode(false);
            entity.Property(e => e.DeliveryOtherBillAcctNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DeliveryOtherBillName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DeliveryServiceTypeDisplayName)
                .HasMaxLength(105)
                .IsUnicode(false);
            entity.Property(e => e.DeliveryWarehouse)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DestinationName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DestinationPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DueDate).HasDefaultValueSql("([dbo].[today]())");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.IdPurchaseOrder)
                .ValueGeneratedOnAdd()
                .HasColumnName("idPurchaseOrder");
            entity.Property(e => e.InvoiceAmount)
                .HasDefaultValue(0.00m)
                .HasColumnType("money");
            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.InvoiceReceived).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.OrderedDate).HasColumnType("datetime");
            entity.Property(e => e.PaidBy)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PaidDate).HasColumnType("datetime");
            entity.Property(e => e.PayAuthorizedBy)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PayAuthorizedDate).HasColumnType("datetime");
            entity.Property(e => e.PayTerms)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Podescription)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("PODescription");
            entity.Property(e => e.Ponotes)
                .IsUnicode(false)
                .HasColumnName("PONotes");
            entity.Property(e => e.PostedBy)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PostedDate).HasColumnType("datetime");
            entity.Property(e => e.Purchaser)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.RecipientEmail)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RecipientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RecipientPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RequestedBy)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.ShippingAmount).HasColumnType("money");
            entity.Property(e => e.TaxAmount).HasColumnType("money");
            entity.Property(e => e.TaxType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TotalAmount).HasColumnType("money");
            entity.Property(e => e.VendVatidentificationNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("vendVATIdentificationNumber");
            entity.Property(e => e.Vendaddr1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vendaddr1");
            entity.Property(e => e.Vendaddr2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vendaddr2");
            entity.Property(e => e.Vendaddr3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vendaddr3");
            entity.Property(e => e.Vendcity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vendcity");
            entity.Property(e => e.Vendcontact)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vendcontact");
            entity.Property(e => e.Vendcountrycd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("vendcountrycd");
            entity.Property(e => e.Vendcounty)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vendcounty");
            entity.Property(e => e.Venddirectphone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("venddirectphone");
            entity.Property(e => e.Vendemail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vendemail");
            entity.Property(e => e.Vendemail2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vendemail2");
            entity.Property(e => e.Vendfax)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("vendfax");
            entity.Property(e => e.Vendmobilephone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vendmobilephone");
            entity.Property(e => e.Vendno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("vendno");
            entity.Property(e => e.Vendofficephone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vendofficephone");
            entity.Property(e => e.VendorName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vendor_name");
            entity.Property(e => e.VendsiteNo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("vendsite_no");
            entity.Property(e => e.Vendstatecd)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vendstatecd");
            entity.Property(e => e.Vendzipcode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("vendzipcode");

            entity.HasOne(d => d.CanceledByNavigation).WithMany(p => p.PurchaseOrder1CanceledByNavigations)
                .HasForeignKey(d => d.CanceledBy)
                .HasConstraintName("FK_PurchaseOrder__CanceledBy");

            entity.HasOne(d => d.CollCountryCdNavigation).WithMany(p => p.PurchaseOrder1CollCountryCdNavigations)
                .HasForeignKey(d => d.CollCountryCd)
                .HasConstraintName("FK_PurchaseOrder__CollCountryCd");

            entity.HasOne(d => d.CollStateCdNavigation).WithMany(p => p.PurchaseOrder1CollStateCdNavigations)
                .HasForeignKey(d => d.CollStateCd)
                .HasConstraintName("FK_PurchaseOrder__CollStateCd");

            entity.HasOne(d => d.CompanyNavigation).WithMany(p => p.PurchaseOrders1)
                .HasForeignKey(d => d.Company)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseOrder__Company");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.PurchaseOrder1CreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseOrder__CreatedBy");

            entity.HasOne(d => d.CurrencyNavigation).WithMany(p => p.PurchaseOrders1)
                .HasForeignKey(d => d.Currency)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseOrder_Currency");

            entity.HasOne(d => d.DelCountryCdNavigation).WithMany(p => p.PurchaseOrder1DelCountryCdNavigations)
                .HasForeignKey(d => d.DelCountryCd)
                .HasConstraintName("FK_PurchaseOrder__DelCountryCd");

            entity.HasOne(d => d.DelStateCdNavigation).WithMany(p => p.PurchaseOrder1DelStateCdNavigations)
                .HasForeignKey(d => d.DelStateCd)
                .HasConstraintName("FK_PurchaseOrder__DelStateCd");

            entity.HasOne(d => d.DeliveryWarehouseNavigation).WithMany(p => p.PurchaseOrders1)
                .HasForeignKey(d => d.DeliveryWarehouse)
                .HasConstraintName("FK_PurchaseOrder__DeliveryWarehouse");

            entity.HasOne(d => d.EntitynoNavigation).WithMany(p => p.PurchaseOrders1)
                .HasForeignKey(d => d.Entityno)
                .HasConstraintName("FK_PurchaseOrder__entityno");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.PurchaseOrder1ModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseOrder__ModifiedBy");

            entity.HasOne(d => d.PaidByNavigation).WithMany(p => p.PurchaseOrder1PaidByNavigations)
                .HasForeignKey(d => d.PaidBy)
                .HasConstraintName("FK_PurchaseOrder__PaidBy");

            entity.HasOne(d => d.PayAuthorizedByNavigation).WithMany(p => p.PurchaseOrder1PayAuthorizedByNavigations)
                .HasForeignKey(d => d.PayAuthorizedBy)
                .HasConstraintName("FK_PurchaseOrder__PayAuthorizedBy");

            entity.HasOne(d => d.PayTermsNavigation).WithMany(p => p.PurchaseOrders)
                .HasForeignKey(d => d.PayTerms)
                .HasConstraintName("FK_PurchaseOrder__PayTerms");

            entity.HasOne(d => d.PostedByNavigation).WithMany(p => p.PurchaseOrder1PostedByNavigations)
                .HasForeignKey(d => d.PostedBy)
                .HasConstraintName("FK_PurchaseOrder__PostedBy");

            entity.HasOne(d => d.PurchaserNavigation).WithMany(p => p.PurchaseOrder1PurchaserNavigations)
                .HasForeignKey(d => d.Purchaser)
                .HasConstraintName("FK_PurchaseOrder__Purchaser");

            entity.HasOne(d => d.RequestedByNavigation).WithMany(p => p.PurchaseOrder1RequestedByNavigations)
                .HasForeignKey(d => d.RequestedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseOrder__RequestedBy");

            entity.HasOne(d => d.TaxTypeNavigation).WithMany(p => p.PurchaseOrder1)
                .HasForeignKey(d => d.TaxType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseOrder__TaxType");

            entity.HasOne(d => d.VendcountrycdNavigation).WithMany(p => p.PurchaseOrder1VendcountrycdNavigations)
                .HasForeignKey(d => d.Vendcountrycd)
                .HasConstraintName("FK_PurchaseOrder__vendcountrycd");

            entity.HasOne(d => d.VendstatecdNavigation).WithMany(p => p.PurchaseOrder1VendstatecdNavigations)
                .HasForeignKey(d => d.Vendstatecd)
                .HasConstraintName("FK_PurchaseOrder__vendstatecd");
        });

        // modelBuilder.Entity<PurchaseOrderA>(entity =>
        // {
        //     entity.HasKey(e => e.AtransactionId).IsClustered(false);

        //     entity.ToTable("PurchaseOrderA");

        //     entity.Property(e => e.AtransactionId)
        //         .HasDefaultValueSql("(newid())")
        //         .HasColumnName("ATransactionID");
        //     entity.Property(e => e.AdateTime)
        //         .HasDefaultValueSql("(getutcdate())")
        //         .HasColumnName("ADateTime");
        //     entity.Property(e => e.ArecordAction).HasColumnName("ARecordAction");
        //     entity.Property(e => e.Atransaction).HasColumnName("ATransaction");
        //     entity.Property(e => e.AuserId)
        //         .IsUnicode(false)
        //         .HasColumnName("AUserID");
        //     entity.Property(e => e.CanceledBy)
        //         .HasMaxLength(30)
        //         .IsUnicode(false);
        //     entity.Property(e => e.CanceledDate).HasColumnType("datetime");
        //     entity.Property(e => e.CollAddr1)
        //         .HasMaxLength(50)
        //         .IsUnicode(false);
        //     entity.Property(e => e.CollAddr2)
        //         .HasMaxLength(50)
        //         .IsUnicode(false);
        //     entity.Property(e => e.CollAddr3)
        //         .HasMaxLength(50)
        //         .IsUnicode(false);
        //     entity.Property(e => e.CollCity)
        //         .HasMaxLength(50)
        //         .IsUnicode(false);
        //     entity.Property(e => e.CollCompanyName)
        //         .HasMaxLength(100)
        //         .IsUnicode(false);
        //     entity.Property(e => e.CollCompanyPhone)
        //         .HasMaxLength(50)
        //         .IsUnicode(false);
        //     entity.Property(e => e.CollContactEmail)
        //         .HasMaxLength(50)
        //         .IsUnicode(false);
        //     entity.Property(e => e.CollContactName)
        //         .HasMaxLength(50)
        //         .IsUnicode(false);
        //     entity.Property(e => e.CollContactPhone)
        //         .HasMaxLength(50)
        //         .IsUnicode(false);
        //     entity.Property(e => e.CollCountryCd)
        //         .HasMaxLength(2)
        //         .IsUnicode(false);
        //     entity.Property(e => e.CollProvince)
        //         .HasMaxLength(50)
        //         .IsUnicode(false);
        //     entity.Property(e => e.CollStateCd)
        //         .HasMaxLength(3)
        //         .IsUnicode(false);
        //     entity.Property(e => e.CollZip)
        //         .HasMaxLength(15)
        //         .IsUnicode(false);
        //     entity.Property(e => e.CollectionInstructions).IsUnicode(false);
        //     entity.Property(e => e.Company)
        //         .HasMaxLength(50)
        //         .IsUnicode(false);
        //     entity.Property(e => e.CreatedBy)
        //         .HasMaxLength(30)
        //         .IsUnicode(false);
        //     entity.Property(e => e.CreatedDate).HasColumnType("datetime");
        //     entity.Property(e => e.Currency)
        //         .HasMaxLength(10)
        //         .IsUnicode(false);
        //     entity.Property(e => e.DelAddr1)
        //         .HasMaxLength(50)
        //         .IsUnicode(false);
        //     entity.Property(e => e.DelAddr2)
        //         .HasMaxLength(50)
        //         .IsUnicode(false);
        //     entity.Property(e => e.DelAddr3)
        //         .HasMaxLength(50)
        //         .IsUnicode(false);
        //     entity.Property(e => e.DelCity)
        //         .HasMaxLength(50)
        //         .IsUnicode(false);
        //     entity.Property(e => e.DelCountryCd)
        //         .HasMaxLength(2)
        //         .IsUnicode(false);
        //     entity.Property(e => e.DelProvince)
        //         .HasMaxLength(50)
        //         .IsUnicode(false);
        //     entity.Property(e => e.DelStateCd)
        //         .HasMaxLength(3)
        //         .IsUnicode(false);
        //     entity.Property(e => e.DelZip)
        //         .HasMaxLength(15)
        //         .IsUnicode(false);
        //     entity.Property(e => e.DeliveryInstructions).IsUnicode(false);
        //     entity.Property(e => e.DeliveryOtherBillAcctNo)
        //         .HasMaxLength(50)
        //         .IsUnicode(false);
        //     entity.Property(e => e.DeliveryOtherBillName)
        //         .HasMaxLength(100)
        //         .IsUnicode(false);
        //     entity.Property(e => e.DeliveryServiceTypeDisplayName)
        //         .HasMaxLength(105)
        //         .IsUnicode(false);
        //     entity.Property(e => e.DeliveryWarehouse)
        //         .HasMaxLength(10)
        //         .IsUnicode(false);
        //     entity.Property(e => e.DestinationName)
        //         .HasMaxLength(100)
        //         .IsUnicode(false);
        //     entity.Property(e => e.DestinationPhone)
        //         .HasMaxLength(50)
        //         .IsUnicode(false);
        //     entity.Property(e => e.Entityno)
        //         .HasMaxLength(50)
        //         .IsUnicode(false)
        //         .HasColumnName("entityno");
        //     entity.Property(e => e.IdPurchaseOrder).HasColumnName("idPurchaseOrder");
        //     entity.Property(e => e.InvoiceAmount).HasColumnType("money");
        //     entity.Property(e => e.InvoiceDate).HasColumnType("datetime");
        //     entity.Property(e => e.InvoiceNo)
        //         .HasMaxLength(100)
        //         .IsUnicode(false);
        //     entity.Property(e => e.InvoiceReceived).HasColumnType("datetime");
        //     entity.Property(e => e.ModifiedBy)
        //         .HasMaxLength(30)
        //         .IsUnicode(false);
        //     entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
        //     entity.Property(e => e.OrderedDate).HasColumnType("datetime");
        //     entity.Property(e => e.PaidBy)
        //         .HasMaxLength(30)
        //         .IsUnicode(false);
        //     entity.Property(e => e.PaidDate).HasColumnType("datetime");
        //     entity.Property(e => e.PayAuthorizedBy)
        //         .HasMaxLength(30)
        //         .IsUnicode(false);
        //     entity.Property(e => e.PayAuthorizedDate).HasColumnType("datetime");
        //     entity.Property(e => e.PayTerms)
        //         .HasMaxLength(10)
        //         .IsUnicode(false);
        //     entity.Property(e => e.Podescription)
        //         .HasMaxLength(250)
        //         .IsUnicode(false)
        //         .HasColumnName("PODescription");
        //     entity.Property(e => e.Ponotes)
        //         .IsUnicode(false)
        //         .HasColumnName("PONotes");
        //     entity.Property(e => e.Ponumber).HasColumnName("PONumber");
        //     entity.Property(e => e.PostedBy)
        //         .HasMaxLength(30)
        //         .IsUnicode(false);
        //     entity.Property(e => e.PostedDate).HasColumnType("datetime");
        //     entity.Property(e => e.Purchaser)
        //         .HasMaxLength(30)
        //         .IsUnicode(false);
        //     entity.Property(e => e.RecipientEmail)
        //         .HasMaxLength(50)
        //         .IsUnicode(false);
        //     entity.Property(e => e.RecipientName)
        //         .HasMaxLength(50)
        //         .IsUnicode(false);
        //     entity.Property(e => e.RecipientPhone)
        //         .HasMaxLength(50)
        //         .IsUnicode(false);
        //     entity.Property(e => e.RequestedBy)
        //         .HasMaxLength(30)
        //         .IsUnicode(false);
        //     entity.Property(e => e.ShippingAmount).HasColumnType("money");
        //     entity.Property(e => e.TaxAmount).HasColumnType("money");
        //     entity.Property(e => e.TaxType)
        //         .HasMaxLength(10)
        //         .IsUnicode(false);
        //     entity.Property(e => e.TotalAmount).HasColumnType("money");
        //     entity.Property(e => e.VendVatidentificationNumber)
        //         .HasMaxLength(20)
        //         .IsUnicode(false)
        //         .HasColumnName("vendVATIdentificationNumber");
        //     entity.Property(e => e.Vendaddr1)
        //         .HasMaxLength(50)
        //         .IsUnicode(false)
        //         .HasColumnName("vendaddr1");
        //     entity.Property(e => e.Vendaddr2)
        //         .HasMaxLength(50)
        //         .IsUnicode(false)
        //         .HasColumnName("vendaddr2");
        //     entity.Property(e => e.Vendaddr3)
        //         .HasMaxLength(50)
        //         .IsUnicode(false)
        //         .HasColumnName("vendaddr3");
        //     entity.Property(e => e.Vendcity)
        //         .HasMaxLength(50)
        //         .IsUnicode(false)
        //         .HasColumnName("vendcity");
        //     entity.Property(e => e.Vendcontact)
        //         .HasMaxLength(50)
        //         .IsUnicode(false)
        //         .HasColumnName("vendcontact");
        //     entity.Property(e => e.Vendcountrycd)
        //         .HasMaxLength(2)
        //         .IsUnicode(false)
        //         .HasColumnName("vendcountrycd");
        //     entity.Property(e => e.Vendcounty)
        //         .HasMaxLength(50)
        //         .IsUnicode(false)
        //         .HasColumnName("vendcounty");
        //     entity.Property(e => e.Venddirectphone)
        //         .HasMaxLength(50)
        //         .IsUnicode(false)
        //         .HasColumnName("venddirectphone");
        //     entity.Property(e => e.Vendemail)
        //         .HasMaxLength(50)
        //         .IsUnicode(false)
        //         .HasColumnName("vendemail");
        //     entity.Property(e => e.Vendemail2)
        //         .HasMaxLength(50)
        //         .IsUnicode(false)
        //         .HasColumnName("vendemail2");
        //     entity.Property(e => e.Vendfax)
        //         .HasMaxLength(20)
        //         .IsUnicode(false)
        //         .HasColumnName("vendfax");
        //     entity.Property(e => e.Vendmobilephone)
        //         .HasMaxLength(50)
        //         .IsUnicode(false)
        //         .HasColumnName("vendmobilephone");
        //     entity.Property(e => e.Vendno)
        //         .HasMaxLength(10)
        //         .IsUnicode(false)
        //         .HasColumnName("vendno");
        //     entity.Property(e => e.Vendofficephone)
        //         .HasMaxLength(50)
        //         .IsUnicode(false)
        //         .HasColumnName("vendofficephone");
        //     entity.Property(e => e.VendorName)
        //         .HasMaxLength(50)
        //         .IsUnicode(false)
        //         .HasColumnName("vendor_name");
        //     entity.Property(e => e.VendsiteNo)
        //         .HasMaxLength(5)
        //         .IsUnicode(false)
        //         .HasColumnName("vendsite_no");
        //     entity.Property(e => e.Vendstatecd)
        //         .HasMaxLength(3)
        //         .IsUnicode(false)
        //         .HasColumnName("vendstatecd");
        //     entity.Property(e => e.Vendzipcode)
        //         .HasMaxLength(15)
        //         .IsUnicode(false)
        //         .HasColumnName("vendzipcode");
        // });

        modelBuilder.Entity<PurchaseOrderInvoice>(entity =>
        {
            entity.HasKey(e => new { e.Ponumber, e.InvoiceNo });

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("d_AuditPurchaseOrderInvoices");
                    tb.HasTrigger("i_AuditPurchaseOrderInvoices");
                    tb.HasTrigger("u_AuditPurchaseOrderInvoices");
                });

            entity.Property(e => e.Ponumber).HasColumnName("PONumber");
            entity.Property(e => e.InvoiceNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AcctCd)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FileStorageGuid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("fileStorageGUID");
            entity.Property(e => e.IdPurchaseOrder).HasColumnName("idPurchaseOrder");
            entity.Property(e => e.IdPurchaseOrderInvoice)
                .ValueGeneratedOnAdd()
                .HasColumnName("idPurchaseOrderInvoice");
            entity.Property(e => e.InvoiceAmount).HasColumnType("money");
            entity.Property(e => e.InvoiceReceived).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.PaidBy)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PaidDate).HasColumnType("datetime");
            entity.Property(e => e.PayAuthorizedBy)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PayAuthorizedDate).HasColumnType("datetime");
            entity.Property(e => e.PostedBy)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PostedDate).HasColumnType("datetime");
            entity.Property(e => e.ShippingAmount).HasColumnType("money");
            entity.Property(e => e.TaxAmount).HasColumnType("money");
            entity.Property(e => e.TotalAmount).HasColumnType("money");

            entity.HasOne(d => d.AcctCdNavigation).WithMany(p => p.PurchaseOrderInvoices)
                .HasPrincipalKey(p => p.Acctcd)
                .HasForeignKey(d => d.AcctCd)
                .HasConstraintName("FK_PurchaseOrderInvoices__AcctCd");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.PurchaseOrderInvoiceCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseOrderInvoices__CreatedBy");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.PurchaseOrderInvoiceModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseOrderInvoices__ModifiedBy");

            entity.HasOne(d => d.PaidByNavigation).WithMany(p => p.PurchaseOrderInvoicePaidByNavigations)
                .HasForeignKey(d => d.PaidBy)
                .HasConstraintName("FK_PurchaseOrderInvoices__PaidBy");

            entity.HasOne(d => d.PayAuthorizedByNavigation).WithMany(p => p.PurchaseOrderInvoicePayAuthorizedByNavigations)
                .HasForeignKey(d => d.PayAuthorizedBy)
                .HasConstraintName("FK_PurchaseOrderInvoices__PayAuthorizedBy");

           // entity.HasOne(d => d.PonumberNavigation).WithMany(p => p.PurchaseOrderInvoices).HasForeignKey(d => d.Ponumber);
        });

        modelBuilder.Entity<PurchaseOrderInvoicesA>(entity =>
        {
            entity.HasKey(e => e.AtransactionId).IsClustered(false);

            entity.ToTable("PurchaseOrderInvoicesA");

            entity.Property(e => e.AtransactionId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ATransactionID");
            entity.Property(e => e.AcctCd)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnName("ADateTime");
            entity.Property(e => e.ArecordAction).HasColumnName("ARecordAction");
            entity.Property(e => e.AuserId)
                .IsUnicode(false)
                .HasColumnName("AUserID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FileStorageGuid).HasColumnName("fileStorageGUID");
            entity.Property(e => e.IdPurchaseOrder).HasColumnName("idPurchaseOrder");
            entity.Property(e => e.IdPurchaseOrderInvoice).HasColumnName("idPurchaseOrderInvoice");
            entity.Property(e => e.InvoiceAmount).HasColumnType("money");
            entity.Property(e => e.InvoiceNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.InvoiceReceived).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.PaidBy)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PaidDate).HasColumnType("datetime");
            entity.Property(e => e.PayAuthorizedBy)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PayAuthorizedDate).HasColumnType("datetime");
            entity.Property(e => e.Ponumber).HasColumnName("PONumber");
            entity.Property(e => e.PostedBy)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PostedDate).HasColumnType("datetime");
            entity.Property(e => e.ShippingAmount).HasColumnType("money");
            entity.Property(e => e.TaxAmount).HasColumnType("money");
            entity.Property(e => e.TotalAmount).HasColumnType("money");
        });

        modelBuilder.Entity<PurchaseOrderInvoicesSaveDatum>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.AcctCd)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FileStorageGuid).HasColumnName("fileStorageGUID");
            entity.Property(e => e.IdPurchaseOrder).HasColumnName("idPurchaseOrder");
            entity.Property(e => e.IdPurchaseOrderInvoice).HasColumnName("idPurchaseOrderInvoice");
            entity.Property(e => e.InvoiceAmount).HasColumnType("money");
            entity.Property(e => e.InvoiceNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.InvoiceReceived).HasColumnType("datetime");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.PaidBy)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PaidDate).HasColumnType("datetime");
            entity.Property(e => e.PayAuthorizedBy)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PayAuthorizedDate).HasColumnType("datetime");
            entity.Property(e => e.Ponumber).HasColumnName("PONumber");
            entity.Property(e => e.PostedBy)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PostedDate).HasColumnType("datetime");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.ShippingAmount).HasColumnType("money");
            entity.Property(e => e.TaxAmount).HasColumnType("money");
            entity.Property(e => e.TotalAmount).HasColumnType("money");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<PurchaseOrderLineItems>(entity =>
        {
            entity.HasKey(e => new { e.Ponumber, e.LineItemNo });

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("TR_PurchaseOrderLineItems_check_dates");
                    tb.HasTrigger("d_AuditPurchaseOrderLineItems");
                    tb.HasTrigger("i_AuditPurchaseOrderLineItems");
                    tb.HasTrigger("u_AuditPurchaseOrderLineItems");
                });

            entity.Property(e => e.Ponumber).HasColumnName("PONumber");
            entity.Property(e => e.AcctCd)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Emplineno).HasColumnName("emplineno");
            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.IdPurchaseOrder).HasColumnName("idPurchaseOrder");
            entity.Property(e => e.IdPurchaseOrderLineItem)
                .ValueGeneratedOnAdd()
                .HasColumnName("idPurchaseOrderLineItem");
            entity.Property(e => e.LineItemDesc).IsUnicode(false);
            entity.Property(e => e.MfgpartNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MFGPartNo");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Subhirelineno).HasColumnName("subhirelineno");
            entity.Property(e => e.UnitRate).HasColumnType("money");

            entity.HasOne(d => d.AcctCdNavigation).WithMany(p => p.PurchaseOrderLineItems)
                .HasPrincipalKey(p => p.Acctcd)
                .HasForeignKey(d => d.AcctCd)
                .HasConstraintName("FK_PurchaseOrderLineItems__AcctCd");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.PurchaseOrderLineItemCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseOrderLineItems__CreatedBy");

            entity.HasOne(d => d.EmpnoNavigation).WithMany(p => p.PurchaseOrderLineItems)
                .HasForeignKey(d => d.Empno)
                .HasConstraintName("FK_PurchaseOrderLineItems__empno");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.PurchaseOrderLineItemModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseOrderLineItems__ModifiedBy");

            entity.HasOne(d => d.PartnoNavigation).WithMany(p => p.PurchaseOrderLineItems)
                .HasForeignKey(d => d.Partno)
                .HasConstraintName("FK_PurchaseOrderLineItems__partno");

            entity.HasOne(d => d.PonumberNavigation).WithMany(p => p.PurchaseOrderLineItems).HasForeignKey(d => d.Ponumber);
        });

        modelBuilder.Entity<PurchaseOrderLineItemsA>(entity =>
        {
            entity.HasKey(e => e.AtransactionId).IsClustered(false);

            entity.ToTable("PurchaseOrderLineItemsA");

            entity.Property(e => e.AtransactionId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ATransactionID");
            entity.Property(e => e.AcctCd)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnName("ADateTime");
            entity.Property(e => e.ArecordAction).HasColumnName("ARecordAction");
            entity.Property(e => e.AuserId)
                .IsUnicode(false)
                .HasColumnName("AUserID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Emplineno).HasColumnName("emplineno");
            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.IdPurchaseOrder).HasColumnName("idPurchaseOrder");
            entity.Property(e => e.IdPurchaseOrderLineItem).HasColumnName("idPurchaseOrderLineItem");
            entity.Property(e => e.LineItemDesc).IsUnicode(false);
            entity.Property(e => e.MfgpartNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MFGPartNo");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Ponumber).HasColumnName("PONumber");
            entity.Property(e => e.Subhirelineno).HasColumnName("subhirelineno");
            entity.Property(e => e.UnitRate).HasColumnType("money");
        });

        modelBuilder.Entity<PurchaseOrderLineItemsReceipt>(entity =>
        {
            entity.HasKey(e => e.IdPurchaseOrderReceipt);

            entity.Property(e => e.IdPurchaseOrderReceipt)
                .ValueGeneratedNever()
                .HasColumnName("id_PurchaseOrderReceipt");
            entity.Property(e => e.DeliveryNote)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EnterDateUtc)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnName("EnterDateUTC");
            entity.Property(e => e.Ponumber).HasColumnName("PONumber");
            entity.Property(e => e.UserName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("user_name");

            entity.HasOne(d => d.UserNameNavigation).WithMany(p => p.PurchaseOrderLineItemsReceipts)
                .HasForeignKey(d => d.UserName)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseOrderLineItemsReceipts_pjtfrusr");

            entity.HasOne(d => d.PurchaseOrderLineItem).WithMany(p => p.PurchaseOrderLineItemsReceipts)
                .HasForeignKey(d => new { d.Ponumber, d.LineItemNo })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseOrderLineItemsReceipts_PurchaseOrderLineItems");
        });

        modelBuilder.Entity<PurchaseOrderLineItemsSaveDatum>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.AcctCd)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DueDate).HasColumnType("datetime");
            entity.Property(e => e.Emplineno).HasColumnName("emplineno");
            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.IdPurchaseOrder).HasColumnName("idPurchaseOrder");
            entity.Property(e => e.IdPurchaseOrderLineItem).HasColumnName("idPurchaseOrderLineItem");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.LineItemDesc).IsUnicode(false);
            entity.Property(e => e.MfgpartNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MFGPartNo");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Ponumber).HasColumnName("PONumber");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.Subhirelineno).HasColumnName("subhirelineno");
            entity.Property(e => e.UnitRate).HasColumnType("money");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<PurchaseOrderSaveDatum>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.CanceledBy)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CanceledDate).HasColumnType("datetime");
            entity.Property(e => e.CollAddr1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CollAddr2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CollAddr3)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CollCity)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CollCompanyName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CollCompanyPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CollContactEmail)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CollContactName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CollContactPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CollCountryCd)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.CollProvince)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CollStateCd)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.CollZip)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CollectionInstructions).IsUnicode(false);
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DelAddr1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DelAddr2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DelAddr3)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DelCity)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DelCountryCd)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.DelProvince)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DelStateCd)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.DelZip)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.DeliveryInstructions).IsUnicode(false);
            entity.Property(e => e.DeliveryOtherBillAcctNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DeliveryOtherBillName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DeliveryServiceTypeDisplayName)
                .HasMaxLength(105)
                .IsUnicode(false);
            entity.Property(e => e.DeliveryWarehouse)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DestinationName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DestinationPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DueDate).HasColumnType("datetime");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.IdPurchaseOrder).HasColumnName("idPurchaseOrder");
            entity.Property(e => e.InvoiceAmount).HasColumnType("money");
            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.InvoiceReceived).HasColumnType("datetime");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.OrderedDate).HasColumnType("datetime");
            entity.Property(e => e.PaidBy)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PaidDate).HasColumnType("datetime");
            entity.Property(e => e.PayAuthorizedBy)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PayAuthorizedDate).HasColumnType("datetime");
            entity.Property(e => e.PayTerms)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Podescription)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("PODescription");
            entity.Property(e => e.Ponotes)
                .IsUnicode(false)
                .HasColumnName("PONotes");
            entity.Property(e => e.Ponumber).HasColumnName("PONumber");
            entity.Property(e => e.PostedBy)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PostedDate).HasColumnType("datetime");
            entity.Property(e => e.Purchaser)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.RecipientEmail)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RecipientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RecipientPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RequestedBy)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.ShippingAmount).HasColumnType("money");
            entity.Property(e => e.ShouldPushToSyspro).HasDefaultValue(false);
            entity.Property(e => e.TaxAmount).HasColumnType("money");
            entity.Property(e => e.TaxType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TotalAmount).HasColumnType("money");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
            entity.Property(e => e.VendVatidentificationNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("vendVATIdentificationNumber");
            entity.Property(e => e.Vendaddr1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vendaddr1");
            entity.Property(e => e.Vendaddr2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vendaddr2");
            entity.Property(e => e.Vendaddr3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vendaddr3");
            entity.Property(e => e.Vendcity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vendcity");
            entity.Property(e => e.Vendcontact)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vendcontact");
            entity.Property(e => e.Vendcountrycd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("vendcountrycd");
            entity.Property(e => e.Vendcounty)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vendcounty");
            entity.Property(e => e.Venddirectphone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("venddirectphone");
            entity.Property(e => e.Vendemail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vendemail");
            entity.Property(e => e.Vendemail2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vendemail2");
            entity.Property(e => e.Vendfax)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("vendfax");
            entity.Property(e => e.Vendmobilephone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vendmobilephone");
            entity.Property(e => e.Vendno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("vendno");
            entity.Property(e => e.Vendofficephone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vendofficephone");
            entity.Property(e => e.VendorName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vendor_name");
            entity.Property(e => e.VendsiteNo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("vendsite_no");
            entity.Property(e => e.Vendstatecd)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("vendstatecd");
            entity.Property(e => e.Vendzipcode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("vendzipcode");
        });

        modelBuilder.Entity<PurchasingAccount>(entity =>
        {
            entity.HasKey(e => new { e.Companyno, e.Acctcd });

            entity.Property(e => e.Companyno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("companyno");
            entity.Property(e => e.Acctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("acctcd");
            entity.Property(e => e.FriendlyName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Visible).HasDefaultValue(true);

            entity.HasOne(d => d.AcctcdNavigation).WithMany(p => p.PurchasingAccounts)
                .HasPrincipalKey(p => p.Acctcd)
                .HasForeignKey(d => d.Acctcd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchasingAccounts_glaccounts");

            entity.HasOne(d => d.CompanynoNavigation).WithMany(p => p.PurchasingAccounts)
                .HasForeignKey(d => d.Companyno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchasingAccounts_Company");
        });

        modelBuilder.Entity<PushToAccountingProject>(entity =>
        {
            entity.HasKey(e => new { e.Company, e.ProjectId }).HasName("PK__PushTo_A__12540EF52A90DEA6");

            entity.ToTable("PushTo_ACCOUNTING_PROJECT", "IFS");

            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .HasColumnName("COMPANY");
            entity.Property(e => e.ProjectId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PROJECT_ID");
            entity.Property(e => e.DateCreated).HasDefaultValueSql("(sysdatetimeoffset())");
            entity.Property(e => e.Description)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.ProjectLeader)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PROJECT_LEADER");
            entity.Property(e => e.ValidFrom).HasColumnName("VALID_FROM");
            entity.Property(e => e.ValidUntil).HasColumnName("VALID_UNTIL");
        });

        modelBuilder.Entity<QuickReportInventoryMigration20250416>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("QuickReportInventoryMigration20250416", "IFS");

            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.FinesseQty).HasColumnName("FINESSE_QTY");
            entity.Property(e => e.InvQtyArrived).HasColumnName("INV_QTY_ARRIVED");
            entity.Property(e => e.LineNo).HasColumnName("LINE_NO");
            entity.Property(e => e.LotBatchNo).HasColumnName("LOT_BATCH_NO");
            entity.Property(e => e.OrderNo).HasColumnName("ORDER_NO");
            entity.Property(e => e.PartNo).HasColumnName("PART_NO");
            entity.Property(e => e.QtyOnhand).HasColumnName("QTY_ONHAND");
            entity.Property(e => e.ReleaseNo).HasColumnName("RELEASE_NO");
            entity.Property(e => e.SerialNo).HasColumnName("SERIAL_NO");
        });

        modelBuilder.Entity<QuickReportMigration20250416>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("QuickReportMigration20250416", "IFS");

            entity.Property(e => e.ApprovedDate).HasColumnName("APPROVED_DATE");
            entity.Property(e => e.ArrivalDate).HasColumnName("ARRIVAL_DATE");
            entity.Property(e => e.BuyQtyDue).HasColumnName("BUY_QTY_DUE");
            entity.Property(e => e.BuyUnitPrice).HasColumnName("BUY_UNIT_PRICE");
            entity.Property(e => e.Contract).HasColumnName("CONTRACT");
            entity.Property(e => e.CurrencyCode).HasColumnName("CURRENCY_CODE");
            entity.Property(e => e.CurrencyRate).HasColumnName("CURRENCY_RATE");
            entity.Property(e => e.DateEntered).HasColumnName("DATE_ENTERED");
            entity.Property(e => e.DeliveryDate).HasColumnName("DELIVERY_DATE");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.DestinationId).HasColumnName("DESTINATION_ID");
            entity.Property(e => e.FinesseQty).HasColumnName("FINESSE_QTY");
            entity.Property(e => e.InternalDestination).HasColumnName("INTERNAL_DESTINATION");
            entity.Property(e => e.InvQtyArrived).HasColumnName("INV_QTY_ARRIVED");
            entity.Property(e => e.InvoicingSupplier).HasColumnName("INVOICING_SUPPLIER");
            entity.Property(e => e.LineNo).HasColumnName("LINE_NO");
            entity.Property(e => e.LineNoteText).HasColumnName("LINE_NOTE_TEXT");
            entity.Property(e => e.LocationNo).HasColumnName("LOCATION_NO");
            entity.Property(e => e.ObjectGroup).HasColumnName("OBJECT_GROUP");
            entity.Property(e => e.OrderNo).HasColumnName("ORDER_NO");
            entity.Property(e => e.OriginalQty).HasColumnName("ORIGINAL_QTY");
            entity.Property(e => e.PartNo).HasColumnName("PART_NO");
            entity.Property(e => e.PoNoteText).HasColumnName("PO_NOTE_TEXT");
            entity.Property(e => e.PoState).HasColumnName("PO_STATE");
            entity.Property(e => e.PurchaseGroup).HasColumnName("PURCHASE_GROUP");
            entity.Property(e => e.PurchaseSite).HasColumnName("PURCHASE_SITE");
            entity.Property(e => e.QtyOnOrder).HasColumnName("QTY_ON_ORDER");
            entity.Property(e => e.QtyOnhand).HasColumnName("QTY_ONHAND");
            entity.Property(e => e.ReceiptState).HasColumnName("RECEIPT_STATE");
            entity.Property(e => e.ReleaseNo).HasColumnName("RELEASE_NO");
            entity.Property(e => e.SupplierName).HasColumnName("SUPPLIER_NAME");
            entity.Property(e => e.Warehouse).HasColumnName("WAREHOUSE");
        });

        modelBuilder.Entity<QuickReportMigration20250421>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("QuickReportMigration20250421", "IFS");

            entity.Property(e => e.ApprovedDate).HasColumnName("APPROVED_DATE");
            entity.Property(e => e.ArrivalDate).HasColumnName("ARRIVAL_DATE");
            entity.Property(e => e.BuyQtyDue).HasColumnName("BUY_QTY_DUE");
            entity.Property(e => e.BuyUnitPrice).HasColumnName("BUY_UNIT_PRICE");
            entity.Property(e => e.Contract).HasColumnName("CONTRACT");
            entity.Property(e => e.CurrencyCode).HasColumnName("CURRENCY_CODE");
            entity.Property(e => e.CurrencyRate).HasColumnName("CURRENCY_RATE");
            entity.Property(e => e.DateEntered).HasColumnName("DATE_ENTERED");
            entity.Property(e => e.DeliveryDate).HasColumnName("DELIVERY_DATE");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.DestinationId).HasColumnName("DESTINATION_ID");
            entity.Property(e => e.FinesseQty).HasColumnName("FINESSE_QTY");
            entity.Property(e => e.InternalDestination).HasColumnName("INTERNAL_DESTINATION");
            entity.Property(e => e.InvQtyArrived).HasColumnName("INV_QTY_ARRIVED");
            entity.Property(e => e.InvoicingSupplier).HasColumnName("INVOICING_SUPPLIER");
            entity.Property(e => e.LineNo).HasColumnName("LINE_NO");
            entity.Property(e => e.LineNoteText).HasColumnName("LINE_NOTE_TEXT");
            entity.Property(e => e.LocationNo).HasColumnName("LOCATION_NO");
            entity.Property(e => e.ObjectGroup).HasColumnName("OBJECT_GROUP");
            entity.Property(e => e.OrderNo).HasColumnName("ORDER_NO");
            entity.Property(e => e.OriginalQty).HasColumnName("ORIGINAL_QTY");
            entity.Property(e => e.PartNo).HasColumnName("PART_NO");
            entity.Property(e => e.PoNoteText).HasColumnName("PO_NOTE_TEXT");
            entity.Property(e => e.PoState).HasColumnName("PO_STATE");
            entity.Property(e => e.PurchaseGroup).HasColumnName("PURCHASE_GROUP");
            entity.Property(e => e.PurchaseSite).HasColumnName("PURCHASE_SITE");
            entity.Property(e => e.QtyOnOrder).HasColumnName("QTY_ON_ORDER");
            entity.Property(e => e.QtyOnhand).HasColumnName("QTY_ONHAND");
            entity.Property(e => e.ReceiptState).HasColumnName("RECEIPT_STATE");
            entity.Property(e => e.ReleaseNo).HasColumnName("RELEASE_NO");
            entity.Property(e => e.SupplierName).HasColumnName("SUPPLIER_NAME");
            entity.Property(e => e.Warehouse).HasColumnName("WAREHOUSE");
        });

        modelBuilder.Entity<QuickReportMigration20250429>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("QuickReportMigration20250429", "IFS");

            entity.Property(e => e.ApprovedDate).HasColumnName("APPROVED_DATE");
            entity.Property(e => e.ArrivalDate).HasColumnName("ARRIVAL_DATE");
            entity.Property(e => e.BuyQtyDue)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("BUY_QTY_DUE");
            entity.Property(e => e.BuyUnitPrice)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("BUY_UNIT_PRICE");
            entity.Property(e => e.Contract).HasColumnName("CONTRACT");
            entity.Property(e => e.CurrencyCode).HasColumnName("CURRENCY_CODE");
            entity.Property(e => e.CurrencyRate)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CURRENCY_RATE");
            entity.Property(e => e.DateEntered).HasColumnName("DATE_ENTERED");
            entity.Property(e => e.DeliveryDate).HasColumnName("DELIVERY_DATE");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.DestinationId).HasColumnName("DESTINATION_ID");
            entity.Property(e => e.FinesseQty)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("FINESSE_QTY");
            entity.Property(e => e.InternalDestination).HasColumnName("INTERNAL_DESTINATION");
            entity.Property(e => e.InvQtyArrived)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("INV_QTY_ARRIVED");
            entity.Property(e => e.InvoicingSupplier).HasColumnName("INVOICING_SUPPLIER");
            entity.Property(e => e.LineNo).HasColumnName("LINE_NO");
            entity.Property(e => e.LineNoteText).HasColumnName("LINE_NOTE_TEXT");
            entity.Property(e => e.LocationNo).HasColumnName("LOCATION_NO");
            entity.Property(e => e.ObjectGroup).HasColumnName("OBJECT_GROUP");
            entity.Property(e => e.OrderNo).HasColumnName("ORDER_NO");
            entity.Property(e => e.OriginalQty)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("ORIGINAL_QTY");
            entity.Property(e => e.PartNo).HasColumnName("PART_NO");
            entity.Property(e => e.PoNoteText).HasColumnName("PO_NOTE_TEXT");
            entity.Property(e => e.PoState).HasColumnName("PO_STATE");
            entity.Property(e => e.PurchaseGroup).HasColumnName("PURCHASE_GROUP");
            entity.Property(e => e.PurchaseSite).HasColumnName("PURCHASE_SITE");
            entity.Property(e => e.QtyOnOrder)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("QTY_ON_ORDER");
            entity.Property(e => e.QtyOnhand)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("QTY_ONHAND");
            entity.Property(e => e.ReceiptState).HasColumnName("RECEIPT_STATE");
            entity.Property(e => e.ReleaseNo).HasColumnName("RELEASE_NO");
            entity.Property(e => e.SupplierName).HasColumnName("SUPPLIER_NAME");
            entity.Property(e => e.Warehouse).HasColumnName("WAREHOUSE");
        });

        modelBuilder.Entity<QuickReportMigration20250505>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("QuickReportMigration20250505", "IFS");

            entity.Property(e => e.ApprovedDate).HasColumnName("APPROVED_DATE");
            entity.Property(e => e.ArrivalDate).HasColumnName("ARRIVAL_DATE");
            entity.Property(e => e.BuyQtyDue).HasColumnName("BUY_QTY_DUE");
            entity.Property(e => e.BuyUnitPrice).HasColumnName("BUY_UNIT_PRICE");
            entity.Property(e => e.Contract).HasColumnName("CONTRACT");
            entity.Property(e => e.CurrencyCode).HasColumnName("CURRENCY_CODE");
            entity.Property(e => e.CurrencyRate).HasColumnName("CURRENCY_RATE");
            entity.Property(e => e.DateEntered).HasColumnName("DATE_ENTERED");
            entity.Property(e => e.DeliveryDate).HasColumnName("DELIVERY_DATE");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.DestinationId).HasColumnName("DESTINATION_ID");
            entity.Property(e => e.FinesseQty).HasColumnName("FINESSE_QTY");
            entity.Property(e => e.InternalDestination).HasColumnName("INTERNAL_DESTINATION");
            entity.Property(e => e.InvQtyArrived).HasColumnName("INV_QTY_ARRIVED");
            entity.Property(e => e.InvoicingSupplier).HasColumnName("INVOICING_SUPPLIER");
            entity.Property(e => e.LineNo).HasColumnName("LINE_NO");
            entity.Property(e => e.LineNoteText).HasColumnName("LINE_NOTE_TEXT");
            entity.Property(e => e.LocationNo).HasColumnName("LOCATION_NO");
            entity.Property(e => e.ObjectGroup).HasColumnName("OBJECT_GROUP");
            entity.Property(e => e.OrderNo).HasColumnName("ORDER_NO");
            entity.Property(e => e.OriginalQty).HasColumnName("ORIGINAL_QTY");
            entity.Property(e => e.PartNo).HasColumnName("PART_NO");
            entity.Property(e => e.PoNoteText).HasColumnName("PO_NOTE_TEXT");
            entity.Property(e => e.PoState).HasColumnName("PO_STATE");
            entity.Property(e => e.PurchaseGroup).HasColumnName("PURCHASE_GROUP");
            entity.Property(e => e.PurchaseSite).HasColumnName("PURCHASE_SITE");
            entity.Property(e => e.QtyOnOrder).HasColumnName("QTY_ON_ORDER");
            entity.Property(e => e.QtyOnhand).HasColumnName("QTY_ONHAND");
            entity.Property(e => e.ReceiptState).HasColumnName("RECEIPT_STATE");
            entity.Property(e => e.ReleaseNo).HasColumnName("RELEASE_NO");
            entity.Property(e => e.SupplierName).HasColumnName("SUPPLIER_NAME");
            entity.Property(e => e.Warehouse).HasColumnName("WAREHOUSE");
        });

        modelBuilder.Entity<QuickReportMigration20250508>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("QuickReportMigration20250508", "IFS");

            entity.Property(e => e.ApprovedDate).HasColumnName("APPROVED_DATE");
            entity.Property(e => e.ArrivalDate).HasColumnName("ARRIVAL_DATE");
            entity.Property(e => e.BuyQtyDue).HasColumnName("BUY_QTY_DUE");
            entity.Property(e => e.BuyUnitPrice).HasColumnName("BUY_UNIT_PRICE");
            entity.Property(e => e.Contract).HasColumnName("CONTRACT");
            entity.Property(e => e.CurrencyCode).HasColumnName("CURRENCY_CODE");
            entity.Property(e => e.CurrencyRate).HasColumnName("CURRENCY_RATE");
            entity.Property(e => e.DateEntered).HasColumnName("DATE_ENTERED");
            entity.Property(e => e.DeliveryDate).HasColumnName("DELIVERY_DATE");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.DestinationId).HasColumnName("DESTINATION_ID");
            entity.Property(e => e.FinesseQty).HasColumnName("FINESSE_QTY");
            entity.Property(e => e.InternalDestination).HasColumnName("INTERNAL_DESTINATION");
            entity.Property(e => e.InvQtyArrived).HasColumnName("INV_QTY_ARRIVED");
            entity.Property(e => e.InvoicingSupplier).HasColumnName("INVOICING_SUPPLIER");
            entity.Property(e => e.LineNo).HasColumnName("LINE_NO");
            entity.Property(e => e.LineNoteText).HasColumnName("LINE_NOTE_TEXT");
            entity.Property(e => e.LocationNo).HasColumnName("LOCATION_NO");
            entity.Property(e => e.ObjectGroup).HasColumnName("OBJECT_GROUP");
            entity.Property(e => e.OrderNo).HasColumnName("ORDER_NO");
            entity.Property(e => e.OriginalQty).HasColumnName("ORIGINAL_QTY");
            entity.Property(e => e.PartNo).HasColumnName("PART_NO");
            entity.Property(e => e.PoNoteText).HasColumnName("PO_NOTE_TEXT");
            entity.Property(e => e.PoState).HasColumnName("PO_STATE");
            entity.Property(e => e.PurchaseGroup).HasColumnName("PURCHASE_GROUP");
            entity.Property(e => e.PurchaseSite).HasColumnName("PURCHASE_SITE");
            entity.Property(e => e.QtyOnOrder).HasColumnName("QTY_ON_ORDER");
            entity.Property(e => e.QtyOnhand).HasColumnName("QTY_ONHAND");
            entity.Property(e => e.ReceiptState).HasColumnName("RECEIPT_STATE");
            entity.Property(e => e.ReleaseNo).HasColumnName("RELEASE_NO");
            entity.Property(e => e.SupplierName).HasColumnName("SUPPLIER_NAME");
            entity.Property(e => e.Warehouse).HasColumnName("WAREHOUSE");
        });

        modelBuilder.Entity<QuickSearchQuery>(entity =>
        {
            entity.HasKey(e => e.QuickSearchName).IsClustered(false);

            entity.Property(e => e.QuickSearchName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IsExtendedSearch).HasDefaultValue(false);
            entity.Property(e => e.QueryPrefix).IsUnicode(false);
            entity.Property(e => e.QuerySearchFields).IsUnicode(false);
            entity.Property(e => e.QuerySuffix).IsUnicode(false);
            entity.Property(e => e.Sortorder).HasColumnName("sortorder");
        });

        modelBuilder.Entity<QuoteExpenseResponsibility>(entity =>
        {
            entity.HasKey(e => e.IdResponsibility);

            entity.Property(e => e.IdResponsibility).HasColumnName("id_responsibility");
            entity.Property(e => e.Responsibility)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("responsibility");
            entity.Property(e => e.Sortorder).HasColumnName("sortorder");
        });

        modelBuilder.Entity<QuoteReportHtmlBlock>(entity =>
        {
            entity.HasKey(e => e.IdHtmlBlock).HasName("PK_QuoteReportHTMLBlocks");

            entity.Property(e => e.IdHtmlBlock).HasColumnName("id_HtmlBlock");
            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Html).IsUnicode(false);
            entity.Property(e => e.IdSectionType)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("id_SectionType");
            entity.Property(e => e.IsDefault).HasColumnName("isDefault");
            entity.Property(e => e.IsVisible).HasColumnName("isVisible");
            entity.Property(e => e.ResultTypeCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.SortOrder).HasColumnName("sortOrder");
            entity.Property(e => e.Sqlquery)
                .IsUnicode(false)
                .HasColumnName("SQLQuery");

            entity.HasOne(d => d.IdSectionTypeNavigation).WithMany(p => p.QuoteReportHtmlBlocks)
                .HasForeignKey(d => d.IdSectionType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QuoteReportHtmlBlocks_QuoteReportSectionType");

            entity.HasOne(d => d.ResultTypeCodeNavigation).WithMany(p => p.QuoteReportHtmlBlocks)
                .HasForeignKey(d => d.ResultTypeCode)
                .HasConstraintName("FK_QuoteReportHtmlBlocks_SQLResultType");
        });

        modelBuilder.Entity<QuoteReportHtmlBlocksDataFormat>(entity =>
        {
            entity.HasKey(e => new { e.IdHtmlBlock, e.Field });

            entity.ToTable("QuoteReportHtmlBlocksDataFormat");

            entity.Property(e => e.IdHtmlBlock).HasColumnName("id_HtmlBlock");
            entity.Property(e => e.Field)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormatType)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QuoteReportHtmlBlocksGroupBy>(entity =>
        {
            entity.HasKey(e => new { e.IdHtmlBlock, e.Seqno });

            entity.ToTable("QuoteReportHtmlBlocksGroupBy");

            entity.Property(e => e.IdHtmlBlock).HasColumnName("id_HtmlBlock");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.GroupByField).IsUnicode(false);

            entity.HasOne(d => d.IdHtmlBlockNavigation).WithMany(p => p.QuoteReportHtmlBlocksGroupBies)
                .HasForeignKey(d => d.IdHtmlBlock)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QuoteReportHtmlBlockGroupBy_QuoteReportHtmlBlocks");
        });

        modelBuilder.Entity<QuoteReportHtmlBlocksSummary>(entity =>
        {
            entity.HasKey(e => new { e.IdHtmlBlock, e.Seqno, e.ColumnName });

            entity.Property(e => e.IdHtmlBlock).HasColumnName("id_HtmlBlock");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.ColumnName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SummaryType)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.QuoteReportHtmlBlocksGroupBy).WithMany(p => p.QuoteReportHtmlBlocksSummaries)
                .HasForeignKey(d => new { d.IdHtmlBlock, d.Seqno })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QuoteReportHtmlBlocksSummaries_QuoteReportHtmlBlocksGroupBy");
        });

        modelBuilder.Entity<QuoteReportSectionType>(entity =>
        {
            entity.HasKey(e => e.IdSectionType);

            entity.ToTable("QuoteReportSectionType");

            entity.Property(e => e.IdSectionType)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("id_SectionType");
            entity.Property(e => e.SectionType)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QuoteReportTemplate>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Quote_Report_Template");

            entity.Property(e => e.IdTemplate)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_Template");
            entity.Property(e => e.PrivateUsername)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.TemplateName)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QuoteReportTemplate1>(entity =>
        {
            entity.HasKey(e => e.IdTemplate);

            entity.ToTable("QuoteReportTemplate");

            entity.Property(e => e.IdTemplate).HasColumnName("id_Template");
            entity.Property(e => e.PrivateUsername)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.TemplateName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.PrivateUsernameNavigation).WithMany(p => p.QuoteReportTemplate1s)
                .HasForeignKey(d => d.PrivateUsername)
                .HasConstraintName("FK_QuoteReportTemplate_pjtfrusr");
        });

        modelBuilder.Entity<QuoteReportTemplateSection>(entity =>
        {
            entity.HasKey(e => new { e.IdTemplate, e.IdHtmlBlock, e.SortOrder }).IsClustered(false);

            entity.Property(e => e.IdTemplate).HasColumnName("id_Template");
            entity.Property(e => e.IdHtmlBlock).HasColumnName("id_HtmlBlock");

            entity.HasOne(d => d.IdHtmlBlockNavigation).WithMany(p => p.QuoteReportTemplateSections)
                .HasForeignKey(d => d.IdHtmlBlock)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QuoteReportTemplateSections_QuoteReportHtmlBlocks");

            entity.HasOne(d => d.IdTemplateNavigation).WithMany(p => p.QuoteReportTemplateSections)
                .HasForeignKey(d => d.IdTemplate)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QuoteReportTemplateSections_QuoteReportTemplate");
        });

        modelBuilder.Entity<QuoteReportType>(entity =>
        {
            entity.HasKey(e => e.IdReporttype);

            entity.ToTable("QuoteReportType");

            entity.Property(e => e.IdReporttype).HasColumnName("id_reporttype");
            entity.Property(e => e.Reporttype)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("reporttype");
        });

        modelBuilder.Entity<QuoteReportVault>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.Revision, e.IdReporttype });

            entity.ToTable("QuoteReportVault");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Revision).HasColumnName("revision");
            entity.Property(e => e.IdReporttype).HasColumnName("id_reporttype");
            entity.Property(e => e.ArtistName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Body).IsUnicode(false);
            entity.Property(e => e.Closing).IsUnicode(false);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("createdDate");
            entity.Property(e => e.CrewText).IsUnicode(false);
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CurrencySymbol)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Deposit)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.EquipmentText).IsUnicode(false);
            entity.Property(e => e.EquipmentValue)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.EventName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ExchangeRate).HasColumnName("exchangeRate");
            entity.Property(e => e.HideCrewLineItemAmounts).HasDefaultValue(true);
            entity.Property(e => e.HideEquipmentLineItemAmounts).HasDefaultValue(true);
            entity.Property(e => e.HideExpensesLineItemAmounts).HasDefaultValue(true);
            entity.Property(e => e.IdLanguage).HasColumnName("id_language");
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.ParagraphsAmmended)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ParagraphsDeleted)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PaymentTerms)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.PerDiemDomestic)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.PerDiemInternational)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.PerDiemPayer)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Ponumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PONumber");
            entity.Property(e => e.ProductionName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Salutation)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ScheduleBparagraphsDeleted)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ScheduleBParagraphsDeleted");
            entity.Property(e => e.TouringPeriodEndDate).HasColumnType("datetime");
            entity.Property(e => e.TouringPeriodStartDate).HasColumnType("datetime");
            entity.Property(e => e.TxtFrom)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("txtFrom");
            entity.Property(e => e.TxtRe)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("txtRe");
            entity.Property(e => e.TxtTo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("txtTo");
            entity.Property(e => e.UserName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("user_name");
            entity.Property(e => e.Venue)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.CurrencyNavigation).WithMany(p => p.QuoteReportVaults)
                .HasForeignKey(d => d.Currency)
                .HasConstraintName("FK_QuoteReportVault_Currency");

            entity.HasOne(d => d.EntitynoNavigation).WithMany(p => p.QuoteReportVaults)
                .HasForeignKey(d => d.Entityno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QuoteReportVault_glentities");

            entity.HasOne(d => d.IdLanguageNavigation).WithMany(p => p.QuoteReportVaults)
                .HasForeignKey(d => d.IdLanguage)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QuoteReportVault_xlat_languages");

            entity.HasOne(d => d.IdReporttypeNavigation).WithMany(p => p.QuoteReportVaults)
                .HasForeignKey(d => d.IdReporttype)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QuoteReportVault_QuoteReportType");

            entity.HasOne(d => d.UserNameNavigation).WithMany(p => p.QuoteReportVaults)
                .HasForeignKey(d => d.UserName)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QuoteReportVault_pjtfrusr");
        });

        modelBuilder.Entity<QuoteReportVaultExpenseResponsibility>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.Revision, e.IdReporttype, e.IdResponsibility });

            entity.HasIndex(e => new { e.Entityno, e.IdReporttype }, "IX_QuoteReportVaultExpenseResponsibilities");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Revision).HasColumnName("revision");
            entity.Property(e => e.IdReporttype).HasColumnName("id_reporttype");
            entity.Property(e => e.IdResponsibility).HasColumnName("id_responsibility");

            entity.HasOne(d => d.EntitynoNavigation).WithMany(p => p.QuoteReportVaultExpenseResponsibilities)
                .HasForeignKey(d => d.Entityno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QuoteReportVaultExpenseResponsibilities_glentities");

            entity.HasOne(d => d.IdReporttypeNavigation).WithMany(p => p.QuoteReportVaultExpenseResponsibilities)
                .HasForeignKey(d => d.IdReporttype)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QuoteReportVaultExpenseResponsibilities_QuoteReportType");

            entity.HasOne(d => d.IdResponsibilityNavigation).WithMany(p => p.QuoteReportVaultExpenseResponsibilities)
                .HasForeignKey(d => d.IdResponsibility)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QuoteReportVaultExpenseResponsibilities_QuoteExpenseResponsibilities");
        });

        modelBuilder.Entity<QuoteReportVaultHtmlelement>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.IdReporttype, e.Revision, e.IdHtmlblock });

            entity.ToTable("QuoteReportVaultHTMLElements");

            entity.HasIndex(e => e.Entityno, "IX_entityno");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.IdReporttype).HasColumnName("id_reporttype");
            entity.Property(e => e.Revision).HasColumnName("revision");
            entity.Property(e => e.IdHtmlblock).HasColumnName("id_HTMLBlock");

            entity.HasOne(d => d.EntitynoNavigation).WithMany(p => p.QuoteReportVaultHtmlelements)
                .HasForeignKey(d => d.Entityno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QuoteReportVaultHTMLElements_glentities");

            entity.HasOne(d => d.IdHtmlblockNavigation).WithMany(p => p.QuoteReportVaultHtmlelements)
                .HasForeignKey(d => d.IdHtmlblock)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QuoteReportVaultHTMLElements_QuoteReportHtmlBlocks");

            entity.HasOne(d => d.IdReporttypeNavigation).WithMany(p => p.QuoteReportVaultHtmlelements)
                .HasForeignKey(d => d.IdReporttype)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QuoteReportVaultHTMLElements_QuoteReportType");
        });

        modelBuilder.Entity<RackConfigurator>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.Partno, e.DeviceCount, e.RackBay, e.RackRow });

            entity.ToTable("RackConfigurator", tb =>
                {
                    tb.HasTrigger("TR_RackConfigurator_TrackHistory");
                    tb.HasTrigger("x_AuditRackConfigurator");
                });

            entity.HasIndex(e => e.Partno, "IX_partno");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.DeviceCount).HasColumnName("device_count");
            entity.Property(e => e.RackBay).HasColumnName("rack_bay");
            entity.Property(e => e.RackRow).HasColumnName("rack_row");
            entity.Property(e => e.BoardendPartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("boardend_partno");
            entity.Property(e => e.CableColor).HasColumnName("cable_color");
            entity.Property(e => e.DeviceNote)
                .HasMaxLength(255)
                .HasColumnName("device_note");
            entity.Property(e => e.ExtensionPartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("extension_partno");
            entity.Property(e => e.HalfDeviceOnRight).HasColumnName("half_device_on_right");
            entity.Property(e => e.IsRearView).HasColumnName("isRearView");
            entity.Property(e => e.PatchinginNotes)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("patchingin_notes");
            entity.Property(e => e.PatchingoutNotes)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("patchingout_notes");
            entity.Property(e => e.RackPartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("rack_partno");

            entity.HasOne(d => d.EntitynoNavigation).WithMany(p => p.RackConfigurators)
                .HasForeignKey(d => d.Entityno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RackConfigurator_entityno");
        });

        modelBuilder.Entity<RackConfiguratorA>(entity =>
        {
            entity.HasKey(e => e.AtransactionId).IsClustered(false);

            entity.ToTable("RackConfiguratorA");

            entity.Property(e => e.AtransactionId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ATransactionID");
            entity.Property(e => e.AdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnName("ADateTime");
            entity.Property(e => e.ArecordAction).HasColumnName("ARecordAction");
            entity.Property(e => e.Atransaction).HasColumnName("ATransaction");
            entity.Property(e => e.AuserId)
                .IsUnicode(false)
                .HasColumnName("AUserID");
            entity.Property(e => e.BoardendPartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("boardend_partno");
            entity.Property(e => e.CableColor).HasColumnName("cable_color");
            entity.Property(e => e.DeviceCount).HasColumnName("device_count");
            entity.Property(e => e.DeviceNote)
                .HasMaxLength(255)
                .HasColumnName("device_note");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.ExtensionPartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("extension_partno");
            entity.Property(e => e.HalfDeviceOnRight).HasColumnName("half_device_on_right");
            entity.Property(e => e.IsRearView).HasColumnName("isRearView");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.PatchinginNotes)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("patchingin_notes");
            entity.Property(e => e.PatchingoutNotes)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("patchingout_notes");
            entity.Property(e => e.RackBay).HasColumnName("rack_bay");
            entity.Property(e => e.RackPartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("rack_partno");
            entity.Property(e => e.RackRow).HasColumnName("rack_row");
        });

        modelBuilder.Entity<RackConfiguratorHistory>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.Partno, e.DeviceCount, e.RackBay, e.RackRow, e.ValidFromUtc });

            entity.ToTable("RackConfiguratorHistory");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.DeviceCount).HasColumnName("device_count");
            entity.Property(e => e.RackBay).HasColumnName("rack_bay");
            entity.Property(e => e.RackRow).HasColumnName("rack_row");
            entity.Property(e => e.ValidFromUtc)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnName("ValidFromUTC");
            entity.Property(e => e.BoardendPartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("boardend_partno");
            entity.Property(e => e.CableColor).HasColumnName("cable_color");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(128)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.DeviceNote)
                .HasMaxLength(255)
                .HasColumnName("device_note");
            entity.Property(e => e.ExtensionPartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("extension_partno");
            entity.Property(e => e.HalfDeviceOnRight).HasColumnName("half_device_on_right");
            entity.Property(e => e.IsRearView).HasColumnName("isRearView");
            entity.Property(e => e.PatchinginNotes)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("patchingin_notes");
            entity.Property(e => e.PatchingoutNotes)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("patchingout_notes");
            entity.Property(e => e.RackPartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("rack_partno");
            entity.Property(e => e.RemovedBy).HasMaxLength(128);
            entity.Property(e => e.ValidToUtc).HasColumnName("ValidToUTC");
        });

        modelBuilder.Entity<RackConfiguratorInfectiousPartno419902>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("RackConfiguratorInfectiousPartno419902");

            entity.Property(e => e.BoardendPartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("boardend_partno");
            entity.Property(e => e.CableColor).HasColumnName("cable_color");
            entity.Property(e => e.DeviceCount).HasColumnName("device_count");
            entity.Property(e => e.DeviceNote)
                .HasMaxLength(255)
                .HasColumnName("device_note");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.ExtensionPartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("extension_partno");
            entity.Property(e => e.HalfDeviceOnRight).HasColumnName("half_device_on_right");
            entity.Property(e => e.IsRearView).HasColumnName("isRearView");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.PatchinginNotes)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("patchingin_notes");
            entity.Property(e => e.PatchingoutNotes)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("patchingout_notes");
            entity.Property(e => e.RackBay).HasColumnName("rack_bay");
            entity.Property(e => e.RackPartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("rack_partno");
            entity.Property(e => e.RackRow).HasColumnName("rack_row");
        });

        modelBuilder.Entity<RackConfiguratorPartsToDelete>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("RackConfiguratorPartsToDelete");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
        });

        modelBuilder.Entity<RackConfiguratorPhaseDetail>(entity =>
        {
            entity.HasKey(e => e.Entityno);

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.MixingconsolePartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("mixingconsole_partno");
            entity.Property(e => e.PhaseNotes1).HasColumnName("phase_notes1");
            entity.Property(e => e.PhaseNotes2).HasColumnName("phase_notes2");
            entity.Property(e => e.PhaseNotes3).HasColumnName("phase_notes3");
            entity.Property(e => e.PhaseNotes4).HasColumnName("phase_notes4");
            entity.Property(e => e.RackNotes).HasColumnName("rack_notes");

            entity.HasOne(d => d.EntitynoNavigation).WithOne(p => p.RackConfiguratorPhaseDetail)
                .HasForeignKey<RackConfiguratorPhaseDetail>(d => d.Entityno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RackConfiguratorPhaseDetails_entityno");
        });

        modelBuilder.Entity<Ratiogroup>(entity =>
        {
            entity.HasKey(e => e.GroupId);

            entity.ToTable("ratiogroups", "varko");

            entity.Property(e => e.GroupId)
                .ValueGeneratedNever()
                .HasColumnName("group_id");
            entity.Property(e => e.GroupDesc)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("group_desc");
            entity.Property(e => e.TargetRatio)
                .HasColumnType("decimal(10, 4)")
                .HasColumnName("target_ratio");
        });

        modelBuilder.Entity<RatiogroupsFormula>(entity =>
        {
            entity.HasKey(e => new { e.GroupId, e.Partno });

            entity.ToTable("ratiogroups_formula", "varko");

            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Category)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("category");
            entity.Property(e => e.Multiplier)
                .HasColumnType("decimal(10, 4)")
                .HasColumnName("multiplier");

            entity.HasOne(d => d.Group).WithMany(p => p.RatiogroupsFormulas)
                .HasForeignKey(d => d.GroupId)
                .HasConstraintName("FK__ratiogrou__group__44AABB7E");

            entity.HasOne(d => d.PartnoNavigation).WithMany(p => p.RatiogroupsFormulas)
                .HasForeignKey(d => d.Partno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ratiogrou__partn__43B69745");
        });

        modelBuilder.Entity<RealCurve>(entity =>
        {
            entity.HasKey(e => e.CurveId);

            entity.ToTable("RealCurve", "SpeakerTest");

            entity.Property(e => e.CurveId)
                .ValueGeneratedNever()
                .HasColumnName("CurveID");
        });

        modelBuilder.Entity<RealCurveValue>(entity =>
        {
            entity.HasKey(e => new { e.CurveId, e.SampleIndex });

            entity.ToTable("RealCurveValue", "SpeakerTest");

            entity.Property(e => e.CurveId).HasColumnName("CurveID");

            entity.HasOne(d => d.Curve).WithMany(p => p.RealCurveValues)
                .HasForeignKey(d => d.CurveId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RealCurveValue_RealCurve");
        });

        modelBuilder.Entity<ReceiptInvLocation>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("RECEIPT_INV_LOCATION", "IFS");

            entity.HasIndex(e => e.PartNo, "IX_IFS.RECEIPT_INV_LOCATION__by_part");

            entity.Property(e => e.ActivitySeq)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("ACTIVITY_SEQ");
            entity.Property(e => e.CatchQtyInStore)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CATCH_QTY_IN_STORE");
            entity.Property(e => e.ConfigurationId).HasColumnName("CONFIGURATION_ID");
            entity.Property(e => e.Contract).HasColumnName("CONTRACT");
            entity.Property(e => e.EngChgLevel).HasColumnName("ENG_CHG_LEVEL");
            entity.Property(e => e.HandlingUnitId)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("HANDLING_UNIT_ID");
            entity.Property(e => e.InvQtyInStore)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("INV_QTY_IN_STORE");
            entity.Property(e => e.LocationNo).HasColumnName("LOCATION_NO");
            entity.Property(e => e.LocationType).HasColumnName("LOCATION_TYPE");
            entity.Property(e => e.LocationTypeDb).HasColumnName("LOCATION_TYPE_DB");
            entity.Property(e => e.LotBatchNo).HasColumnName("LOT_BATCH_NO");
            entity.Property(e => e.ManufacturedDate).HasColumnName("MANUFACTURED_DATE");
            entity.Property(e => e.ManufacturerId).HasColumnName("MANUFACTURER_ID");
            entity.Property(e => e.ManufacturerLotBatchNo).HasColumnName("MANUFACTURER_LOT_BATCH_NO");
            entity.Property(e => e.ManufacturerPartNo).HasColumnName("MANUFACTURER_PART_NO");
            entity.Property(e => e.ManufacturerSerialNo).HasColumnName("MANUFACTURER_SERIAL_NO");
            entity.Property(e => e.Objid).HasColumnName("OBJID");
            entity.Property(e => e.Objkey).HasColumnName("OBJKEY");
            entity.Property(e => e.Objversion).HasColumnName("OBJVERSION");
            entity.Property(e => e.PartNo)
                .HasMaxLength(25)
                .HasColumnName("PART_NO");
            entity.Property(e => e.ProjectId).HasColumnName("PROJECT_ID");
            entity.Property(e => e.ReceiptNo)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("RECEIPT_NO");
            entity.Property(e => e.ReceiptSequence)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("RECEIPT_SEQUENCE");
            entity.Property(e => e.SerialNo).HasColumnName("SERIAL_NO");
            entity.Property(e => e.SourceQtyInStore)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SOURCE_QTY_IN_STORE");
            entity.Property(e => e.SourceRef1).HasColumnName("SOURCE_REF1");
            entity.Property(e => e.SourceRef2).HasColumnName("SOURCE_REF2");
            entity.Property(e => e.SourceRef3).HasColumnName("SOURCE_REF3");
            entity.Property(e => e.SourceRef4).HasColumnName("SOURCE_REF4");
            entity.Property(e => e.SourceRefType).HasColumnName("SOURCE_REF_TYPE");
            entity.Property(e => e.SourceRefTypeDb).HasColumnName("SOURCE_REF_TYPE_DB");
            entity.Property(e => e.WaivDevRejNo).HasColumnName("WAIV_DEV_REJ_NO");
        });

        modelBuilder.Entity<Receiptsperson>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("receiptspeople", "IFS");

            entity.Property(e => e.ReceivedBy).HasColumnName("RECEIVED_BY");
        });

        modelBuilder.Entity<RecentMultiCompanyView>(entity =>
        {
            entity.HasKey(e => new { e.UserName, e.Companies });

            entity.Property(e => e.UserName)
                .HasMaxLength(128)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("user_name");
            entity.Property(e => e.Companies)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasColumnName("companies");
            entity.Property(e => e.LastViewed)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ViewCount).HasDefaultValue(1);
        });

        modelBuilder.Entity<RecentMultiWarehouseView>(entity =>
        {
            entity.HasKey(e => new { e.UserName, e.Warehouses });

            entity.Property(e => e.UserName)
                .HasMaxLength(128)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("user_name");
            entity.Property(e => e.Warehouses)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasColumnName("warehouses");
            entity.Property(e => e.LastViewed)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ViewCount).HasDefaultValue(1);
        });

        modelBuilder.Entity<RecentProject>(entity =>
        {
            entity.HasKey(e => new { e.Userid, e.DateOpened, e.Entityno }).IsClustered(false);

            entity.HasIndex(e => new { e.Userid, e.DateOpened }, "IX_RecentProjects")
                .IsDescending(false, true)
                .IsClustered();

            entity.Property(e => e.Userid)
                .HasMaxLength(128)
                .HasDefaultValueSql("(original_login())")
                .HasColumnName("userid");
            entity.Property(e => e.DateOpened).HasDefaultValueSql("(sysdatetimeoffset())");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
        });

        modelBuilder.Entity<ReferenceSet>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("reference_set", "SpeakerTest");

            entity.Property(e => e.Cabinet)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Component)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Configuration)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.ReferenceSetId).HasColumnName("ReferenceSetID");
            entity.Property(e => e.Test)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ReferenceSet1>(entity =>
        {
            entity.HasKey(e => e.ReferenceSetId);

            entity.ToTable("ReferenceSet", "SpeakerTest");

            entity.Property(e => e.ReferenceSetId)
                .ValueGeneratedNever()
                .HasColumnName("ReferenceSetID");
            entity.Property(e => e.Component)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Configuration)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Test)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.ComponentNavigation).WithMany(p => p.ReferenceSet1s)
                .HasForeignKey(d => d.Component)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReferenceSet_Component");

            entity.HasOne(d => d.TestNavigation).WithMany(p => p.ReferenceSet1s)
                .HasForeignKey(d => d.Test)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReferenceSet_Test");

            entity.HasOne(d => d.CabinetConfiguration).WithMany(p => p.ReferenceSet1s)
                .HasForeignKey(d => new { d.Partno, d.Configuration })
                .HasConstraintName("FK_ReferenceSet_CabinetConfiguration");
        });

        modelBuilder.Entity<ReferenceSetCurve>(entity =>
        {
            entity.HasKey(e => new { e.MetaDataVersionNumberValidFrom, e.ReferenceSetId, e.CurveId });

            entity.ToTable("ReferenceSetCurve", "SpeakerTest");

            entity.HasIndex(e => e.ReferenceSetId, "UC_ReferenceSetCurve_OneReferenceGoodForMostRecentMetaDataVersionAndReferenceSet")
                .IsUnique()
                .HasFilter("([DeterminationID]=(0) AND [MetaDataVersionNumberValidTo] IS NULL)");

            entity.HasIndex(e => new { e.MetaDataVersionNumberValidFrom, e.ReferenceSetId }, "UC_ReferenceSetCurve_OneReferenceGoodPerMetaDataVersionAndReferenceSet")
                .IsUnique()
                .HasFilter("([DeterminationID]=(0))");

            entity.Property(e => e.ReferenceSetId).HasColumnName("ReferenceSetID");
            entity.Property(e => e.CurveId).HasColumnName("CurveID");
            entity.Property(e => e.DeterminationId).HasColumnName("DeterminationID");
            entity.Property(e => e.IsReferenceGood).HasComputedColumnSql("(CONVERT([bit],case when [DeterminationID]=(0) then (1) else (0) end))", false);

            entity.HasOne(d => d.Curve).WithMany(p => p.ReferenceSetCurves)
                .HasForeignKey(d => d.CurveId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReferenceSetCurve_CurveID");

            entity.HasOne(d => d.MetaDataVersionNumberValidFromNavigation).WithMany(p => p.ReferenceSetCurveMetaDataVersionNumberValidFromNavigations)
                .HasForeignKey(d => d.MetaDataVersionNumberValidFrom)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReferenceSetCurve_MetaDataVersionNumberValidFrom");

            entity.HasOne(d => d.MetaDataVersionNumberValidToNavigation).WithMany(p => p.ReferenceSetCurveMetaDataVersionNumberValidToNavigations)
                .HasForeignKey(d => d.MetaDataVersionNumberValidTo)
                .HasConstraintName("FK_ReferenceSetCurve_MetaDataVersionNumberValidTo");

            entity.HasOne(d => d.ReferenceSet).WithOne(p => p.ReferenceSetCurve)
                .HasForeignKey<ReferenceSetCurve>(d => d.ReferenceSetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReferenceSetCurve_ReferenceSet");

            entity.HasOne(d => d.ReferenceSetDetermination).WithMany(p => p.ReferenceSetCurves)
                .HasForeignKey(d => new { d.ReferenceSetId, d.DeterminationId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReferenceSetCurve_ReferenceSetDetermination");
        });

        modelBuilder.Entity<ReferenceSetDetermination>(entity =>
        {
            entity.HasKey(e => new { e.ReferenceSetId, e.DeterminationId });

            entity.ToTable("ReferenceSetDetermination", "SpeakerTest");

            entity.Property(e => e.ReferenceSetId).HasColumnName("ReferenceSetID");
            entity.Property(e => e.DeterminationId).HasColumnName("DeterminationID");
            entity.Property(e => e.DisplayText)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OutcomeId).HasColumnName("OutcomeID");

            entity.HasOne(d => d.Outcome).WithMany(p => p.ReferenceSetDeterminations)
                .HasForeignKey(d => d.OutcomeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReferenceSetDetermination_Outcomes");

            entity.HasOne(d => d.ReferenceSet).WithMany(p => p.ReferenceSetDeterminations)
                .HasForeignKey(d => d.ReferenceSetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReferenceSetDetermination_ReferenceSet");
        });

        modelBuilder.Entity<ReferenceSetParameter>(entity =>
        {
            entity.HasKey(e => new { e.ReferenceSetId, e.BinWeightId });

            entity.ToTable("ReferenceSetParameters", "SpeakerTest");

            entity.HasIndex(e => e.BinWeightId, "UC_ReferenceSetParameters_BinWeightID").IsUnique();

            entity.HasIndex(e => e.ReferenceSetId, "UC_ReferenceSetParameters_OneReferenceSetForMetaDataVersionValidTo")
                .IsUnique()
                .HasFilter("([MetaDataVersionNumberValidTo] IS NULL)");

            entity.HasIndex(e => new { e.MetaDataVersionNumberValidFrom, e.ReferenceSetId }, "UC_ReferenceSetParameters_OneReferenceSetPerMetaDataVersionValidFrom").IsUnique();

            entity.Property(e => e.ReferenceSetId).HasColumnName("ReferenceSetID");
            entity.Property(e => e.BinWeightId).HasColumnName("BinWeightID");
            entity.Property(e => e.AvgConstituentAllBinMatchScore).HasComputedColumnSql("([AvgConstituentTotalCurveMatchScore]/(512))", false);

            entity.HasOne(d => d.MetaDataVersionNumberValidFromNavigation).WithMany(p => p.ReferenceSetParameterMetaDataVersionNumberValidFromNavigations)
                .HasForeignKey(d => d.MetaDataVersionNumberValidFrom)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReferenceSetParameters_MetaDataVersionNumberValidFrom");

            entity.HasOne(d => d.MetaDataVersionNumberValidToNavigation).WithMany(p => p.ReferenceSetParameterMetaDataVersionNumberValidToNavigations)
                .HasForeignKey(d => d.MetaDataVersionNumberValidTo)
                .HasConstraintName("FK_ReferenceSetParameters_MetaDataVersionNumberValidTo");

            entity.HasOne(d => d.ReferenceSet).WithOne(p => p.ReferenceSetParameter)
                .HasForeignKey<ReferenceSetParameter>(d => d.ReferenceSetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReferenceSetParameters_ReferenceSet");
        });

        modelBuilder.Entity<ReferralProgram>(entity =>
        {
            entity.ToTable("ReferralProgram");

            entity.HasIndex(e => e.ReferralProgramDesc, "UC_ReferralProgramDesc").IsUnique();

            entity.Property(e => e.ReferralProgramId).HasColumnName("ReferralProgramID");
            entity.Property(e => e.ReferralProgramDesc)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Region>(entity =>
        {
            entity.HasKey(e => e.Region1);

            entity.Property(e => e.Region1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Region");
        });

        modelBuilder.Entity<RepairActivitiesAttachment>(entity =>
        {
            entity.HasKey(e => new { e.IdTicket, e.IdActivity, e.AttachmentPath });

            entity.Property(e => e.IdTicket).HasColumnName("id_ticket");
            entity.Property(e => e.IdActivity).HasColumnName("id_activity");
            entity.Property(e => e.AttachmentPath)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("attachment_path");

            entity.HasOne(d => d.RepairActivity).WithMany(p => p.RepairActivitiesAttachments)
                .HasForeignKey(d => new { d.IdTicket, d.IdActivity })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RepairActivitiesAttachments_RepairActivities");
        });

        modelBuilder.Entity<RepairActivitiesAttachmentsBulkSave>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("RepairActivitiesAttachmentsBulkSave");

            entity.Property(e => e.AttachmentPath)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("attachment_path");
            entity.Property(e => e.IdActivity).HasColumnName("id_activity");
            entity.Property(e => e.IdTicket).HasColumnName("id_ticket");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<RepairActivitiesBulkSave>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("RepairActivitiesBulkSave");

            entity.Property(e => e.ActivityType)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("activity_type");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasColumnName("description");
            entity.Property(e => e.DeviceReturnedDate)
                .HasColumnType("datetime")
                .HasColumnName("device_returned_date");
            entity.Property(e => e.DeviceShippedDate)
                .HasColumnType("datetime")
                .HasColumnName("device_shipped_date");
            entity.Property(e => e.EntryDate)
                .HasColumnType("datetime")
                .HasColumnName("entry_date");
            entity.Property(e => e.EntryUserid)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("entry_userid");
            entity.Property(e => e.ExtRepairNotes)
                .IsUnicode(false)
                .HasColumnName("ext_repair_notes");
            entity.Property(e => e.ExtRepairSiteNo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ext_repair_site_no");
            entity.Property(e => e.ExtRepairVendno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ext_repair_vendno");
            entity.Property(e => e.IdActivity).HasColumnName("id_activity");
            entity.Property(e => e.IdTicket).HasColumnName("id_ticket");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.LaborMinutes).HasColumnName("labor_minutes");
            entity.Property(e => e.Notes1)
                .IsUnicode(false)
                .HasColumnName("notes1");
            entity.Property(e => e.Notes2)
                .IsUnicode(false)
                .HasColumnName("notes2");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<RepairActivitiesRequisition>(entity =>
        {
            entity.HasKey(e => new { e.IdActivity, e.ReqNo, e.LineNo });

            entity.Property(e => e.IdActivity).HasColumnName("id_activity");
            entity.Property(e => e.ReqNo)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("req_no");
            entity.Property(e => e.LineNo).HasColumnName("line_no");
        });

        modelBuilder.Entity<RepairActivity>(entity =>
        {
            entity.HasKey(e => new { e.IdTicket, e.IdActivity });

            entity.HasIndex(e => new { e.IdTicket, e.EntryDate }, "IX_Ticket_and_EntryDate").IsDescending(false, true);

            entity.Property(e => e.IdTicket).HasColumnName("id_ticket");
            entity.Property(e => e.IdActivity)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_activity");
            entity.Property(e => e.ActivityType)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("activity_type");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasColumnName("description");
            entity.Property(e => e.DeviceReturnedDate)
                .HasColumnType("datetime")
                .HasColumnName("device_returned_date");
            entity.Property(e => e.DeviceShippedDate)
                .HasColumnType("datetime")
                .HasColumnName("device_shipped_date");
            entity.Property(e => e.EntryDate).HasColumnName("entry_date");
            entity.Property(e => e.EntryUserid)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("entry_userid");
            entity.Property(e => e.ExtRepairNotes)
                .IsUnicode(false)
                .HasColumnName("ext_repair_notes");
            entity.Property(e => e.ExtRepairSiteNo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ext_repair_site_no");
            entity.Property(e => e.ExtRepairVendno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ext_repair_vendno");
            entity.Property(e => e.LaborMinutes).HasColumnName("labor_minutes");
            entity.Property(e => e.Notes1)
                .IsUnicode(false)
                .HasColumnName("notes1");
            entity.Property(e => e.Notes2)
                .IsUnicode(false)
                .HasColumnName("notes2");

            entity.HasOne(d => d.ActivityTypeNavigation).WithMany(p => p.RepairActivities)
                .HasForeignKey(d => d.ActivityType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RepairActivities_RepairActivityType");

            entity.HasOne(d => d.EntryUser).WithMany(p => p.RepairActivities)
                .HasForeignKey(d => d.EntryUserid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RepairActivities_pjtfrusr");

            entity.HasOne(d => d.IdTicketNavigation).WithMany(p => p.RepairActivities)
                .HasForeignKey(d => d.IdTicket)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RepairActivities_RepairTickets");
        });

        modelBuilder.Entity<RepairActivityType>(entity =>
        {
            entity.HasKey(e => e.ActivityType);

            entity.ToTable("RepairActivityType");

            entity.Property(e => e.ActivityType)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("activity_type");
            entity.Property(e => e.SortOrder).HasColumnName("sort_order");
        });

        modelBuilder.Entity<RepairTicket>(entity =>
        {
            entity.HasKey(e => e.IdTicket);

            entity.HasIndex(e => e.LastProjectEntityno, "IX_RepairTickets_entityno").HasFilter("([last_project_entityno] IS NOT NULL)");

            entity.HasIndex(e => new { e.Partno, e.UniqueNo }, "IX_partno");

            entity.Property(e => e.IdTicket)
                .ValueGeneratedNever()
                .HasColumnName("id_ticket");
            entity.Property(e => e.LastProjectEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("last_project_entityno");
            entity.Property(e => e.MfgModelNo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("mfg_model_no");
            entity.Property(e => e.MfgPartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("mfg_partno");
            entity.Property(e => e.MfgSerialNo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("mfg_serial_no");
            entity.Property(e => e.MfgUniqueNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("mfg_unique_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");

            entity.HasOne(d => d.LastProjectEntitynoNavigation).WithMany(p => p.RepairTickets)
                .HasForeignKey(d => d.LastProjectEntityno)
                .HasConstraintName("FK_RepairTickets_glentities");
        });

        modelBuilder.Entity<RepairTicketsBulkSave>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("RepairTicketsBulkSave");

            entity.Property(e => e.IdTicket).HasColumnName("id_ticket");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.LaborTime)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("Labor_Time");
            entity.Property(e => e.LastProjectEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("last_project_entityno");
            entity.Property(e => e.MfgModelNo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("mfg_model_no");
            entity.Property(e => e.MfgPartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("mfg_partno");
            entity.Property(e => e.MfgSerialNo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("mfg_serial_no");
            entity.Property(e => e.MfgUniqueNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("mfg_unique_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<RepairTicketsNextId>(entity =>
        {
            entity.HasKey(e => e.Uniquifier);

            entity.ToTable("RepairTicketsNextID");

            entity.Property(e => e.IdTicket).HasColumnName("id_ticket");
        });

        modelBuilder.Entity<RepairTicketsRebarcoded20220509>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("RepairTicketsRebarcoded20220509");

            entity.Property(e => e.IdTicket).HasColumnName("id_ticket");
            entity.Property(e => e.NewBarcode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OriginalBarcode)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ReplicatedObject>(entity =>
        {
            entity.HasKey(e => e.ObjectId).IsClustered(false);

            entity.Property(e => e.ObjectId)
                .ValueGeneratedNever()
                .HasColumnName("ObjectID");
            entity.Property(e => e.FirstDetected).HasDefaultValueSql("(getutcdate())");
            entity.Property(e => e.ObjectName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ObjectSchema)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TypeCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TypeDesc)
                .HasMaxLength(1000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ReplicationFixInpartSubAllCurrentPartsOnMissingSydphasesDataFromPaSql03>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ReplicationFixInpartSubAllCurrentPartsOnMissingSYDPhasesData_From_PA-SQL03");

            entity.Property(e => e.Area)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("area");
            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.MsreplTranVersion).HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.Parentpartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("parentpartno");
            entity.Property(e => e.ParentserialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("parentserial_no");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Primekey).HasColumnName("primekey");
            entity.Property(e => e.Receipt)
                .HasColumnType("datetime")
                .HasColumnName("receipt");
            entity.Property(e => e.Row)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<ReplicationFixInpartSubAllCurrentPartsOnMissingSydphasesDataFromSydSql01>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ReplicationFixInpartSubAllCurrentPartsOnMissingSYDPhasesData_From_SYD_SQL01");

            entity.Property(e => e.Area)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("area");
            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.MsreplTranVersion).HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.Parentpartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("parentpartno");
            entity.Property(e => e.ParentserialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("parentserial_no");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Primekey).HasColumnName("primekey");
            entity.Property(e => e.Receipt)
                .HasColumnType("datetime")
                .HasColumnName("receipt");
            entity.Property(e => e.Row)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<ReplicationFixInpartSubCurrentPabarcodesOnMissingPhase>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ReplicationFixInpartSubCurrentPABarcodesOnMissingPhases");

            entity.Property(e => e.Area)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("area");
            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.MsreplTranVersion).HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.Parentpartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("parentpartno");
            entity.Property(e => e.ParentserialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("parentserial_no");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Primekey).HasColumnName("primekey");
            entity.Property(e => e.Receipt)
                .HasColumnType("datetime")
                .HasColumnName("receipt");
            entity.Property(e => e.Row)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<ReplicationFixInpartSubCurrentSyddataFromMissingPhase>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ReplicationFixInpartSubCurrentSYDDataFromMissingPhases");

            entity.Property(e => e.Area)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("area");
            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.MsreplTranVersion).HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.Parentpartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("parentpartno");
            entity.Property(e => e.ParentserialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("parentserial_no");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Primekey).HasColumnName("primekey");
            entity.Property(e => e.Receipt)
                .HasColumnType("datetime")
                .HasColumnName("receipt");
            entity.Property(e => e.Row)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<ReportFieldTranslation>(entity =>
        {
            entity.HasKey(e => new { e.Field, e.IdLanguage });

            entity.Property(e => e.Field)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("field");
            entity.Property(e => e.IdLanguage).HasColumnName("id_language");
            entity.Property(e => e.Translation)
                .IsUnicode(false)
                .HasColumnName("translation");

            entity.HasOne(d => d.IdLanguageNavigation).WithMany(p => p.ReportFieldTranslations)
                .HasForeignKey(d => d.IdLanguage)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReportFieldTranslations");
        });

        modelBuilder.Entity<RevRecActualInvoiceHistory>(entity =>
        {
            entity.HasKey(e => new { e.ProcessingDate, e.Entityno, e.CompanyCode, e.Acctcd }).HasName("PK_RevRecActualInvoicesHistory");

            entity.ToTable("RevRecActualInvoiceHistory");

            entity.Property(e => e.ProcessingDate).HasColumnType("datetime");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.CompanyCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Acctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("acctcd");
            entity.Property(e => e.ActualInvoiceEmpLabor).HasColumnName("actualInvoiceEmpLabor");
            entity.Property(e => e.ActualInvoiceEmpLaborBeforeCutoff).HasColumnName("actualInvoiceEmpLabor_before_cutoff");
            entity.Property(e => e.ActualInvoiceEquipment).HasColumnName("actualInvoiceEquipment");
            entity.Property(e => e.ActualInvoiceEquipmentBeforeCutoff).HasColumnName("actualInvoiceEquipment_before_cutoff");
            entity.Property(e => e.ActualInvoiceExpenses).HasColumnName("actualInvoiceExpenses");
            entity.Property(e => e.ActualInvoiceExpensesBeforeCutoff).HasColumnName("actualInvoiceExpenses_before_cutoff");
            entity.Property(e => e.ActualInvoiceMixedLabor).HasColumnName("actualInvoiceMixedLabor");
            entity.Property(e => e.ActualInvoiceMixedLaborBeforeCutoff).HasColumnName("actualInvoiceMixedLabor_before_cutoff");
            entity.Property(e => e.ActualInvoiceSubLabor).HasColumnName("actualInvoiceSubLabor");
            entity.Property(e => e.ActualInvoiceSubLaborBeforeCutoff).HasColumnName("actualInvoiceSubLabor_before_cutoff");
            entity.Property(e => e.CutoffDate).HasColumnType("datetime");

            entity.HasOne(d => d.AcctcdNavigation).WithMany(p => p.RevRecActualInvoiceHistories)
                .HasPrincipalKey(p => p.Acctcd)
                .HasForeignKey(d => d.Acctcd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RevRecActualInvoiceHistory_glaccounts");

            entity.HasOne(d => d.CompanyCodeNavigation).WithMany(p => p.RevRecActualInvoiceHistories)
                .HasForeignKey(d => d.CompanyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RevRecActualInvoiceHistory_Company");

            entity.HasOne(d => d.EntitynoNavigation).WithMany(p => p.RevRecActualInvoiceHistories)
                .HasForeignKey(d => d.Entityno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RevRecActualInvoiceHistory_glentities");
        });

        modelBuilder.Entity<RevRecCategory>(entity =>
        {
            entity.HasKey(e => e.Category);

            entity.Property(e => e.Category)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("category");
        });

        modelBuilder.Entity<RevRecCategoryMapping>(entity =>
        {
            entity.HasKey(e => new { e.Category, e.DebitMultiplier, e.CreditMultiplier, e.Billingcompany, e.Acctcd });

            entity.Property(e => e.Category)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("category");
            entity.Property(e => e.DebitMultiplier).HasColumnName("debit_multiplier");
            entity.Property(e => e.CreditMultiplier)
                .HasDefaultValue(1.0)
                .HasColumnName("credit_multiplier");
            entity.Property(e => e.Billingcompany)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("billingcompany");
            entity.Property(e => e.Acctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("acctcd");
            entity.Property(e => e.RevRecType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UseRfiaccount).HasColumnName("UseRFIAccount");

            entity.HasOne(d => d.AcctcdNavigation).WithMany(p => p.RevRecCategoryMappings)
                .HasPrincipalKey(p => p.Acctcd)
                .HasForeignKey(d => d.Acctcd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RevRecCategoryMappings_glaccounts");

            entity.HasOne(d => d.BillingcompanyNavigation).WithMany(p => p.RevRecCategoryMappings)
                .HasForeignKey(d => d.Billingcompany)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RevRecCategoryMappings_billingcompany");

            entity.HasOne(d => d.CategoryNavigation).WithMany(p => p.RevRecCategoryMappings)
                .HasForeignKey(d => d.Category)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RevRecCategoryMappings_category");
        });

        modelBuilder.Entity<RevRecInvoicingDetail>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.CompanyCode, e.Acctcd });

            entity.ToTable("RevRecInvoicingDetail");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.CompanyCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Acctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("acctcd");
            entity.Property(e => e.ActualInvoiceEmpLabor).HasColumnName("actualInvoiceEmpLabor");
            entity.Property(e => e.ActualInvoiceEmpLaborBeforeCutoff).HasColumnName("actualInvoiceEmpLabor_before_cutoff");
            entity.Property(e => e.ActualInvoiceEquipment).HasColumnName("actualInvoiceEquipment");
            entity.Property(e => e.ActualInvoiceEquipmentBeforeCutoff).HasColumnName("actualInvoiceEquipment_before_cutoff");
            entity.Property(e => e.ActualInvoiceExpenses).HasColumnName("actualInvoiceExpenses");
            entity.Property(e => e.ActualInvoiceExpensesBeforeCutoff).HasColumnName("actualInvoiceExpenses_before_cutoff");
            entity.Property(e => e.ActualInvoiceMixedLabor).HasColumnName("actualInvoiceMixedLabor");
            entity.Property(e => e.ActualInvoiceMixedLaborBeforeCutoff).HasColumnName("actualInvoiceMixedLabor_before_cutoff");
            entity.Property(e => e.ActualInvoiceSubLabor).HasColumnName("actualInvoiceSubLabor");
            entity.Property(e => e.ActualInvoiceSubLaborBeforeCutoff).HasColumnName("actualInvoiceSubLabor_before_cutoff");

            entity.HasOne(d => d.AcctcdNavigation).WithMany(p => p.RevRecInvoicingDetails)
                .HasPrincipalKey(p => p.Acctcd)
                .HasForeignKey(d => d.Acctcd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RevRecInvoicingDetail_glaccounts");

            entity.HasOne(d => d.CompanyCodeNavigation).WithMany(p => p.RevRecInvoicingDetails)
                .HasForeignKey(d => d.CompanyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RevRecInvoicingDetail_Company");

            entity.HasOne(d => d.EntitynoNavigation).WithMany(p => p.RevRecInvoicingDetails)
                .HasForeignKey(d => d.Entityno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RevRecInvoicingDetail_glentities");
        });

        modelBuilder.Entity<RevRecLocked>(entity =>
        {
            entity.HasKey(e => e.Entityno);

            entity.ToTable("RevRecLocked");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(128)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("createdBy");
            entity.Property(e => e.DateCreated)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dateCreated");
            entity.Property(e => e.DateModified)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dateModified");
            entity.Property(e => e.IsFinalized).HasColumnName("isFinalized");
            entity.Property(e => e.IsLocked)
                .HasDefaultValue(true)
                .HasColumnName("isLocked");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(128)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("modifiedBy");

            entity.HasOne(d => d.EntitynoNavigation).WithOne(p => p.RevRecLocked)
                .HasForeignKey<RevRecLocked>(d => d.Entityno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RevLecLocked_glentities");
        });

        modelBuilder.Entity<RevRecProcessingHistory>(entity =>
        {
            entity.HasKey(e => e.ProcessingDate);

            entity.ToTable("RevRecProcessingHistory");

            entity.Property(e => e.ProcessingDate).HasColumnType("datetime");
            entity.Property(e => e.Cutoffdate).HasColumnType("datetime");
            entity.Property(e => e.RunBy)
                .HasMaxLength(128)
                .HasDefaultValueSql("(suser_sname())");
        });

        modelBuilder.Entity<RevRecProjectAccountBalance>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.CompanyCode, e.Category, e.Acctcd });

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.CompanyCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Category)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("category");
            entity.Property(e => e.Acctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("acctcd");
            entity.Property(e => e.CreditAmountDiff)
                .HasComputedColumnSql("([credit_new_amount]-[credit_old_amount])", false)
                .HasColumnName("credit_amount_diff");
            entity.Property(e => e.CreditNewAmount).HasColumnName("credit_new_amount");
            entity.Property(e => e.CreditOldAmount).HasColumnName("credit_old_amount");
            entity.Property(e => e.DebitAmountDiff)
                .HasComputedColumnSql("([debit_new_amount]-[debit_old_amount])", false)
                .HasColumnName("debit_amount_diff");
            entity.Property(e => e.DebitNewAmount).HasColumnName("debit_new_amount");
            entity.Property(e => e.DebitOldAmount).HasColumnName("debit_old_amount");
            entity.Property(e => e.RevRecType)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.AcctcdNavigation).WithMany(p => p.RevRecProjectAccountBalances)
                .HasPrincipalKey(p => p.Acctcd)
                .HasForeignKey(d => d.Acctcd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RevRecProjectAccountBalances_glaccounts");

            entity.HasOne(d => d.CategoryNavigation).WithMany(p => p.RevRecProjectAccountBalances)
                .HasForeignKey(d => d.Category)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RevRecProjectAccountBalances_RevRecCategories");

            entity.HasOne(d => d.CompanyCodeNavigation).WithMany(p => p.RevRecProjectAccountBalances)
                .HasForeignKey(d => d.CompanyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RevRecProjectAccountBalances_Company");

            entity.HasOne(d => d.EntitynoNavigation).WithMany(p => p.RevRecProjectAccountBalances)
                .HasForeignKey(d => d.Entityno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RevRecProjectAccountBalances_glentities");
        });

        modelBuilder.Entity<RevRecProjectBillingDatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("RevRec_Project_Billing_Data");

            entity.Property(e => e.BillingCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.FirstBillingDay).HasColumnType("smalldatetime");
            entity.Property(e => e.LastBillingDay).HasColumnType("smalldatetime");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
        });

        modelBuilder.Entity<RevRecProjectHistory>(entity =>
        {
            entity.HasKey(e => new { e.ProcessingDate, e.Entityno, e.CompanyCode });

            entity.ToTable("RevRecProjectHistory");

            entity.Property(e => e.ProcessingDate).HasColumnType("datetime");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.CompanyCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ActualCostEmpFraction)
                .HasComputedColumnSql("([actualCostEmpLabor]/nullif([actualCostSubLabor]+[actualCostEmpLabor],(0)))", false)
                .HasColumnName("actualCostEmpFraction");
            entity.Property(e => e.ActualCostEmpFractionBeforeCutoff)
                .HasComputedColumnSql("([actualCostEmpLabor_before_cutoff]/nullif([actualCostSubLabor_before_cutoff]+[actualCostEmpLabor_before_cutoff],(0)))", false)
                .HasColumnName("actualCostEmpFraction_before_cutoff");
            entity.Property(e => e.ActualCostEmpLabor).HasColumnName("actualCostEmpLabor");
            entity.Property(e => e.ActualCostEmpLaborBeforeCutoff).HasColumnName("actualCostEmpLabor_before_cutoff");
            entity.Property(e => e.ActualCostEquipment).HasColumnName("actualCostEquipment");
            entity.Property(e => e.ActualCostEquipmentBeforeCutoff).HasColumnName("actualCostEquipment_before_cutoff");
            entity.Property(e => e.ActualCostExpenses).HasColumnName("actualCostExpenses");
            entity.Property(e => e.ActualCostExpensesBeforeCutoff).HasColumnName("actualCostExpenses_before_cutoff");
            entity.Property(e => e.ActualCostSubFraction)
                .HasComputedColumnSql("([actualCostSubLabor]/nullif([actualCostSubLabor]+[actualCostEmpLabor],(0)))", false)
                .HasColumnName("actualCostSubFraction");
            entity.Property(e => e.ActualCostSubFractionBeforeCutoff)
                .HasComputedColumnSql("([actualCostSubLabor_before_cutoff]/nullif([actualCostSubLabor_before_cutoff]+[actualCostEmpLabor_before_cutoff],(0)))", false)
                .HasColumnName("actualCostSubFraction_before_cutoff");
            entity.Property(e => e.ActualCostSubLabor).HasColumnName("actualCostSubLabor");
            entity.Property(e => e.ActualCostSubLaborBeforeCutoff).HasColumnName("actualCostSubLabor_before_cutoff");
            entity.Property(e => e.ActualInvoiceEquipment).HasColumnName("actualInvoiceEquipment");
            entity.Property(e => e.ActualInvoiceEquipmentBeforeCutoff).HasColumnName("actualInvoiceEquipment_before_cutoff");
            entity.Property(e => e.ActualInvoiceExpenses).HasColumnName("actualInvoiceExpenses");
            entity.Property(e => e.ActualInvoiceExpensesBeforeCutoff).HasColumnName("actualInvoiceExpenses_before_cutoff");
            entity.Property(e => e.ActualInvoiceMixedLabor).HasColumnName("actualInvoiceMixedLabor");
            entity.Property(e => e.ActualInvoiceMixedLaborBeforeCutoff).HasColumnName("actualInvoiceMixedLabor_before_cutoff");
            entity.Property(e => e.ActualInvoiceTotal).HasColumnName("actualInvoiceTotal");
            entity.Property(e => e.ActualInvoiceTotalBeforeCutoff).HasColumnName("actualInvoiceTotal_before_cutoff");
            entity.Property(e => e.AssignedEmpFraction)
                .HasComputedColumnSql("([assignedEmpHours]/nullif([assignedSubHours]+[assignedEmpHours],(0)))", false)
                .HasColumnName("assignedEmpFraction");
            entity.Property(e => e.AssignedEmpHours).HasColumnName("assignedEmpHours");
            entity.Property(e => e.AssignedEmpHoursBeforeCutoff).HasColumnName("assignedEmpHours_before_cutoff");
            entity.Property(e => e.AssignedSubFraction)
                .HasComputedColumnSql("([assignedSubHours]/nullif([assignedSubHours]+[assignedEmpHours],(0)))", false)
                .HasColumnName("assignedSubFraction");
            entity.Property(e => e.AssignedSubHours).HasColumnName("assignedSubHours");
            entity.Property(e => e.AssignedSubHoursBeforeCutoff).HasColumnName("assignedSubHours_before_cutoff");
            entity.Property(e => e.BidCostEquipment).HasColumnName("bidCostEquipment");
            entity.Property(e => e.BidCostEquipmentBeforeCutoff).HasColumnName("bidCostEquipment_before_cutoff");
            entity.Property(e => e.BidCostExpenses).HasColumnName("bidCostExpenses");
            entity.Property(e => e.BidCostExpensesBeforeCutoff).HasColumnName("bidCostExpenses_before_cutoff");
            entity.Property(e => e.BidCostMixedLabor).HasColumnName("bidCostMixedLabor");
            entity.Property(e => e.BidCostMixedLaborBeforeCutoff).HasColumnName("bidCostMixedLabor_before_cutoff");
            entity.Property(e => e.BidInvoiceEquipment).HasColumnName("bidInvoiceEquipment");
            entity.Property(e => e.BidInvoiceEquipmentBeforeCutoff).HasColumnName("bidInvoiceEquipment_before_cutoff");
            entity.Property(e => e.BidInvoiceExpenses).HasColumnName("bidInvoiceExpenses");
            entity.Property(e => e.BidInvoiceExpensesBeforeCutoff).HasColumnName("bidInvoiceExpenses_before_cutoff");
            entity.Property(e => e.BidInvoiceMixedLabor).HasColumnName("bidInvoiceMixedLabor");
            entity.Property(e => e.BidInvoiceMixedLaborBeforeCutoff).HasColumnName("bidInvoiceMixedLabor_before_cutoff");
            entity.Property(e => e.CutoffDate).HasColumnType("datetime");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.FirstBillingDay).HasColumnType("datetime");
            entity.Property(e => e.IsLocked).HasColumnName("isLocked");
            entity.Property(e => e.LastBillingDay).HasColumnType("datetime");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");

            entity.HasOne(d => d.CompanyCodeNavigation).WithMany(p => p.RevRecProjectHistories)
                .HasForeignKey(d => d.CompanyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RevRecProjectHistory_Company");

            entity.HasOne(d => d.EntitynoNavigation).WithMany(p => p.RevRecProjectHistories)
                .HasForeignKey(d => d.Entityno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RevRecProjectHistory_glentities");
        });

        modelBuilder.Entity<RevRecProjectHistoryV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("RevRecProjectHistory_v");

            entity.Property(e => e.ActualCostEmpFraction).HasColumnName("actualCostEmpFraction");
            entity.Property(e => e.ActualCostEmpFractionBeforeCutoff).HasColumnName("actualCostEmpFraction_before_cutoff");
            entity.Property(e => e.ActualCostEmpLabor).HasColumnName("actualCostEmpLabor");
            entity.Property(e => e.ActualCostEmpLaborBeforeCutoff).HasColumnName("actualCostEmpLabor_before_cutoff");
            entity.Property(e => e.ActualCostEquipment).HasColumnName("actualCostEquipment");
            entity.Property(e => e.ActualCostEquipmentBeforeCutoff).HasColumnName("actualCostEquipment_before_cutoff");
            entity.Property(e => e.ActualCostExpenses).HasColumnName("actualCostExpenses");
            entity.Property(e => e.ActualCostExpensesBeforeCutoff).HasColumnName("actualCostExpenses_before_cutoff");
            entity.Property(e => e.ActualCostSubFraction).HasColumnName("actualCostSubFraction");
            entity.Property(e => e.ActualCostSubFractionBeforeCutoff).HasColumnName("actualCostSubFraction_before_cutoff");
            entity.Property(e => e.ActualCostSubLabor).HasColumnName("actualCostSubLabor");
            entity.Property(e => e.ActualCostSubLaborBeforeCutoff).HasColumnName("actualCostSubLabor_before_cutoff");
            entity.Property(e => e.ActualInvoiceEmpFraction).HasColumnName("actualInvoiceEmpFraction");
            entity.Property(e => e.ActualInvoiceEmpLabor).HasColumnName("actualInvoiceEmpLabor");
            entity.Property(e => e.ActualInvoiceEmpLaborBeforeCutoff).HasColumnName("actualInvoiceEmpLabor_before_cutoff");
            entity.Property(e => e.ActualInvoiceEquipment).HasColumnName("actualInvoiceEquipment");
            entity.Property(e => e.ActualInvoiceEquipment1)
                .HasMaxLength(39)
                .IsUnicode(false)
                .HasColumnName("Actual_Invoice_Equipment");
            entity.Property(e => e.ActualInvoiceEquipmentBeforeCutoff).HasColumnName("actualInvoiceEquipment_before_cutoff");
            entity.Property(e => e.ActualInvoiceEquipmentFraction).HasColumnName("actualInvoiceEquipmentFraction");
            entity.Property(e => e.ActualInvoiceExpenses).HasColumnName("actualInvoiceExpenses");
            entity.Property(e => e.ActualInvoiceExpenses1)
                .HasMaxLength(39)
                .IsUnicode(false)
                .HasColumnName("Actual_Invoice_Expenses");
            entity.Property(e => e.ActualInvoiceExpensesBeforeCutoff).HasColumnName("actualInvoiceExpenses_before_cutoff");
            entity.Property(e => e.ActualInvoiceExpensesFraction).HasColumnName("actualInvoiceExpensesFraction");
            entity.Property(e => e.ActualInvoiceLabor)
                .HasMaxLength(39)
                .IsUnicode(false)
                .HasColumnName("Actual_Invoice_Labor");
            entity.Property(e => e.ActualInvoiceMixedLabor).HasColumnName("actualInvoiceMixedLabor");
            entity.Property(e => e.ActualInvoiceMixedLaborBeforeCutoff).HasColumnName("actualInvoiceMixedLabor_before_cutoff");
            entity.Property(e => e.ActualInvoiceSubFraction).HasColumnName("actualInvoiceSubFraction");
            entity.Property(e => e.ActualInvoiceSubLabor).HasColumnName("actualInvoiceSubLabor");
            entity.Property(e => e.ActualInvoiceSubLaborBeforeCutoff).HasColumnName("actualInvoiceSubLabor_before_cutoff");
            entity.Property(e => e.ActualInvoiceSubcontract)
                .HasMaxLength(39)
                .IsUnicode(false)
                .HasColumnName("Actual_Invoice_Subcontract");
            entity.Property(e => e.ActualInvoiceTotal).HasColumnName("actualInvoiceTotal");
            entity.Property(e => e.ActualInvoiceTotalBeforeCutoff).HasColumnName("actualInvoiceTotal_before_cutoff");
            entity.Property(e => e.AppliedEquipment)
                .HasMaxLength(39)
                .IsUnicode(false)
                .HasColumnName("Applied_Equipment");
            entity.Property(e => e.AppliedExpenses)
                .HasMaxLength(39)
                .IsUnicode(false)
                .HasColumnName("Applied_Expenses");
            entity.Property(e => e.AppliedLabor)
                .HasMaxLength(39)
                .IsUnicode(false)
                .HasColumnName("Applied_Labor");
            entity.Property(e => e.AppliedSubcontract)
                .HasMaxLength(39)
                .IsUnicode(false)
                .HasColumnName("Applied_Subcontract");
            entity.Property(e => e.AssignedEmpFraction).HasColumnName("assignedEmpFraction");
            entity.Property(e => e.AssignedEmpHours).HasColumnName("assignedEmpHours");
            entity.Property(e => e.AssignedEmpHoursBeforeCutoff).HasColumnName("assignedEmpHours_before_cutoff");
            entity.Property(e => e.AssignedSubFraction).HasColumnName("assignedSubFraction");
            entity.Property(e => e.AssignedSubHours).HasColumnName("assignedSubHours");
            entity.Property(e => e.AssignedSubHoursBeforeCutoff).HasColumnName("assignedSubHours_before_cutoff");
            entity.Property(e => e.BidCostEmpFraction).HasColumnName("bidCostEmpFraction");
            entity.Property(e => e.BidCostEmpLabor).HasColumnName("bidCostEmpLabor");
            entity.Property(e => e.BidCostEmpLaborBeforeCutoff).HasColumnName("bidCostEmpLabor_before_cutoff");
            entity.Property(e => e.BidCostEquipment).HasColumnName("bidCostEquipment");
            entity.Property(e => e.BidCostEquipmentBeforeCutoff).HasColumnName("bidCostEquipment_before_cutoff");
            entity.Property(e => e.BidCostEquipmentFraction).HasColumnName("bidCostEquipmentFraction");
            entity.Property(e => e.BidCostExpenses).HasColumnName("bidCostExpenses");
            entity.Property(e => e.BidCostExpensesBeforeCutoff).HasColumnName("bidCostExpenses_before_cutoff");
            entity.Property(e => e.BidCostExpensesFraction).HasColumnName("bidCostExpensesFraction");
            entity.Property(e => e.BidCostMixedLabor).HasColumnName("bidCostMixedLabor");
            entity.Property(e => e.BidCostMixedLaborBeforeCutoff).HasColumnName("bidCostMixedLabor_before_cutoff");
            entity.Property(e => e.BidCostSubFraction).HasColumnName("bidCostSubFraction");
            entity.Property(e => e.BidCostSubLabor).HasColumnName("bidCostSubLabor");
            entity.Property(e => e.BidCostSubLaborBeforeCutoff).HasColumnName("bidCostSubLabor_before_cutoff");
            entity.Property(e => e.BidInvoiceEmpLabor).HasColumnName("bidInvoiceEmpLabor");
            entity.Property(e => e.BidInvoiceEmpLaborBeforeCutoff).HasColumnName("bidInvoiceEmpLabor_before_cutoff");
            entity.Property(e => e.BidInvoiceEquipment).HasColumnName("bidInvoiceEquipment");
            entity.Property(e => e.BidInvoiceEquipmentBeforeCutoff).HasColumnName("bidInvoiceEquipment_before_cutoff");
            entity.Property(e => e.BidInvoiceExpenses).HasColumnName("bidInvoiceExpenses");
            entity.Property(e => e.BidInvoiceExpensesBeforeCutoff).HasColumnName("bidInvoiceExpenses_before_cutoff");
            entity.Property(e => e.BidInvoiceMixedLabor).HasColumnName("bidInvoiceMixedLabor");
            entity.Property(e => e.BidInvoiceMixedLaborBeforeCutoff).HasColumnName("bidInvoiceMixedLabor_before_cutoff");
            entity.Property(e => e.BidInvoiceSubLabor).HasColumnName("bidInvoiceSubLabor");
            entity.Property(e => e.BidInvoiceSubLaborBeforeCutoff).HasColumnName("bidInvoiceSubLabor_before_cutoff");
            entity.Property(e => e.CogsEquipment)
                .HasMaxLength(39)
                .IsUnicode(false)
                .HasColumnName("COGS_Equipment");
            entity.Property(e => e.CogsExpenses)
                .HasMaxLength(39)
                .IsUnicode(false)
                .HasColumnName("COGS_Expenses");
            entity.Property(e => e.CogsLabor)
                .HasMaxLength(39)
                .IsUnicode(false)
                .HasColumnName("COGS_Labor");
            entity.Property(e => e.CogsSubcontract)
                .HasMaxLength(39)
                .IsUnicode(false)
                .HasColumnName("COGS_Subcontract");
            entity.Property(e => e.CompanyCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CutoffDate).HasColumnType("datetime");
            entity.Property(e => e.EmpFraction).HasColumnName("empFraction");
            entity.Property(e => e.EmpToMixedFraction).HasColumnName("empToMixedFraction");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.EquipmentFraction).HasColumnName("equipmentFraction");
            entity.Property(e => e.ExpensesFraction).HasColumnName("expensesFraction");
            entity.Property(e => e.FirstBillingDay).HasColumnType("datetime");
            entity.Property(e => e.IsLocked).HasColumnName("isLocked");
            entity.Property(e => e.LastBillingDay).HasColumnType("datetime");
            entity.Property(e => e.MaxEmpLaborCost).HasColumnName("maxEmpLaborCost");
            entity.Property(e => e.MaxEmpLaborCostBeforeCutoff).HasColumnName("maxEmpLaborCost_before_cutoff");
            entity.Property(e => e.MaxEmpLaborCostValueToUse)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("maxEmpLaborCostValueToUse");
            entity.Property(e => e.MaxEmpLaborInvoice).HasColumnName("maxEmpLaborInvoice");
            entity.Property(e => e.MaxEmpLaborInvoiceBeforeCutoff).HasColumnName("maxEmpLaborInvoice_before_cutoff");
            entity.Property(e => e.MaxEmpLaborInvoiceValueToUse)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("maxEmpLaborInvoiceValueToUse");
            entity.Property(e => e.MaxEquipmentCost).HasColumnName("maxEquipmentCost");
            entity.Property(e => e.MaxEquipmentCostBeforeCutoff).HasColumnName("maxEquipmentCost_before_cutoff");
            entity.Property(e => e.MaxEquipmentCostValueToUse)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("maxEquipmentCostValueToUse");
            entity.Property(e => e.MaxEquipmentInvoice).HasColumnName("maxEquipmentInvoice");
            entity.Property(e => e.MaxEquipmentInvoiceBeforeCutoff).HasColumnName("maxEquipmentInvoice_before_cutoff");
            entity.Property(e => e.MaxEquipmentInvoiceValueToUse)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("maxEquipmentInvoiceValueToUse");
            entity.Property(e => e.MaxExpensesCost).HasColumnName("maxExpensesCost");
            entity.Property(e => e.MaxExpensesCostBeforeCutoff).HasColumnName("maxExpensesCost_before_cutoff");
            entity.Property(e => e.MaxExpensesCostValueToUse)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("maxExpensesCostValueToUse");
            entity.Property(e => e.MaxExpensesInvoice).HasColumnName("maxExpensesInvoice");
            entity.Property(e => e.MaxExpensesInvoiceBeforeCutoff).HasColumnName("maxExpensesInvoice_before_cutoff");
            entity.Property(e => e.MaxExpensesInvoiceValueToUse)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("maxExpensesInvoiceValueToUse");
            entity.Property(e => e.MaxSubLaborCost).HasColumnName("maxSubLaborCost");
            entity.Property(e => e.MaxSubLaborCostBeforeCutoff).HasColumnName("maxSubLaborCost_before_cutoff");
            entity.Property(e => e.MaxSubLaborCostValueToUse)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("maxSubLaborCostValueToUse");
            entity.Property(e => e.MaxSubLaborInvoice).HasColumnName("maxSubLaborInvoice");
            entity.Property(e => e.MaxSubLaborInvoiceBeforeCutoff).HasColumnName("maxSubLaborInvoice_before_cutoff");
            entity.Property(e => e.MaxSubLaborInvoiceValueToUse)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("maxSubLaborInvoiceValueToUse");
            entity.Property(e => e.ProcessingDate).HasColumnType("datetime");
            entity.Property(e => e.SAndSEquipment)
                .HasMaxLength(39)
                .IsUnicode(false)
                .HasColumnName("S_And_S_Equipment");
            entity.Property(e => e.SAndSExpenses)
                .HasMaxLength(39)
                .IsUnicode(false)
                .HasColumnName("S_And_S_Expenses");
            entity.Property(e => e.SAndSLabor)
                .HasMaxLength(39)
                .IsUnicode(false)
                .HasColumnName("S_And_S_Labor");
            entity.Property(e => e.SAndSSubcontract)
                .HasMaxLength(39)
                .IsUnicode(false)
                .HasColumnName("S_And_S_Subcontract");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.SubFraction).HasColumnName("subFraction");
            entity.Property(e => e.SubToMixedFraction).HasColumnName("subToMixedFraction");
            entity.Property(e => e.TotalBidCost).HasColumnName("totalBidCost");
            entity.Property(e => e.ValueToUse)
                .HasMaxLength(17)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RevRecRevenueAccountBalance>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.Category, e.Acctcd });

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Category)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("category");
            entity.Property(e => e.Acctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("acctcd");
            entity.Property(e => e.CreditAmountDiff)
                .HasComputedColumnSql("([credit_new_amount]-[credit_old_amount])", false)
                .HasColumnName("credit_amount_diff");
            entity.Property(e => e.CreditNewAmount).HasColumnName("credit_new_amount");
            entity.Property(e => e.CreditOldAmount).HasColumnName("credit_old_amount");
            entity.Property(e => e.DebitAmountDiff)
                .HasComputedColumnSql("([debit_new_amount]-[debit_old_amount])", false)
                .HasColumnName("debit_amount_diff");
            entity.Property(e => e.DebitNewAmount).HasColumnName("debit_new_amount");
            entity.Property(e => e.DebitOldAmount).HasColumnName("debit_old_amount");

            entity.HasOne(d => d.AcctcdNavigation).WithMany(p => p.RevRecRevenueAccountBalances)
                .HasPrincipalKey(p => p.Acctcd)
                .HasForeignKey(d => d.Acctcd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RevRecRevenueAccountBalances_glaccounts");

            entity.HasOne(d => d.CategoryNavigation).WithMany(p => p.RevRecRevenueAccountBalances)
                .HasForeignKey(d => d.Category)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RevRecRevenueAccountBalances_RevRecCategories");

            entity.HasOne(d => d.EntitynoNavigation).WithMany(p => p.RevRecRevenueAccountBalances)
                .HasForeignKey(d => d.Entityno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RevRecRevenueAccountBalances_glentities");
        });

        modelBuilder.Entity<RevRecTempCurrentProject>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.CompanyCode }).HasName("PK__RevRecTempCurrentProjects");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.CompanyCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ActualCostEmpFraction)
                .HasComputedColumnSql("([actualCostEmpLabor]/nullif([actualCostSubLabor]+[actualCostEmpLabor],(0)))", false)
                .HasColumnName("actualCostEmpFraction");
            entity.Property(e => e.ActualCostEmpLabor).HasColumnName("actualCostEmpLabor");
            entity.Property(e => e.ActualCostEmpLaborBeforeCutoff).HasColumnName("actualCostEmpLabor_before_cutoff");
            entity.Property(e => e.ActualCostEquipment).HasColumnName("actualCostEquipment");
            entity.Property(e => e.ActualCostEquipmentBeforeCutoff).HasColumnName("actualCostEquipment_before_cutoff");
            entity.Property(e => e.ActualCostExpenses).HasColumnName("actualCostExpenses");
            entity.Property(e => e.ActualCostExpensesBeforeCutoff).HasColumnName("actualCostExpenses_before_cutoff");
            entity.Property(e => e.ActualCostSubFraction)
                .HasComputedColumnSql("([actualCostSubLabor]/nullif([actualCostSubLabor]+[actualCostEmpLabor],(0)))", false)
                .HasColumnName("actualCostSubFraction");
            entity.Property(e => e.ActualCostSubLabor).HasColumnName("actualCostSubLabor");
            entity.Property(e => e.ActualCostSubLaborBeforeCutoff).HasColumnName("actualCostSubLabor_before_cutoff");
            entity.Property(e => e.ActualInvoiceEquipment).HasColumnName("actualInvoiceEquipment");
            entity.Property(e => e.ActualInvoiceEquipmentBeforeCutoff).HasColumnName("actualInvoiceEquipment_before_cutoff");
            entity.Property(e => e.ActualInvoiceExpenses).HasColumnName("actualInvoiceExpenses");
            entity.Property(e => e.ActualInvoiceExpensesBeforeCutoff).HasColumnName("actualInvoiceExpenses_before_cutoff");
            entity.Property(e => e.ActualInvoiceMixedLabor).HasColumnName("actualInvoiceMixedLabor");
            entity.Property(e => e.ActualInvoiceMixedLaborBeforeCutoff).HasColumnName("actualInvoiceMixedLabor_before_cutoff");
            entity.Property(e => e.ActualInvoiceTotal).HasColumnName("actualInvoiceTotal");
            entity.Property(e => e.ActualInvoiceTotalBeforeCutoff).HasColumnName("actualInvoiceTotal_before_cutoff");
            entity.Property(e => e.AssignedEmpFraction)
                .HasComputedColumnSql("([assignedEmpHours]/nullif([assignedSubHours]+[assignedEmpHours],(0)))", false)
                .HasColumnName("assignedEmpFraction");
            entity.Property(e => e.AssignedEmpHours).HasColumnName("assignedEmpHours");
            entity.Property(e => e.AssignedEmpHoursBeforeCutoff).HasColumnName("assignedEmpHours_before_cutoff");
            entity.Property(e => e.AssignedSubFraction)
                .HasComputedColumnSql("([assignedSubHours]/nullif([assignedSubHours]+[assignedEmpHours],(0)))", false)
                .HasColumnName("assignedSubFraction");
            entity.Property(e => e.AssignedSubHours).HasColumnName("assignedSubHours");
            entity.Property(e => e.AssignedSubHoursBeforeCutoff).HasColumnName("assignedSubHours_before_cutoff");
            entity.Property(e => e.BidCostEquipment).HasColumnName("bidCostEquipment");
            entity.Property(e => e.BidCostEquipmentBeforeCutoff).HasColumnName("bidCostEquipment_before_cutoff");
            entity.Property(e => e.BidCostExpenses).HasColumnName("bidCostExpenses");
            entity.Property(e => e.BidCostExpensesBeforeCutoff).HasColumnName("bidCostExpenses_before_cutoff");
            entity.Property(e => e.BidCostMixedLabor).HasColumnName("bidCostMixedLabor");
            entity.Property(e => e.BidCostMixedLaborBeforeCutoff).HasColumnName("bidCostMixedLabor_before_cutoff");
            entity.Property(e => e.BidInvoiceEquipment).HasColumnName("bidInvoiceEquipment");
            entity.Property(e => e.BidInvoiceEquipmentBeforeCutoff).HasColumnName("bidInvoiceEquipment_before_cutoff");
            entity.Property(e => e.BidInvoiceExpenses).HasColumnName("bidInvoiceExpenses");
            entity.Property(e => e.BidInvoiceExpensesBeforeCutoff).HasColumnName("bidInvoiceExpenses_before_cutoff");
            entity.Property(e => e.BidInvoiceMixedLabor).HasColumnName("bidInvoiceMixedLabor");
            entity.Property(e => e.BidInvoiceMixedLaborBeforeCutoff).HasColumnName("bidInvoiceMixedLabor_before_cutoff");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.FirstBillingDay).HasColumnType("datetime");
            entity.Property(e => e.IsLocked).HasColumnName("isLocked");
            entity.Property(e => e.LastBillingDay).HasColumnType("datetime");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");

            entity.HasOne(d => d.CompanyCodeNavigation).WithMany(p => p.RevRecTempCurrentProjects)
                .HasForeignKey(d => d.CompanyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RevRecTempCurrentProjects_Company");

            entity.HasOne(d => d.EntitynoNavigation).WithMany(p => p.RevRecTempCurrentProjects)
                .HasForeignKey(d => d.Entityno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RevRecTempCurrentProjects_glentities");
        });

        modelBuilder.Entity<RevRecTempCurrentProjectsWithoutNull>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("RevRecTempCurrentProjectsWithoutNulls");

            entity.Property(e => e.ActualCostEmpFraction).HasColumnName("actualCostEmpFraction");
            entity.Property(e => e.ActualCostEmpLabor).HasColumnName("actualCostEmpLabor");
            entity.Property(e => e.ActualCostEmpLaborBeforeCutoff).HasColumnName("actualCostEmpLabor_before_cutoff");
            entity.Property(e => e.ActualCostEquipment).HasColumnName("actualCostEquipment");
            entity.Property(e => e.ActualCostEquipmentBeforeCutoff).HasColumnName("actualCostEquipment_before_cutoff");
            entity.Property(e => e.ActualCostExpenses).HasColumnName("actualCostExpenses");
            entity.Property(e => e.ActualCostExpensesBeforeCutoff).HasColumnName("actualCostExpenses_before_cutoff");
            entity.Property(e => e.ActualCostSubFraction).HasColumnName("actualCostSubFraction");
            entity.Property(e => e.ActualCostSubLabor).HasColumnName("actualCostSubLabor");
            entity.Property(e => e.ActualCostSubLaborBeforeCutoff).HasColumnName("actualCostSubLabor_before_cutoff");
            entity.Property(e => e.ActualInvoiceEquipment).HasColumnName("actualInvoiceEquipment");
            entity.Property(e => e.ActualInvoiceEquipmentBeforeCutoff).HasColumnName("actualInvoiceEquipment_before_cutoff");
            entity.Property(e => e.ActualInvoiceExpenses).HasColumnName("actualInvoiceExpenses");
            entity.Property(e => e.ActualInvoiceExpensesBeforeCutoff).HasColumnName("actualInvoiceExpenses_before_cutoff");
            entity.Property(e => e.ActualInvoiceMixedLabor).HasColumnName("actualInvoiceMixedLabor");
            entity.Property(e => e.ActualInvoiceMixedLaborBeforeCutoff).HasColumnName("actualInvoiceMixedLabor_before_cutoff");
            entity.Property(e => e.ActualInvoiceTotal).HasColumnName("actualInvoiceTotal");
            entity.Property(e => e.ActualInvoiceTotalBeforeCutoff).HasColumnName("actualInvoiceTotal_before_cutoff");
            entity.Property(e => e.AssignedEmpFraction).HasColumnName("assignedEmpFraction");
            entity.Property(e => e.AssignedEmpHours).HasColumnName("assignedEmpHours");
            entity.Property(e => e.AssignedEmpHoursBeforeCutoff).HasColumnName("assignedEmpHours_before_cutoff");
            entity.Property(e => e.AssignedSubFraction).HasColumnName("assignedSubFraction");
            entity.Property(e => e.AssignedSubHours).HasColumnName("assignedSubHours");
            entity.Property(e => e.AssignedSubHoursBeforeCutoff).HasColumnName("assignedSubHours_before_cutoff");
            entity.Property(e => e.BidCostEquipment).HasColumnName("bidCostEquipment");
            entity.Property(e => e.BidCostEquipmentBeforeCutoff).HasColumnName("bidCostEquipment_before_cutoff");
            entity.Property(e => e.BidCostExpenses).HasColumnName("bidCostExpenses");
            entity.Property(e => e.BidCostExpensesBeforeCutoff).HasColumnName("bidCostExpenses_before_cutoff");
            entity.Property(e => e.BidCostMixedLabor).HasColumnName("bidCostMixedLabor");
            entity.Property(e => e.BidCostMixedLaborBeforeCutoff).HasColumnName("bidCostMixedLabor_before_cutoff");
            entity.Property(e => e.BidInvoiceEquipment).HasColumnName("bidInvoiceEquipment");
            entity.Property(e => e.BidInvoiceEquipmentBeforeCutoff).HasColumnName("bidInvoiceEquipment_before_cutoff");
            entity.Property(e => e.BidInvoiceExpenses).HasColumnName("bidInvoiceExpenses");
            entity.Property(e => e.BidInvoiceExpensesBeforeCutoff).HasColumnName("bidInvoiceExpenses_before_cutoff");
            entity.Property(e => e.BidInvoiceMixedLabor).HasColumnName("bidInvoiceMixedLabor");
            entity.Property(e => e.BidInvoiceMixedLaborBeforeCutoff).HasColumnName("bidInvoiceMixedLabor_before_cutoff");
            entity.Property(e => e.CompanyCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.FirstBillingDay).HasColumnType("datetime");
            entity.Property(e => e.IsLocked).HasColumnName("isLocked");
            entity.Property(e => e.LastBillingDay).HasColumnType("datetime");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
        });

        modelBuilder.Entity<RevRecTempProjectAccountBalance>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.CompanyCode, e.Category, e.Acctcd });

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.CompanyCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Category)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("category");
            entity.Property(e => e.Acctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("acctcd");
            entity.Property(e => e.CreditAmount).HasColumnName("credit_amount");
            entity.Property(e => e.DebitAmount).HasColumnName("debit_amount");
            entity.Property(e => e.RevRecType)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.AcctcdNavigation).WithMany(p => p.RevRecTempProjectAccountBalances)
                .HasPrincipalKey(p => p.Acctcd)
                .HasForeignKey(d => d.Acctcd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RevRecTempProjectAccountBalances_glaccounts");

            entity.HasOne(d => d.CategoryNavigation).WithMany(p => p.RevRecTempProjectAccountBalances)
                .HasForeignKey(d => d.Category)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RevRecTempProjectAccountBalances_RevRecCategories");

            entity.HasOne(d => d.CompanyCodeNavigation).WithMany(p => p.RevRecTempProjectAccountBalances)
                .HasForeignKey(d => d.CompanyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RevRecTempProjectAccountBalances_Company");

            entity.HasOne(d => d.EntitynoNavigation).WithMany(p => p.RevRecTempProjectAccountBalances)
                .HasForeignKey(d => d.Entityno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RevRecTempProjectAccountBalances_glentities");
        });

        modelBuilder.Entity<RevRecTempProjectAccountBalancesRounded>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("RevRecTempProjectAccountBalances_Rounded");

            entity.Property(e => e.Acctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("acctcd");
            entity.Property(e => e.Category)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("category");
            entity.Property(e => e.CompanyCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreditAmount).HasColumnName("credit_amount");
            entity.Property(e => e.CreditAmountCentsAddedOrRemoved)
                .HasColumnType("numeric(13, 2)")
                .HasColumnName("credit_amount_cents_added_or_removed");
            entity.Property(e => e.CreditCentsToDistribute).HasColumnName("credit_cents_to_distribute");
            entity.Property(e => e.CreditRoundingRank).HasColumnName("credit_rounding_rank");
            entity.Property(e => e.DebitAmount).HasColumnName("debit_amount");
            entity.Property(e => e.DebitAmountCentsAddedOrRemoved)
                .HasColumnType("numeric(13, 2)")
                .HasColumnName("debit_amount_cents_added_or_removed");
            entity.Property(e => e.DebitCentsToDistribute).HasColumnName("debit_cents_to_distribute");
            entity.Property(e => e.DebitRoundingRank).HasColumnName("debit_rounding_rank");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.NewCreditAmount).HasColumnName("new_credit_amount");
            entity.Property(e => e.NewDebitAmount).HasColumnName("new_debit_amount");
            entity.Property(e => e.OldCreditAmount).HasColumnName("old_credit_amount");
            entity.Property(e => e.OldDebitAmount).HasColumnName("old_debit_amount");
            entity.Property(e => e.RevRecType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RoundedCreditAmount).HasColumnName("rounded_credit_amount");
            entity.Property(e => e.RoundedCreditTotal).HasColumnName("rounded_credit_total");
            entity.Property(e => e.RoundedDebitAmount).HasColumnName("rounded_debit_amount");
            entity.Property(e => e.RoundedDebitTotal).HasColumnName("rounded_debit_total");
            entity.Property(e => e.RoundingCreditDiff).HasColumnName("rounding_credit_diff");
            entity.Property(e => e.RoundingDebitDiff).HasColumnName("rounding_debit_diff");
            entity.Property(e => e.TotalOfRoundedCreditAmounts).HasColumnName("total_of_rounded_credit_amounts");
            entity.Property(e => e.TotalOfRoundedDebitAmounts).HasColumnName("total_of_rounded_debit_amounts");
        });

        modelBuilder.Entity<RevRecTempProjectCategoryValueBreakdown>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.CompanyCode, e.Category });

            entity.ToTable("RevRecTempProjectCategoryValueBreakdown");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.CompanyCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Category)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ValueToUse)
                .HasMaxLength(64)
                .IsUnicode(false);

            entity.HasOne(d => d.CategoryNavigation).WithMany(p => p.RevRecTempProjectCategoryValueBreakdowns)
                .HasForeignKey(d => d.Category)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RevRecTempProjectCategoryValueBreakdown_RevRecCategories");

            entity.HasOne(d => d.CompanyCodeNavigation).WithMany(p => p.RevRecTempProjectCategoryValueBreakdowns)
                .HasForeignKey(d => d.CompanyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RevRecTempProjectCategoryValueBreakdown_Company");

            entity.HasOne(d => d.EntitynoNavigation).WithMany(p => p.RevRecTempProjectCategoryValueBreakdowns)
                .HasForeignKey(d => d.Entityno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RevRecTempProjectCategoryValueBreakdown_glentities");
        });

        modelBuilder.Entity<RevRecTempProjectRevenueSummaryToCategorySummary>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.Category, e.CompanyCode, e.Acctcd });

            entity.ToTable("RevRecTempProjectRevenueSummaryToCategorySummary");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Category)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("category");
            entity.Property(e => e.CompanyCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Acctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("acctcd");
            entity.Property(e => e.Amt).HasColumnName("amt");

            entity.HasOne(d => d.AcctcdNavigation).WithMany(p => p.RevRecTempProjectRevenueSummaryToCategorySummaries)
                .HasPrincipalKey(p => p.Acctcd)
                .HasForeignKey(d => d.Acctcd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RevRecTempProjectRevenueSummaryToCategorySummary_glaccounts");

            entity.HasOne(d => d.CompanyCodeNavigation).WithMany(p => p.RevRecTempProjectRevenueSummaryToCategorySummaries)
                .HasForeignKey(d => d.CompanyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RevRecTempProjectRevenueSummaryToCategorySummary_Company");

            entity.HasOne(d => d.EntitynoNavigation).WithMany(p => p.RevRecTempProjectRevenueSummaryToCategorySummaries)
                .HasForeignKey(d => d.Entityno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RevRecTempProjectRevenueSummaryToCategorySummary_glentities");
        });

        modelBuilder.Entity<RevRecTempProjectSummaryToCategorySummary>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.CompanyCode, e.Category });

            entity.ToTable("RevRecTempProjectSummaryToCategorySummary");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.CompanyCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Category)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("category");
            entity.Property(e => e.Amt).HasColumnName("amt");
            entity.Property(e => e.UseRfibreakout).HasColumnName("useRFIbreakout");

            entity.HasOne(d => d.CategoryNavigation).WithMany(p => p.RevRecTempProjectSummaryToCategorySummaries)
                .HasForeignKey(d => d.Category)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RevRecTempProjectSummaryToCategorySummary_RevRecCategories");

            entity.HasOne(d => d.CompanyCodeNavigation).WithMany(p => p.RevRecTempProjectSummaryToCategorySummaries)
                .HasForeignKey(d => d.CompanyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RevRecTempProjectSummaryToCategorySummary_Company");

            entity.HasOne(d => d.EntitynoNavigation).WithMany(p => p.RevRecTempProjectSummaryToCategorySummaries)
                .HasForeignKey(d => d.Entityno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RevRecTempProjectSummaryToCategorySummary_glentities");
        });

        modelBuilder.Entity<Rfi>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.Seqno });

            entity.ToTable("RFI", tb =>
                {
                    tb.HasTrigger("TR_RFI_account_code_must_match_project_billing_company");
                    tb.HasTrigger("TR_RFI_billschedule_must_be_locked_when_added_to_a_template");
                    tb.HasTrigger("TR_RFI_cannot_be_modified");
                });

            entity.HasIndex(e => new { e.FullyApproved, e.FullyInvoiced }, "IX_FullyApproved_and_FullyInvoiced");

            entity.HasIndex(e => e.InvEntityno, "IX_pjjobbudinv__inv_entityno");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Acctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("acctcd");
            entity.Property(e => e.AeApproved)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ae_approved");
            entity.Property(e => e.AmApproved)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("am_approved");
            entity.Property(e => e.Billschedule)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("W")
                .HasColumnName("billschedule");
            entity.Property(e => e.ChangeNo).HasColumnName("change_no");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(128)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("createdBy");
            entity.Property(e => e.DateCreated)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dateCreated");
            entity.Property(e => e.DateModified)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dateModified");
            entity.Property(e => e.Description)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("description");
            entity.Property(e => e.Displayind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength()
                .HasColumnName("displayind");
            entity.Property(e => e.Enddate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.FullyApproved).HasComputedColumnSql("(CONVERT([bit],case when [am_approved]='Y' AND [ae_approved]='Y' then (1) else (0) end,0))", false);
            entity.Property(e => e.FullyInvoiced).HasComputedColumnSql("(CONVERT([bit],case when [postind]='Y' AND [InvoiceTemplateID] IS NULL OR [BillSchedule]<>'S' AND [InvoicedThrough]=[enddate] OR [BillSchedule]='S' AND [SplitCount]=[SplitCountInvoiced] then (1) else (0) end,(0)))", false);
            entity.Property(e => e.InvEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("inv_entityno");
            entity.Property(e => e.InvoiceTemplateGroupId).HasColumnName("InvoiceTemplateGroupID");
            entity.Property(e => e.InvoiceTemplateId).HasColumnName("InvoiceTemplateID");
            entity.Property(e => e.InvoicedThrough).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(128)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("modifiedBy");
            entity.Property(e => e.Note)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("note");
            entity.Property(e => e.Numdays).HasColumnName("numdays");
            entity.Property(e => e.Postind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("N")
                .IsFixedLength()
                .HasColumnName("postind");
            entity.Property(e => e.Rate)
                .HasColumnType("money")
                .HasColumnName("rate");
            entity.Property(e => e.Ratetype)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ratetype");
            entity.Property(e => e.RevenueCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.TemplateModifiedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TemplateModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Total).HasColumnName("total");

            entity.HasOne(d => d.AcctcdNavigation).WithMany(p => p.Rfis)
                .HasPrincipalKey(p => p.Acctcd)
                .HasForeignKey(d => d.Acctcd)
                .HasConstraintName("FK_RFI_glaccounts");

            entity.HasOne(d => d.BillscheduleNavigation).WithMany(p => p.Rfis)
                .HasForeignKey(d => d.Billschedule)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RFI_pjBillSchedules");

            entity.HasOne(d => d.EntitynoNavigation).WithMany(p => p.RfiEntitynoNavigations)
                .HasForeignKey(d => d.Entityno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RFI_glentities");

            entity.HasOne(d => d.InvEntitynoNavigation).WithMany(p => p.RfiInvEntitynoNavigations)
                .HasForeignKey(d => d.InvEntityno)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.RatetypeNavigation).WithMany(p => p.Rfis)
                .HasForeignKey(d => d.Ratetype)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PK_RFI_pjinvratetype");

            entity.HasOne(d => d.RevenueCompanyNavigation).WithMany(p => p.Rfis)
                .HasForeignKey(d => d.RevenueCompany)
                .HasConstraintName("FK_RFI_Company");

            entity.HasOne(d => d.InvoiceSeries).WithMany(p => p.Rfis)
                .HasForeignKey(d => new { d.Entityno, d.InvoiceTemplateId })
                .HasConstraintName("FK_RFI_InvoiceSeries");

            entity.HasOne(d => d.InvoiceSeriesGroup).WithMany(p => p.Rfis)
                .HasForeignKey(d => new { d.Entityno, d.InvoiceTemplateId, d.InvoiceTemplateGroupId })
                .HasConstraintName("FK_RFI_InvoiceSeriesGroups");
        });

        modelBuilder.Entity<Rfi1678891320250225>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("RFI_167889-13_20250225");

            entity.Property(e => e.Acctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("acctcd");
            entity.Property(e => e.AeApproved)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ae_approved");
            entity.Property(e => e.AmApproved)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("am_approved");
            entity.Property(e => e.Billschedule)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("billschedule");
            entity.Property(e => e.ChangeNo).HasColumnName("change_no");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(128)
                .HasColumnName("createdBy");
            entity.Property(e => e.DateCreated)
                .HasColumnType("datetime")
                .HasColumnName("dateCreated");
            entity.Property(e => e.DateModified)
                .HasColumnType("datetime")
                .HasColumnName("dateModified");
            entity.Property(e => e.Description)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("description");
            entity.Property(e => e.Displayind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("displayind");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.InvEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("inv_entityno");
            entity.Property(e => e.InvoiceTemplateGroupId).HasColumnName("InvoiceTemplateGroupID");
            entity.Property(e => e.InvoiceTemplateId).HasColumnName("InvoiceTemplateID");
            entity.Property(e => e.InvoicedThrough).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(128)
                .HasColumnName("modifiedBy");
            entity.Property(e => e.Note)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("note");
            entity.Property(e => e.Numdays).HasColumnName("numdays");
            entity.Property(e => e.Postind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("postind");
            entity.Property(e => e.Rate)
                .HasColumnType("money")
                .HasColumnName("rate");
            entity.Property(e => e.Ratetype)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ratetype");
            entity.Property(e => e.RevenueCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.TemplateModifiedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TemplateModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Total).HasColumnName("total");
        });

        modelBuilder.Entity<RfiInProcessSplitSummary>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("RFI_InProcess_Split_Summary");

            entity.Property(e => e.CBig).HasColumnName("cBig");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
        });

        modelBuilder.Entity<RfiIncorrectTotalInvoiced20210202>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("RFI_incorrect_TotalInvoiced_20210202");

            entity.Property(e => e.Acctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("acctcd");
            entity.Property(e => e.AeApproved)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ae_approved");
            entity.Property(e => e.AmApproved)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("am_approved");
            entity.Property(e => e.Billschedule)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("billschedule");
            entity.Property(e => e.ChangeNo).HasColumnName("change_no");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(128)
                .HasColumnName("createdBy");
            entity.Property(e => e.DateCreated)
                .HasColumnType("datetime")
                .HasColumnName("dateCreated");
            entity.Property(e => e.DateModified)
                .HasColumnType("datetime")
                .HasColumnName("dateModified");
            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("description");
            entity.Property(e => e.Displayind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("displayind");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.InvEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("inv_entityno");
            entity.Property(e => e.InvoiceTemplateGroupId).HasColumnName("InvoiceTemplateGroupID");
            entity.Property(e => e.InvoiceTemplateId).HasColumnName("InvoiceTemplateID");
            entity.Property(e => e.InvoicedThrough).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(128)
                .HasColumnName("modifiedBy");
            entity.Property(e => e.Note)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("note");
            entity.Property(e => e.Numdays).HasColumnName("numdays");
            entity.Property(e => e.Postind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("postind");
            entity.Property(e => e.Rate)
                .HasColumnType("money")
                .HasColumnName("rate");
            entity.Property(e => e.Ratetype)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ratetype");
            entity.Property(e => e.RevenueCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.TemplateModifiedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TemplateModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Total).HasColumnName("total");
        });

        modelBuilder.Entity<RfiStagingVault>(entity =>
        {
            entity.HasKey(e => new { e.Spid, e.Entityno, e.Seqno });

            entity.ToTable("RFI_StagingVault");

            entity.Property(e => e.Spid)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("spid");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Acctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("acctcd");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.InvoiceTemplateGroupId).HasColumnName("InvoiceTemplateGroupID");
            entity.Property(e => e.InvoiceTemplateId).HasColumnName("InvoiceTemplateID");
            entity.Property(e => e.InvoicedThrough).HasColumnType("datetime");
            entity.Property(e => e.OInvoiceTemplateGroupId).HasColumnName("o_InvoiceTemplateGroupID");
            entity.Property(e => e.OInvoiceTemplateId).HasColumnName("o_InvoiceTemplateID");
        });

        modelBuilder.Entity<RfiStagingVaultV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("RFI_StagingVault_v");

            entity.Property(e => e.Acctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("acctcd");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.InvoiceTemplateGroupId).HasColumnName("InvoiceTemplateGroupID");
            entity.Property(e => e.InvoiceTemplateId).HasColumnName("InvoiceTemplateID");
            entity.Property(e => e.OInvoiceTemplateGroupId).HasColumnName("o_InvoiceTemplateGroupID");
            entity.Property(e => e.OInvoiceTemplateId).HasColumnName("o_InvoiceTemplateID");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
        });

        modelBuilder.Entity<RiggingInspectionLocation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Rigging_Inspection__Locations");

            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Entitydesc)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("entitydesc");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Partdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Qty).HasColumnName("qty");
        });

        modelBuilder.Entity<SalesForecastGroup>(entity =>
        {
            entity.HasKey(e => e.SalesForecastGroup1);

            entity.ToTable("SalesForecastGroup");

            entity.Property(e => e.SalesForecastGroup1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SalesForecastGroup");
            entity.Property(e => e.SalesForecastGroupDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SalesForecastGroupOverride>(entity =>
        {
            entity.HasKey(e => new { e.BillingCompany, e.Warehouse });

            entity.ToTable("SalesForecastGroupOverride");

            entity.Property(e => e.BillingCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Warehouse)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SalesForecastGroup)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.BillingCompanyNavigation).WithMany(p => p.SalesForecastGroupOverrides)
                .HasForeignKey(d => d.BillingCompany)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SalesForecastGroupOverride__BillingCompany");

            entity.HasOne(d => d.WarehouseNavigation).WithMany(p => p.SalesForecastGroupOverrides)
                .HasForeignKey(d => d.Warehouse)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SalesForecastGroupOverride__Warehouse");
        });

        modelBuilder.Entity<SalesForecastRun>(entity =>
        {
            entity.HasKey(e => new { e.UserName, e.StartDate, e.EndDate, e.Warehouse, e.Billingcompany, e.Acctmgr, e.SalesForecastGroup, e.SuppressCompanies, e.ProjectStatusList, e.Acctexec, e.ProposalTypesList });

            entity.Property(e => e.UserName)
                .HasMaxLength(128)
                .HasDefaultValueSql("(original_login())")
                .HasColumnName("user_name");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.Warehouse)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("warehouse");
            entity.Property(e => e.Billingcompany)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("billingcompany");
            entity.Property(e => e.Acctmgr)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("acctmgr");
            entity.Property(e => e.SalesForecastGroup)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SuppressCompanies).HasColumnName("suppressCompanies");
            entity.Property(e => e.ProjectStatusList)
                .HasMaxLength(512)
                .IsUnicode(false);
            entity.Property(e => e.Acctexec)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("acctexec");
            entity.Property(e => e.ProposalTypesList)
                .HasMaxLength(512)
                .IsUnicode(false);
            entity.Property(e => e.LastRun)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RunCount).HasDefaultValue(1);
        });

        modelBuilder.Entity<ServiceModel>(entity =>
        {
            entity.ToTable("ServiceModel", "ApiGateway");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .HasDefaultValue(true)
                .HasColumnName("active");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("description");
            entity.Property(e => e.Host)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("host");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Port).HasColumnName("port");
            entity.Property(e => e.Toolname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("toolname");
        });

        modelBuilder.Entity<ShippingContainerAverageDaysDoorToDoor>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Shipping_Container_Average_Days_Door_to_Door");

            entity.Property(e => e.FromWh)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fromWH");
            entity.Property(e => e.ToWh)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("toWH");
        });

        modelBuilder.Entity<ShippingDestination>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Shipping_Destinations");

            entity.Property(e => e.Addr1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Addr2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CountryCode)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.DestinationDetail)
                .HasMaxLength(156)
                .IsUnicode(false);
            entity.Property(e => e.DestinationName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DestinationPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Inactive).HasColumnName("inactive");
            entity.Property(e => e.Province)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.State)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Zip)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ShippingDestinationType>(entity =>
        {
            entity.HasKey(e => e.DestinationTypeCode);

            entity.ToTable("ShippingDestinationType");

            entity.Property(e => e.DestinationTypeCode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.DestinationTypeDesc)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ShippingExpenseType>(entity =>
        {
            entity.HasKey(e => e.ExpenseTypeCode);

            entity.ToTable("ShippingExpenseType");

            entity.Property(e => e.ExpenseTypeCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ExpenseTypeDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ExpenseTypeDescShort)
                .HasMaxLength(3)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ShippingExpenseTypeDetail>(entity =>
        {
            entity.HasKey(e => e.ExpenseTypeDetailCode);

            entity.ToTable("ShippingExpenseTypeDetail");

            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ExpenseTypeCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.IsVisible)
                .HasDefaultValue(true)
                .HasColumnName("isVisible");
            entity.Property(e => e.MarkUpFactor)
                .HasDefaultValue(1.0)
                .HasColumnName("markUpFactor");
            entity.Property(e => e.NotePrompt).IsUnicode(false);

            entity.HasOne(d => d.ExpenseTypeCodeNavigation).WithMany(p => p.ShippingExpenseTypeDetails)
                .HasForeignKey(d => d.ExpenseTypeCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ShippingExpenseTypeDetail_ShippingExpenseType");
        });

        modelBuilder.Entity<ShippingHarmonizedCodeUom>(entity =>
        {
            entity.HasKey(e => e.Code);

            entity.ToTable("ShippingHarmonizedCodeUOM");

            entity.Property(e => e.Code)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("description");
        });

        modelBuilder.Entity<ShippingMethod>(entity =>
        {
            entity.HasKey(e => e.ShippingMethodType);

            entity.ToTable("ShippingMethod");

            entity.Property(e => e.ShippingMethodType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ShippingMethodDesc)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ShippingNetCostCode>(entity =>
        {
            entity.HasKey(e => e.Code);

            entity.ToTable("ShippingNetCostCode");

            entity.Property(e => e.Code)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("description");
        });

        modelBuilder.Entity<ShippingPackage>(entity =>
        {
            entity.HasKey(e => e.IdPackage);

            entity.Property(e => e.IdPackage).HasColumnName("idPackage");
            entity.Property(e => e.DimensionsUom)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("in")
                .HasColumnName("DimensionsUOM");
            entity.Property(e => e.IdShippingRequest).HasColumnName("idShippingRequest");
            entity.Property(e => e.MasterTrackingNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PackageType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ServiceTypeVendorCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TrackingNumber)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.WeightUom)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("WeightUOM");

            entity.HasOne(d => d.DimensionsUomNavigation).WithMany(p => p.ShippingPackages)
                .HasForeignKey(d => d.DimensionsUom)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ShippingPackages_inUnitOfLength");

            entity.HasOne(d => d.PackageTypeNavigation).WithMany(p => p.ShippingPackages)
                .HasForeignKey(d => d.PackageType)
                .HasConstraintName("FK_ShippingPackages_ShippingPackageType");

            entity.HasOne(d => d.WeightUomNavigation).WithMany(p => p.ShippingPackages)
                .HasForeignKey(d => d.WeightUom)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ShippingPackages_inUnitOfWeight");
        });

        modelBuilder.Entity<ShippingPackageType>(entity =>
        {
            entity.HasKey(e => e.ShippingPackageType1);

            entity.ToTable("ShippingPackageType");

            entity.Property(e => e.ShippingPackageType1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ShippingPackageType");
            entity.Property(e => e.ShippingPackageDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ShippingPackagesForFedExShipManager>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Shipping_Packages_For_FedEx_Ship_Manager");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AirBillNo)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.Amount).HasColumnType("money");
            entity.Property(e => e.BillToAccountNumber)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BookingNo)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.CustomerReference)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CustomerReferenceEntityNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DescriptionOfGoods).IsUnicode(false);
            entity.Property(e => e.DimensionsType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.EntitynoRef)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entitynoRef");
            entity.Property(e => e.IdPackage).HasColumnName("idPackage");
            entity.Property(e => e.IdShippingRequest).HasColumnName("idShippingRequest");
            entity.Property(e => e.Instructions).IsUnicode(false);
            entity.Property(e => e.MasterTrackingNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Note)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.OtherBillName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PackageType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PickUpNo)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.Ponumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PONumber");
            entity.Property(e => e.QuoteNo)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.RecipientAccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RecipientAddress1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RecipientAddress2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RecipientCity)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RecipientCompany)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RecipientCountryCode)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.RecipientEmail)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RecipientName)
                .HasMaxLength(101)
                .IsUnicode(false);
            entity.Property(e => e.RecipientPhoneNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RecipientPostalCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.RecipientStateProvince)
                .HasMaxLength(54)
                .IsUnicode(false);
            entity.Property(e => e.ResidentialDeliveryFlag)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.SaturdayDeliveryFlag)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.SenderAddress1)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SenderAddress2)
                .HasMaxLength(61)
                .IsUnicode(false);
            entity.Property(e => e.SenderCity)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SenderCompany)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SenderContact)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SenderCountryCode)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.SenderEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SenderPhone)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SenderPostalCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SenderStateProvince)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.SenderUsername)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ServiceType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ServiceTypeDisplayName)
                .HasMaxLength(105)
                .IsUnicode(false);
            entity.Property(e => e.ShipAlertNotificationFlag)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ShipDate).HasColumnType("datetime");
            entity.Property(e => e.ShipmentNotificationEmail1)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ShipmentNotificationEmail2)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ShipmentNotificationEmail3)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SignatureRequired)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.TrackingNumber)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TransactionId)
                .HasMaxLength(4000)
                .HasColumnName("TransactionID");
            entity.Property(e => e.WeightType)
                .HasMaxLength(3)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ShippingPackagesShipped>(entity =>
        {
            entity.HasKey(e => e.IdPackageShipped);

            entity.ToTable("ShippingPackagesShipped");

            entity.Property(e => e.IdPackageShipped).HasColumnName("idPackageShipped");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.IdPackage).HasColumnName("idPackage");
            entity.Property(e => e.MasterTrackingNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ServiceTypeVendorCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ShipDate).HasColumnType("datetime");
            entity.Property(e => e.TrackingNumber)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.WeightUom)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("WeightUOM");

            entity.HasOne(d => d.IdPackageNavigation).WithMany(p => p.ShippingPackagesShippeds)
                .HasForeignKey(d => d.IdPackage)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ShippingPackagesShipped_ShippingPackages");
        });

        modelBuilder.Entity<ShippingPreferenceCriterionCode>(entity =>
        {
            entity.HasKey(e => e.Code);

            entity.ToTable("ShippingPreferenceCriterionCode");

            entity.Property(e => e.Code)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("description");
        });

        modelBuilder.Entity<ShippingPricePerPound>(entity =>
        {
            entity.HasKey(e => new { e.FromWarehouse, e.ToWarehouse, e.ShippingMethodType });

            entity.ToTable("ShippingPricePerPound");

            entity.Property(e => e.FromWarehouse)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ToWarehouse)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ShippingMethodType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.PricePerPoundUsd).HasColumnName("PricePerPoundUSD");

            entity.HasOne(d => d.FromWarehouseNavigation).WithMany(p => p.ShippingPricePerPounds)
                .HasForeignKey(d => d.FromWarehouse)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ShippingPricePerPound__FromWarehouse");

            entity.HasOne(d => d.ShippingMethodTypeNavigation).WithMany(p => p.ShippingPricePerPounds)
                .HasForeignKey(d => d.ShippingMethodType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ShippingPricePerPound__ShippingMethodType");
        });

        modelBuilder.Entity<ShippingProducerCode>(entity =>
        {
            entity.HasKey(e => e.Code);

            entity.ToTable("ShippingProducerCode");

            entity.Property(e => e.Code)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("description");
        });

        modelBuilder.Entity<ShippingRecipient>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Shipping_Recipients");

            entity.Property(e => e.Emp)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.RecipientEmail)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RecipientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RecipientPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ShippingRequestForShipmentVault>(entity =>
        {
            entity.HasKey(e => new { e.Entityno, e.ShipDate, e.ServiceTypeDisplayName });

            entity.ToTable("ShippingRequestForShipmentVault");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.ShipDate).HasColumnType("datetime");
            entity.Property(e => e.ServiceTypeDisplayName)
                .HasMaxLength(105)
                .IsUnicode(false);
            entity.Property(e => e.Addr1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Addr2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AirBillNo)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.Amount).HasColumnType("money");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BookingNo)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CountryCode)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DescriptionOfGoods).IsUnicode(false);
            entity.Property(e => e.DestinationName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DestinationPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DestinationTypeCode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.EntitynoRef)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entitynoRef");
            entity.Property(e => e.IdShippingRequest)
                .HasDefaultValueSql("([dbo].[NextIdShippingRequest]())")
                .HasColumnName("idShippingRequest");
            entity.Property(e => e.Inactive)
                .HasDefaultValue(false)
                .HasColumnName("inactive");
            entity.Property(e => e.Instructions).IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Note)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.OtherBillAcctNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OtherBillName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PickUpNo)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.Province)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.QuoteNo)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.RecipientEmail)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RecipientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RecipientPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SenderUsername)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SpecialAttention)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.State)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Zip)
                .HasMaxLength(15)
                .IsUnicode(false);

            entity.HasOne(d => d.DestinationTypeCodeNavigation).WithMany(p => p.ShippingRequestForShipmentVaults)
                .HasForeignKey(d => d.DestinationTypeCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ShippingRequestForShipmentVault_ShippinDestinationTypeCode");

            entity.HasOne(d => d.EntitynoNavigation).WithMany(p => p.ShippingRequestForShipmentVaults)
                .HasForeignKey(d => d.Entityno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ShippingRequestForShipmentVault_glentities");

            entity.HasOne(d => d.ExpenseTypeDetailCodeNavigation).WithMany(p => p.ShippingRequestForShipmentVaults)
                .HasForeignKey(d => d.ExpenseTypeDetailCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ShippingRequestForShipmentValut_ShippingExpenseTypeDetail");

            entity.HasOne(d => d.SenderUsernameNavigation).WithMany(p => p.ShippingRequestForShipmentVaults)
                .HasForeignKey(d => d.SenderUsername)
                .HasConstraintName("FK_ShippingRequestForShipmentVault_pjtfrusr");
        });

        modelBuilder.Entity<ShippingServiceType>(entity =>
        {
            entity.HasKey(e => new { e.VendorFriendlyName, e.ServiceType });

            entity.Property(e => e.VendorFriendlyName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vendorFriendlyName");
            entity.Property(e => e.ServiceType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DeliveryTimeGuarantee)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DisplayName)
                .HasMaxLength(102)
                .IsUnicode(false)
                .HasComputedColumnSql("(([vendorFriendlyName]+': ')+[servicetype])", false);
            entity.Property(e => e.IsDomestic).HasColumnName("is_domestic");
            entity.Property(e => e.IsInternational).HasColumnName("is_international");
            entity.Property(e => e.MarkUpFactor)
                .HasDefaultValue(1.0)
                .HasColumnName("markUpFactor");
            entity.Property(e => e.ServiceTypeVendorCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SiteNo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("site_no");
            entity.Property(e => e.SortOrder).HasColumnName("sortOrder");
            entity.Property(e => e.Vendno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("vendno");
        });

        modelBuilder.Entity<ShopifyApiInfo>(entity =>
        {
            entity.HasKey(e => new { e.CompanyCode, e.WebsiteUrl, e.Apipassword });

            entity.ToTable("shopifyApiInfo");

            entity.Property(e => e.CompanyCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WebsiteUrl)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("websiteURL");
            entity.Property(e => e.Apipassword)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("APIPassword");

            entity.HasOne(d => d.CompanyCodeNavigation).WithMany(p => p.ShopifyApiInfos)
                .HasForeignKey(d => d.CompanyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_shopifyApiInfo_Company");
        });

        modelBuilder.Entity<ShopifyConsoleAppMyFinesseReport>(entity =>
        {
            entity.HasKey(e => new { e.CompanyCode, e.Partno });

            entity.ToTable("ShopifyConsoleAppMyFinesseReport");

            entity.Property(e => e.CompanyCode)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Partno)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.ErrorMessage).IsUnicode(false);
        });

        modelBuilder.Entity<ShopifyProductsType>(entity =>
        {
            entity.HasKey(e => e.ShopifyProductTypeCode);

            entity.Property(e => e.ShopifyProductTypeCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ShopifyProductTypeDesc)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SignalLevel>(entity =>
        {
            entity.HasKey(e => e.SignalLevel1);

            entity.ToTable("SignalLevel", "SpeakerTest");

            entity.Property(e => e.SignalLevel1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SignalLevel");
        });

        modelBuilder.Entity<SkanFixedAssetRegister202209>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SkanFixedAssetRegister202209");

            entity.Property(e => e.AudioNonAudio)
                .HasMaxLength(255)
                .HasColumnName("Audio/Non Audio");
            entity.Property(e => e.BarCode)
                .HasMaxLength(255)
                .HasColumnName("Bar Code");
            entity.Property(e => e.DeprAug22).HasColumnName("Depr Aug-22");
            entity.Property(e => e.DeprSep22).HasColumnName("Depr Sep-22");
            entity.Property(e => e.DepreciationRate25).HasColumnName("Depreciation Rate 25%");
            entity.Property(e => e.Fy).HasColumnName("FY");
            entity.Property(e => e.Group).HasMaxLength(255);
            entity.Property(e => e.InvDate)
                .HasColumnType("datetime")
                .HasColumnName("Inv Date");
            entity.Property(e => e.InvNo)
                .HasMaxLength(255)
                .HasColumnName("Inv No");
            entity.Property(e => e.InvValue).HasColumnName("Inv Value");
            entity.Property(e => e.ItemName)
                .HasMaxLength(255)
                .HasColumnName("Item Name");
            entity.Property(e => e.NbvAt300922).HasColumnName("NBV at 30#09#22");
            entity.Property(e => e.NbvAt310722).HasColumnName("NBV at 31#07#22");
            entity.Property(e => e.PoDeliveryDate)
                .HasColumnType("datetime")
                .HasColumnName("PO / Delivery Date");
            entity.Property(e => e.PurchaseDate)
                .HasColumnType("datetime")
                .HasColumnName("Purchase Date");
            entity.Property(e => e.PurchaseDateForDepreciation)
                .HasColumnType("datetime")
                .HasColumnName("Purchase Date(for depreciation)");
            entity.Property(e => e.PurchaseOrderNo)
                .HasMaxLength(255)
                .HasColumnName("Purchase Order No");
            entity.Property(e => e.Quantity).HasMaxLength(255);
            entity.Property(e => e.Serial).HasMaxLength(255);
            entity.Property(e => e.SupplierManufacturer)
                .HasMaxLength(255)
                .HasColumnName("Supplier/Manufacturer");
            entity.Property(e => e.SupplierName)
                .HasMaxLength(255)
                .HasColumnName("Supplier Name");
            entity.Property(e => e.TotalDepreciationTo310722).HasColumnName("Total depreciation to 31#07#22");
        });

        modelBuilder.Entity<SongkickArtist>(entity =>
        {
            entity.HasKey(e => e.ArtistId);

            entity.Property(e => e.ArtistId)
                .ValueGeneratedNever()
                .HasColumnName("ArtistID");
            entity.Property(e => e.ArtistName).HasMaxLength(250);
            entity.Property(e => e.CrmleadUrl)
                .IsUnicode(false)
                .HasColumnName("CRMLeadUrl");
            entity.Property(e => e.DateCreated)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Genre)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SongkickArtistsBulkSave>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SongkickArtistsBulkSave");

            entity.Property(e => e.ArtistId).HasColumnName("ArtistID");
            entity.Property(e => e.ArtistName).HasMaxLength(250);
            entity.Property(e => e.Genre)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<SongkickEvent>(entity =>
        {
            entity.HasKey(e => new { e.PlayDate, e.ArtistId, e.VenueId, e.DateCreated, e.ActCode });

            entity.Property(e => e.PlayDate).HasColumnType("datetime");
            entity.Property(e => e.ArtistId).HasColumnName("ArtistID");
            entity.Property(e => e.VenueId).HasColumnName("VenueID");
            entity.Property(e => e.DateCreated)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ActCode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.EventType)
                .HasMaxLength(1)
                .IsUnicode(false);

            entity.HasOne(d => d.Artist).WithMany(p => p.SongkickEvents)
                .HasForeignKey(d => d.ArtistId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SongkickEvents__ArtistID");

            entity.HasOne(d => d.Venue).WithMany(p => p.SongkickEvents)
                .HasForeignKey(d => d.VenueId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SongkickEvents__VenueID");
        });

        modelBuilder.Entity<SongkickEventsBulkSave>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SongkickEventsBulkSave");

            entity.Property(e => e.ActCode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ArtistId).HasColumnName("ArtistID");
            entity.Property(e => e.EventType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.PlayDate).HasColumnType("datetime");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
            entity.Property(e => e.VenueId).HasColumnName("VenueID");
        });

        modelBuilder.Entity<SongkickMetroArea>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_SonkickMetroAreas");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Country)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("country");
            entity.Property(e => e.Lat).HasColumnName("lat");
            entity.Property(e => e.Lng).HasColumnName("lng");
            entity.Property(e => e.Metro)
                .HasMaxLength(250)
                .HasColumnName("metro");
            entity.Property(e => e.Region)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.State)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("state");

            entity.HasOne(d => d.RegionNavigation).WithMany(p => p.SongkickMetroAreas)
                .HasForeignKey(d => d.Region)
                .HasConstraintName("FK_SongkickMetroArea_Region");
        });

        modelBuilder.Entity<SongkickMetroAreasBulkSave>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SongkickMetroAreasBulkSave");

            entity.Property(e => e.Country)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("country");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Lat).HasColumnName("lat");
            entity.Property(e => e.Lng).HasColumnName("lng");
            entity.Property(e => e.Metro)
                .HasMaxLength(250)
                .HasColumnName("metro");
            entity.Property(e => e.Region)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.State)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("state");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<SongkickVenue>(entity =>
        {
            entity.HasKey(e => e.VenueId).HasName("PK__SongkickVenues");

            entity.Property(e => e.VenueId)
                .ValueGeneratedNever()
                .HasColumnName("VenueID");
            entity.Property(e => e.Address1).HasMaxLength(250);
            entity.Property(e => e.Address2).HasMaxLength(250);
            entity.Property(e => e.City).HasMaxLength(50);
            entity.Property(e => e.Country)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CountryCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.DateCreated)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Latitude).HasColumnType("decimal(11, 7)");
            entity.Property(e => e.Longitude).HasColumnType("decimal(12, 7)");
            entity.Property(e => e.MetroAreaId).HasColumnName("MetroAreaID");
            entity.Property(e => e.Phone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StateCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StateName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VenueName).HasMaxLength(250);
            entity.Property(e => e.Zip)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SongkickVenuesBulkSave>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SongkickVenuesBulkSave");

            entity.Property(e => e.Address1).HasMaxLength(250);
            entity.Property(e => e.Address2).HasMaxLength(250);
            entity.Property(e => e.City).HasMaxLength(50);
            entity.Property(e => e.Country)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CountryCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Latitude).HasColumnType("decimal(11, 7)");
            entity.Property(e => e.Longitude).HasColumnType("decimal(12, 7)");
            entity.Property(e => e.MetroAreaId).HasColumnName("MetroAreaID");
            entity.Property(e => e.Phone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.StateCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StateName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
            entity.Property(e => e.VenueId).HasColumnName("VenueID");
            entity.Property(e => e.VenueName).HasMaxLength(250);
            entity.Property(e => e.Zip)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SongkickVenuesVenueType>(entity =>
        {
            entity.HasKey(e => e.VenueId);

            entity.ToTable("SongkickVenuesVenueType");

            entity.Property(e => e.VenueId)
                .ValueGeneratedNever()
                .HasColumnName("VenueID");
            entity.Property(e => e.VenueCode)
                .HasMaxLength(5)
                .IsUnicode(false);

            entity.HasOne(d => d.VenueCodeNavigation).WithMany(p => p.SongkickVenuesVenueTypes)
                .HasForeignKey(d => d.VenueCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SongkickVenuesVenueType_VenueCode");

            entity.HasOne(d => d.Venue).WithOne(p => p.SongkickVenuesVenueType)
                .HasForeignKey<SongkickVenuesVenueType>(d => d.VenueId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SongkickVenuesVenueType_VenueID");
        });

        modelBuilder.Entity<SoundImageAsset>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.PropertyDescription).HasColumnName("Property Description");
        });

        modelBuilder.Entity<SoundImageRackIdtoEntitynoMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SoundImageRackIDToEntitynoMappings");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.IEquipRef).HasColumnName("iEquipRef");
            entity.Property(e => e.IRackNo).HasColumnName("iRackNo");
            entity.Property(e => e.IRackTypeRef).HasColumnName("iRackTypeRef");
            entity.Property(e => e.ITourRef).HasColumnName("iTourRef");
            entity.Property(e => e.SCaseStencil)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sCaseStencil");
            entity.Property(e => e.SRackSuffix)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("sRackSuffix");
        });

        modelBuilder.Entity<SoundImageTourIdtoEntitynoMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SoundImageTourIDToEntitynoMappings");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.ITourId).HasColumnName("iTourID");
        });

        modelBuilder.Entity<SoundTrackRackType>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.HasAttachedContentsInSt).HasColumnName("has attached contents in ST");
            entity.Property(e => e.IRackTypeId).HasColumnName("iRackTypeID");
            entity.Property(e => e.SDescription).HasColumnName("sDescription");
            entity.Property(e => e.SRackType).HasColumnName("sRackType");
            entity.Property(e => e.ShouldHaveFinesseAttachments).HasColumnName("Should have Finesse attachments?");
        });

        modelBuilder.Entity<SoundTrackerBarcodesImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SoundTrackerBarcodesImport");

            entity.HasIndex(e => e.IEquipId, "UC_SoundTrackerBarcodesImport_unique_equip_id").IsUnique();

            entity.Property(e => e.Area)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("area");
            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.IEquipId).HasColumnName("iEquipID");
            entity.Property(e => e.IParentEquipId).HasColumnName("iParentEquipID");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.Parentpartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("parentpartno");
            entity.Property(e => e.ParentserialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("parentserial_no");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Receipt)
                .HasColumnType("datetime")
                .HasColumnName("receipt");
            entity.Property(e => e.Row)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.ShouldNotBeChild).HasColumnName("shouldNotBeChild");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<SoundTrackerIocardOrderedGearImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SoundTrackerIOCardOrderedGearImport");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("entityno");
            entity.Property(e => e.EstQty).HasColumnName("est_qty");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("partno");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Todate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("todate");
            entity.Property(e => e.Trandate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("trandate");
        });

        modelBuilder.Entity<SoundcheckLogging>(entity =>
        {
            entity.HasKey(e => new { e.TestDate, e.UniqueNo });

            entity.ToTable("SoundcheckLogging");

            entity.Property(e => e.TestDate).HasColumnType("datetime");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
        });

        modelBuilder.Entity<SoundcheckSequence>(entity =>
        {
            entity.HasKey(e => e.Sequence);

            entity.Property(e => e.Sequence)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("sequence");
            entity.Property(e => e.Sequencelocation)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("sequencelocation");
        });

        modelBuilder.Entity<SqlresultType>(entity =>
        {
            entity.HasKey(e => e.ResultTypeCode);

            entity.ToTable("SQLResultType");

            entity.Property(e => e.ResultTypeCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ResultType)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<StackTest>(entity =>
        {
            entity.ToTable("StackTest", "SpeakerTest");

            entity.Property(e => e.StackTestId)
                .ValueGeneratedNever()
                .HasColumnName("StackTestID");
            entity.Property(e => e.GroupGuid).HasColumnName("GroupGUID");
            entity.Property(e => e.Hostname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("hostname");
            entity.Property(e => e.LoginName)
                .HasMaxLength(128)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.StationDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TestDirectory)
                .HasMaxLength(260)
                .IsUnicode(false);
            entity.Property(e => e.TestGuid)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("TestGUID");
            entity.Property(e => e.TestSaveDate)
                .HasPrecision(1)
                .HasDefaultValueSql("(sysdatetimeoffset())");
            entity.Property(e => e.TestStartDate).HasPrecision(1);
            entity.Property(e => e.XmlFilePath)
                .HasMaxLength(260)
                .IsUnicode(false);

            entity.HasOne(d => d.StationDescriptionNavigation).WithMany(p => p.StackTests)
                .HasForeignKey(d => d.StationDescription)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StackTest_StationDescription");
        });

        modelBuilder.Entity<StackTestDevice>(entity =>
        {
            entity.HasKey(e => new { e.StackTestId, e.UniqueNo });

            entity.ToTable("StackTestDevice", "SpeakerTest");

            entity.HasIndex(e => new { e.StackTestId, e.CabinetPosition }, "UC_StackTestDevice_CabinetPosition").IsUnique();

            entity.Property(e => e.StackTestId).HasColumnName("StackTestID");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.Configuration)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("serial_no");

            entity.HasOne(d => d.StackTest).WithMany(p => p.StackTestDevices)
                .HasForeignKey(d => d.StackTestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StackTestDevice_StackTest");

            entity.HasOne(d => d.CabinetConfiguration).WithMany(p => p.StackTestDevices)
                .HasForeignKey(d => new { d.Partno, d.Configuration })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StackTestDevice_CabinetConfiguration");
        });

        modelBuilder.Entity<StagedUnifiedAddress>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("StagedUnifiedAddress", "Contact");

            entity.Property(e => e.AddressLine1)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AddressLine2)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AddressLine3)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AddressLine4)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Country)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PostalCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Source)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SourceId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SourceID");
            entity.Property(e => e.StateProvince)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UnifiedContactId).HasColumnName("UnifiedContactID");
        });

        modelBuilder.Entity<StagedUnifiedContact>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("StagedUnifiedContacts", "Contact");

            entity.Property(e => e.Department)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Location)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Organization)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.PictureFilePath).IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Title)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.UnifiedContactId).HasColumnName("UnifiedContactID");
        });

        modelBuilder.Entity<StagedUnifiedEmail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("StagedUnifiedEmail", "Contact");

            entity.Property(e => e.EmailAddress)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Source)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SourceId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SourceID");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UnifiedContactId).HasColumnName("UnifiedContactID");
        });

        modelBuilder.Entity<StagedUnifiedPhone>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("StagedUnifiedPhone", "Contact");

            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Source)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SourceId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SourceID");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UnifiedContactId).HasColumnName("UnifiedContactID");
        });

        modelBuilder.Entity<StagedUnunifiedContact>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("StagedUnunifiedContact", "Contact");

            entity.Property(e => e.ActiveDirectoryId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ActiveDirectoryID");
            entity.Property(e => e.CustomerId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("CustomerID");
            entity.Property(e => e.Department)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("EmployeeID");
            entity.Property(e => e.ISolvedId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("iSolvedID");
            entity.Property(e => e.Location)
                .HasMaxLength(70)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Organization)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PaylocityId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PaylocityID");
            entity.Property(e => e.PictureFilePath).IsUnicode(false);
            entity.Property(e => e.PodioId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PodioID");
            entity.Property(e => e.Status)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Title)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.UnifiedContactId).HasColumnName("UnifiedContactID");
            entity.Property(e => e.VendorId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("VendorID");
        });

        modelBuilder.Entity<State>(entity =>
        {
            entity.HasKey(e => e.Statecode);

            entity.ToTable("state");

            entity.Property(e => e.Statecode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("statecode");
            entity.Property(e => e.Pollstarid).HasColumnName("pollstarid");
            entity.Property(e => e.Statedesc)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("statedesc");
        });

        modelBuilder.Entity<Station>(entity =>
        {
            entity.HasKey(e => e.StationDescription).HasName("PK_SpeakerTestStation");

            entity.ToTable("Station", "SpeakerTest");

            entity.Property(e => e.StationDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DanteVirtualSoundcardLicenseKey)
                .HasMaxLength(29)
                .IsUnicode(false);
            entity.Property(e => e.NetworkSaveDirectory)
                .HasMaxLength(260)
                .IsUnicode(false);

            entity.HasMany(d => d.Macaddresses).WithMany(p => p.StationDescriptions)
                .UsingEntity<Dictionary<string, object>>(
                    "StationDpro",
                    r => r.HasOne<Dpro>().WithMany()
                        .HasForeignKey("Macaddress")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_StationDPRO_DPRO"),
                    l => l.HasOne<Station>().WithMany()
                        .HasForeignKey("StationDescription")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_StationDPRO_Station"),
                    j =>
                    {
                        j.HasKey("StationDescription", "Macaddress");
                        j.ToTable("StationDPRO", "SpeakerTest");
                        j.IndexerProperty<string>("StationDescription")
                            .HasMaxLength(100)
                            .IsUnicode(false);
                        j.IndexerProperty<byte[]>("Macaddress")
                            .HasMaxLength(6)
                            .IsFixedLength()
                            .HasColumnName("MACAddress");
                    });

            entity.HasMany(d => d.OutputPatchings).WithMany(p => p.StationDescriptions)
                .UsingEntity<Dictionary<string, object>>(
                    "StationPatching",
                    r => r.HasOne<OutputPatching>().WithMany()
                        .HasForeignKey("OutputPatching")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_StationPatching_OutputPatching"),
                    l => l.HasOne<Station>().WithMany()
                        .HasForeignKey("StationDescription")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_StationPatching_Station"),
                    j =>
                    {
                        j.HasKey("StationDescription", "OutputPatching").HasName("PK_SpeakerTestStationPatching");
                        j.ToTable("StationPatching", "SpeakerTest");
                        j.IndexerProperty<string>("StationDescription")
                            .HasMaxLength(100)
                            .IsUnicode(false);
                        j.IndexerProperty<string>("OutputPatching")
                            .HasMaxLength(100)
                            .IsUnicode(false);
                    });
        });

        modelBuilder.Entity<StationDevice>(entity =>
        {
            entity.HasKey(e => new { e.StationDescription, e.DeviceType, e.DevicePosition });

            entity.ToTable("StationDevice", "SpeakerTest");

            entity.HasIndex(e => new { e.DeviceType, e.DeviceInstanceNumber }, "UC_StationDevice_AudioOutputDeviceInstance").IsUnique();

            entity.Property(e => e.StationDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DeviceType)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.StationDescriptionNavigation).WithMany(p => p.StationDevices)
                .HasForeignKey(d => d.StationDescription)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StationDevice_StationDescription");

            entity.HasOne(d => d.AudioOutputDevice).WithOne(p => p.StationDevice)
                .HasForeignKey<StationDevice>(d => new { d.DeviceType, d.DeviceInstanceNumber })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StationDevice_AudioOutputDevice");

            entity.HasOne(d => d.AudioOutputDevicePosition).WithMany(p => p.StationDevices)
                .HasForeignKey(d => new { d.DeviceType, d.DevicePosition })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StationDevice_AudioOutputDevicePosition");
        });

        modelBuilder.Entity<Status>(entity =>
        {
            entity.HasKey(e => e.StatusCode);

            entity.ToTable("Status", "Contact");

            entity.Property(e => e.StatusCode)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.StatusDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<StatutoryFee>(entity =>
        {
            entity.HasKey(e => new { e.Company, e.FeeCode });

            entity.ToTable("STATUTORY_FEE", "IFS");

            entity.Property(e => e.Company)
                .HasMaxLength(20)
                .HasColumnName("COMPANY");
            entity.Property(e => e.FeeCode)
                .HasMaxLength(20)
                .HasColumnName("FEE_CODE");
            entity.Property(e => e.AmountNotTaxable).HasColumnName("AMOUNT_NOT_TAXABLE");
            entity.Property(e => e.BusinessTransTypeCust)
                .HasMaxLength(2)
                .HasColumnName("BUSINESS_TRANS_TYPE_CUST");
            entity.Property(e => e.BusinessTransTypeSup)
                .HasMaxLength(2)
                .HasColumnName("BUSINESS_TRANS_TYPE_SUP");
            entity.Property(e => e.CreditTaxCode)
                .HasMaxLength(20)
                .HasColumnName("CREDIT_TAX_CODE");
            entity.Property(e => e.Deductible).HasColumnName("DEDUCTIBLE");
            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.DiotTaxClassification)
                .HasMaxLength(20)
                .HasColumnName("DIOT_TAX_CLASSIFICATION");
            entity.Property(e => e.EuOperation)
                .HasMaxLength(20)
                .HasColumnName("EU_OPERATION");
            entity.Property(e => e.ExcludeFromSiiReporting)
                .HasMaxLength(20)
                .HasColumnName("EXCLUDE_FROM_SII_REPORTING");
            entity.Property(e => e.FeeRate).HasColumnName("FEE_RATE");
            entity.Property(e => e.FeeType)
                .HasMaxLength(10)
                .HasColumnName("FEE_TYPE");
            entity.Property(e => e.MinWithheldAmount).HasColumnName("MIN_WITHHELD_AMOUNT");
            entity.Property(e => e.MinimumBaseAmount).HasColumnName("MINIMUM_BASE_AMOUNT");
            entity.Property(e => e.RoundZeroDecimal)
                .HasMaxLength(20)
                .HasColumnName("ROUND_ZERO_DECIMAL");
            entity.Property(e => e.Rowkey)
                .HasMaxLength(50)
                .HasColumnName("ROWKEY");
            entity.Property(e => e.Rowversion)
                .HasColumnType("datetime")
                .HasColumnName("ROWVERSION");
            entity.Property(e => e.SiiExemptReason)
                .HasMaxLength(2)
                .HasColumnName("SII_EXEMPT_REASON");
            entity.Property(e => e.SiiOperationType)
                .HasMaxLength(20)
                .HasColumnName("SII_OPERATION_TYPE");
            entity.Property(e => e.StampDuty)
                .HasMaxLength(20)
                .HasColumnName("STAMP_DUTY");
            entity.Property(e => e.TaxAmountAtInvPrint)
                .HasMaxLength(20)
                .HasColumnName("TAX_AMOUNT_AT_INV_PRINT");
            entity.Property(e => e.TaxAmtLimit).HasColumnName("TAX_AMT_LIMIT");
            entity.Property(e => e.TaxCategory1)
                .HasMaxLength(20)
                .HasColumnName("TAX_CATEGORY1");
            entity.Property(e => e.TaxCategory2)
                .HasMaxLength(20)
                .HasColumnName("TAX_CATEGORY2");
            entity.Property(e => e.TaxCharacter)
                .HasMaxLength(20)
                .HasColumnName("TAX_CHARACTER");
            entity.Property(e => e.TaxFactor)
                .HasMaxLength(20)
                .HasColumnName("TAX_FACTOR");
            entity.Property(e => e.TaxInTaxBase)
                .HasMaxLength(20)
                .HasColumnName("TAX_IN_TAX_BASE");
            entity.Property(e => e.TaxLiabilityClass)
                .HasMaxLength(20)
                .HasColumnName("TAX_LIABILITY_CLASS");
            entity.Property(e => e.TaxReportingCategory)
                .HasMaxLength(10)
                .HasColumnName("TAX_REPORTING_CATEGORY");
            entity.Property(e => e.TaxTypeCategory)
                .HasMaxLength(20)
                .HasColumnName("TAX_TYPE_CATEGORY");
            entity.Property(e => e.UseWithholdAmountTable)
                .HasMaxLength(5)
                .HasColumnName("USE_WITHHOLD_AMOUNT_TABLE");
            entity.Property(e => e.ValidFrom)
                .HasColumnType("datetime")
                .HasColumnName("VALID_FROM");
            entity.Property(e => e.ValidUntil)
                .HasColumnType("datetime")
                .HasColumnName("VALID_UNTIL");
            entity.Property(e => e.VatDisbursed)
                .HasMaxLength(20)
                .HasColumnName("VAT_DISBURSED");
            entity.Property(e => e.VatReceived)
                .HasMaxLength(20)
                .HasColumnName("VAT_RECEIVED");
        });

        modelBuilder.Entity<StorageLocationNotificationRecipient>(entity =>
        {
            entity.HasKey(e => new { e.Warehouse, e.IdStoragelocation });

            entity.Property(e => e.Warehouse)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("warehouse");
            entity.Property(e => e.IdStoragelocation).HasColumnName("id_storagelocation");
            entity.Property(e => e.Recipients)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("recipients");

            entity.HasOne(d => d.IdStoragelocationNavigation).WithMany(p => p.StorageLocationNotificationRecipients)
                .HasForeignKey(d => d.IdStoragelocation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StorageLocationNotificationRecipients_id_storagelocation");

            entity.HasOne(d => d.WarehouseNavigation).WithMany(p => p.StorageLocationNotificationRecipients)
                .HasForeignKey(d => d.Warehouse)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StorageLocationNotificationRecipients_warehouse");
        });

        modelBuilder.Entity<SubcontractCrewExpenseAccount>(entity =>
        {
            entity.HasKey(e => e.Acctcd);

            entity.Property(e => e.Acctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("acctcd");

            entity.HasOne(d => d.AcctcdNavigation).WithOne(p => p.SubcontractCrewExpenseAccount)
                .HasPrincipalKey<Glaccount>(p => p.Acctcd)
                .HasForeignKey<SubcontractCrewExpenseAccount>(d => d.Acctcd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SubcontractCrewExpenseAccounts_glaccounts");
        });

        modelBuilder.Entity<SubrentedEquipmentExpenseAccount>(entity =>
        {
            entity.HasKey(e => e.Acctcd);

            entity.Property(e => e.Acctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("acctcd");

            entity.HasOne(d => d.AcctcdNavigation).WithOne(p => p.SubrentedEquipmentExpenseAccount)
                .HasPrincipalKey<Glaccount>(p => p.Acctcd)
                .HasForeignKey<SubrentedEquipmentExpenseAccount>(d => d.Acctcd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SubrentedEquipmentExpenseAccounts_glaccounts");
        });

        modelBuilder.Entity<SuggestedDuplicate>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SuggestedDuplicates", "Contact");

            entity.Property(e => e.CustomerId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CustomerID");
            entity.Property(e => e.Department)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EmployeeID");
            entity.Property(e => e.GroupName)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Location)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Organization)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PaylocityId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PaylocityID");
            entity.Property(e => e.PictureFilePath).IsUnicode(false);
            entity.Property(e => e.PodioId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PodioID");
            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Title)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UnifiedContactId).HasColumnName("UnifiedContactID");
            entity.Property(e => e.VendorId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VendorID");
        });

        modelBuilder.Entity<Supplier>(entity =>
        {
            entity.HasKey(e => e.VendorNo).HasName("PK_IFS_SUPPLIER");

            entity.ToTable("SUPPLIER", "IFS");

            entity.Property(e => e.VendorNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VENDOR_NO");
            entity.Property(e => e.AcquisitionSite)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ACQUISITION_SITE");
            entity.Property(e => e.AdditionalCostAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ADDITIONAL_COST_AMOUNT");
            entity.Property(e => e.AdhocPurRqstApproval)
                .HasMaxLength(20)
                .HasColumnName("ADHOC_PUR_RQST_APPROVAL");
            entity.Property(e => e.AutomaticReplChange)
                .HasMaxLength(20)
                .HasColumnName("AUTOMATIC_REPL_CHANGE");
            entity.Property(e => e.B2bConfOrderWithDiff)
                .HasMaxLength(20)
                .HasColumnName("B2B_CONF_ORDER_WITH_DIFF");
            entity.Property(e => e.BlanketDate)
                .HasMaxLength(20)
                .HasColumnName("BLANKET_DATE");
            entity.Property(e => e.BuyerCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("BUYER_CODE");
            entity.Property(e => e.Category)
                .HasMaxLength(20)
                .HasColumnName("CATEGORY");
            entity.Property(e => e.ClassificationStandard)
                .HasMaxLength(25)
                .HasColumnName("CLASSIFICATION_STANDARD");
            entity.Property(e => e.ClosingDay).HasColumnName("CLOSING_DAY");
            entity.Property(e => e.CocApproval)
                .HasMaxLength(20)
                .HasColumnName("COC_APPROVAL");
            entity.Property(e => e.CocAudit).HasColumnName("COC_AUDIT");
            entity.Property(e => e.CocAuditId)
                .HasMaxLength(25)
                .HasColumnName("COC_AUDIT_ID");
            entity.Property(e => e.CocDate).HasColumnName("COC_DATE");
            entity.Property(e => e.CocNoteText)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("COC_NOTE_TEXT");
            entity.Property(e => e.CocType)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("COC_TYPE");
            entity.Property(e => e.Company)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("COMPANY");
            entity.Property(e => e.Contact)
                .HasMaxLength(30)
                .HasColumnName("CONTACT");
            entity.Property(e => e.CrCheck)
                .HasMaxLength(1)
                .HasColumnName("CR_CHECK");
            entity.Property(e => e.CrDate).HasColumnName("CR_DATE");
            entity.Property(e => e.CrNoteText)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("CR_NOTE_TEXT");
            entity.Property(e => e.CreateConfirmationChgOrd)
                .HasMaxLength(20)
                .HasColumnName("CREATE_CONFIRMATION_CHG_ORD");
            entity.Property(e => e.CurrencyCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CURRENCY_CODE");
            entity.Property(e => e.CustomerNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CUSTOMER_NO");
            entity.Property(e => e.DateDel).HasColumnName("DATE_DEL");
            entity.Property(e => e.DaysBeforeArrival).HasColumnName("DAYS_BEFORE_ARRIVAL");
            entity.Property(e => e.DaysBeforeDelivery).HasColumnName("DAYS_BEFORE_DELIVERY");
            entity.Property(e => e.DeliveryRemInterval).HasColumnName("DELIVERY_REM_INTERVAL");
            entity.Property(e => e.DeliveryReminder)
                .HasMaxLength(20)
                .HasColumnName("DELIVERY_REMINDER");
            entity.Property(e => e.DirDelApproval)
                .HasMaxLength(20)
                .HasColumnName("DIR_DEL_APPROVAL");
            entity.Property(e => e.Discount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DISCOUNT");
            entity.Property(e => e.EdiAutoApprovalUser)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("EDI_AUTO_APPROVAL_USER");
            entity.Property(e => e.EdiPriCatAppUser)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("EDI_PRI_CAT_APP_USER");
            entity.Property(e => e.EmailPurchaseOrder)
                .HasMaxLength(20)
                .HasColumnName("EMAIL_PURCHASE_ORDER");
            entity.Property(e => e.EndOfMonth)
                .HasMaxLength(20)
                .HasColumnName("END_OF_MONTH");
            entity.Property(e => e.EnvironmentAudit).HasColumnName("ENVIRONMENT_AUDIT");
            entity.Property(e => e.EnvironmentAuditId)
                .HasMaxLength(25)
                .HasColumnName("ENVIRONMENT_AUDIT_ID");
            entity.Property(e => e.EnvironmentDate).HasColumnName("ENVIRONMENT_DATE");
            entity.Property(e => e.EnvironmentNoteText)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("ENVIRONMENT_NOTE_TEXT");
            entity.Property(e => e.EnvironmentType)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("ENVIRONMENT_TYPE");
            entity.Property(e => e.EnvironmentalApproval)
                .HasMaxLength(20)
                .HasColumnName("ENVIRONMENTAL_APPROVAL");
            entity.Property(e => e.ExpressOrderAllowed)
                .HasMaxLength(20)
                .HasColumnName("EXPRESS_ORDER_ALLOWED");
            entity.Property(e => e.NoteId).HasColumnName("NOTE_ID");
            entity.Property(e => e.NoteText)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("NOTE_TEXT");
            entity.Property(e => e.OrdConfRemInterval).HasColumnName("ORD_CONF_REM_INTERVAL");
            entity.Property(e => e.OrdConfReminder)
                .HasMaxLength(20)
                .HasColumnName("ORD_CONF_REMINDER");
            entity.Property(e => e.OrderConfApproval)
                .HasMaxLength(20)
                .HasColumnName("ORDER_CONF_APPROVAL");
            entity.Property(e => e.OrderConfDiffApproval)
                .HasMaxLength(20)
                .HasColumnName("ORDER_CONF_DIFF_APPROVAL");
            entity.Property(e => e.OurCustomerNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OUR_CUSTOMER_NO");
            entity.Property(e => e.PackListFlag)
                .HasMaxLength(1)
                .HasColumnName("PACK_LIST_FLAG");
            entity.Property(e => e.PayTermId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PAY_TERM_ID");
            entity.Property(e => e.PoChangeManagement)
                .HasMaxLength(20)
                .HasColumnName("PO_CHANGE_MANAGEMENT");
            entity.Property(e => e.PricatAutomaticApproval)
                .HasMaxLength(20)
                .HasColumnName("PRICAT_AUTOMATIC_APPROVAL");
            entity.Property(e => e.PrintAmountsInclTax)
                .HasMaxLength(20)
                .HasColumnName("PRINT_AMOUNTS_INCL_TAX");
            entity.Property(e => e.PurchOrderFlag)
                .HasMaxLength(1)
                .HasColumnName("PURCH_ORDER_FLAG");
            entity.Property(e => e.PurchaseCode)
                .HasMaxLength(20)
                .HasColumnName("PURCHASE_CODE");
            entity.Property(e => e.QcApproval)
                .HasMaxLength(1)
                .HasColumnName("QC_APPROVAL");
            entity.Property(e => e.QcAudit).HasColumnName("QC_AUDIT");
            entity.Property(e => e.QcDate).HasColumnName("QC_DATE");
            entity.Property(e => e.QcNoteText)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("QC_NOTE_TEXT");
            entity.Property(e => e.QcType)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("QC_TYPE");
            entity.Property(e => e.QualityAuditId)
                .HasMaxLength(25)
                .HasColumnName("QUALITY_AUDIT_ID");
            entity.Property(e => e.QualitySystemLevelId)
                .HasMaxLength(50)
                .HasColumnName("QUALITY_SYSTEM_LEVEL_ID");
            entity.Property(e => e.QuickRegisteredSupplier)
                .HasMaxLength(20)
                .HasColumnName("QUICK_REGISTERED_SUPPLIER");
            entity.Property(e => e.RecAdvSbConsignment)
                .HasMaxLength(5)
                .HasColumnName("REC_ADV_SB_CONSIGNMENT");
            entity.Property(e => e.RecAdvSbConsignmentDb)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("REC_ADV_SB_CONSIGNMENT_DB");
            entity.Property(e => e.RecAdvSbMixOwnership)
                .HasMaxLength(5)
                .HasColumnName("REC_ADV_SB_MIX_OWNERSHIP");
            entity.Property(e => e.RecAdvSbMixOwnershipDb)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("REC_ADV_SB_MIX_OWNERSHIP_DB");
            entity.Property(e => e.RecAdvSelfBilling)
                .HasMaxLength(20)
                .HasColumnName("REC_ADV_SELF_BILLING");
            entity.Property(e => e.ReceiptRefReminder)
                .HasMaxLength(20)
                .HasColumnName("RECEIPT_REF_REMINDER");
            entity.Property(e => e.ReceivingAdviceType)
                .HasMaxLength(30)
                .HasColumnName("RECEIVING_ADVICE_TYPE");
            entity.Property(e => e.Rowkey)
                .HasMaxLength(50)
                .HasColumnName("ROWKEY");
            entity.Property(e => e.Rowversion)
                .HasColumnType("datetime")
                .HasColumnName("ROWVERSION");
            entity.Property(e => e.SendChangeMessage)
                .HasMaxLength(20)
                .HasColumnName("SEND_CHANGE_MESSAGE");
            entity.Property(e => e.SuppGrp)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SUPP_GRP");
            entity.Property(e => e.SupplierTemplateDesc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SUPPLIER_TEMPLATE_DESC");
            entity.Property(e => e.TaxLiability)
                .HasMaxLength(20)
                .HasColumnName("TAX_LIABILITY");
            entity.Property(e => e.TemplateSupplier)
                .HasMaxLength(20)
                .HasColumnName("TEMPLATE_SUPPLIER");
            entity.Property(e => e.VendorCategoryDb)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VENDOR_CATEGORY_DB");
            entity.Property(e => e.VendorName)
                .HasMaxLength(100)
                .HasColumnName("VENDOR_NAME");
        });

        modelBuilder.Entity<SupplierInfo>(entity =>
        {
            entity.HasKey(e => e.SupplierId).HasName("PK_IFS_SUPPLIER_INFO");

            entity.ToTable("SUPPLIER_INFO", "IFS");

            entity.Property(e => e.SupplierId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SUPPLIER_ID");
            entity.Property(e => e.AssociationNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ASSOCIATION_NO");
            entity.Property(e => e.B2bSupplier)
                .HasMaxLength(20)
                .HasColumnName("B2B_SUPPLIER");
            entity.Property(e => e.BusinessClassification)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BUSINESS_CLASSIFICATION");
            entity.Property(e => e.CorporateForm)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("CORPORATE_FORM");
            entity.Property(e => e.Country)
                .HasMaxLength(2)
                .HasColumnName("COUNTRY");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("CREATION_DATE");
            entity.Property(e => e.DefaultDomain)
                .HasMaxLength(5)
                .HasColumnName("DEFAULT_DOMAIN");
            entity.Property(e => e.DefaultLanguage)
                .HasMaxLength(2)
                .HasColumnName("DEFAULT_LANGUAGE");
            entity.Property(e => e.IdentifierRefValidation)
                .HasMaxLength(20)
                .HasColumnName("IDENTIFIER_REF_VALIDATION");
            entity.Property(e => e.IdentifierReference)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("IDENTIFIER_REFERENCE");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .HasColumnName("NAME");
            entity.Property(e => e.OneTime)
                .HasMaxLength(20)
                .HasColumnName("ONE_TIME");
            entity.Property(e => e.Party)
                .HasMaxLength(20)
                .HasColumnName("PARTY");
            entity.Property(e => e.PartyType)
                .HasMaxLength(20)
                .HasColumnName("PARTY_TYPE");
            entity.Property(e => e.PictureId).HasColumnName("PICTURE_ID");
            entity.Property(e => e.Rowkey)
                .HasMaxLength(50)
                .HasColumnName("ROWKEY");
            entity.Property(e => e.Rowtype)
                .HasMaxLength(30)
                .HasColumnName("ROWTYPE");
            entity.Property(e => e.Rowversion)
                .HasColumnType("datetime")
                .HasColumnName("ROWVERSION");
            entity.Property(e => e.SupplierCategory)
                .HasMaxLength(20)
                .HasColumnName("SUPPLIER_CATEGORY");
            entity.Property(e => e.SuppliersOwnId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SUPPLIERS_OWN_ID");
        });

        modelBuilder.Entity<SupplierInfoAddress>(entity =>
        {
            entity.HasKey(e => new { e.SupplierId, e.AddressId }).HasName("PK_IFS_SUPPLIER_INFO_ADDRESS");

            entity.ToTable("SUPPLIER_INFO_ADDRESS", "IFS");

            entity.Property(e => e.SupplierId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SUPPLIER_ID");
            entity.Property(e => e.AddressId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ADDRESS_ID");
            entity.Property(e => e.Address)
                .HasMaxLength(2000)
                .HasColumnName("ADDRESS");
            entity.Property(e => e.Address1)
                .HasMaxLength(35)
                .HasColumnName("ADDRESS1");
            entity.Property(e => e.Address2)
                .HasMaxLength(35)
                .HasColumnName("ADDRESS2");
            entity.Property(e => e.Address3)
                .HasMaxLength(100)
                .HasColumnName("ADDRESS3");
            entity.Property(e => e.Address4)
                .HasMaxLength(100)
                .HasColumnName("ADDRESS4");
            entity.Property(e => e.Address5)
                .HasMaxLength(100)
                .HasColumnName("ADDRESS5");
            entity.Property(e => e.Address6)
                .HasMaxLength(100)
                .HasColumnName("ADDRESS6");
            entity.Property(e => e.City)
                .HasMaxLength(35)
                .HasColumnName("CITY");
            entity.Property(e => e.CommId).HasColumnName("COMM_ID");
            entity.Property(e => e.Country)
                .HasMaxLength(2)
                .HasColumnName("COUNTRY");
            entity.Property(e => e.County)
                .HasMaxLength(35)
                .HasColumnName("COUNTY");
            entity.Property(e => e.DefaultDomain)
                .HasMaxLength(5)
                .HasColumnName("DEFAULT_DOMAIN");
            entity.Property(e => e.EanLocation)
                .HasMaxLength(100)
                .HasColumnName("EAN_LOCATION");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .HasColumnName("NAME");
            entity.Property(e => e.OutputMedia)
                .HasMaxLength(20)
                .HasColumnName("OUTPUT_MEDIA");
            entity.Property(e => e.Party)
                .HasMaxLength(20)
                .HasColumnName("PARTY");
            entity.Property(e => e.PartyType)
                .HasMaxLength(20)
                .HasColumnName("PARTY_TYPE");
            entity.Property(e => e.Rowkey)
                .HasMaxLength(50)
                .HasColumnName("ROWKEY");
            entity.Property(e => e.Rowversion)
                .HasColumnType("datetime")
                .HasColumnName("ROWVERSION");
            entity.Property(e => e.State)
                .HasMaxLength(35)
                .HasColumnName("STATE");
            entity.Property(e => e.SupplierBranch)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SUPPLIER_BRANCH");
            entity.Property(e => e.ValidFrom)
                .HasColumnType("datetime")
                .HasColumnName("VALID_FROM");
            entity.Property(e => e.ValidTo)
                .HasColumnType("datetime")
                .HasColumnName("VALID_TO");
            entity.Property(e => e.ZipCode)
                .HasMaxLength(35)
                .HasColumnName("ZIP_CODE");
        });

        modelBuilder.Entity<SupplierInfoGeneral>(entity =>
        {
            entity.HasKey(e => new { e.SupplierId, e.Name, e.AssociationNo }).HasName("PK_IFS_SUPPLIER_INFO_GENERAL");

            entity.ToTable("SUPPLIER_INFO_GENERAL", "IFS");

            entity.Property(e => e.SupplierId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SUPPLIER_ID");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NAME");
            entity.Property(e => e.AssociationNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ASSOCIATION_NO");
            entity.Property(e => e.B2bSupplier)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("B2B_SUPPLIER");
            entity.Property(e => e.B2bSupplierDb)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("B2B_SUPPLIER_DB");
            entity.Property(e => e.BusinessClassification)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BUSINESS_CLASSIFICATION");
            entity.Property(e => e.CorporateForm)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("CORPORATE_FORM");
            entity.Property(e => e.Country)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("COUNTRY");
            entity.Property(e => e.CountryDb)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("COUNTRY_DB");
            entity.Property(e => e.CreationDate).HasColumnName("CREATION_DATE");
            entity.Property(e => e.DefaultDomain).HasColumnName("DEFAULT_DOMAIN");
            entity.Property(e => e.DefaultLanguage)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DEFAULT_LANGUAGE");
            entity.Property(e => e.DefaultLanguageDb)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DEFAULT_LANGUAGE_DB");
            entity.Property(e => e.IdentifierRefValidation)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("IDENTIFIER_REF_VALIDATION");
            entity.Property(e => e.IdentifierRefValidationDb)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IDENTIFIER_REF_VALIDATION_DB");
            entity.Property(e => e.IdentifierReference)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("IDENTIFIER_REFERENCE");
            entity.Property(e => e.Objid)
                .HasMaxLength(50)
                .HasColumnName("OBJID");
            entity.Property(e => e.Objkey)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OBJKEY");
            entity.Property(e => e.Objtype)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OBJTYPE");
            entity.Property(e => e.Objversion)
                .HasMaxLength(50)
                .HasColumnName("OBJVERSION");
            entity.Property(e => e.OneTime)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("ONE_TIME");
            entity.Property(e => e.OneTimeDb)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ONE_TIME_DB");
            entity.Property(e => e.Party)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PARTY");
            entity.Property(e => e.PartyType)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PARTY_TYPE");
            entity.Property(e => e.PartyTypeDb)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PARTY_TYPE_DB");
            entity.Property(e => e.PictureId).HasColumnName("PICTURE_ID");
            entity.Property(e => e.SupplierCategory)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SUPPLIER_CATEGORY");
            entity.Property(e => e.SupplierCategoryDb)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SUPPLIER_CATEGORY_DB");
            entity.Property(e => e.SuppliersOwnId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SUPPLIERS_OWN_ID");
        });

        modelBuilder.Entity<SysConfig>(entity =>
        {
            entity.HasKey(e => e.Tag);

            entity.ToTable("SysConfig", tb => tb.HasTrigger("TR_sysconfig__track_parallel_database"));

            entity.Property(e => e.Tag)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Value).HasColumnType("sql_variant");
        });

        modelBuilder.Entity<SysproCompany>(entity =>
        {
            entity.HasKey(e => e.SysproCompanyCd);

            entity.Property(e => e.SysproCompanyCd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.DatabaseName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Password)
                .HasMaxLength(150)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SysproFileStorageAttachmentGuid>(entity =>
        {
            entity.HasKey(e => new { e.AttachmentCategory, e.Guid, e.Keyfield }).HasName("PK__SysproFileStorageAttachmentGUIDs");

            entity.ToTable("SysproFileStorageAttachmentGUIDs");

            entity.Property(e => e.AttachmentCategory)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("GUID");
            entity.Property(e => e.Keyfield)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SysproInvoicePusherInvoiceErrorMessage>(entity =>
        {
            entity.HasKey(e => e.InvoiceNumber);

            entity.Property(e => e.InvoiceNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ErrorMessage)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SysproCompanyBeingPushedTo)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SysproPart>(entity =>
        {
            entity.HasKey(e => new { e.Partno, e.SysproCompany });

            entity.Property(e => e.Partno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.SysproCompany)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Partdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("partdesc");
        });

        modelBuilder.Entity<SysproProjectCashFlow>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SysproProjectCashFlow");

            entity.Property(e => e.ArInvoiceBalance)
                .HasMaxLength(4000)
                .HasColumnName("AR Invoice Balance");
            entity.Property(e => e.Arinvoices)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .UseCollation("Latin1_General_BIN")
                .HasColumnName("ARInvoices");
            entity.Property(e => e.CashCollectedToDateAr)
                .HasMaxLength(4000)
                .HasColumnName("Cash Collected to Date (AR)");
            entity.Property(e => e.CashPaidToDateAp)
                .HasMaxLength(4000)
                .HasColumnName("Cash Paid to Date (AP)");
            entity.Property(e => e.Entitydesc)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("entitydesc");
            entity.Property(e => e.LastArActivity).HasColumnName("Last AR Activity");
            entity.Property(e => e.NetCash).HasMaxLength(4000);
            entity.Property(e => e.PrepaidPortionOfCashPaidToDateAp)
                .HasMaxLength(4000)
                .HasColumnName("Prepaid Portion of Cash Paid to Date (AP)");
            entity.Property(e => e.RootEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("rootEntityno");
        });

        modelBuilder.Entity<SysproProjectExpense>(entity =>
        {
            entity.HasKey(e => new { e.Company, e.TrnYear, e.TrnMonth, e.Journal, e.EntryNumber, e.SubEntry });

            entity.ToTable("SysproProjectExpense");

            entity.Property(e => e.Company)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.TrnYear).HasColumnType("numeric(4, 0)");
            entity.Property(e => e.TrnMonth).HasColumnType("numeric(2, 0)");
            entity.Property(e => e.Journal).HasColumnType("numeric(10, 0)");
            entity.Property(e => e.EntryNumber).HasColumnType("numeric(10, 0)");
            entity.Property(e => e.SubEntry).HasColumnType("numeric(10, 0)");
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DistrValue).HasColumnType("numeric(14, 2)");
            entity.Property(e => e.ExpenseGlCode)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ExpenseType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Invoice)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Reference)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Supplier)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SupplierName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.CurrencyNavigation).WithMany(p => p.SysproProjectExpenses)
                .HasForeignKey(d => d.Currency)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SysproProjectExpense_Currency");
        });

        modelBuilder.Entity<SysproPurchaseActivity>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("syspro_purchase_activity");

            entity.Property(e => e.AcctCd)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("Latin1_General_BIN");
            entity.Property(e => e.Branch)
                .HasMaxLength(4)
                .IsUnicode(false)
                .UseCollation("Latin1_General_BIN");
            entity.Property(e => e.BuyExchangeRate).HasColumnType("numeric(12, 6)");
            entity.Property(e => e.BuyerName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_BIN");
            entity.Property(e => e.DueQty).HasColumnType("numeric(19, 6)");
            entity.Property(e => e.Line).HasColumnType("numeric(4, 0)");
            entity.Property(e => e.Linetotal)
                .HasColumnType("money")
                .HasColumnName("linetotal");
            entity.Property(e => e.MlatestDueDate)
                .HasColumnType("datetime")
                .HasColumnName("MLatestDueDate");
            entity.Property(e => e.MorderQty)
                .HasColumnType("numeric(18, 6)")
                .HasColumnName("MOrderQty");
            entity.Property(e => e.Mprice)
                .HasColumnType("numeric(15, 5)")
                .HasColumnName("MPrice");
            entity.Property(e => e.MreceivedQty)
                .HasColumnType("numeric(18, 6)")
                .HasColumnName("MReceivedQty");
            entity.Property(e => e.MstockCode)
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("Latin1_General_BIN")
                .HasColumnName("MStockCode");
            entity.Property(e => e.MstockDes)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_BIN")
                .HasColumnName("MStockDes");
            entity.Property(e => e.OrderEntryDate).HasColumnType("datetime");
            entity.Property(e => e.OrderLineStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_BIN");
            entity.Property(e => e.OrderStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_BIN");
            entity.Property(e => e.Pocurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_BIN")
                .HasColumnName("POCurrency");
            entity.Property(e => e.ProductClassDesc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_BIN");
            entity.Property(e => e.PurchaseOrder)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("Latin1_General_BIN");
            entity.Property(e => e.SupplierName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_BIN");
            entity.Property(e => e.UsditemPrice)
                .HasColumnType("money")
                .HasColumnName("USDItemPrice");
            entity.Property(e => e.UsdlineTotal)
                .HasColumnType("money")
                .HasColumnName("USDLineTotal");
        });

        modelBuilder.Entity<SysproTransferPurchaseOrderQuantity>(entity =>
        {
            entity.HasKey(e => new { e.PurchaseOrder, e.Line, e.DateTimePutIntoServiceUtc });

            entity.Property(e => e.PurchaseOrder)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Line).HasColumnType("decimal(4, 0)");
            entity.Property(e => e.DateTimePutIntoServiceUtc)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnName("DateTimePutIntoServiceUTC");
            entity.Property(e => e.Apinvoice)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("APInvoice");
            entity.Property(e => e.DateTimeTransferredInSysproUtc).HasColumnName("DateTimeTransferredInSysproUTC");
            entity.Property(e => e.MlatestDueDate).HasColumnName("MLatestDueDate");
            entity.Property(e => e.StockCode)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.StockDesc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<SysproTransferSalesOrderQuantity>(entity =>
        {
            entity.HasKey(e => new { e.SalesOrder, e.SalesOrderLine, e.DateTimePutIntoServiceUtc });

            entity.Property(e => e.SalesOrder)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.SalesOrderLine).HasColumnType("decimal(4, 0)");
            entity.Property(e => e.DateTimePutIntoServiceUtc)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnName("DateTimePutIntoServiceUTC");
            entity.Property(e => e.DateTimeTransferredInSysproUtc).HasColumnName("DateTimeTransferredInSysproUTC");
            entity.Property(e => e.MlineShipDate).HasColumnName("MLineShipDate");
            entity.Property(e => e.StockCode)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.StockDesc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<SysproTransfersSalesOrder>(entity =>
        {
            entity.HasKey(e => new { e.SalesOrder, e.SalesOrderLine, e.DateTimePutIntoServiceUtc });

            entity.Property(e => e.SalesOrder)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.SalesOrderLine).HasColumnType("decimal(15, 5)");
            entity.Property(e => e.DateTimePutIntoServiceUtc)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnName("DateTimePutIntoServiceUTC");
            entity.Property(e => e.DateTimeTransferredInSysproUtc).HasColumnName("DateTimeTransferredInSysproUTC");
            entity.Property(e => e.StockCode)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<TargetOutputGainFrequencyRegion>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.FileName)
                .HasMaxLength(260)
                .IsUnicode(false);
            entity.Property(e => e.FilePath)
                .HasMaxLength(260)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TaxAccount>(entity =>
        {
            entity.HasKey(e => new { e.Companyno, e.Acctcd });

            entity.ToTable(tb => tb.HasTrigger("TR_TaxAccounts_DontForgetMatrixCodes"));

            entity.Property(e => e.Companyno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("companyno");
            entity.Property(e => e.Acctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("acctcd");
            entity.Property(e => e.FriendlyNameId).HasColumnName("FriendlyNameID");
            entity.Property(e => e.SysproTaxCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Visible).HasDefaultValue(true);

            entity.HasOne(d => d.AcctcdNavigation).WithMany(p => p.TaxAccounts)
                .HasPrincipalKey(p => p.Acctcd)
                .HasForeignKey(d => d.Acctcd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TaxAccounts_glaccounts");

            entity.HasOne(d => d.CompanynoNavigation).WithMany(p => p.TaxAccounts)
                .HasForeignKey(d => d.Companyno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TaxAccounts_Company");

            entity.HasOne(d => d.FriendlyName).WithMany(p => p.TaxAccounts)
                .HasForeignKey(d => d.FriendlyNameId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TaxAccounts_AccountFriendlyNames");
        });

        modelBuilder.Entity<TaxType>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Tax_Types");

            entity.Property(e => e.GroupName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InvoicingTaxGroupId).HasColumnName("InvoicingTaxGroupID");
            entity.Property(e => e.TaxTypeKey)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TaxTypeName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Temp2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Temp2");

            entity.Property(e => e.Area)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("area");
            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.Parentpartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("parentpartno");
            entity.Property(e => e.ParentserialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("parentserial_no");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Receipt)
                .HasColumnType("datetime")
                .HasColumnName("receipt");
            entity.Property(e => e.Row)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<TempInventoryPartInStock>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_INVENTORY_PART_IN_STOCK", "IFS");

            entity.Property(e => e.ActivitySeq)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("ACTIVITY_SEQ");
            entity.Property(e => e.AvailabilityControlId).HasColumnName("AVAILABILITY_CONTROL_ID");
            entity.Property(e => e.AvgUnitTransitCost)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("AVG_UNIT_TRANSIT_COST");
            entity.Property(e => e.BayNo).HasColumnName("BAY_NO");
            entity.Property(e => e.BinNo).HasColumnName("BIN_NO");
            entity.Property(e => e.CatchQtyInTransit)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CATCH_QTY_IN_TRANSIT");
            entity.Property(e => e.CatchQtyOnhand)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CATCH_QTY_ONHAND");
            entity.Property(e => e.ConfigurationId).HasColumnName("CONFIGURATION_ID");
            entity.Property(e => e.Contract).HasColumnName("CONTRACT");
            entity.Property(e => e.CountVariance)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("COUNT_VARIANCE");
            entity.Property(e => e.CreateDate).HasColumnName("CREATE_DATE");
            entity.Property(e => e.EngChgLevel).HasColumnName("ENG_CHG_LEVEL");
            entity.Property(e => e.ExpirationDate).HasColumnName("EXPIRATION_DATE");
            entity.Property(e => e.FreezeFlag).HasColumnName("FREEZE_FLAG");
            entity.Property(e => e.FreezeFlagDb).HasColumnName("FREEZE_FLAG_DB");
            entity.Property(e => e.HandlingUnitId)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("HANDLING_UNIT_ID");
            entity.Property(e => e.LastActivityDate).HasColumnName("LAST_ACTIVITY_DATE");
            entity.Property(e => e.LastCountDate).HasColumnName("LAST_COUNT_DATE");
            entity.Property(e => e.LatestTransactionId)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("LATEST_TRANSACTION_ID");
            entity.Property(e => e.LocationNo).HasColumnName("LOCATION_NO");
            entity.Property(e => e.LocationType).HasColumnName("LOCATION_TYPE");
            entity.Property(e => e.LocationTypeDb).HasColumnName("LOCATION_TYPE_DB");
            entity.Property(e => e.LotBatchNo).HasColumnName("LOT_BATCH_NO");
            entity.Property(e => e.Objid).HasColumnName("OBJID");
            entity.Property(e => e.Objkey).HasColumnName("OBJKEY");
            entity.Property(e => e.Objversion).HasColumnName("OBJVERSION");
            entity.Property(e => e.OwningCustomerNo).HasColumnName("OWNING_CUSTOMER_NO");
            entity.Property(e => e.OwningVendorNo).HasColumnName("OWNING_VENDOR_NO");
            entity.Property(e => e.PartNo).HasColumnName("PART_NO");
            entity.Property(e => e.PartOwnership).HasColumnName("PART_OWNERSHIP");
            entity.Property(e => e.PartOwnershipDb).HasColumnName("PART_OWNERSHIP_DB");
            entity.Property(e => e.ProjectId).HasColumnName("PROJECT_ID");
            entity.Property(e => e.QtyInTransit)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("QTY_IN_TRANSIT");
            entity.Property(e => e.QtyOnhand)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("QTY_ONHAND");
            entity.Property(e => e.QtyReserved)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("QTY_RESERVED");
            entity.Property(e => e.ReceiptDate).HasColumnName("RECEIPT_DATE");
            entity.Property(e => e.RotablePartPoolId).HasColumnName("ROTABLE_PART_POOL_ID");
            entity.Property(e => e.RowNo).HasColumnName("ROW_NO");
            entity.Property(e => e.SerialNo).HasColumnName("SERIAL_NO");
            entity.Property(e => e.Source).HasColumnName("SOURCE");
            entity.Property(e => e.TierNo).HasColumnName("TIER_NO");
            entity.Property(e => e.WaivDevRejNo).HasColumnName("WAIV_DEV_REJ_NO");
            entity.Property(e => e.Warehouse).HasColumnName("WAREHOUSE");
        });

        modelBuilder.Entity<TempPoLine>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_PO_LINES", "IFS");

            entity.Property(e => e.BuyQtyDue)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("BUY_QTY_DUE");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.InvQtyArrived)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("INV_QTY_ARRIVED");
            entity.Property(e => e.LineNo).HasColumnName("LINE_NO");
            entity.Property(e => e.OrderNo).HasColumnName("ORDER_NO");
            entity.Property(e => e.PartNo).HasColumnName("PART_NO");
            entity.Property(e => e.ReleaseNo).HasColumnName("RELEASE_NO");
        });

        modelBuilder.Entity<TempQuickReportPoLine>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_QUICK_REPORT_PO_LINES", "IFS");

            entity.Property(e => e.C10InternalDestination).HasColumnName("C10_INTERNAL_DESTINATION");
            entity.Property(e => e.C11PurchaseSite).HasColumnName("C11_PURCHASE_SITE");
            entity.Property(e => e.C12LocationNo).HasColumnName("C12_LOCATION_NO");
            entity.Property(e => e.C13LineNoteText).HasColumnName("C13_LINE_NOTE_TEXT");
            entity.Property(e => e.C14PoNoteText).HasColumnName("C14_PO_NOTE_TEXT");
            entity.Property(e => e.C15InvoicingSupplier).HasColumnName("C15_INVOICING_SUPPLIER");
            entity.Property(e => e.C16SupplierName).HasColumnName("C16_SUPPLIER_NAME");
            entity.Property(e => e.C17QtyOnOrder).HasColumnName("C17_QTY_ON_ORDER");
            entity.Property(e => e.C18BuyQtyDue).HasColumnName("C18_BUY_QTY_DUE");
            entity.Property(e => e.C19OriginalQty).HasColumnName("C19_ORIGINAL_QTY");
            entity.Property(e => e.C1OrderNo).HasColumnName("C1_ORDER_NO");
            entity.Property(e => e.C20DateEntered).HasColumnName("C20_DATE_ENTERED");
            entity.Property(e => e.C21InvQtyArrived).HasColumnName("C21_INV_QTY_ARRIVED");
            entity.Property(e => e.C22ApprovedDate).HasColumnName("C22_APPROVED_DATE");
            entity.Property(e => e.C23ArrivalDate).HasColumnName("C23_ARRIVAL_DATE");
            entity.Property(e => e.C24DeliveryDate).HasColumnName("C24_DELIVERY_DATE");
            entity.Property(e => e.C25Warehouse).HasColumnName("C25_WAREHOUSE");
            entity.Property(e => e.C26QtyOnhand).HasColumnName("C26_QTY_ONHAND");
            entity.Property(e => e.C27PurchaseGroup).HasColumnName("C27_PURCHASE_GROUP");
            entity.Property(e => e.C28ReceiptState).HasColumnName("C28_RECEIPT_STATE");
            entity.Property(e => e.C29PoState).HasColumnName("C29_PO_STATE");
            entity.Property(e => e.C2PartNo).HasColumnName("C2_PART_NO");
            entity.Property(e => e.C30FinesseQty).HasColumnName("C30_FINESSE_QTY");
            entity.Property(e => e.C3Description).HasColumnName("C3_DESCRIPTION");
            entity.Property(e => e.C4LineNo).HasColumnName("C4_LINE_NO");
            entity.Property(e => e.C5ReleaseNo).HasColumnName("C5_RELEASE_NO");
            entity.Property(e => e.C6Contract).HasColumnName("C6_CONTRACT");
            entity.Property(e => e.C7BuyUnitPrice).HasColumnName("C7_BUY_UNIT_PRICE");
            entity.Property(e => e.C8CurrencyRate).HasColumnName("C8_CURRENCY_RATE");
            entity.Property(e => e.C9DestinationId).HasColumnName("C9_DESTINATION_ID");
        });

        modelBuilder.Entity<TempQuickReportPoLine20250401>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_QUICK_REPORT_PO_LINE_20250401", "IFS");

            entity.Property(e => e.C10DestinationId).HasColumnName("C10_DESTINATION_ID");
            entity.Property(e => e.C11InternalDestination).HasColumnName("C11_INTERNAL_DESTINATION");
            entity.Property(e => e.C12PurchaseSite).HasColumnName("C12_PURCHASE_SITE");
            entity.Property(e => e.C13LocationNo).HasColumnName("C13_LOCATION_NO");
            entity.Property(e => e.C14LineNoteText).HasColumnName("C14_LINE_NOTE_TEXT");
            entity.Property(e => e.C15PoNoteText).HasColumnName("C15_PO_NOTE_TEXT");
            entity.Property(e => e.C16InvoicingSupplier).HasColumnName("C16_INVOICING_SUPPLIER");
            entity.Property(e => e.C17SupplierName).HasColumnName("C17_SUPPLIER_NAME");
            entity.Property(e => e.C18QtyOnOrder).HasColumnName("C18_QTY_ON_ORDER");
            entity.Property(e => e.C19BuyQtyDue).HasColumnName("C19_BUY_QTY_DUE");
            entity.Property(e => e.C1OrderNo).HasColumnName("C1_ORDER_NO");
            entity.Property(e => e.C20OriginalQty).HasColumnName("C20_ORIGINAL_QTY");
            entity.Property(e => e.C21DateEntered).HasColumnName("C21_DATE_ENTERED");
            entity.Property(e => e.C22InvQtyArrived).HasColumnName("C22_INV_QTY_ARRIVED");
            entity.Property(e => e.C23ApprovedDate).HasColumnName("C23_APPROVED_DATE");
            entity.Property(e => e.C24ArrivalDate).HasColumnName("C24_ARRIVAL_DATE");
            entity.Property(e => e.C25DeliveryDate).HasColumnName("C25_DELIVERY_DATE");
            entity.Property(e => e.C26Warehouse).HasColumnName("C26_WAREHOUSE");
            entity.Property(e => e.C27QtyOnhand).HasColumnName("C27_QTY_ONHAND");
            entity.Property(e => e.C28PurchaseGroup).HasColumnName("C28_PURCHASE_GROUP");
            entity.Property(e => e.C29ReceiptState).HasColumnName("C29_RECEIPT_STATE");
            entity.Property(e => e.C2PartNo).HasColumnName("C2_PART_NO");
            entity.Property(e => e.C30PoState).HasColumnName("C30_PO_STATE");
            entity.Property(e => e.C31FinesseQty).HasColumnName("C31_FINESSE_QTY");
            entity.Property(e => e.C3Description).HasColumnName("C3_DESCRIPTION");
            entity.Property(e => e.C4LineNo).HasColumnName("C4_LINE_NO");
            entity.Property(e => e.C5ReleaseNo).HasColumnName("C5_RELEASE_NO");
            entity.Property(e => e.C6Contract).HasColumnName("C6_CONTRACT");
            entity.Property(e => e.C7BuyUnitPrice).HasColumnName("C7_BUY_UNIT_PRICE");
            entity.Property(e => e.C8CurrencyRate).HasColumnName("C8_CURRENCY_RATE");
            entity.Property(e => e.C9CurrencyCode).HasColumnName("C9_CURRENCY_CODE");
        });

        modelBuilder.Entity<TempTransactionsReceievedFrom02012025>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Temp_TransactionsReceievedFrom02012025", "IFS");

            entity.Property(e => e.Description)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.DifferenceDetails).HasMaxLength(100);
            entity.Property(e => e.FinesseQty)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("Finesse_Qty");
            entity.Property(e => e.FinesseTotalCost).HasColumnName("Finesse_TotalCost");
            entity.Property(e => e.FinesseTransactionDate)
                .HasColumnType("datetime")
                .HasColumnName("Finesse_TransactionDate");
            entity.Property(e => e.FinesseUnitPrice).HasColumnName("Finesse_UnitPrice");
            entity.Property(e => e.FinesseWarehouse)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Finesse_Warehouse");
            entity.Property(e => e.IfsCompany).HasColumnName("IFS_Company");
            entity.Property(e => e.IfsPoStatus).HasColumnName("IFS_PO_STATUS");
            entity.Property(e => e.IfsQty).HasColumnName("IFS_Qty");
            entity.Property(e => e.IfsQtyArrived)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("IFS_Qty_Arrived");
            entity.Property(e => e.IfsTotalCost).HasColumnName("IFS_TotalCost");
            entity.Property(e => e.IfsUnitPrice).HasColumnName("IFS_UNIT_PRICE");
            entity.Property(e => e.IfsWarehouse).HasColumnName("IFS_WAREHOUSE");
            entity.Property(e => e.PartNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Po)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PO");
            entity.Property(e => e.Supplier).HasMaxLength(100);
        });

        modelBuilder.Entity<TempVendorUpdates20180817>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TempVendorUpdates20180817");

            entity.Property(e => e.Address1)
                .IsUnicode(false)
                .HasColumnName("address_1");
            entity.Property(e => e.Address2)
                .IsUnicode(false)
                .HasColumnName("address_2");
            entity.Property(e => e.Address3)
                .IsUnicode(false)
                .HasColumnName("address_3");
            entity.Property(e => e.City)
                .IsUnicode(false)
                .HasColumnName("city");
            entity.Property(e => e.Contact)
                .IsUnicode(false)
                .HasColumnName("contact");
            entity.Property(e => e.Country).IsUnicode(false);
            entity.Property(e => e.Countryf)
                .IsUnicode(false)
                .HasColumnName("countryf");
            entity.Property(e => e.County).IsUnicode(false);
            entity.Property(e => e.Countyf)
                .IsUnicode(false)
                .HasColumnName("countyf");
            entity.Property(e => e.Currencycd)
                .IsUnicode(false)
                .HasColumnName("currencycd");
            entity.Property(e => e.Email)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.Email2)
                .IsUnicode(false)
                .HasColumnName("email2");
            entity.Property(e => e.Empgroup)
                .IsUnicode(false)
                .HasColumnName("empgroup");
            entity.Property(e => e.Fax)
                .IsUnicode(false)
                .HasColumnName("fax");
            entity.Property(e => e.NicolaId)
                .IsUnicode(false)
                .HasColumnName("Nicola ID#");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("notes");
            entity.Property(e => e.Phone)
                .IsUnicode(false)
                .HasColumnName("phone");
            entity.Property(e => e.SiteNo)
                .IsUnicode(false)
                .HasColumnName("site_no");
            entity.Property(e => e.SortKey)
                .IsUnicode(false)
                .HasColumnName("Sort Key");
            entity.Property(e => e.State)
                .IsUnicode(false)
                .HasColumnName("state");
            entity.Property(e => e.SupplierCode)
                .IsUnicode(false)
                .HasColumnName("Supplier Code");
            entity.Property(e => e.SupplierName)
                .IsUnicode(false)
                .HasColumnName("Supplier Name");
            entity.Property(e => e.VatCode)
                .IsUnicode(false)
                .HasColumnName("VAT Code");
            entity.Property(e => e.VatRegistrationNumber)
                .IsUnicode(false)
                .HasColumnName("VAT Registration Number");
            entity.Property(e => e.VendCustno)
                .IsUnicode(false)
                .HasColumnName("vend_custno");
            entity.Property(e => e.Vendno)
                .IsUnicode(false)
                .HasColumnName("vendno");
            entity.Property(e => e.VendorName)
                .IsUnicode(false)
                .HasColumnName("vendor_name");
            entity.Property(e => e.Voicemail)
                .IsUnicode(false)
                .HasColumnName("voicemail");
            entity.Property(e => e.Zipcode)
                .IsUnicode(false)
                .HasColumnName("zipcode");
        });

        modelBuilder.Entity<Test>(entity =>
        {
            entity.HasKey(e => e.Test1).HasName("PK_SpeakerTestTest");

            entity.ToTable("Test", "SpeakerTest");

            entity.Property(e => e.Test1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Test");
            entity.Property(e => e.FrequencyVectorId).HasColumnName("FrequencyVectorID");
            entity.Property(e => e.SignalType)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.FrequencyVector).WithMany(p => p.Tests)
                .HasForeignKey(d => d.FrequencyVectorId)
                .HasConstraintName("FK__Test__FrequencyV__393B390D");
        });

        modelBuilder.Entity<TestFrequencyRegion>(entity =>
        {
            entity.HasKey(e => new { e.Test, e.TimeSeconds });

            entity.ToTable("TestFrequencyRegions", "SpeakerTest");

            entity.Property(e => e.Test)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TimeSeconds).HasColumnType("decimal(5, 1)");

            entity.HasOne(d => d.TestNavigation).WithMany(p => p.TestFrequencyRegions)
                .HasForeignKey(d => d.Test)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TestFrequencyRegions_Test");
        });

        modelBuilder.Entity<Tmp2025TransferOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp2025TransferOrders");
        });

        modelBuilder.Entity<Tmp4mArtistEvent>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp4mArtistEvents");

            entity.Property(e => e.ArtistId).HasColumnName("ArtistID");
        });

        modelBuilder.Entity<Tmp4mentitynoArtist>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp4mentitynoArtist");

            entity.Property(e => e.ArtistId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("ArtistID");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
        });

        modelBuilder.Entity<TmpAccountExecPrimarySecondary>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpAccountExecPrimarySecondary");

            entity.Property(e => e.Ae)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("AE");
            entity.Property(e => e.Ae2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("AE2");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("notes");
        });

        modelBuilder.Entity<TmpAedpartPricingImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpAEDPartPricingImport");

            entity.Property(e => e.Bidvalue).HasColumnName("bidvalue");
            entity.Property(e => e.Currency).HasColumnName("currency");
            entity.Property(e => e.NewbidvalueAed).HasColumnName("newbidvalueAED");
            entity.Property(e => e.NewbidvalueAedrounded).HasColumnName("newbidvalueAEDRounded");
            entity.Property(e => e.NewbidvalueSar).HasColumnName("newbidvalueSAR");
            entity.Property(e => e.NewbidvalueSarrounded).HasColumnName("newbidvalueSARRounded");
            entity.Property(e => e.Partdesc).HasColumnName("partdesc");
            entity.Property(e => e.Partno).HasColumnName("partno");
        });

        modelBuilder.Entity<TmpAmpsPriceListImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpAmpsPriceListImport");

            entity.Property(e => e.Desc).HasColumnName("desc");
            entity.Property(e => e.Msrpprice).HasColumnName("MSRPPrice");
            entity.Property(e => e.Partno).HasColumnName("partno");
        });

        modelBuilder.Entity<TmpAngelfishAutoSearchResult>(entity =>
        {
            entity.HasKey(e => new { e.ItemId, e.Partno, e.SearchSource });

            entity.ToTable("tmpAngelfishAutoSearchResults");

            entity.Property(e => e.ItemId)
                .HasMaxLength(255)
                .HasColumnName("ItemID");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.SearchSource)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Score).HasColumnName("score");

            entity.HasOne(d => d.PartnoNavigation).WithMany(p => p.TmpAngelfishAutoSearchResults)
                .HasForeignKey(d => d.Partno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tmpAngelfishAutoSearchParts_inpart");
        });

        modelBuilder.Entity<TmpAngelfishClaudeChosenPart>(entity =>
        {
            entity.HasKey(e => e.ItemId);

            entity.ToTable("tmpAngelfishClaudeChosenParts");

            entity.Property(e => e.ItemId)
                .HasMaxLength(255)
                .HasColumnName("ItemID");
            entity.Property(e => e.GuessedPartno)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GuessedPartno2)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.GuessedPartnoNavigation).WithMany(p => p.TmpAngelfishClaudeChosenPartGuessedPartnoNavigations)
                .HasForeignKey(d => d.GuessedPartno)
                .HasConstraintName("FK_tmpAngelfishClaudeChosenParts");

            entity.HasOne(d => d.GuessedPartno2Navigation).WithMany(p => p.TmpAngelfishClaudeChosenPartGuessedPartno2Navigations)
                .HasForeignKey(d => d.GuessedPartno2)
                .HasConstraintName("FK_tmpAngelfishClaudeChosenParts_inpart_2");
        });

        modelBuilder.Entity<TmpAngelfishClaudeName>(entity =>
        {
            entity.HasKey(e => e.ItemId);

            entity.ToTable("tmpAngelfishClaudeNames");

            entity.Property(e => e.ItemId)
                .HasMaxLength(255)
                .HasColumnName("ItemID");
            entity.Property(e => e.ClaudeDescription).HasMaxLength(150);
        });

        modelBuilder.Entity<TmpAngelfishPart>(entity =>
        {
            entity.HasKey(e => e.ItemId);

            entity.ToTable("tmpAngelfishParts");

            entity.Property(e => e.ItemId)
                .HasMaxLength(255)
                .HasColumnName("ItemID");
            entity.Property(e => e.Caption).HasMaxLength(255);
            entity.Property(e => e.Source).HasMaxLength(10);
        });

        modelBuilder.Entity<TmpAngelfishPartsMapping>(entity =>
        {
            entity.HasKey(e => e.ItemId);

            entity.ToTable("tmpAngelfishPartsMapping");

            entity.Property(e => e.ItemId)
                .HasMaxLength(255)
                .HasColumnName("ItemID");
            entity.Property(e => e.CheckedBy)
                .HasMaxLength(128)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("checkedBy");
            entity.Property(e => e.CheckedDate)
                .HasDefaultValueSql("(sysdatetimeoffset())")
                .HasColumnName("checkedDate");
            entity.Property(e => e.MappedPartno)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NewCommmodity)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.NewCountryCode)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.NewModelNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NewPackage)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NewPartDesc)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.NewRentalValueUsd).HasColumnName("NewRentalValueUSD");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("notes");

            entity.HasOne(d => d.Item).WithOne(p => p.TmpAngelfishPartsMapping)
                .HasForeignKey<TmpAngelfishPartsMapping>(d => d.ItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tmpAngelfishPartsMapping_tmpAngelfishParts");

            entity.HasOne(d => d.NewCommmodityNavigation).WithMany(p => p.TmpAngelfishPartsMappings)
                .HasForeignKey(d => d.NewCommmodity)
                .HasConstraintName("FK_tmpAngelfishPartsMapping_incommodity");

            entity.HasOne(d => d.NewCountryCodeNavigation).WithMany(p => p.TmpAngelfishPartsMappings)
                .HasForeignKey(d => d.NewCountryCode)
                .HasConstraintName("FK__tmpAngelfishPartsMapping_Country");

            entity.HasOne(d => d.NewIdManufacturerNavigation).WithMany(p => p.TmpAngelfishPartsMappings)
                .HasForeignKey(d => d.NewIdManufacturer)
                .HasConstraintName("FK_tmpAngelfishPartsMapping_manufacturer");
        });

        modelBuilder.Entity<TmpAngelfishPartsView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("tmpAngelfishParts_View");

            entity.Property(e => e.Caption).HasMaxLength(255);
            entity.Property(e => e.CheckedBy)
                .HasMaxLength(128)
                .HasColumnName("checkedBy");
            entity.Property(e => e.CheckedDate).HasColumnName("checkedDate");
            entity.Property(e => e.ClaudeDescription).HasMaxLength(150);
            entity.Property(e => e.GuessedPartno)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GuessedPartno2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(255)
                .HasColumnName("ItemID");
            entity.Property(e => e.MappedPartno)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NewCommmodity)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.NewCountryCode)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.NewModelNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NewPackage)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NewPartDesc)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.NewRentalValueUsd).HasColumnName("NewRentalValueUSD");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("notes");
            entity.Property(e => e.Source).HasMaxLength(10);
        });

        modelBuilder.Entity<TmpApinvoiceImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpAPInvoiceImport");

            entity.Property(e => e.DueDate).HasColumnName("Due Date");
            entity.Property(e => e.HeaderDescription).HasColumnName("Header Description");
            entity.Property(e => e.InvoiceDueDate)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InvoiceNumber).HasColumnName("Invoice number");
            entity.Property(e => e.LineDescription).HasColumnName("Line description");
            entity.Property(e => e.NetGbp).HasColumnName("Net GBP");
            entity.Property(e => e.OrderDate)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OrderNumber).HasColumnName("Order Number");
            entity.Property(e => e.SupplierCode).HasColumnName("Supplier Code");
            entity.Property(e => e.SysProNominalCode).HasColumnName("SysPro Nominal code");
            entity.Property(e => e.TaxCode).HasColumnName("Tax code");
            entity.Property(e => e.TaxGbp).HasColumnName("Tax GBP");
            entity.Property(e => e.TransactionType).HasColumnName("Transaction Type");
        });

        modelBuilder.Entity<TmpAr201206Ubsinvestment>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpAR201206_UBSInvestment");

            entity.Property(e => e.Area)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("area");
            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bay)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bay");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.Parentpartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("parentpartno");
            entity.Property(e => e.ParentserialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("parentserial_no");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Pieces).HasColumnName("pieces");
            entity.Property(e => e.Receipt)
                .HasColumnType("datetime")
                .HasColumnName("receipt");
            entity.Property(e => e.Row)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.Tier)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tier");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<TmpAr201212ArctoClairSale>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpAR201212_ARCtoClairSale");

            entity.Property(e => e.Area)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("area");
            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bay)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bay");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Row)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<TmpAr201212ClairtoUbsArc>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpAR201212_CLAIRtoUBS_ARC");

            entity.Property(e => e.Area)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("area");
            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bay)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bay");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Row)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<TmpAr201307ArctoClairSale>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpAR201307_ARCtoClairSale");

            entity.Property(e => e.Area)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("area");
            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bay)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bay");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Row)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<TmpAr201409ClairtoUbsArc>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpAR201409_CLAIRtoUBS_ARC");

            entity.Property(e => e.Area)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("area");
            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bay)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bay");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Row)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<TmpAr201505ClairtoUbsArc>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpAR201505_CLAIRtoUBS_ARC");

            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<TmpAr201912ArctoClairSale>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpAR201912_ARCtoClairSale");

            entity.Property(e => e.Barcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("barcode");
        });

        modelBuilder.Entity<TmpArAddress>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_AR_Address");

            entity.Property(e => e.AllowanceFactor).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.AllowanceFactorSales).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Birthdate).HasColumnType("datetime");
            entity.Property(e => e.Birthplace).HasMaxLength(50);
            entity.Property(e => e.City).HasMaxLength(50);
            entity.Property(e => e.Comment).HasMaxLength(200);
            entity.Property(e => e.CommercialRegisterNumber).HasMaxLength(50);
            entity.Property(e => e.Company).HasMaxLength(50);
            entity.Property(e => e.County).HasMaxLength(50);
            entity.Property(e => e.CountyCourt).HasMaxLength(50);
            entity.Property(e => e.CreationTime).HasColumnType("smalldatetime");
            entity.Property(e => e.Custom1).HasMaxLength(400);
            entity.Property(e => e.Custom2).HasMaxLength(400);
            entity.Property(e => e.Custom3).HasMaxLength(400);
            entity.Property(e => e.Custom4).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Custom5).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CustomNumber).HasMaxLength(50);
            entity.Property(e => e.Debtornumber).HasMaxLength(50);
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .HasColumnName("EMail");
            entity.Property(e => e.Fax).HasMaxLength(50);
            entity.Property(e => e.FirstName).HasMaxLength(50);
            entity.Property(e => e.IdCrmuser).HasColumnName("IdCRMUser");
            entity.Property(e => e.IdRmmember).HasColumnName("idRMMember");
            entity.Property(e => e.Messenger).HasMaxLength(50);
            entity.Property(e => e.MiddleName).HasMaxLength(50);
            entity.Property(e => e.Name2).HasMaxLength(100);
            entity.Property(e => e.Number).HasMaxLength(50);
            entity.Property(e => e.PassportNumber).HasMaxLength(50);
            entity.Property(e => e.Phone).HasMaxLength(50);
            entity.Property(e => e.PhoneCompany).HasMaxLength(50);
            entity.Property(e => e.PhoneMobile).HasMaxLength(50);
            entity.Property(e => e.PhonePrivate).HasMaxLength(50);
            entity.Property(e => e.PicturePath).HasMaxLength(250);
            entity.Property(e => e.RmBizIdMember).HasColumnName("rmBizIdMember");
            entity.Property(e => e.Rmcaption)
                .HasMaxLength(50)
                .HasColumnName("RMCaption");
            entity.Property(e => e.SocialSecurityNumber).HasMaxLength(50);
            entity.Property(e => e.State).HasMaxLength(50);
            entity.Property(e => e.Street).HasMaxLength(50);
            entity.Property(e => e.Street2).HasMaxLength(50);
            entity.Property(e => e.Street3).HasMaxLength(50);
            entity.Property(e => e.Surname).HasMaxLength(50);
            entity.Property(e => e.TaxNumber).HasMaxLength(50);
            entity.Property(e => e.UpdateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.VatId).HasMaxLength(50);
            entity.Property(e => e.Vendornumber).HasMaxLength(50);
            entity.Property(e => e.Wwwadress)
                .HasMaxLength(100)
                .HasColumnName("WWWAdress");
            entity.Property(e => e.Zip).HasMaxLength(10);
        });

        modelBuilder.Entity<TmpArAddress2AddressType>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_AR_Address2AddressType");
        });

        modelBuilder.Entity<TmpArAddressType>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_AR_AddressType");

            entity.Property(e => e.Caption).HasMaxLength(50);
        });

        modelBuilder.Entity<TmpArContact>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_AR_Contact");

            entity.Property(e => e.CreationTime).HasColumnType("smalldatetime");
            entity.Property(e => e.Custom1).HasMaxLength(250);
            entity.Property(e => e.Custom2).HasMaxLength(250);
            entity.Property(e => e.Department).HasMaxLength(50);
            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.Fax).HasMaxLength(50);
            entity.Property(e => e.FirstName).HasMaxLength(50);
            entity.Property(e => e.Jobname).HasMaxLength(50);
            entity.Property(e => e.MiddleName).HasMaxLength(50);
            entity.Property(e => e.Mobile).HasMaxLength(50);
            entity.Property(e => e.Number).HasMaxLength(50);
            entity.Property(e => e.Phone).HasMaxLength(50);
            entity.Property(e => e.Surname).HasMaxLength(50);
            entity.Property(e => e.UpdateTime).HasColumnType("smalldatetime");
        });

        modelBuilder.Entity<TmpArCountry>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_AR_country");

            entity.Property(e => e.Caption).HasMaxLength(50);
            entity.Property(e => e.InnerEu).HasColumnName("InnerEU");
            entity.Property(e => e.Isocode)
                .HasMaxLength(50)
                .HasColumnName("ISOCode");
            entity.Property(e => e.PhonePrefix).HasMaxLength(10);
        });

        modelBuilder.Entity<TmpArCrewDemandsAssignments0227>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_AR_crew_demands_assignments_0227");

            entity.Property(e => e.DateEnd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateStart).HasColumnType("smalldatetime");
            entity.Property(e => e.EmpType)
                .HasMaxLength(50)
                .HasColumnName("empType");
            entity.Property(e => e.Empno)
                .HasMaxLength(50)
                .HasColumnName("empno");
            entity.Property(e => e.JAllocated).HasColumnName("j_allocated");
            entity.Property(e => e.JDemand)
                .HasColumnType("numeric(16, 2)")
                .HasColumnName("j_demand");
            entity.Property(e => e.Jobdesc)
                .HasMaxLength(552)
                .HasColumnName("jobdesc");
            entity.Property(e => e.Jobno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("jobno");
            entity.Property(e => e.ResourceStatus)
                .HasMaxLength(50)
                .HasColumnName("resource_status");
            entity.Property(e => e.Type).HasMaxLength(50);
        });

        modelBuilder.Entity<TmpArCrewDemandsToImportToPjjobbudget0227>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_AR_crew_demands_to_import_to_pjjobbudget_0227");

            entity.Property(e => e.Demand)
                .HasColumnType("numeric(16, 2)")
                .HasColumnName("demand");
            entity.Property(e => e.EstHours).HasColumnName("est_hours");
            entity.Property(e => e.EstRate).HasColumnName("est_rate");
            entity.Property(e => e.EstTotal).HasColumnName("est_total");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("fromdate");
            entity.Property(e => e.Jobdesc)
                .HasMaxLength(100)
                .HasColumnName("jobdesc");
            entity.Property(e => e.Jobno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("jobno");
            entity.Property(e => e.Jobtyp)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("jobtyp");
            entity.Property(e => e.NewEntityno)
                .HasMaxLength(129)
                .HasColumnName("new_entityno");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("todate");
        });

        modelBuilder.Entity<TmpArCrewDemandsWithAssignment>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_AR_crew_demands_with_assignments");

            entity.Property(e => e.Assignedqty).HasColumnName("assignedqty");
            entity.Property(e => e.Demand)
                .HasColumnType("numeric(16, 2)")
                .HasColumnName("demand");
            entity.Property(e => e.Entityno)
                .HasMaxLength(126)
                .HasColumnName("entityno");
            entity.Property(e => e.EstHours).HasColumnName("est_hours");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("fromdate");
            entity.Property(e => e.JDemandqty)
                .HasColumnType("numeric(16, 2)")
                .HasColumnName("j_demandqty");
            entity.Property(e => e.Jobdesc)
                .HasMaxLength(100)
                .HasColumnName("jobdesc");
            entity.Property(e => e.Jobno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("jobno");
            entity.Property(e => e.Jobtyp)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("jobtyp");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("todate");
        });

        modelBuilder.Entity<TmpArCrewDemandsWithoutAssignment>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_AR_crew_demands_without_assignments");

            entity.Property(e => e.Entityno)
                .HasMaxLength(126)
                .HasColumnName("entityno");
            entity.Property(e => e.EstHours).HasColumnName("est_hours");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("fromdate");
            entity.Property(e => e.JDemand)
                .HasColumnType("numeric(16, 2)")
                .HasColumnName("j_demand");
            entity.Property(e => e.Jobdesc)
                .HasMaxLength(100)
                .HasColumnName("jobdesc");
            entity.Property(e => e.Jobno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("jobno");
            entity.Property(e => e.Jobtyp)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("jobtyp");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("todate");
        });

        modelBuilder.Entity<TmpArCrewEmpAssignments0227>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_AR_crew_emp_assignments_0227");

            entity.Property(e => e.Code)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.EstHours).HasColumnName("est_hours");
            entity.Property(e => e.FEmpno)
                .HasMaxLength(7)
                .HasColumnName("F_empno");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("fromdate");
            entity.Property(e => e.MinEmplineNo).HasColumnName("min_empline_no");
            entity.Property(e => e.NewEntityno)
                .HasMaxLength(126)
                .HasColumnName("new_entityno");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("todate");
        });

        modelBuilder.Entity<TmpArCrewEmpNonduplicateAssignments0227>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_AR_crew_emp_nonduplicate_assignments_0227");

            entity.Property(e => e.Code)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.EstHours).HasColumnName("est_hours");
            entity.Property(e => e.FEmpno)
                .HasMaxLength(7)
                .HasColumnName("F_empno");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("fromdate");
            entity.Property(e => e.MinEmplineNo).HasColumnName("min_empline_no");
            entity.Property(e => e.NewEntityno)
                .HasMaxLength(126)
                .HasColumnName("new_entityno");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("todate");
        });

        modelBuilder.Entity<TmpArCrewEmpcompany0227>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_AR_crew_empcompany_0227");

            entity.Property(e => e.Companyname)
                .HasMaxLength(50)
                .HasColumnName("companyname");
            entity.Property(e => e.Companyno)
                .HasMaxLength(8)
                .HasColumnName("companyno");
            entity.Property(e => e.Companynotes)
                .HasMaxLength(1264)
                .HasColumnName("companynotes");
            entity.Property(e => e.Constactlastname)
                .HasMaxLength(50)
                .HasColumnName("constactlastname");
            entity.Property(e => e.Contactcellphone)
                .HasMaxLength(50)
                .HasColumnName("contactcellphone");
            entity.Property(e => e.Contactemail)
                .HasMaxLength(100)
                .HasColumnName("contactemail");
            entity.Property(e => e.Contactfax)
                .HasMaxLength(50)
                .HasColumnName("contactfax");
            entity.Property(e => e.Contactfirstname)
                .HasMaxLength(50)
                .HasColumnName("contactfirstname");
            entity.Property(e => e.Contactofficephone)
                .HasMaxLength(50)
                .HasColumnName("contactofficephone");
            entity.Property(e => e.Contactother1)
                .HasMaxLength(50)
                .HasColumnName("contactother1");
            entity.Property(e => e.Ctcno)
                .HasMaxLength(50)
                .HasColumnName("ctcno");
            entity.Property(e => e.Defaultproptype)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("defaultproptype");
            entity.Property(e => e.PhoneCompany).HasMaxLength(50);
        });

        modelBuilder.Entity<TmpArCrewEmpsToAdd0227>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_AR_crew_emps_to_add_0227");

            entity.Property(e => e.Birthdate).HasColumnType("datetime");
            entity.Property(e => e.Birthplace).HasMaxLength(50);
            entity.Property(e => e.City).HasMaxLength(50);
            entity.Property(e => e.Comment).HasMaxLength(200);
            entity.Property(e => e.Country)
                .HasMaxLength(3)
                .HasColumnName("country");
            entity.Property(e => e.Custom1).HasMaxLength(400);
            entity.Property(e => e.Custom2).HasMaxLength(400);
            entity.Property(e => e.Custom3).HasMaxLength(400);
            entity.Property(e => e.Custom4).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Custom5).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CustomNumber).HasMaxLength(50);
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .HasColumnName("EMail");
            entity.Property(e => e.EmpCompanyNo)
                .HasMaxLength(8)
                .HasColumnName("empCompanyNo");
            entity.Property(e => e.FEmpno)
                .HasMaxLength(7)
                .HasColumnName("F_empno");
            entity.Property(e => e.Fax).HasMaxLength(50);
            entity.Property(e => e.Filestat)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("filestat");
            entity.Property(e => e.FirstName).HasMaxLength(50);
            entity.Property(e => e.Gradecd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("gradecd");
            entity.Property(e => e.Groupno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("groupno");
            entity.Property(e => e.Hiredate)
                .HasColumnType("smalldatetime")
                .HasColumnName("hiredate");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("locationcd");
            entity.Property(e => e.MiddleName).HasMaxLength(50);
            entity.Property(e => e.Number).HasMaxLength(50);
            entity.Property(e => e.PassportNumber).HasMaxLength(50);
            entity.Property(e => e.Phone).HasMaxLength(50);
            entity.Property(e => e.PhoneCompany).HasMaxLength(50);
            entity.Property(e => e.PhoneMobile).HasMaxLength(50);
            entity.Property(e => e.PhonePrivate).HasMaxLength(50);
            entity.Property(e => e.Ref4)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("ref4");
            entity.Property(e => e.SocialSecurityNumber).HasMaxLength(50);
            entity.Property(e => e.Street).HasMaxLength(50);
            entity.Property(e => e.Street2).HasMaxLength(50);
            entity.Property(e => e.Street3).HasMaxLength(50);
            entity.Property(e => e.Surname).HasMaxLength(50);
            entity.Property(e => e.Wwwadress)
                .HasMaxLength(100)
                .HasColumnName("WWWAdress");
            entity.Property(e => e.Zip).HasMaxLength(10);
        });

        modelBuilder.Entity<TmpArCrewResourceUnavailability0227>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_AR_crew_ResourceUnavailability_0227");

            entity.Property(e => e.EndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.Entityno)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Number).HasMaxLength(50);
            entity.Property(e => e.StartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.StateType).HasMaxLength(50);
        });

        modelBuilder.Entity<TmpArCrewResourceUnavailabilityStateType>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_AR_crew_ResourceUnavailabilityStateType");

            entity.Property(e => e.StateType).HasMaxLength(50);
        });

        modelBuilder.Entity<TmpArEmp>(entity =>
        {
            entity.HasKey(e => e.Rowguid).IsClustered(false);

            entity.ToTable("tmp_AR_emp");

            entity.Property(e => e.Rowguid)
                .HasDefaultValueSql("(newsequentialid())")
                .HasColumnName("rowguid");
            entity.Property(e => e.Address)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("address");
            entity.Property(e => e.Cellph)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("cellph");
            entity.Property(e => e.Citizenship)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("citizenship");
            entity.Property(e => e.City)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("city");
            entity.Property(e => e.CountryOfIssue)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("country_of_issue");
            entity.Property(e => e.DateOfBirth)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("date_of_birth");
            entity.Property(e => e.DateOfExpire)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("date_of_expire");
            entity.Property(e => e.DateOfIssue)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("date_of_issue");
            entity.Property(e => e.Dietary)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("dietary");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.EmergPh1)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("emerg_ph1");
            entity.Property(e => e.EmergPh2)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("emerg_ph2");
            entity.Property(e => e.EmergRel)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("emerg_rel");
            entity.Property(e => e.Emergency)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("emergency");
            entity.Property(e => e.Empno)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.Exeptions)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("exeptions");
            entity.Property(e => e.Faxph)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("faxph");
            entity.Property(e => e.FilingStatus)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("filing_status");
            entity.Property(e => e.Firstname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("firstname");
            entity.Property(e => e.Givenname)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("givenname");
            entity.Property(e => e.Grade)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("grade");
            entity.Property(e => e.GroupAr)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("group_ar");
            entity.Property(e => e.Hiredate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("hiredate");
            entity.Property(e => e.HomeAirport)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("home_airport");
            entity.Property(e => e.Homeph)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("homeph");
            entity.Property(e => e.Lastname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("lastname");
            entity.Property(e => e.Location)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("location");
            entity.Property(e => e.Nickname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("nickname");
            entity.Property(e => e.Passportno)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("passportno");
            entity.Property(e => e.PlaceOfBirth)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("place_of_birth");
            entity.Property(e => e.ResidAlien)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("resid_alien");
            entity.Property(e => e.ResidAlienDate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("resid_alien_date");
            entity.Property(e => e.Shiftno)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("shiftno");
            entity.Property(e => e.Smoker)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("smoker");
            entity.Property(e => e.Spouse)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("spouse");
            entity.Property(e => e.Ssn)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ssn");
            entity.Property(e => e.State)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("state");
            entity.Property(e => e.Status)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.Username)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("username");
            entity.Property(e => e.Zip)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("zip");
        });

        modelBuilder.Entity<TmpArMiaHalfHudson20110509>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_AR_MIA_Half_Hudson_20110509");

            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.Partdesc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<TmpArMotorServiceFromEj>(entity =>
        {
            entity.HasKey(e => new { e.Partno, e.UniqueNo });

            entity.ToTable("tmp_AR_MotorServiceFromEJ");

            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.Servicedate)
                .HasColumnType("datetime")
                .HasColumnName("servicedate");
            entity.Property(e => e.Userid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("userid");

            entity.HasOne(d => d.PartnoNavigation).WithMany(p => p.TmpArMotorServiceFromEjs)
                .HasForeignKey(d => d.Partno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tmp_AR_MotorServiceFromEJ_inpart");
        });

        modelBuilder.Entity<TmpArPartsupdate021511>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_AR_partsupdate_021511");

            entity.Property(e => e.Acctcd)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("acctcd");
            entity.Property(e => e.Commodity)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("commodity");
            entity.Property(e => e.CreationTime).HasColumnType("smalldatetime");
            entity.Property(e => e.CustomNumber).HasMaxLength(17);
            entity.Property(e => e.DepthUom)
                .HasColumnType("numeric(28, 11)")
                .HasColumnName("depth_uom");
            entity.Property(e => e.LengthUom)
                .HasColumnType("numeric(28, 11)")
                .HasColumnName("length_uom");
            entity.Property(e => e.Locationcd).HasColumnName("locationcd");
            entity.Property(e => e.Number).HasMaxLength(15);
            entity.Property(e => e.Package).HasColumnName("package");
            entity.Property(e => e.Partdesc)
                .HasMaxLength(307)
                .HasColumnName("partdesc");
            entity.Property(e => e.Source)
                .HasMaxLength(2)
                .HasColumnName("source");
            entity.Property(e => e.Totmatcost1)
                .HasColumnType("money")
                .HasColumnName("totmatcost1");
            entity.Property(e => e.Totmatcost4)
                .HasColumnType("money")
                .HasColumnName("totmatcost4");
            entity.Property(e => e.UpdateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.Usercreated)
                .HasMaxLength(4000)
                .HasColumnName("usercreated");
            entity.Property(e => e.Usermodified)
                .HasMaxLength(4000)
                .HasColumnName("usermodified");
            entity.Property(e => e.Weight).HasColumnType("numeric(21, 5)");
            entity.Property(e => e.WidthUom)
                .HasColumnType("numeric(28, 11)")
                .HasColumnName("width_uom");
        });

        modelBuilder.Entity<TmpArProjects0227>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_AR_projects_0227");

            entity.Property(e => e.Agency)
                .HasMaxLength(4000)
                .HasColumnName("agency");
            entity.Property(e => e.Bidmarkup)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("bidmarkup");
            entity.Property(e => e.Bidroot)
                .HasMaxLength(123)
                .HasColumnName("bidroot");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.CrewPrep).HasColumnType("datetime");
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.Custno)
                .HasMaxLength(9)
                .HasColumnName("custno");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("engactivecd");
            entity.Property(e => e.Entitydesc)
                .HasMaxLength(4000)
                .HasColumnName("entitydesc");
            entity.Property(e => e.Entityno)
                .HasMaxLength(123)
                .HasColumnName("entityno");
            entity.Property(e => e.Entitytype)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("entitytype");
            entity.Property(e => e.Finactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("finactivecd");
            entity.Property(e => e.FirstShow).HasColumnType("datetime");
            entity.Property(e => e.Industry)
                .HasMaxLength(4000)
                .HasColumnName("industry");
            entity.Property(e => e.InternalOrg)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("internal_org");
            entity.Property(e => e.LastShow).HasColumnType("datetime");
            entity.Property(e => e.LoadOut).HasColumnType("datetime");
            entity.Property(e => e.Opsmgr)
                .HasMaxLength(101)
                .HasColumnName("opsmgr");
            entity.Property(e => e.Plactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("plactivecd");
            entity.Property(e => e.Probability)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("probability");
            entity.Property(e => e.Proptype)
                .HasMaxLength(50)
                .HasColumnName("proptype");
            entity.Property(e => e.Respempno)
                .HasMaxLength(101)
                .HasColumnName("respempno");
            entity.Property(e => e.Sfactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sfactivecd");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.Subcontract)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("subcontract");
            entity.Property(e => e.Subno).HasColumnName("subno");
        });

        modelBuilder.Entity<TmpArTransaction>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_AR_transactions");

            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(41)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.Enterdate)
                .HasColumnType("datetime")
                .HasColumnName("enterdate");
            entity.Property(e => e.Groupno).HasColumnName("groupno");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .HasColumnName("partno");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Ref3)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ref3");
            entity.Property(e => e.Ref4)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("ref5");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(50)
                .HasColumnName("serial_no");
            entity.Property(e => e.Sortdate)
                .HasColumnType("datetime")
                .HasColumnName("sortdate");
            entity.Property(e => e.TranType)
                .HasMaxLength(17)
                .IsUnicode(false);
            entity.Property(e => e.Trandate)
                .HasColumnType("datetime")
                .HasColumnName("trandate");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(50)
                .HasColumnName("unique_no");
            entity.Property(e => e.Userid)
                .HasMaxLength(4000)
                .HasColumnName("userid");
        });

        modelBuilder.Entity<TmpArXProjects0227>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_AR_X_Projects_0227");

            entity.Property(e => e.Acctmgr)
                .HasMaxLength(101)
                .HasColumnName("acctmgr");
            entity.Property(e => e.Activecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("activecd");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Billingno).HasColumnName("billingno");
            entity.Property(e => e.Calactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("calactivecd");
            entity.Property(e => e.Custno)
                .HasMaxLength(9)
                .HasColumnName("custno");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Entitydesc)
                .HasMaxLength(4000)
                .HasColumnName("entitydesc");
            entity.Property(e => e.Entityno)
                .HasMaxLength(123)
                .HasColumnName("entityno");
            entity.Property(e => e.Groupno).HasColumnName("groupno");
            entity.Property(e => e.HomeWh)
                .HasMaxLength(10)
                .HasColumnName("homeWH");
            entity.Property(e => e.Number)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("number");
            entity.Property(e => e.Opsmgr)
                .HasMaxLength(101)
                .HasColumnName("opsmgr");
            entity.Property(e => e.Phasetype)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("phasetype");
            entity.Property(e => e.Plactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("plactivecd");
            entity.Property(e => e.Proptype)
                .HasMaxLength(50)
                .HasColumnName("proptype");
            entity.Property(e => e.ReturnWh)
                .HasMaxLength(10)
                .HasColumnName("returnWH");
            entity.Property(e => e.Sfactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sfactivecd");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
        });

        modelBuilder.Entity<TmpArcCostUpdate>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpArcCostUpdate");

            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Unitvalue).HasColumnName("unitvalue");
        });

        modelBuilder.Entity<TmpArcSaleToCgc20181231>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpArcSaleToCgc20181231");

            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<TmpArentcuksaleToClair20131231>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpARENTCUKSaleToClair20131231");

            entity.Property(e => e.Area)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("area");
            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.Parentpartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("parentpartno");
            entity.Property(e => e.ParentserialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("parentserial_no");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Row)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<TmpArentcuksaleToClair20140922>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpARENTCUKSaleToClair20140922");

            entity.Property(e => e.UniqueNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<TmpArentcuksaleToClair20150726>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpARENTCUKSaleToClair20150726");

            entity.Property(e => e.UniqueNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<TmpArlightingPricesUpdate20170926>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpARLightingPricesUpdate20170926");

            entity.Property(e => e.Dailyprice)
                .IsUnicode(false)
                .HasColumnName("dailyprice");
            entity.Property(e => e.Partno)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Standardbidvalue)
                .IsUnicode(false)
                .HasColumnName("standardbidvalue");
        });

        modelBuilder.Entity<TmpArtistEquipmentValueByDay>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpArtistEquipmentValueByDay");

            entity.Property(e => e.Dt)
                .HasColumnType("datetime")
                .HasColumnName("dt");
            entity.Property(e => e.PollstarArtistId).HasColumnName("PollstarArtistID");
            entity.Property(e => e.Value).HasColumnName("value");
        });

        modelBuilder.Entity<TmpAsatestParameters20241010>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpASATestParameters_20241010");

            entity.Property(e => e.FileName)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.FilePath)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
        });

        modelBuilder.Entity<TmpAtkCategoryMapping>(entity =>
        {
            entity.HasKey(e => e.MappingId);

            entity.ToTable("tmpAtkCategory_Mapping");

            entity.Property(e => e.MappingId)
                .ValueGeneratedOnAdd()
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("MappingID");
            entity.Property(e => e.Atkcategory)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ATKCategory");
            entity.Property(e => e.Commodity)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpAtkPartTypeMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpAtkPartType_Mapping");

            entity.Property(e => e.Number).HasMaxLength(15);
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
        });

        modelBuilder.Entity<TmpAtkPartTypes20211004>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpAtkPartTypes20211004");

            entity.Property(e => e.ApparentPower).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.Barcode).HasMaxLength(50);
            entity.Property(e => e.Caption).HasMaxLength(255);
            entity.Property(e => e.Comment).HasMaxLength(255);
            entity.Property(e => e.CreationTime).HasColumnType("smalldatetime");
            entity.Property(e => e.CustomNumber).HasMaxLength(50);
            entity.Property(e => e.CustomsTariffNumber).HasMaxLength(50);
            entity.Property(e => e.Depth).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.EconomicLife).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.FactoryNumber).HasMaxLength(25);
            entity.Property(e => e.Gusn).HasColumnName("GUSN");
            entity.Property(e => e.Height).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.IdCountryManufacturer).HasColumnName("IdCountry_Manufacturer");
            entity.Property(e => e.IdStockType).ValueGeneratedOnAdd();
            entity.Property(e => e.ImputedPrice).HasColumnType("money");
            entity.Property(e => e.LeasePrice).HasColumnType("money");
            entity.Property(e => e.Number).HasMaxLength(15);
            entity.Property(e => e.PackingInstruction).HasMaxLength(250);
            entity.Property(e => e.PirealCosts)
                .HasColumnType("money")
                .HasColumnName("PIRealCosts");
            entity.Property(e => e.PurchasePrice).HasColumnType("money");
            entity.Property(e => e.RealPower).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.RmBizPublish).HasColumnName("rmBizPublish");
            entity.Property(e => e.RmautoLicenceUpdate).HasColumnName("RMAutoLicenceUpdate");
            entity.Property(e => e.SalesPrice).HasColumnType("money");
            entity.Property(e => e.StorageLocation).HasMaxLength(250);
            entity.Property(e => e.SubhirePrice).HasColumnType("money");
            entity.Property(e => e.Type).HasMaxLength(50);
            entity.Property(e => e.UpdateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.UtilisationPlan).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.Weight).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.Width).HasColumnType("numeric(18, 4)");
        });

        modelBuilder.Entity<TmpAtkVersacomCategoryMapping>(entity =>
        {
            entity.HasKey(e => e.MappingId);

            entity.ToTable("tmpAtkVersacomCategory_Mapping");

            entity.Property(e => e.MappingId)
                .ValueGeneratedOnAdd()
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("MappingID");
            entity.Property(e => e.Atkvcategory)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ATKVCategory");
            entity.Property(e => e.Commodity)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpAtkVersacomPartTypeMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpAtkVersacomPartType_Mapping");

            entity.Property(e => e.Number).HasMaxLength(15);
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
        });

        modelBuilder.Entity<TmpAtkVersacomPartTypes20211004>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpAtkVersacomPartTypes20211004");

            entity.Property(e => e.ApparentPower).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.Barcode).HasMaxLength(50);
            entity.Property(e => e.Caption).HasMaxLength(255);
            entity.Property(e => e.Comment).HasMaxLength(255);
            entity.Property(e => e.CreationTime).HasColumnType("smalldatetime");
            entity.Property(e => e.CustomNumber).HasMaxLength(50);
            entity.Property(e => e.CustomsTariffNumber).HasMaxLength(50);
            entity.Property(e => e.Depth).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.EconomicLife).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.FactoryNumber).HasMaxLength(25);
            entity.Property(e => e.Gusn).HasColumnName("GUSN");
            entity.Property(e => e.Height).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.IdCountryManufacturer).HasColumnName("IdCountry_Manufacturer");
            entity.Property(e => e.IdStockType).ValueGeneratedOnAdd();
            entity.Property(e => e.ImputedPrice).HasColumnType("money");
            entity.Property(e => e.LeasePrice).HasColumnType("money");
            entity.Property(e => e.Number).HasMaxLength(15);
            entity.Property(e => e.PackingInstruction).HasMaxLength(250);
            entity.Property(e => e.PirealCosts)
                .HasColumnType("money")
                .HasColumnName("PIRealCosts");
            entity.Property(e => e.PurchasePrice).HasColumnType("money");
            entity.Property(e => e.RealPower).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.RmBizPublish).HasColumnName("rmBizPublish");
            entity.Property(e => e.RmautoLicenceUpdate).HasColumnName("RMAutoLicenceUpdate");
            entity.Property(e => e.SalesPrice).HasColumnType("money");
            entity.Property(e => e.StorageLocation).HasMaxLength(250);
            entity.Property(e => e.SubhirePrice).HasColumnType("money");
            entity.Property(e => e.Type).HasMaxLength(50);
            entity.Property(e => e.UpdateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.UtilisationPlan).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.Weight).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.Width).HasColumnType("numeric(18, 4)");
        });

        modelBuilder.Entity<TmpBarcodePartNoficiation>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpBarcodePartNoficiations");

            entity.Property(e => e.ActivationCode5kHzStepEnabled).HasColumnName("Activation code (5kHz step enabled)");
            entity.Property(e => e.SerialNumber).HasColumnName("Serial number");
        });

        modelBuilder.Entity<TmpBarcodesNeedingMotorInspection>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpBarcodesNeedingMotorInspection");

            entity.Property(e => e.TestTyp).HasColumnName("Test typ");
        });

        modelBuilder.Entity<TmpBarcodesNeedingMotorInspection2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpBarcodesNeedingMotorInspection_2");

            entity.Property(e => e.TestTyp).HasColumnName("Test typ");
        });

        modelBuilder.Entity<TmpBbmBarcodes20220302>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpBbmBarcodes20220302");

            entity.Property(e => e.Ejbarcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EJBarcode");
            entity.Property(e => e.Ejdescription)
                .IsUnicode(false)
                .HasColumnName("EJDescription");
            entity.Property(e => e.EjinvNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EJInvNo");
            entity.Property(e => e.Ejpartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EJPartno");
            entity.Property(e => e.EjserialNo)
                .IsUnicode(false)
                .HasColumnName("EJSerialNo");
        });

        modelBuilder.Entity<TmpBbmContainerSerials20220302>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpBbmContainerSerials20220302");

            entity.Property(e => e.Ejdescription)
                .IsUnicode(false)
                .HasColumnName("EJDescription");
            entity.Property(e => e.Ejpartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EJPartno");
            entity.Property(e => e.Ejserial)
                .IsUnicode(false)
                .HasColumnName("EJSerial");
        });

        modelBuilder.Entity<TmpBbmFinalAssetList>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpBbmFinalAssetList");

            entity.Property(e => e.BarcodeInfo)
                .HasMaxLength(255)
                .HasColumnName("Barcode_Info");
            entity.Property(e => e.Bezeichnung).HasMaxLength(255);
            entity.Property(e => e.BezeichnungEnglish)
                .HasMaxLength(255)
                .HasColumnName("Bezeichnung English");
            entity.Property(e => e.Einkaufspreis).HasColumnType("money");
            entity.Property(e => e.GesamtEk)
                .HasColumnType("money")
                .HasColumnName("Gesamt EK");
            entity.Property(e => e.Lagerplatz).HasMaxLength(255);
            entity.Property(e => e.Mutterwarengruppe).HasMaxLength(255);
            entity.Property(e => e.Nummer).HasMaxLength(255);
            entity.Property(e => e.Warengruppe).HasMaxLength(255);
        });

        modelBuilder.Entity<TmpBbmJob>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpBbmJob");

            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CustomNumber).HasMaxLength(255);
            entity.Property(e => e.DayTimeIn).HasColumnType("datetime");
            entity.Property(e => e.DayTimeOut).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpBbmJobPart>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpBbmJobPart");

            entity.Property(e => e.AvblDateTime).HasColumnType("datetime");
            entity.Property(e => e.Caption).HasMaxLength(255);
            entity.Property(e => e.DateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpBbmPackagePartUpdate>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpBbmPackagePartUpdates");

            entity.Property(e => e.Commmodity)
                .HasMaxLength(255)
                .HasColumnName("commmodity");
            entity.Property(e => e.DepthUom).HasColumnName("depth_uom");
            entity.Property(e => e.LengthUom).HasColumnName("length_uom");
            entity.Property(e => e.Package)
                .HasMaxLength(255)
                .HasColumnName("package");
            entity.Property(e => e.Package1)
                .HasMaxLength(255)
                .HasColumnName("package_1");
            entity.Property(e => e.Partdesc)
                .HasMaxLength(255)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(255)
                .HasColumnName("partno");
            entity.Property(e => e.Unused).HasMaxLength(255);
            entity.Property(e => e.WidthUom).HasColumnName("width_uom");
        });

        modelBuilder.Entity<TmpBbmPartMapping>(entity =>
        {
            entity.HasKey(e => e.Ejpartno);

            entity.ToTable("tmpBbmPartMapping");

            entity.Property(e => e.Ejpartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EJPartno");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
        });

        modelBuilder.Entity<TmpBbmPartNumber>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpBbmPartNumbers");

            entity.Property(e => e.BarcodeInfo)
                .HasMaxLength(255)
                .HasColumnName("Barcode_Info");
            entity.Property(e => e.Bezeichnung).HasMaxLength(255);
            entity.Property(e => e.BezeichnungEnglish).HasMaxLength(255);
            entity.Property(e => e.Einkaufspreis).HasColumnType("money");
            entity.Property(e => e.GesamtEk)
                .HasColumnType("money")
                .HasColumnName("GesamtEK");
            entity.Property(e => e.Lagerplatz).HasMaxLength(255);
            entity.Property(e => e.Mutterwarengruppe).HasMaxLength(255);
            entity.Property(e => e.Nummer).HasMaxLength(255);
            entity.Property(e => e.Warengruppe).HasMaxLength(255);
        });

        modelBuilder.Entity<TmpBbmPartNumbersCreated20220420>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpBbmPartNumbersCreated20220420");

            entity.Property(e => e.Acctno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("acctno");
            entity.Property(e => e.BidValueUsd)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("bid_value_USD");
            entity.Property(e => e.Commodity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("commodity");
            entity.Property(e => e.Height).HasColumnName("height");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Length).HasColumnName("length");
            entity.Property(e => e.Locationcd).HasColumnName("locationcd");
            entity.Property(e => e.MakePurchase)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("make_purchase");
            entity.Property(e => e.MaterialDesc).HasColumnName("material_desc");
            entity.Property(e => e.Origin)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("origin");
            entity.Property(e => e.Package)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("package");
            entity.Property(e => e.Parent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("parent");
            entity.Property(e => e.Partdesc)
                .HasMaxLength(255)
                .HasColumnName("partdesc");
            entity.Property(e => e.PartdescSales)
                .HasMaxLength(255)
                .HasColumnName("partdesc_sales");
            entity.Property(e => e.Partno)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.RentalValueUsd).HasColumnName("rental_value_USD");
            entity.Property(e => e.SessionId).HasColumnName("session_id");
            entity.Property(e => e.Sku)
                .HasMaxLength(255)
                .HasColumnName("SKU");
            entity.Property(e => e.UpdateTime).HasColumnType("datetime");
            entity.Property(e => e.Weight).HasColumnName("weight");
            entity.Property(e => e.Width).HasColumnName("width");
        });

        modelBuilder.Entity<TmpBbmPartNumbersView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("tmpBbmPartNumbers_View");

            entity.Property(e => e.Caption).HasMaxLength(255);
            entity.Property(e => e.Ejpartno)
                .HasMaxLength(255)
                .HasColumnName("EJPartno");
            entity.Property(e => e.PurchasePrice).HasColumnType("money");
        });

        modelBuilder.Entity<TmpBbmStockItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpBbmStockItem");

            entity.Property(e => e.ActualOperatingHouers).HasMaxLength(255);
            entity.Property(e => e.ActualUsageDays).HasMaxLength(255);
            entity.Property(e => e.Barcode).HasMaxLength(255);
            entity.Property(e => e.BoughtDate).HasColumnType("datetime");
            entity.Property(e => e.Condition).HasMaxLength(255);
            entity.Property(e => e.CreationTime).HasColumnType("datetime");
            entity.Property(e => e.Custom1).HasMaxLength(255);
            entity.Property(e => e.Custom2).HasMaxLength(255);
            entity.Property(e => e.DepreciationBaseValue).HasMaxLength(255);
            entity.Property(e => e.EconomicLife).HasMaxLength(255);
            entity.Property(e => e.IdAddressSubhire).HasMaxLength(255);
            entity.Property(e => e.IdDepreciationMethod).HasMaxLength(255);
            entity.Property(e => e.IdInvoiceAccountDepreciation).HasMaxLength(255);
            entity.Property(e => e.IdServiceType).HasMaxLength(255);
            entity.Property(e => e.IdStockSubhire).HasMaxLength(255);
            entity.Property(e => e.IdStockType2InventoryTypeOut).HasMaxLength(255);
            entity.Property(e => e.IdStockType2JobSubhire).HasMaxLength(255);
            entity.Property(e => e.Inventorynumber).HasMaxLength(255);
            entity.Property(e => e.LastMaintenance).HasColumnType("datetime");
            entity.Property(e => e.LastRepair).HasColumnType("datetime");
            entity.Property(e => e.LastService).HasColumnType("datetime");
            entity.Property(e => e.Serialnumber).HasMaxLength(255);
            entity.Property(e => e.Source).HasMaxLength(255);
            entity.Property(e => e.UpdateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpBbmStockItem2Job>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpBbmStockItem2Job");

            entity.Property(e => e.Back)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CheckInDate)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CheckOutDate)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinalCheckOutDate)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdJobPartIn)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdJobPartOut)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdStockItem)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdStockItem2Job)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdStockType2Job)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpBbmStockType>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpBbmStockTypes");

            entity.Property(e => e.AvblInclCheckOutIn).HasMaxLength(255);
            entity.Property(e => e.Barcode).HasMaxLength(255);
            entity.Property(e => e.BookingWarning).HasMaxLength(255);
            entity.Property(e => e.Caption).HasMaxLength(255);
            entity.Property(e => e.Comment).HasMaxLength(255);
            entity.Property(e => e.CreationTime).HasColumnType("datetime");
            entity.Property(e => e.CustomNumber).HasMaxLength(255);
            entity.Property(e => e.IdAddressManufacturer)
                .HasMaxLength(255)
                .HasColumnName("IdAddress_Manufacturer");
            entity.Property(e => e.IdCostCenter).HasMaxLength(255);
            entity.Property(e => e.IdCostCenterSales).HasMaxLength(255);
            entity.Property(e => e.IdCostCenterSalesUsed).HasMaxLength(255);
            entity.Property(e => e.IdCountryManufacturer).HasColumnName("IdCountry_Manufacturer");
            entity.Property(e => e.IdDangerousGoodsLabel).HasMaxLength(255);
            entity.Property(e => e.IdDepreciationMethod).HasMaxLength(255);
            entity.Property(e => e.IdShortCutDefaultPicture).HasMaxLength(255);
            entity.Property(e => e.IdShortCutManual).HasMaxLength(255);
            entity.Property(e => e.IdWorkflowDefinitionBooking).HasMaxLength(255);
            entity.Property(e => e.PirealCosts)
                .HasMaxLength(255)
                .HasColumnName("PIRealCosts");
            entity.Property(e => e.PolicyComment).HasMaxLength(255);
            entity.Property(e => e.PowerConnection).HasMaxLength(255);
            entity.Property(e => e.RateOfDutyNumber).HasMaxLength(255);
            entity.Property(e => e.RmBizPublish).HasColumnName("rmBizPublish");
            entity.Property(e => e.RmautoLicenceUpdate).HasColumnName("RMAutoLicenceUpdate");
            entity.Property(e => e.UpdateTime).HasColumnType("datetime");
            entity.Property(e => e.WorkflowPolicy).HasMaxLength(255);
        });

        modelBuilder.Entity<TmpBbmStockType2Job>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpBbmStockType2Job");

            entity.Property(e => e.Back)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Factor)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinalLoaded)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdJob)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdStockType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdStockType2Job)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdStockType2JobGroup)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdStockType2JobParent)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IdStockType2Job_Parent");
            entity.Property(e => e.IdStockType2JobType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Loaded)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpBbmStockTypeCategory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpBbmStockTypeCategory");

            entity.Property(e => e.Caption).HasMaxLength(255);
            entity.Property(e => e.CaptionLng2).HasMaxLength(255);
            entity.Property(e => e.CaptionLng3).HasMaxLength(255);
            entity.Property(e => e.CaptionLng4).HasMaxLength(255);
            entity.Property(e => e.CaptionLng5).HasMaxLength(255);
            entity.Property(e => e.CaptionLng6).HasMaxLength(255);
            entity.Property(e => e.IdCostCenter).HasMaxLength(255);
            entity.Property(e => e.IdCostCenterSales).HasMaxLength(255);
            entity.Property(e => e.IdCostCenterSalesUsed).HasMaxLength(255);
        });

        modelBuilder.Entity<TmpBbmStockTypeCategoryParent>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpBbmStockTypeCategoryParent");

            entity.Property(e => e.Caption).HasMaxLength(255);
            entity.Property(e => e.CaptionLng2).HasMaxLength(255);
            entity.Property(e => e.CaptionLng3).HasMaxLength(255);
            entity.Property(e => e.CaptionLng4).HasMaxLength(255);
            entity.Property(e => e.CaptionLng5).HasMaxLength(255);
            entity.Property(e => e.CaptionLng6).HasMaxLength(255);
            entity.Property(e => e.Commodity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("commodity");
            entity.Property(e => e.IdRmbranch).HasColumnName("idRMBranch");
            entity.Property(e => e.Rmcaption)
                .HasMaxLength(255)
                .HasColumnName("RMCaption");
        });

        modelBuilder.Entity<TmpBbmStockTypeExtension>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpBbmStockTypeExtension");

            entity.Property(e => e.Brand).HasMaxLength(255);
            entity.Property(e => e.Branding).HasMaxLength(255);
            entity.Property(e => e.Capacity).HasMaxLength(255);
            entity.Property(e => e.CaptionLng2).HasMaxLength(255);
            entity.Property(e => e.CaptionLng3).HasMaxLength(255);
            entity.Property(e => e.CaptionLng4).HasMaxLength(255);
            entity.Property(e => e.CaptionLng5).HasMaxLength(255);
            entity.Property(e => e.CaptionLng6).HasMaxLength(255);
            entity.Property(e => e.Color).HasMaxLength(255);
            entity.Property(e => e.CommentLng2).HasMaxLength(255);
            entity.Property(e => e.CommentLng3).HasMaxLength(255);
            entity.Property(e => e.CommentLng4).HasMaxLength(255);
            entity.Property(e => e.CommentLng5).HasMaxLength(255);
            entity.Property(e => e.CommentLng6).HasMaxLength(255);
            entity.Property(e => e.Custom1).HasMaxLength(255);
            entity.Property(e => e.Custom1Lng2).HasMaxLength(255);
            entity.Property(e => e.Custom1Lng3).HasMaxLength(255);
            entity.Property(e => e.Custom1Lng4).HasMaxLength(255);
            entity.Property(e => e.Custom1Lng5).HasMaxLength(255);
            entity.Property(e => e.Custom1Lng6).HasMaxLength(255);
            entity.Property(e => e.Custom2).HasMaxLength(255);
            entity.Property(e => e.Custom2Lng2).HasMaxLength(255);
            entity.Property(e => e.Custom2Lng3).HasMaxLength(255);
            entity.Property(e => e.Custom2Lng4).HasMaxLength(255);
            entity.Property(e => e.Custom2Lng5).HasMaxLength(255);
            entity.Property(e => e.Custom2Lng6).HasMaxLength(255);
            entity.Property(e => e.Custom3Lng2).HasMaxLength(255);
            entity.Property(e => e.Custom3Lng3).HasMaxLength(255);
            entity.Property(e => e.Custom3Lng4).HasMaxLength(255);
            entity.Property(e => e.Custom3Lng5).HasMaxLength(255);
            entity.Property(e => e.Custom3Lng6).HasMaxLength(255);
            entity.Property(e => e.Diameter).HasMaxLength(255);
            entity.Property(e => e.Illuminable).HasMaxLength(255);
            entity.Property(e => e.InstallationRequired).HasMaxLength(255);
            entity.Property(e => e.Material).HasMaxLength(255);
            entity.Property(e => e.Model).HasMaxLength(255);
            entity.Property(e => e.OutdoorUse).HasMaxLength(255);
            entity.Property(e => e.OwnerCaption).HasMaxLength(255);
            entity.Property(e => e.RowConnectable).HasMaxLength(255);
            entity.Property(e => e.Rtfcontent)
                .HasMaxLength(255)
                .HasColumnName("RTFContent");
            entity.Property(e => e.Shape).HasMaxLength(255);
            entity.Property(e => e.WaterConnection).HasMaxLength(255);
            entity.Property(e => e.WebShopSalesUsedCondition).HasMaxLength(255);
            entity.Property(e => e.WebshopTags).HasMaxLength(255);
        });

        modelBuilder.Entity<TmpBbmStockTypePrice>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpBbmStockTypePrice");

            entity.Property(e => e.AdditionalCosts).HasMaxLength(255);
            entity.Property(e => e.DailyRevenue).HasMaxLength(255);
            entity.Property(e => e.Scale).HasMaxLength(255);
            entity.Property(e => e.WorkshopCosts).HasMaxLength(255);
        });

        modelBuilder.Entity<TmpBbmopenAp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpBBMOpenAP");

            entity.Property(e => e.BatchNo).HasColumnName("Batch No.");
            entity.Property(e => e.Bl).HasColumnName("BL");
            entity.Property(e => e.Bsnr).HasColumnName("BSNr.");
            entity.Property(e => e.CityLocation).HasColumnName("City / Location");
            entity.Property(e => e.CompanyPurpose).HasColumnName("Company Purpose");
            entity.Property(e => e.ContextIssue).HasColumnName("Context / Issue");
            entity.Property(e => e.CostCenter1).HasColumnName("Cost Center 1");
            entity.Property(e => e.CostCenter2).HasColumnName("Cost Center 2");
            entity.Property(e => e.CounterAccount)
                .IsUnicode(false)
                .HasColumnName("Counter Account");
            entity.Property(e => e.CreditAmount).HasColumnName("Credit Amount");
            entity.Property(e => e.CreditLimit).HasColumnName("Credit Limit");
            entity.Property(e => e.CustomerSupplierNo).HasColumnName("Customer/Supplier No.");
            entity.Property(e => e.DebitAmount).HasColumnName("Debit Amount");
            entity.Property(e => e.DebitCreditBalance).HasColumnName("Debit/Credit Balance");
            entity.Property(e => e.DocumentField2).HasColumnName("Document Field 2");
            entity.Property(e => e.DueDate).HasColumnName("Due Date");
            entity.Property(e => e.ExternalSystemNumber).HasColumnName("External System Number");
            entity.Property(e => e.GpBank).HasColumnName("GP-Bank");
            entity.Property(e => e.InterestBlock).HasColumnName("Interest Block");
            entity.Property(e => e.InvoiceNo).HasColumnName("Invoice No.");
            entity.Property(e => e.MdtBank).HasColumnName("Mdt-Bank");
            entity.Property(e => e.PaymentTerms).HasColumnName("Payment Terms");
            entity.Property(e => e.PostalCode).HasColumnName("Postal Code");
            entity.Property(e => e.PostingText).HasColumnName("Posting Text");
            entity.Property(e => e.SepaMandateReference).HasColumnName("SEPA Mandate Reference");
            entity.Property(e => e.ShortDescription).HasColumnName("Short Description");
            entity.Property(e => e.VariousAddress).HasColumnName("Various Address");
            entity.Property(e => e.Vat)
                .IsUnicode(false)
                .HasColumnName("VAT %");
            entity.Property(e => e.Zi).HasColumnName("ZI");
        });

        modelBuilder.Entity<TmpBbmopenAr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpBBMOpenAR");

            entity.Property(e => e.Ausgl).HasColumnName("Ausgl.");
            entity.Property(e => e.Belegfeld2).HasColumnName("Belegfeld 2");
            entity.Property(e => e.BetragHaben).HasColumnName("Betrag Haben");
            entity.Property(e => e.BetragSoll).HasColumnName("Betrag Soll");
            entity.Property(e => e.Bsnr).HasColumnName("BSNr.");
            entity.Property(e => e.Fallig).HasColumnName("fallig");
            entity.Property(e => e.Kost1).HasColumnName("KOST1");
            entity.Property(e => e.Kost2).HasColumnName("KOST2");
            entity.Property(e => e.RechnungsNr).HasColumnName("Rechnungs-Nr.");
            entity.Property(e => e.SHSaldo).HasColumnName("S/H Saldo");
            entity.Property(e => e.StapelNr).HasColumnName("Stapel-Nr.");
            entity.Property(e => e.Ust).HasColumnName("USt%");
            entity.Property(e => e.Zi).HasColumnName("ZI");
        });

        modelBuilder.Entity<TmpBillingDaysBenchmarkUpdate>(entity =>
        {
            entity.HasKey(e => new { e.Company, e.Daysused, e.Proptype });

            entity.ToTable("tmpBillingDaysBenchmarkUpdate");

            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("company");
            entity.Property(e => e.Daysused).HasColumnName("daysused");
            entity.Property(e => e.Proptype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("proptype");
            entity.Property(e => e.Daysbilled).HasColumnName("daysbilled");
        });

        modelBuilder.Entity<TmpBrittDupBarcodeDatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpBrittDupBarcodeData");

            entity.Property(e => e.BnAction1).HasColumnName("BN Action 1");
            entity.Property(e => e.BnAction2).HasColumnName("BN Action 2");
            entity.Property(e => e.BnAction3).HasColumnName("BN Action 3");
            entity.Property(e => e.BnWorking).HasColumnName("BN Working");
            entity.Property(e => e.CollisionBc).HasColumnName("Collision BC");
            entity.Property(e => e.CollisionPartDesc).HasColumnName("Collision Part Desc");
            entity.Property(e => e.CollisionPartNo).HasColumnName("Collision Part No");
            entity.Property(e => e.CollisionSerialNo).HasColumnName("Collision Serial No");
            entity.Property(e => e.DupBarcode).HasColumnName("dupBarcode");
            entity.Property(e => e.IsSoundTrackerBc).HasColumnName("Is SoundTracker BC");
            entity.Property(e => e.MbNotes112223).HasColumnName("MB Notes 11.22.23");
            entity.Property(e => e.MbNotesHayward).HasColumnName("MB Notes (Hayward)");
            entity.Property(e => e.PartDescCur).HasColumnName("Part Desc (Cur)");
            entity.Property(e => e.PartNumberCur).HasColumnName("Part Number (Cur)");
            entity.Property(e => e.QtyInInventory).HasColumnName("Qty in Inventory");
            entity.Property(e => e.QtyInInventory2).HasColumnName("Qty in Inventory2");
            entity.Property(e => e.SerialNoCur).HasColumnName("Serial No (Cur)");
        });

        modelBuilder.Entity<TmpBrpAccountsCustomer>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpBrpAccountsCustomers");

            entity.Property(e => e.Address).HasMaxLength(255);
            entity.Property(e => e.Country).HasMaxLength(255);
            entity.Property(e => e.CountryCode)
                .HasMaxLength(255)
                .HasColumnName("Country Code");
            entity.Property(e => e.County).HasMaxLength(255);
            entity.Property(e => e.CurrencyCode)
                .HasMaxLength(255)
                .HasColumnName("Currency Code");
            entity.Property(e => e.CustomerCode)
                .HasMaxLength(255)
                .HasColumnName("Customer Code");
            entity.Property(e => e.CustomerName)
                .HasMaxLength(255)
                .HasColumnName("Customer Name");
            entity.Property(e => e.DateOfLastInvoice).HasColumnName("Date of Last Invoice");
            entity.Property(e => e.EMailAddress)
                .HasMaxLength(255)
                .HasColumnName("E-mail Address");
            entity.Property(e => e.Fax).HasMaxLength(255);
            entity.Property(e => e.Mobile).HasMaxLength(255);
            entity.Property(e => e.Phone).HasMaxLength(255);
            entity.Property(e => e.PostCode)
                .HasMaxLength(255)
                .HasColumnName("Post Code");
            entity.Property(e => e.SortKey)
                .HasMaxLength(255)
                .HasColumnName("Sort Key");
            entity.Property(e => e.Town).HasMaxLength(255);
            entity.Property(e => e.UserSort1)
                .HasMaxLength(255)
                .HasColumnName("User Sort 1");
            entity.Property(e => e.UserSort2)
                .HasMaxLength(255)
                .HasColumnName("User Sort 2");
        });

        modelBuilder.Entity<TmpBrpAccountsCustomerAddress>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpBrpAccountsCustomerAddresses");

            entity.Property(e => e.Address).HasMaxLength(255);
            entity.Property(e => e.AddressNumber)
                .HasMaxLength(255)
                .HasColumnName("Address Number");
            entity.Property(e => e.CcEMailAddress)
                .HasMaxLength(255)
                .HasColumnName("CC E-mail Address");
            entity.Property(e => e.Country).HasMaxLength(255);
            entity.Property(e => e.CountryCode)
                .HasMaxLength(255)
                .HasColumnName("Country Code");
            entity.Property(e => e.County).HasMaxLength(255);
            entity.Property(e => e.CustomerCode)
                .HasMaxLength(255)
                .HasColumnName("Customer Code");
            entity.Property(e => e.DateEntered).HasColumnName("Date Entered");
            entity.Property(e => e.DateLastEdited).HasColumnName("Date Last Edited");
            entity.Property(e => e.DefaultDeliveryAddress).HasColumnName("Default Delivery Address");
            entity.Property(e => e.DefaultInvoiceAddress).HasColumnName("Default Invoice address");
            entity.Property(e => e.DefaultStatementAddress).HasColumnName("Default Statement Address");
            entity.Property(e => e.EMailAddress)
                .HasMaxLength(255)
                .HasColumnName("E-mail address");
            entity.Property(e => e.Fax).HasMaxLength(255);
            entity.Property(e => e.MobilePhone)
                .HasMaxLength(255)
                .HasColumnName("Mobile phone");
            entity.Property(e => e.PostCode)
                .HasMaxLength(255)
                .HasColumnName("Post Code");
            entity.Property(e => e.SalesAnalysis)
                .HasMaxLength(255)
                .HasColumnName("Sales Analysis");
            entity.Property(e => e.Source).HasMaxLength(255);
            entity.Property(e => e.Telephone).HasMaxLength(255);
            entity.Property(e => e.Town).HasMaxLength(255);
            entity.Property(e => e.UserIdEntered)
                .HasMaxLength(255)
                .HasColumnName("User ID Entered");
            entity.Property(e => e.UserIdLastEdited)
                .HasMaxLength(255)
                .HasColumnName("User ID Last Edited");
            entity.Property(e => e.VatRegistrationCode)
                .HasMaxLength(255)
                .HasColumnName("VAT Registration Code");
            entity.Property(e => e.VatStatus)
                .HasMaxLength(255)
                .HasColumnName("VAT Status");
        });

        modelBuilder.Entity<TmpBrpAccountsVendor>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpBrpAccountsVendors");

            entity.Property(e => e.Address).HasMaxLength(255);
            entity.Property(e => e.Country).HasMaxLength(255);
            entity.Property(e => e.CountryCode)
                .HasMaxLength(255)
                .HasColumnName("Country Code");
            entity.Property(e => e.County).HasMaxLength(255);
            entity.Property(e => e.CurrencyCode)
                .HasMaxLength(255)
                .HasColumnName("Currency Code");
            entity.Property(e => e.DateOfLastInvoice).HasColumnName("Date of Last Invoice");
            entity.Property(e => e.EMailAddress)
                .HasMaxLength(255)
                .HasColumnName("E-mail Address");
            entity.Property(e => e.Fax).HasMaxLength(255);
            entity.Property(e => e.Mobile).HasMaxLength(255);
            entity.Property(e => e.Phone).HasMaxLength(255);
            entity.Property(e => e.PostCode)
                .HasMaxLength(255)
                .HasColumnName("Post Code");
            entity.Property(e => e.SortKey)
                .HasMaxLength(255)
                .HasColumnName("Sort Key");
            entity.Property(e => e.SupplierCode)
                .HasMaxLength(255)
                .HasColumnName("Supplier Code");
            entity.Property(e => e.SupplierName)
                .HasMaxLength(255)
                .HasColumnName("Supplier Name");
            entity.Property(e => e.Town).HasMaxLength(255);
            entity.Property(e => e.UserSort1)
                .HasMaxLength(255)
                .HasColumnName("User Sort 1");
        });

        modelBuilder.Entity<TmpBrpAccountsVendorAddress>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpBrpAccountsVendorAddresses");

            entity.Property(e => e.Address).HasMaxLength(255);
            entity.Property(e => e.AddressNumber).HasColumnName("Address Number");
            entity.Property(e => e.Country).HasMaxLength(255);
            entity.Property(e => e.County).HasMaxLength(255);
            entity.Property(e => e.DefaultDeliveryAddress).HasColumnName("Default Delivery Address");
            entity.Property(e => e.DefaultInvoiceAddress).HasColumnName("Default Invoice Address");
            entity.Property(e => e.DefaultRemittanceAddress).HasColumnName("Default Remittance Address");
            entity.Property(e => e.DefaultStatementAddress).HasColumnName("Default Statement Address");
            entity.Property(e => e.EMailAddress)
                .HasMaxLength(255)
                .HasColumnName("E-mail Address");
            entity.Property(e => e.Fax).HasMaxLength(255);
            entity.Property(e => e.PostCode)
                .HasMaxLength(255)
                .HasColumnName("Post code");
            entity.Property(e => e.PurchaseAnalysis)
                .HasMaxLength(255)
                .HasColumnName("Purchase Analysis");
            entity.Property(e => e.Source).HasMaxLength(255);
            entity.Property(e => e.SupplierCode)
                .HasMaxLength(255)
                .HasColumnName("Supplier Code");
            entity.Property(e => e.Telephone).HasMaxLength(255);
            entity.Property(e => e.Town).HasMaxLength(255);
        });

        modelBuilder.Entity<TmpBrpBarcodeRegister20170721>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpBrpBarcodeRegister20170721");

            entity.Property(e => e.Bc)
                .HasMaxLength(255)
                .HasColumnName("BC#");
            entity.Property(e => e.Comments).HasMaxLength(255);
            entity.Property(e => e.Conflict)
                .HasMaxLength(4)
                .HasColumnName("Conflict?");
            entity.Property(e => e.Cost).HasColumnType("money");
            entity.Property(e => e.DueBack)
                .HasColumnType("datetime")
                .HasColumnName("Due Back");
            entity.Property(e => e.Engraved)
                .HasMaxLength(255)
                .HasColumnName("Engraved?");
            entity.Property(e => e.FarCategory)
                .HasMaxLength(255)
                .HasColumnName("FAR Category");
            entity.Property(e => e.ForSale)
                .HasMaxLength(255)
                .HasColumnName("For Sale");
            entity.Property(e => e.HireTrackDescription)
                .HasMaxLength(255)
                .HasColumnName("HireTrack Description");
            entity.Property(e => e.Inv)
                .HasMaxLength(255)
                .HasColumnName("INV#");
            entity.Property(e => e.Make).HasMaxLength(255);
            entity.Property(e => e.Model).HasMaxLength(255);
            entity.Property(e => e.Notes).HasMaxLength(255);
            entity.Property(e => e.Ordered).HasColumnType("datetime");
            entity.Property(e => e.Po)
                .HasMaxLength(5)
                .HasColumnName("PO#");
            entity.Property(e => e.Recieved).HasColumnType("datetime");
            entity.Property(e => e.ScWO).HasColumnName("SC W/O?");
            entity.Property(e => e.Serial)
                .HasMaxLength(255)
                .HasColumnName("Serial#");
            entity.Property(e => e.Sold).HasColumnType("datetime");
            entity.Property(e => e.Supplier).HasMaxLength(255);
            entity.Property(e => e.Transfer).HasMaxLength(255);
            entity.Property(e => e.WO).HasColumnName("W/O?");
            entity.Property(e => e.WODate)
                .HasColumnType("datetime")
                .HasColumnName("W/O Date");
            entity.Property(e => e._13Sc)
                .HasMaxLength(255)
                .HasColumnName("13 SC");
            entity.Property(e => e._14Sc)
                .HasMaxLength(255)
                .HasColumnName("14 SC");
            entity.Property(e => e._15Sc)
                .HasMaxLength(255)
                .HasColumnName("15 SC");
            entity.Property(e => e._16Sc)
                .HasMaxLength(255)
                .HasColumnName("16 SC");
            entity.Property(e => e._17Sc)
                .HasMaxLength(10)
                .HasColumnName("17 SC");
        });

        modelBuilder.Entity<TmpBrpBarcodeRegisterFixedAssets20170214>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpBrpBarcodeRegisterFixedAssets20170214");

            entity.Property(e => e.Bc)
                .HasMaxLength(255)
                .HasColumnName("BC#");
            entity.Property(e => e.FarCategory)
                .HasMaxLength(255)
                .HasColumnName("FAR Category");
            entity.Property(e => e.HireTrackDescription)
                .HasMaxLength(255)
                .HasColumnName("HireTrack Description");
            entity.Property(e => e.Inv)
                .HasMaxLength(255)
                .HasColumnName("INV#");
            entity.Property(e => e.Make).HasMaxLength(255);
            entity.Property(e => e.Model).HasMaxLength(255);
            entity.Property(e => e.Notes).HasMaxLength(255);
            entity.Property(e => e.OpsCategory)
                .HasMaxLength(255)
                .HasColumnName("Ops Category");
            entity.Property(e => e.Ordered).HasColumnType("datetime");
            entity.Property(e => e.Po)
                .HasMaxLength(255)
                .HasColumnName("PO#");
            entity.Property(e => e.Recieved).HasColumnType("datetime");
            entity.Property(e => e.ScWO).HasColumnName("SC W/O?");
            entity.Property(e => e.Serial)
                .HasMaxLength(255)
                .HasColumnName("Serial#");
            entity.Property(e => e.Sold).HasMaxLength(255);
            entity.Property(e => e.Supplier).HasMaxLength(255);
            entity.Property(e => e.WO).HasColumnName("W/O?");
            entity.Property(e => e.WODate)
                .HasMaxLength(255)
                .HasColumnName("W/O Date");
            entity.Property(e => e._13Sc)
                .HasMaxLength(255)
                .HasColumnName("13 SC");
            entity.Property(e => e._14Sc)
                .HasMaxLength(255)
                .HasColumnName("14 SC");
            entity.Property(e => e._15Sc)
                .HasMaxLength(255)
                .HasColumnName("15 SC");
            entity.Property(e => e._16Sc)
                .HasMaxLength(255)
                .HasColumnName("16 SC");
            entity.Property(e => e._17Sc)
                .HasMaxLength(255)
                .HasColumnName("17 SC");
        });

        modelBuilder.Entity<TmpBrpBarcodeRegisterFixedAssets20170314>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpBrpBarcodeRegisterFixedAssets20170314");

            entity.Property(e => e.Bc)
                .HasMaxLength(255)
                .HasColumnName("BC#");
            entity.Property(e => e.Cost).HasColumnType("money");
            entity.Property(e => e.FarCategory)
                .HasMaxLength(255)
                .HasColumnName("FAR Category");
            entity.Property(e => e.HireTrackDescription)
                .HasMaxLength(255)
                .HasColumnName("HireTrack Description");
            entity.Property(e => e.Inv)
                .HasMaxLength(255)
                .HasColumnName("INV#");
            entity.Property(e => e.Make).HasMaxLength(255);
            entity.Property(e => e.Model).HasMaxLength(255);
            entity.Property(e => e.Notes).HasMaxLength(255);
            entity.Property(e => e.OpsCategory)
                .HasMaxLength(255)
                .HasColumnName("Ops Category");
            entity.Property(e => e.Ordered).HasColumnType("datetime");
            entity.Property(e => e.Po)
                .HasMaxLength(255)
                .HasColumnName("PO#");
            entity.Property(e => e.Recieved).HasColumnType("datetime");
            entity.Property(e => e.ScWO).HasColumnName("SC W/O?");
            entity.Property(e => e.Serial)
                .HasMaxLength(255)
                .HasColumnName("Serial#");
            entity.Property(e => e.Sold).HasMaxLength(255);
            entity.Property(e => e.Supplier).HasMaxLength(255);
            entity.Property(e => e.WO).HasColumnName("W/O?");
            entity.Property(e => e.WriteOffDate)
                .HasMaxLength(255)
                .HasColumnName("Write Off Date");
            entity.Property(e => e._13Sc)
                .HasMaxLength(255)
                .HasColumnName("13 SC");
            entity.Property(e => e._14Sc)
                .HasMaxLength(255)
                .HasColumnName("14 SC");
            entity.Property(e => e._15Sc)
                .HasMaxLength(255)
                .HasColumnName("15 SC");
            entity.Property(e => e._16Sc)
                .HasMaxLength(255)
                .HasColumnName("16 SC");
            entity.Property(e => e._17Sc)
                .HasMaxLength(255)
                .HasColumnName("17 SC");
        });

        modelBuilder.Entity<TmpBrpBarcodeRegisterFixedAssets20170329>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpBrpBarcodeRegisterFixedAssets20170329");

            entity.Property(e => e.Bc)
                .HasMaxLength(255)
                .HasColumnName("BC#");
            entity.Property(e => e.FarCategory)
                .HasMaxLength(255)
                .HasColumnName("FAR Category");
            entity.Property(e => e.HireTrackDescription)
                .HasMaxLength(255)
                .HasColumnName("HireTrack Description");
            entity.Property(e => e.Inv)
                .HasMaxLength(255)
                .HasColumnName("INV#");
            entity.Property(e => e.Make).HasMaxLength(255);
            entity.Property(e => e.Model).HasMaxLength(255);
            entity.Property(e => e.ScWO).HasColumnName("SC W/O?");
            entity.Property(e => e.Serial)
                .HasMaxLength(255)
                .HasColumnName("Serial#");
            entity.Property(e => e.Sold).HasMaxLength(255);
            entity.Property(e => e.WO).HasColumnName("W/O?");
            entity.Property(e => e.WriteOffDate)
                .HasMaxLength(255)
                .HasColumnName("Write Off Date");
            entity.Property(e => e._13Sc)
                .HasMaxLength(255)
                .HasColumnName("13 SC");
            entity.Property(e => e._14Sc)
                .HasMaxLength(255)
                .HasColumnName("14 SC");
            entity.Property(e => e._15Sc)
                .HasMaxLength(255)
                .HasColumnName("15 SC");
            entity.Property(e => e._16Sc)
                .HasMaxLength(255)
                .HasColumnName("16 SC");
            entity.Property(e => e._17Sc)
                .HasMaxLength(255)
                .HasColumnName("17 SC");
        });

        modelBuilder.Entity<TmpBrpNotificationRecips20130911>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpBrpNotificationRecips20130911");

            entity.Property(e => e.Commodity).HasColumnName("commodity");
            entity.Property(e => e.Recipients).HasColumnName("recipients");
            entity.Property(e => e.Warehouse).HasColumnName("warehouse");
        });

        modelBuilder.Entity<TmpBrpPurchasingAccountsImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpBrpPurchasingAccountsImport");

            entity.Property(e => e.AcctCd)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.AcctDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpBrpUpdateExtensionList>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpBrpUpdateExtensionList");

            entity.Property(e => e.Email)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.Extension)
                .IsUnicode(false)
                .HasColumnName("extension");
            entity.Property(e => e.Mobile)
                .IsUnicode(false)
                .HasColumnName("mobile");
            entity.Property(e => e.Username)
                .IsUnicode(false)
                .HasColumnName("username");
        });

        modelBuilder.Entity<TmpBrpcrewRates20220430>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpBRPCrewRates20220430");

            entity.Property(e => e.Empno)
                .HasMaxLength(255)
                .HasColumnName("empno");
            entity.Property(e => e.Firstname)
                .HasMaxLength(255)
                .HasColumnName("firstname");
            entity.Property(e => e.Jobtype)
                .HasMaxLength(255)
                .HasColumnName("jobtype");
            entity.Property(e => e.Lastname)
                .HasMaxLength(255)
                .HasColumnName("lastname");
        });

        modelBuilder.Entity<TmpBrptrainingMatrixImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpBRPTrainingMatrixImport");

            entity.Property(e => e.Staff)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TheDate)
                .HasColumnType("datetime")
                .HasColumnName("theDate");
        });

        modelBuilder.Entity<TmpCabinetComponentTestMeasurementBulkSave>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpCabinetComponentTestMeasurementBulkSave");

            entity.Property(e => e.FrequencyVectorId).HasColumnName("FrequencyVectorID");
            entity.Property(e => e.ResultCurveFakeId).HasColumnName("ResultCurveFakeID");
            entity.Property(e => e.TestGuid).HasColumnName("TestGUID");
            entity.Property(e => e.UniqueNo).HasColumnName("unique_no");
        });

        modelBuilder.Entity<TmpCableTestPath>(entity =>
        {
            entity.HasKey(e => e.Path);

            entity.ToTable("tmpCableTestPaths");

            entity.HasIndex(e => e.SequenceNumber, "UC_tmpCableTestPaths_SequenceNumber").IsUnique();

            entity.Property(e => e.Path).HasMaxLength(255);
            entity.Property(e => e.AdditionalInformationRequested).HasColumnName("additional_information_requested");
            entity.Property(e => e.Analysis).HasColumnName("analysis");
            entity.Property(e => e.AssessmentOfMostLikelyMatch).HasColumnName("assessment_of_most_likely_match");
            entity.Property(e => e.ConfidenceLevel).HasColumnName("confidence_level");
            entity.Property(e => e.FolderGuessedPartno)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FolderGuessedPartno2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GuessedPartno)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HypotheticalDescription).HasColumnName("hypothetical_description");
            entity.Property(e => e.MostLikelyMatch).HasColumnName("most_likely_match");
            entity.Property(e => e.Testers)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpCableTestPathsAutoSearchResult>(entity =>
        {
            entity.HasKey(e => new { e.Path, e.Partno });

            entity.ToTable("tmpCableTestPathsAutoSearchResults");

            entity.Property(e => e.Path).HasMaxLength(255);
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Airank).HasColumnName("AIRank");
            entity.Property(e => e.Score).HasColumnName("score");

            entity.HasOne(d => d.PartnoNavigation).WithMany(p => p.TmpCableTestPathsAutoSearchResults)
                .HasForeignKey(d => d.Partno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tmpCableTestPathsAutoSearchParts_inpart");
        });

        modelBuilder.Entity<TmpCableTestPathsPartsMapping>(entity =>
        {
            entity.HasKey(e => e.Path);

            entity.ToTable("tmpCableTestPathsPartsMapping");

            entity.Property(e => e.Path).HasMaxLength(255);
            entity.Property(e => e.CheckedBy)
                .HasMaxLength(128)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("checkedBy");
            entity.Property(e => e.CheckedDate)
                .HasDefaultValueSql("(sysdatetimeoffset())")
                .HasColumnName("checkedDate");
            entity.Property(e => e.MappedPartno)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("notes");
        });

        modelBuilder.Entity<TmpCableTestPathsPartsView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("tmpCableTestPathsParts_View");

            entity.Property(e => e.AdditionalInformationRequested).HasColumnName("additional_information_requested");
            entity.Property(e => e.Analysis).HasColumnName("analysis");
            entity.Property(e => e.AssessmentOfMostLikelyMatch).HasColumnName("assessment_of_most_likely_match");
            entity.Property(e => e.ConfidenceLevel).HasColumnName("confidence_level");
            entity.Property(e => e.FolderGuessedPartno)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FolderGuessedPartno2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GuessedPartno)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HypotheticalDescription).HasColumnName("hypothetical_description");
            entity.Property(e => e.MostLikelyMatch).HasColumnName("most_likely_match");
            entity.Property(e => e.Path).HasMaxLength(255);
            entity.Property(e => e.Testers)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpCalFrequencyVectorValue>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpCalFrequencyVectorValues");

            entity.Property(e => e.HiFftbinIndex).HasColumnName("HiFFTBinIndex");
            entity.Property(e => e.LoFftbinIndex).HasColumnName("LoFFTBinIndex");
        });

        modelBuilder.Entity<TmpCheeseBarcodes20200214>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpCheeseBarcodes20200214");

            entity.Property(e => e.Inviid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("INVIID");
            entity.Property(e => e.Invseriid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("INVSERIID");
            entity.Property(e => e.Serialnum)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SERIALNUM");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SKU");
        });

        modelBuilder.Entity<TmpCheesePartMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpCheesePartMapping");

            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Sku)
                .HasMaxLength(255)
                .HasColumnName("SKU");
        });

        modelBuilder.Entity<TmpCheeseParts20191120>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpCheeseParts20191120");

            entity.Property(e => e.AdjTotalValue).HasColumnName("Adj_Total_Value");
            entity.Property(e => e.AdjValue).HasColumnName("Adj_Value");
            entity.Property(e => e.AdjValueXStock).HasColumnName("AdjValue_x_Stock");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Manufacturer)
                .HasMaxLength(255)
                .HasColumnName("MANUFACTURER");
            entity.Property(e => e.Model)
                .HasMaxLength(255)
                .HasColumnName("MODEL");
            entity.Property(e => e.Sitename)
                .HasMaxLength(255)
                .HasColumnName("SITENAME");
            entity.Property(e => e.Sku).HasColumnName("SKU");
            entity.Property(e => e.Stock).HasColumnName("STOCK");
            entity.Property(e => e.Updated)
                .HasMaxLength(255)
                .HasColumnName("updated");
        });

        modelBuilder.Entity<TmpCheeseParts20191120b>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpCheeseParts20191120b");

            entity.Property(e => e.AdjTotalValue).HasColumnName("Adj_Total_Value");
            entity.Property(e => e.AdjValue).HasColumnName("Adj_Value");
            entity.Property(e => e.AdjValueXStock).HasColumnName("AdjValue_x_Stock");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Manufacturer)
                .HasMaxLength(255)
                .HasColumnName("MANUFACTURER");
            entity.Property(e => e.Model)
                .HasMaxLength(255)
                .HasColumnName("MODEL");
            entity.Property(e => e.Sitename)
                .HasMaxLength(255)
                .HasColumnName("SITENAME");
            entity.Property(e => e.Sku)
                .HasMaxLength(255)
                .HasColumnName("SKU");
            entity.Property(e => e.Stock).HasColumnName("STOCK");
            entity.Property(e => e.Updated)
                .HasMaxLength(255)
                .HasColumnName("updated");
        });

        modelBuilder.Entity<TmpClairSolutionsProject>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpClairSolutionsProjects");

            entity.Property(e => e.Acctexec).HasColumnName("acctexec");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Wh).HasColumnName("wh");
        });

        modelBuilder.Entity<TmpClairSolutionsRfiaccount>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpClairSolutionsRFIAccounts");

            entity.Property(e => e.Acctcd).HasColumnName("acctcd");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.State).HasColumnName("state");
        });

        modelBuilder.Entity<TmpClairTourValueUpdates20170127>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpClairTourValueUpdates20170127");

            entity.Property(e => e.Partno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Value).HasColumnName("value");
        });

        modelBuilder.Entity<TmpCohesionInversion>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpCohesionInversions");

            entity.Property(e => e.Cabinet)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Component)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Configuration)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CurrentWavFilePath)
                .HasMaxLength(260)
                .IsUnicode(false);
            entity.Property(e => e.Description)
                .HasMaxLength(260)
                .IsUnicode(false);
            entity.Property(e => e.FrequencyVectorId).HasColumnName("FrequencyVectorID");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.PolarityWavFilePath)
                .HasMaxLength(260)
                .IsUnicode(false);
            entity.Property(e => e.ResultCurveId).HasColumnName("ResultCurveID");
            entity.Property(e => e.StackTestId).HasColumnName("StackTestID");
            entity.Property(e => e.Test)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VoltageWavFilePath)
                .HasMaxLength(260)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpConsoleTransactionsByShopin2023>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpConsoleTransactionsByShopin2023");

            entity.Property(e => e.Partno).HasColumnName("partno");
        });

        modelBuilder.Entity<TmpCorrectionCurveDataValue>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpCorrectionCurveDataValues");

            entity.Property(e => e.CurveId).HasColumnName("CurveID");
        });

        modelBuilder.Entity<TmpCorrectionCurveMetaDatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpCorrectionCurveMetaData");

            entity.Property(e => e.Barcode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BreakInCurrentCorrectionIrid).HasColumnName("BreakInCurrentCorrectionIRID");
            entity.Property(e => e.BreakInVoltageCorrectionIrid).HasColumnName("BreakInVoltageCorrectionIRID");
        });

        modelBuilder.Entity<TmpCountryCodeOrg>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpCountryCodeOrg");

            entity.Property(e => e.AreaKm2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("AreaKM2");
            entity.Property(e => e.CountryCode)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CountryName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CountryPopulation)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Gdpusd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GDPUSD");
            entity.Property(e => e.Isocodes)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ISOCodes");
        });

        modelBuilder.Entity<TmpCrawledPhotoFiles20250328>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpCrawledPhotoFiles_20250328");

            entity.Property(e => e.FileName).HasColumnName("fileName");
            entity.Property(e => e.FileStorageGuid).HasColumnName("fileStorageGuid");
        });

        modelBuilder.Entity<TmpCrewTrainingImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpCrewTrainingImport");

            entity.Property(e => e.Employee).HasColumnName("EMPLOYEE #");
            entity.Property(e => e.R10803LAcousticsK1PracticalWorkshop).HasColumnName("R108-03 L-Acoustics K1 Practical Workshop ");
            entity.Property(e => e.R10805LAcousticsK2PracticalWorkshop).HasColumnName("R108-05 L-Acoustics K2 Practical Workshop");
            entity.Property(e => e.R10807LAcousticsKaraPracticalWorkshop).HasColumnName("R108-07 L-Acoustics Kara Practical Workshop");
            entity.Property(e => e.R10809LAcousitcsKivaIiPracticalWorkshop).HasColumnName("R108-09 L-Acousitcs Kiva II Practical Workshop");
            entity.Property(e => e.R10817LAcousticsLIsa).HasColumnName("R108-17 L-Acoustics L-ISA");
            entity.Property(e => e.R10819LAcousticsSoundVision).HasColumnName("R108-19 L-Acoustics Sound Vision");
            entity.Property(e => e.R10820LAcousticsDrive).HasColumnName("R108-20 L-Acoustics Drive");
            entity.Property(e => e.R1150201ShureOlderAnalogPsm1000).HasColumnName("R115-02-01 Shure Older Analog PSM1000");
            entity.Property(e => e.R11502ShureAxient).HasColumnName("R115-02 Shure Axient");
            entity.Property(e => e.R11503RfAdvanced).HasColumnName("R115-03 RF Advanced");
            entity.Property(e => e.R11504WisycomEcosystem).HasColumnName("R115-04 Wisycom Ecosystem");
            entity.Property(e => e.R11505RfOverFiber).HasColumnName("R115-05 RF Over Fiber");
            entity.Property(e => e.R11506SennheiserRf).HasColumnName("R115-06 Sennheiser RF");
            entity.Property(e => e.R11602ClearComFreeSpeak).HasColumnName("R116-02 Clear-Com FreeSpeak");
            entity.Property(e => e.R11606RiedelArtist).HasColumnName("R116-06 Riedel Artist");
            entity.Property(e => e.R11607RiedelBolero).HasColumnName("R116-07 Riedel Bolero");
            entity.Property(e => e.R11903ConsolesYamahaRivage).HasColumnName("R119-03 Consoles Yamaha Rivage");
            entity.Property(e => e.R12001ConsolesDigicoSdSeries).HasColumnName("R120-01 Consoles Digico SD Series");
            entity.Property(e => e.R12002ConsolesDigicoSdQ).HasColumnName("R120-02 Consoles Digico SD Q");
            entity.Property(e => e.R12102ConsolesAvidS6l).HasColumnName("R121-02 Consoles Avid S6L");
            entity.Property(e => e.R12201ConsolesSslSeries).HasColumnName("R122-01 Consoles SSL Series");
            entity.Property(e => e.R12301ConsolesMidasProSeries).HasColumnName("R123-01 Consoles Midas Pro Series");
            entity.Property(e => e.R12701DBArrayCalc).HasColumnName("R127-01 d&b Array Calc");
            entity.Property(e => e.R12702DBR1).HasColumnName("R127-02 d&b R1");
            entity.Property(e => e.R12715DBSlSeries).HasColumnName("R127-15 d&b SL-Series");
            entity.Property(e => e.R12716DBJVSeries).HasColumnName("R127-16 d&b J-V Series");
            entity.Property(e => e.R12801AdamsonBlueprint).HasColumnName("R128-01 Adamson Blueprint");
            entity.Property(e => e.R12803AdamsonRiggingE15E12).HasColumnName("R128-03 Adamson Rigging (E15 & E12)");
            entity.Property(e => e.R12804AdamsonRiggingS10).HasColumnName("R128-04 Adamson Rigging (S10)");
            entity.Property(e => e.R12901ConsolesAllenHeath).HasColumnName("R129-01 Consoles Allen Heath");
            entity.Property(e => e.R13001MeyerPantherSeries).HasColumnName("R130-01 Meyer Panther Series");
            entity.Property(e => e.R13003MeyerMapp).HasColumnName("R130-03 Meyer MAPP");
            entity.Property(e => e.YourEMail).HasColumnName("Your e-mail");
            entity.Property(e => e.YourFullName).HasColumnName("Your Full Name");
        });

        modelBuilder.Entity<TmpCustomerToMerge>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TmpCustomerToMerge");

            entity.Property(e => e.Custno).HasColumnName("custno");
        });

        modelBuilder.Entity<TmpDaveComptonProjectBillingItems13356808Bid>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpDaveComptonProjectBillingItems13356808BID");

            entity.Property(e => e.BidEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bid_entityno");
            entity.Property(e => e.CrewEmplineNo).HasColumnName("crew_empline_no");
            entity.Property(e => e.CrewEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("crew_entityno");
            entity.Property(e => e.EquipmentEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("equipment_entityno");
            entity.Property(e => e.ExpenseEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("expense_entityno");
            entity.Property(e => e.ExpenseSeqno).HasColumnName("expense_seqno");
            entity.Property(e => e.Itemno).HasColumnName("itemno");
            entity.Property(e => e.R).HasColumnName("r");
        });

        modelBuilder.Entity<TmpDeviceFiles1708391Bm>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpDeviceFiles170839-1-BM");

            entity.Property(e => e.FileName).HasColumnName("fileName");
            entity.Property(e => e.FileStorageGuid).HasColumnName("fileStorageGuid");
        });

        modelBuilder.Entity<TmpEasyJobPartNo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_EasyJob_PartNo");

            entity.Property(e => e.Acctno)
                .HasMaxLength(255)
                .HasColumnName("acctno");
            entity.Property(e => e.Commmodity)
                .HasMaxLength(255)
                .HasColumnName("commmodity");
            entity.Property(e => e.Commodity2)
                .HasMaxLength(255)
                .HasColumnName("commodity2");
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.CurrentPartno)
                .HasMaxLength(255)
                .HasColumnName("current_partno");
            entity.Property(e => e.DepthUom).HasColumnName("depth_uom");
            entity.Property(e => e.EasyjobBarcode)
                .HasMaxLength(255)
                .HasColumnName("EASYJOB_Barcode");
            entity.Property(e => e.EasyjobCaption)
                .HasMaxLength(255)
                .HasColumnName("EASYJOB_Caption");
            entity.Property(e => e.EasyjobCustom1)
                .IsUnicode(false)
                .HasColumnName("EASYJOB_Custom1");
            entity.Property(e => e.EasyjobCustom2)
                .IsUnicode(false)
                .HasColumnName("EASYJOB_Custom2");
            entity.Property(e => e.EasyjobCustom3)
                .IsUnicode(false)
                .HasColumnName("EASYJOB_Custom3");
            entity.Property(e => e.EasyjobCustom4).HasColumnName("EASYJOB_Custom4");
            entity.Property(e => e.EasyjobCustom5).HasColumnName("EASYJOB_Custom5");
            entity.Property(e => e.EasyjobDepth).HasColumnName("EASYJOB_Depth");
            entity.Property(e => e.EasyjobFlightcase).HasColumnName("EASYJOB_Flightcase");
            entity.Property(e => e.EasyjobHeight).HasColumnName("EASYJOB_Height");
            entity.Property(e => e.EasyjobIdStockType).HasColumnName("EASYJOB_IdStockType");
            entity.Property(e => e.EasyjobInventory).HasColumnName("EASYJOB_Inventory");
            entity.Property(e => e.EasyjobInventorySales).HasColumnName("EASYJOB_InventorySales");
            entity.Property(e => e.EasyjobIsRentalStockType).HasColumnName("EASYJOB_IsRentalStockType");
            entity.Property(e => e.EasyjobIsSalesStockType).HasColumnName("EASYJOB_IsSalesStockType");
            entity.Property(e => e.EasyjobLeasePrice2009).HasColumnName("EASYJOB_LeasePrice2009");
            entity.Property(e => e.EasyjobNumber)
                .HasMaxLength(255)
                .HasColumnName("EASYJOB_Number");
            entity.Property(e => e.EasyjobOwnerCaption)
                .HasMaxLength(255)
                .HasColumnName("EASYJOB_OwnerCaption");
            entity.Property(e => e.EasyjobPurchaseprice2009).HasColumnName("EASYJOB_Purchaseprice2009");
            entity.Property(e => e.EasyjobSalesPrice).HasColumnName("EASYJOB_SalesPrice");
            entity.Property(e => e.EasyjobScannerBehaviorFlag).HasColumnName("EASYJOB_ScannerBehaviorFlag");
            entity.Property(e => e.EasyjobStockTypeCategory)
                .HasMaxLength(255)
                .HasColumnName("EASYJOB_StockTypeCategory");
            entity.Property(e => e.EasyjobStorageLocation)
                .HasMaxLength(255)
                .HasColumnName("EASYJOB_StorageLocation");
            entity.Property(e => e.EasyjobWeight).HasColumnName("EASYJOB_Weight");
            entity.Property(e => e.EasyjobWidth).HasColumnName("EASYJOB_Width");
            entity.Property(e => e.Import).HasMaxLength(255);
            entity.Property(e => e.IncostpartTotmatcost4).HasColumnName("incostpart_totmatcost4");
            entity.Property(e => e.LeadSource)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("lead_source");
            entity.Property(e => e.LengthUom).HasColumnName("length_uom");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(255)
                .HasColumnName("locationcd");
            entity.Property(e => e.MaterialDesc)
                .HasMaxLength(255)
                .HasColumnName("material_desc");
            entity.Property(e => e.MaterialSpecs)
                .HasMaxLength(255)
                .HasColumnName("material_specs");
            entity.Property(e => e.NewPartno)
                .HasMaxLength(255)
                .HasColumnName("new_partno");
            entity.Property(e => e.Package)
                .HasMaxLength(255)
                .HasColumnName("package");
            entity.Property(e => e.Partdesc)
                .HasMaxLength(255)
                .HasColumnName("partdesc");
            entity.Property(e => e.Projpercent).HasColumnName("projpercent");
            entity.Property(e => e.Source)
                .HasMaxLength(255)
                .HasColumnName("source");
            entity.Property(e => e.Totmatcost1).HasColumnName("totmatcost1");
            entity.Property(e => e.UpdatedTime).HasColumnType("datetime");
            entity.Property(e => e.UserCreated).HasMaxLength(255);
            entity.Property(e => e.UserUpdated).HasMaxLength(255);
            entity.Property(e => e.WidthUom).HasColumnName("width_uom");
        });

        modelBuilder.Entity<TmpEdsContract>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDS_Contract");

            entity.Property(e => e.Column0)
                .HasColumnType("ntext")
                .HasColumnName("Column 0");
        });

        modelBuilder.Entity<TmpEdsRentalContract>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDS_RentalContract");

            entity.Property(e => e.Column0)
                .IsUnicode(false)
                .HasColumnName("Column 0");
        });

        modelBuilder.Entity<TmpEdsaddInventoryPermissionsAudit>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSAddInventoryPermissionsAudit");

            entity.Property(e => e.Email).HasColumnName("email");
            entity.Property(e => e.Empname).HasColumnName("empname");
            entity.Property(e => e.OwnerEntity).HasColumnName("owner_entity");
            entity.Property(e => e.PermissionEdit).HasColumnName("Permission Edit");
            entity.Property(e => e.UserName).HasColumnName("user_name");
            entity.Property(e => e.WarehouseEntity).HasColumnName("warehouse_entity");
        });

        modelBuilder.Entity<TmpEdsbarcodes20200724>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSBarcodes20200724");

            entity.Property(e => e.Accdepreciationamount)
                .HasMaxLength(255)
                .HasColumnName("ACCDEPRECIATIONAMOUNT");
            entity.Property(e => e.Approved)
                .HasMaxLength(255)
                .HasColumnName("APPROVED");
            entity.Property(e => e.Assetbasereplacementcost).HasColumnName("ASSETBASEREPLACEMENTCOST");
            entity.Property(e => e.Assetcomments)
                .HasMaxLength(255)
                .HasColumnName("ASSETCOMMENTS");
            entity.Property(e => e.Assetid)
                .HasMaxLength(255)
                .HasColumnName("ASSETID");
            entity.Property(e => e.Assetorkitasset)
                .HasMaxLength(255)
                .HasColumnName("ASSETORKITASSET");
            entity.Property(e => e.Assetsitereplacementcost).HasColumnName("ASSETSITEREPLACEMENTCOST");
            entity.Property(e => e.Assetstatus)
                .HasMaxLength(255)
                .HasColumnName("ASSETSTATUS");
            entity.Property(e => e.Assetudf1)
                .HasMaxLength(255)
                .HasColumnName("ASSETUDF1");
            entity.Property(e => e.Available)
                .HasMaxLength(255)
                .HasColumnName("AVAILABLE");
            entity.Property(e => e.Basecost).HasColumnName("BASECOST");
            entity.Property(e => e.Baselastyearrevenue).HasColumnName("BASELASTYEARREVENUE");
            entity.Property(e => e.Baselocation)
                .HasMaxLength(255)
                .HasColumnName("BASELOCATION");
            entity.Property(e => e.Baseltddistributedrevenue).HasColumnName("BASELTDDISTRIBUTEDREVENUE");
            entity.Property(e => e.Baseltdrevenue).HasColumnName("BASELTDREVENUE");
            entity.Property(e => e.Basereplacementcost).HasColumnName("BASEREPLACEMENTCOST");
            entity.Property(e => e.Baseytddistributedrevenue).HasColumnName("BASEYTDDISTRIBUTEDREVENUE");
            entity.Property(e => e.Baseytdrevenue).HasColumnName("BASEYTDREVENUE");
            entity.Property(e => e.Batchnumber)
                .HasMaxLength(255)
                .HasColumnName("BATCHNUMBER");
            entity.Property(e => e.Binnumber)
                .HasMaxLength(255)
                .HasColumnName("BINNUMBER");
            entity.Property(e => e.Categorydescription)
                .HasMaxLength(255)
                .HasColumnName("CATEGORYDESCRIPTION");
            entity.Property(e => e.Comments)
                .HasMaxLength(255)
                .HasColumnName("COMMENTS");
            entity.Property(e => e.Commissiongroup)
                .HasMaxLength(255)
                .HasColumnName("COMMISSIONGROUP");
            entity.Property(e => e.Consigned)
                .HasMaxLength(255)
                .HasColumnName("CONSIGNED");
            entity.Property(e => e.Cost).HasColumnName("COST");
            entity.Property(e => e.Currentlocation)
                .HasMaxLength(255)
                .HasColumnName("CURRENTLOCATION");
            entity.Property(e => e.Customerid)
                .HasMaxLength(255)
                .HasColumnName("CUSTOMERID");
            entity.Property(e => e.Damagedflag)
                .HasMaxLength(255)
                .HasColumnName("DAMAGEDFLAG");
            entity.Property(e => e.Damagedlostcomments)
                .HasMaxLength(255)
                .HasColumnName("DAMAGEDLOSTCOMMENTS");
            entity.Property(e => e.Datereceived)
                .HasColumnType("datetime")
                .HasColumnName("DATERECEIVED");
            entity.Property(e => e.Department)
                .HasMaxLength(255)
                .HasColumnName("DEPARTMENT");
            entity.Property(e => e.Depreciateddate)
                .HasMaxLength(255)
                .HasColumnName("DEPRECIATEDDATE");
            entity.Property(e => e.Depreciationgroup)
                .HasMaxLength(255)
                .HasColumnName("DEPRECIATIONGROUP");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Inviid).HasColumnName("INVIID");
            entity.Property(e => e.Invsubcategoryid)
                .HasMaxLength(255)
                .HasColumnName("INVSUBCATEGORYID");
            entity.Property(e => e.ItemArray).HasMaxLength(255);
            entity.Property(e => e.Itemdescription)
                .HasMaxLength(255)
                .HasColumnName("ITEMDESCRIPTION");
            entity.Property(e => e.Kitdescription)
                .HasMaxLength(255)
                .HasColumnName("KITDESCRIPTION");
            entity.Property(e => e.Lastordercustomer)
                .HasMaxLength(255)
                .HasColumnName("LASTORDERCUSTOMER");
            entity.Property(e => e.Lastorderdescription)
                .HasMaxLength(255)
                .HasColumnName("LASTORDERDESCRIPTION");
            entity.Property(e => e.Lastordersalesperson)
                .HasMaxLength(255)
                .HasColumnName("LASTORDERSALESPERSON");
            entity.Property(e => e.Lastorderused)
                .HasMaxLength(255)
                .HasColumnName("LASTORDERUSED");
            entity.Property(e => e.Lastyearrevenue).HasColumnName("LASTYEARREVENUE");
            entity.Property(e => e.Lastyearservicecost).HasColumnName("LASTYEARSERVICECOST");
            entity.Property(e => e.Life).HasColumnName("LIFE");
            entity.Property(e => e.Locked)
                .HasMaxLength(255)
                .HasColumnName("LOCKED");
            entity.Property(e => e.Lockedto)
                .HasMaxLength(255)
                .HasColumnName("LOCKEDTO");
            entity.Property(e => e.Ltddistributedrevenue).HasColumnName("LTDDISTRIBUTEDREVENUE");
            entity.Property(e => e.Ltdrevenue).HasColumnName("LTDREVENUE");
            entity.Property(e => e.Ltdservicecost).HasColumnName("LTDSERVICECOST");
            entity.Property(e => e.Manufacturer)
                .HasMaxLength(255)
                .HasColumnName("MANUFACTURER");
            entity.Property(e => e.Mfgserialnumber)
                .HasMaxLength(255)
                .HasColumnName("MFGSERIALNUMBER");
            entity.Property(e => e.Model)
                .HasMaxLength(255)
                .HasColumnName("MODEL");
            entity.Property(e => e.Netbookvalue)
                .HasMaxLength(255)
                .HasColumnName("NETBOOKVALUE");
            entity.Property(e => e.Nextserviceat)
                .HasMaxLength(255)
                .HasColumnName("NEXTSERVICEAT");
            entity.Property(e => e.Ownersitename)
                .HasMaxLength(255)
                .HasColumnName("OWNERSITENAME");
            entity.Property(e => e.Partnumber)
                .HasMaxLength(255)
                .HasColumnName("PARTNUMBER");
            entity.Property(e => e.Podate)
                .HasMaxLength(255)
                .HasColumnName("PODATE");
            entity.Property(e => e.Ponumber)
                .HasMaxLength(255)
                .HasColumnName("PONUMBER");
            entity.Property(e => e.Posted)
                .HasMaxLength(255)
                .HasColumnName("POSTED");
            entity.Property(e => e.Profitcentre)
                .HasMaxLength(255)
                .HasColumnName("PROFITCENTRE");
            entity.Property(e => e.Receivedby)
                .HasMaxLength(255)
                .HasColumnName("RECEIVEDBY");
            entity.Property(e => e.Remaininglife).HasColumnName("REMAININGLIFE");
            entity.Property(e => e.Rentaldays).HasColumnName("RENTALDAYS");
            entity.Property(e => e.Reportdescription)
                .HasMaxLength(255)
                .HasColumnName("REPORTDESCRIPTION");
            entity.Property(e => e.Reportgroupid)
                .HasMaxLength(255)
                .HasColumnName("REPORTGROUPID");
            entity.Property(e => e.Retire)
                .HasMaxLength(255)
                .HasColumnName("RETIRE");
            entity.Property(e => e.Retireddate)
                .HasMaxLength(255)
                .HasColumnName("RETIREDDATE");
            entity.Property(e => e.RowError).HasMaxLength(255);
            entity.Property(e => e.RowState).HasMaxLength(255);
            entity.Property(e => e.Salesperson)
                .HasMaxLength(255)
                .HasColumnName("SALESPERSON");
            entity.Property(e => e.Salvagevalue).HasColumnName("SALVAGEVALUE");
            entity.Property(e => e.Secondaryserialnum)
                .HasMaxLength(255)
                .HasColumnName("SECONDARYSERIALNUM");
            entity.Property(e => e.Sellprice)
                .HasColumnType("money")
                .HasColumnName("SELLPRICE");
            entity.Property(e => e.Servicestatus)
                .HasMaxLength(255)
                .HasColumnName("SERVICESTATUS");
            entity.Property(e => e.Shelf)
                .HasMaxLength(255)
                .HasColumnName("SHELF");
            entity.Property(e => e.Siteid)
                .HasMaxLength(255)
                .HasColumnName("SITEID");
            entity.Property(e => e.Sitename)
                .HasMaxLength(255)
                .HasColumnName("SITENAME");
            entity.Property(e => e.Sitereplacementcost).HasColumnName("SITEREPLACEMENTCOST");
            entity.Property(e => e.Sku)
                .HasMaxLength(255)
                .HasColumnName("SKU");
            entity.Property(e => e.Soldprice).HasColumnName("SOLDPRICE");
            entity.Property(e => e.Statusdate)
                .HasColumnType("datetime")
                .HasColumnName("STATUSDATE");
            entity.Property(e => e.Subcategorydescription)
                .HasMaxLength(255)
                .HasColumnName("SUBCATEGORYDESCRIPTION");
            entity.Property(e => e.Table).HasMaxLength(255);
            entity.Property(e => e.Timesrented).HasColumnName("TIMESRENTED");
            entity.Property(e => e.Usefrom)
                .HasMaxLength(255)
                .HasColumnName("USEFROM");
            entity.Property(e => e.Vendorname)
                .HasMaxLength(255)
                .HasColumnName("VENDORNAME");
            entity.Property(e => e.Warning)
                .HasMaxLength(255)
                .HasColumnName("WARNING");
            entity.Property(e => e.Weight).HasColumnName("WEIGHT");
            entity.Property(e => e.Workorderid)
                .HasMaxLength(255)
                .HasColumnName("WORKORDERID");
            entity.Property(e => e.Writeoffglcode)
                .HasMaxLength(255)
                .HasColumnName("WRITEOFFGLCODE");
            entity.Property(e => e.Ytddistributedrevenue).HasColumnName("YTDDISTRIBUTEDREVENUE");
            entity.Property(e => e.Ytdrevenue).HasColumnName("YTDREVENUE");
            entity.Property(e => e.Ytdservicecost).HasColumnName("YTDSERVICECOST");
        });

        modelBuilder.Entity<TmpEdsbarcodesConflicts20201213>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSBarcodes_Conflicts20201213");

            entity.Property(e => e.Additionalassetid).HasColumnName("ADDITIONALASSETID");
            entity.Property(e => e.Area)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("area");
            entity.Property(e => e.Barcode).HasColumnName("barcode");
            entity.Property(e => e.Barcode2).HasColumnName("barcode2");
            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Binnumber).HasColumnName("BINNUMBER");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Canrent).HasColumnName("CANRENT");
            entity.Property(e => e.Cansell).HasColumnName("CANSELL");
            entity.Property(e => e.Consigned).HasColumnName("CONSIGNED");
            entity.Property(e => e.Contractresv).HasColumnName("CONTRACTRESV");
            entity.Property(e => e.Currentlocation).HasColumnName("CURRENTLOCATION");
            entity.Property(e => e.Dateacquired).HasColumnName("DATEACQUIRED");
            entity.Property(e => e.Dateretired).HasColumnName("DATERETIRED");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.Inviid).HasColumnName("INVIID");
            entity.Property(e => e.Invseriid).HasColumnName("INVSERIID");
            entity.Property(e => e.Itemstatus).HasColumnName("ITEMSTATUS");
            entity.Property(e => e.Mfgserialnum).HasColumnName("MFGSERIALNUM");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.Parentpartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("parentpartno");
            entity.Property(e => e.ParentserialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("parentserial_no");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Receipt)
                .HasColumnType("datetime")
                .HasColumnName("receipt");
            entity.Property(e => e.Row)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.Siteiid).HasColumnName("SITEIID");
            entity.Property(e => e.Sku).HasColumnName("SKU");
            entity.Property(e => e.Soldprice).HasColumnName("SOLDPRICE");
            entity.Property(e => e.Statusdate).HasColumnName("STATUSDATE");
            entity.Property(e => e.Timeindept).HasColumnName("TIMEINDEPT");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.WarehouseCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpEdsbarcodesImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSBarcodes_Import");

            entity.Property(e => e.Barcode).HasColumnName("barcode");
            entity.Property(e => e.Barcode2).HasColumnName("barcode2");
            entity.Property(e => e.Canrent).HasColumnName("CANRENT");
            entity.Property(e => e.Cansell).HasColumnName("CANSELL");
            entity.Property(e => e.Consigned).HasColumnName("CONSIGNED");
            entity.Property(e => e.Contractresv).HasColumnName("CONTRACTRESV");
            entity.Property(e => e.Currentlocation).HasColumnName("CURRENTLOCATION");
            entity.Property(e => e.Dateacquired).HasColumnName("DATEACQUIRED");
            entity.Property(e => e.Dateretired).HasColumnName("DATERETIRED");
            entity.Property(e => e.Inviid).HasColumnName("INVIID");
            entity.Property(e => e.Invseriid).HasColumnName("INVSERIID");
            entity.Property(e => e.Itemstatus).HasColumnName("ITEMSTATUS");
            entity.Property(e => e.Mfgserialnum).HasColumnName("MFGSERIALNUM");
            entity.Property(e => e.Siteiid).HasColumnName("SITEIID");
            entity.Property(e => e.Sku).HasColumnName("SKU");
            entity.Property(e => e.Soldprice).HasColumnName("SOLDPRICE");
            entity.Property(e => e.Statusdate).HasColumnName("STATUSDATE");
            entity.Property(e => e.Timeindept).HasColumnName("TIMEINDEPT");
            entity.Property(e => e.WarehouseCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpEdsbarcodesImported20201213>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSBarcodes_Imported20201213");

            entity.Property(e => e.Acctno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("acctno");
            entity.Property(e => e.BarcodeToImport).HasColumnName("barcode_to_import");
            entity.Property(e => e.Batchno)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.Invseriid).HasColumnName("INVSERIID");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.Partno)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Ponumber)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PONumber");
            entity.Property(e => e.Ref4)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("ref5");
            entity.Property(e => e.Row)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.SerialNo).HasColumnName("serial_no");
            entity.Property(e => e.SessionId).HasColumnName("session_id");
            entity.Property(e => e.UdpateTime)
                .HasColumnType("datetime")
                .HasColumnName("udpate_time");
        });

        modelBuilder.Entity<TmpEdsbarcodesToRipOffNotify>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSBarcodesToRipOff_Notify");

            entity.Property(e => e.Acctno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("acctno");
            entity.Property(e => e.BarcodeToImport).HasColumnName("barcode_to_import");
            entity.Property(e => e.Batchno)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.Invseriid).HasColumnName("INVSERIID");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.Partdesc).HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Ponumber)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PONumber");
            entity.Property(e => e.Ref4)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("ref5");
            entity.Property(e => e.Row)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.SerialNo).HasColumnName("serial_no");
            entity.Property(e => e.SessionId).HasColumnName("session_id");
            entity.Property(e => e.UdpateTime)
                .HasColumnType("datetime")
                .HasColumnName("udpate_time");
        });

        modelBuilder.Entity<TmpEdsbarcodesTransfer>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSBarcodes_Transfer");

            entity.Property(e => e.Action).HasColumnName("ACTION");
            entity.Property(e => e.Assetstatus)
                .HasMaxLength(255)
                .HasColumnName("ASSETSTATUS");
            entity.Property(e => e.BarcodeToImport).HasColumnName("barcode_to_import");
            entity.Property(e => e.Comments).HasColumnName("COMMENTS");
            entity.Property(e => e.Conlineiid).HasColumnName("CONLINEIID");
            entity.Property(e => e.Conlineserialiid).HasColumnName("CONLINESERIALIID");
            entity.Property(e => e.Containerid).HasColumnName("CONTAINERID");
            entity.Property(e => e.Contractiid).HasColumnName("CONTRACTIID");
            entity.Property(e => e.Departmentid).HasColumnName("DEPARTMENTID");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.Entityno).HasColumnName("entityno");
            entity.Property(e => e.Inviid).HasColumnName("INVIID");
            entity.Property(e => e.Itemstatus).HasColumnName("ITEMSTATUS");
            entity.Property(e => e.Keeporiginalitemdescription).HasColumnName("KEEPORIGINALITEMDESCRIPTION");
            entity.Property(e => e.Lineno).HasColumnName("LINENO");
            entity.Property(e => e.Linetype).HasColumnName("LINETYPE");
            entity.Property(e => e.Loadingbayid).HasColumnName("LOADINGBAYID");
            entity.Property(e => e.Orderedqty).HasColumnName("ORDEREDQTY");
            entity.Property(e => e.OriginalBarcode).HasColumnName("originalBarcode");
            entity.Property(e => e.Quickturnaroundfor).HasColumnName("QUICKTURNAROUNDFOR");
            entity.Property(e => e.Returnedqty).HasColumnName("RETURNEDQTY");
            entity.Property(e => e.Secondarystatus).HasColumnName("SECONDARYSTATUS");
            entity.Property(e => e.Serialiid).HasColumnName("SERIALIID");
            entity.Property(e => e.Serialnumber).HasColumnName("SERIALNUMBER");
            entity.Property(e => e.Shippedqty).HasColumnName("SHIPPEDQTY");
            entity.Property(e => e.Shippingstatus).HasColumnName("SHIPPINGSTATUS");
            entity.Property(e => e.Sku).HasColumnName("SKU");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Statusdate).HasColumnName("STATUSDATE");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<TmpEdsbarcodesTransferFromClairTourTest>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSBarcodes_Transfer_FromClairTourTest");

            entity.Property(e => e.Action)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("ACTION");
            entity.Property(e => e.Assetstatus)
                .HasMaxLength(255)
                .HasColumnName("ASSETSTATUS");
            entity.Property(e => e.Comments)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("COMMENTS");
            entity.Property(e => e.Conlineiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CONLINEIID");
            entity.Property(e => e.Conlineserialiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CONLINESERIALIID");
            entity.Property(e => e.Containerid).HasColumnName("CONTAINERID");
            entity.Property(e => e.Contractiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CONTRACTIID");
            entity.Property(e => e.Departmentid).HasColumnName("DEPARTMENTID");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.Entityno).HasColumnName("entityno");
            entity.Property(e => e.Inviid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("INVIID");
            entity.Property(e => e.Itemstatus)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("ITEMSTATUS");
            entity.Property(e => e.Keeporiginalitemdescription).HasColumnName("KEEPORIGINALITEMDESCRIPTION");
            entity.Property(e => e.Lineno)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("LINENO");
            entity.Property(e => e.Linetype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("LINETYPE");
            entity.Property(e => e.Loadingbayid).HasColumnName("LOADINGBAYID");
            entity.Property(e => e.Orderedqty)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("ORDEREDQTY");
            entity.Property(e => e.OriginalBarcode).HasColumnName("originalBarcode");
            entity.Property(e => e.Quickturnaroundfor)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("QUICKTURNAROUNDFOR");
            entity.Property(e => e.Returnedqty)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("RETURNEDQTY");
            entity.Property(e => e.RightBarcode).HasColumnName("rightBarcode");
            entity.Property(e => e.Secondarystatus)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SECONDARYSTATUS");
            entity.Property(e => e.Serialiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SERIALIID");
            entity.Property(e => e.Serialnumber).HasColumnName("SERIALNUMBER");
            entity.Property(e => e.Shippedqty)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SHIPPEDQTY");
            entity.Property(e => e.Shippingstatus)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SHIPPINGSTATUS");
            entity.Property(e => e.Sku).HasColumnName("SKU");
            entity.Property(e => e.Status)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("STATUS");
            entity.Property(e => e.Statusdate).HasColumnName("STATUSDATE");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<TmpEdsbcscan>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSBCScans");

            entity.Property(e => e.Barcode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Date).HasColumnName("DATE");
            entity.Property(e => e.Qty)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("qty");
            entity.Property(e => e.Scannedby)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SCANNEDBY");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<TmpEdscateogoriesMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSCateogories_Mapping");

            entity.Property(e => e.Categoryid)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CATEGORYID");
            entity.Property(e => e.Commodity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("commodity");
            entity.Property(e => e.Maingroup)
                .IsUnicode(false)
                .HasColumnName("MAINGROUP");
        });

        modelBuilder.Entity<TmpEdsclairBarcodesRenumbered>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSClairBarcodes_Renumbered");

            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<TmpEdscontractsNestedToContractsImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSContractsNestedToContracts_Import");

            entity.Property(e => e.Accountsgroupiid).HasColumnName("ACCOUNTSGROUPIID");
            entity.Property(e => e.AcctExecEmpno).HasColumnName("acctExecEmpno");
            entity.Property(e => e.Advance).HasColumnName("ADVANCE");
            entity.Property(e => e.Agency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("agency");
            entity.Property(e => e.Applyflatprice).HasColumnName("APPLYFLATPRICE");
            entity.Property(e => e.Applytaxonconsumable).HasColumnName("APPLYTAXONCONSUMABLE");
            entity.Property(e => e.Applytaxondamagewaiver).HasColumnName("APPLYTAXONDAMAGEWAIVER");
            entity.Property(e => e.Applytaxonservicecharge).HasColumnName("APPLYTAXONSERVICECHARGE");
            entity.Property(e => e.Approvalrequired).HasColumnName("APPROVALREQUIRED");
            entity.Property(e => e.Approveddiscountperc).HasColumnName("APPROVEDDISCOUNTPERC");
            entity.Property(e => e.Basecurrencyiid).HasColumnName("BASECURRENCYIID");
            entity.Property(e => e.Bidmarkup)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("bidmarkup");
            entity.Property(e => e.Bidroot).HasColumnName("bidroot");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Billingaddressiid).HasColumnName("BILLINGADDRESSIID");
            entity.Property(e => e.Billingcontactiid).HasColumnName("BILLINGCONTACTIID");
            entity.Property(e => e.Billingcustomeriid).HasColumnName("BILLINGCUSTOMERIID");
            entity.Property(e => e.Billingtermiid).HasColumnName("BILLINGTERMIID");
            entity.Property(e => e.Boothroomno).HasColumnName("BOOTHROOMNO");
            entity.Property(e => e.Burdenpercentage).HasColumnName("BURDENPERCENTAGE");
            entity.Property(e => e.Category).HasColumnName("CATEGORY");
            entity.Property(e => e.ChargebasedDayweekmonthprice).HasColumnName("CHARGEBASED_DAYWEEKMONTHPRICE");
            entity.Property(e => e.Chargeenddate).HasColumnName("CHARGEENDDATE");
            entity.Property(e => e.Chargestartdate).HasColumnName("CHARGESTARTDATE");
            entity.Property(e => e.Cmtaxamount).HasColumnName("CMTAXAMOUNT");
            entity.Property(e => e.Comments).HasColumnName("COMMENTS");
            entity.Property(e => e.Commissiongroup).HasColumnName("COMMISSIONGROUP");
            entity.Property(e => e.Consumablepercent).HasColumnName("CONSUMABLEPERCENT");
            entity.Property(e => e.Consumabletype).HasColumnName("CONSUMABLETYPE");
            entity.Property(e => e.Consumablevalue).HasColumnName("CONSUMABLEVALUE");
            entity.Property(e => e.Contactiid).HasColumnName("CONTACTIID");
            entity.Property(e => e.Contractdescription).HasColumnName("CONTRACTDESCRIPTION");
            entity.Property(e => e.Contractid).HasColumnName("CONTRACTID");
            entity.Property(e => e.Contractiid).HasColumnName("CONTRACTIID");
            entity.Property(e => e.Converteddate).HasColumnName("CONVERTEDDATE");
            entity.Property(e => e.Country)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("country");
            entity.Property(e => e.Createdby).HasColumnName("CREATEDBY");
            entity.Property(e => e.Credithold).HasColumnName("CREDITHOLD");
            entity.Property(e => e.Currency).HasColumnName("currency");
            entity.Property(e => e.Currencyiid).HasColumnName("CURRENCYIID");
            entity.Property(e => e.Custdiscountgroup).HasColumnName("CUSTDISCOUNTGROUP");
            entity.Property(e => e.Custno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("custno");
            entity.Property(e => e.Customerpricegroupid).HasColumnName("CUSTOMERPRICEGROUPID");
            entity.Property(e => e.Customertaxgroup).HasColumnName("CUSTOMERTAXGROUP");
            entity.Property(e => e.Customstatus).HasColumnName("CUSTOMSTATUS");
            entity.Property(e => e.Damagewaiverpercent).HasColumnName("DAMAGEWAIVERPERCENT");
            entity.Property(e => e.Damagewaivertype).HasColumnName("DAMAGEWAIVERTYPE");
            entity.Property(e => e.Damagewaivervalue).HasColumnName("DAMAGEWAIVERVALUE");
            entity.Property(e => e.Datecreated).HasColumnName("DATECREATED");
            entity.Property(e => e.Datevalidtill).HasColumnName("DATEVALIDTILL");
            entity.Property(e => e.Daysinmonth).HasColumnName("DAYSINMONTH");
            entity.Property(e => e.Daysinweek).HasColumnName("DAYSINWEEK");
            entity.Property(e => e.Defaultmainorderinfotosuborder).HasColumnName("DEFAULTMAINORDERINFOTOSUBORDER");
            entity.Property(e => e.Defaultunit).HasColumnName("DEFAULTUNIT");
            entity.Property(e => e.Deliverycharges).HasColumnName("DELIVERYCHARGES");
            entity.Property(e => e.Department).HasColumnName("DEPARTMENT");
            entity.Property(e => e.Deposit).HasColumnName("DEPOSIT");
            entity.Property(e => e.Disclaimer).HasColumnName("DISCLAIMER");
            entity.Property(e => e.Disclaimerid).HasColumnName("DISCLAIMERID");
            entity.Property(e => e.Discountamount).HasColumnName("DISCOUNTAMOUNT");
            entity.Property(e => e.Discounttype).HasColumnName("DISCOUNTTYPE");
            entity.Property(e => e.Dummy1).HasColumnName("DUMMY1");
            entity.Property(e => e.Dwtaxamount).HasColumnName("DWTAXAMOUNT");
            entity.Property(e => e.Employeeiid).HasColumnName("EMPLOYEEIID");
            entity.Property(e => e.Enddate).HasColumnName("ENDDATE");
            entity.Property(e => e.EnddateF).HasColumnName("enddate_f");
            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("engactivecd");
            entity.Property(e => e.EngrEmpno).HasColumnName("engrEmpno");
            entity.Property(e => e.Entitydesc).HasColumnName("entitydesc");
            entity.Property(e => e.Entityno).HasColumnName("entityno");
            entity.Property(e => e.Entitytype)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("entitytype");
            entity.Property(e => e.Evenlociid).HasColumnName("EVENLOCIID");
            entity.Property(e => e.Eventiid).HasColumnName("EVENTIID");
            entity.Property(e => e.Expenses).HasColumnName("EXPENSES");
            entity.Property(e => e.Finactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("finactivecd");
            entity.Property(e => e.Firstinvoiceamount).HasColumnName("FIRSTINVOICEAMOUNT");
            entity.Property(e => e.Flatprice).HasColumnName("FLATPRICE");
            entity.Property(e => e.Freightcharges).HasColumnName("FREIGHTCHARGES");
            entity.Property(e => e.Functioniid).HasColumnName("FUNCTIONIID");
            entity.Property(e => e.Industry)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("industry");
            entity.Property(e => e.Insuranceamount).HasColumnName("INSURANCEAMOUNT");
            entity.Property(e => e.Insurancepercent).HasColumnName("INSURANCEPERCENT");
            entity.Property(e => e.InternalOrg)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("internal_org");
            entity.Property(e => e.Inuseby).HasColumnName("INUSEBY");
            entity.Property(e => e.Isautoreceiveship).HasColumnName("ISAUTORECEIVESHIP");
            entity.Property(e => e.Isforcedclosed).HasColumnName("ISFORCEDCLOSED");
            entity.Property(e => e.Isicsorder).HasColumnName("ISICSORDER");
            entity.Property(e => e.Ismasterbilling).HasColumnName("ISMASTERBILLING");
            entity.Property(e => e.Istaxable).HasColumnName("ISTAXABLE");
            entity.Property(e => e.Isworkorder).HasColumnName("ISWORKORDER");
            entity.Property(e => e.Jobiid).HasColumnName("JOBIID");
            entity.Property(e => e.Laborpricegroupid).HasColumnName("LABORPRICEGROUPID");
            entity.Property(e => e.Languageid).HasColumnName("LANGUAGEID");
            entity.Property(e => e.Lastprinteddate).HasColumnName("LASTPRINTEDDATE");
            entity.Property(e => e.Lastupdated).HasColumnName("LASTUPDATED");
            entity.Property(e => e.Lastupdateddbdate).HasColumnName("LASTUPDATEDDBDATE");
            entity.Property(e => e.Loadindate).HasColumnName("LOADINDATE");
            entity.Property(e => e.Location).HasColumnName("LOCATION");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("locationcd");
            entity.Property(e => e.Lockcount).HasColumnName("LOCKCOUNT");
            entity.Property(e => e.Masterbillingiid).HasColumnName("MASTERBILLINGIID");
            entity.Property(e => e.Miscmargin).HasColumnName("MISCMARGIN");
            entity.Property(e => e.Mop).HasColumnName("MOP");
            entity.Property(e => e.Nextinvoicedate).HasColumnName("NEXTINVOICEDATE");
            entity.Property(e => e.Notificationflag).HasColumnName("NOTIFICATIONFLAG");
            entity.Property(e => e.Opsmgr).HasColumnName("opsmgr");
            entity.Property(e => e.Ordercategory).HasColumnName("ORDERCATEGORY");
            entity.Property(e => e.Orderdiscount).HasColumnName("ORDERDISCOUNT");
            entity.Property(e => e.Ordersubcategory).HasColumnName("ORDERSUBCATEGORY");
            entity.Property(e => e.Ordersubtype).HasColumnName("ORDERSUBTYPE");
            entity.Property(e => e.Overheadrate).HasColumnName("OVERHEADRATE");
            entity.Property(e => e.Parentcontractiid).HasColumnName("PARENTCONTRACTIID");
            entity.Property(e => e.Parententitydesc).HasColumnName("parententitydesc");
            entity.Property(e => e.Parententityno).HasColumnName("parententityno");
            entity.Property(e => e.Payhow).HasColumnName("PAYHOW");
            entity.Property(e => e.Paymenttermsiid).HasColumnName("PAYMENTTERMSIID");
            entity.Property(e => e.Paymethodreference).HasColumnName("PAYMETHODREFERENCE");
            entity.Property(e => e.Paytype).HasColumnName("PAYTYPE");
            entity.Property(e => e.Periodicscheduletype).HasColumnName("PERIODICSCHEDULETYPE");
            entity.Property(e => e.Periodiid).HasColumnName("PERIODIID");
            entity.Property(e => e.Pickupbycustomer).HasColumnName("PICKUPBYCUSTOMER");
            entity.Property(e => e.Pickupdate).HasColumnName("PICKUPDATE");
            entity.Property(e => e.Plactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("plactivecd");
            entity.Property(e => e.Planneriid).HasColumnName("PLANNERIID");
            entity.Property(e => e.Ponumber).HasColumnName("PONUMBER");
            entity.Property(e => e.Preorposttax).HasColumnName("PREORPOSTTAX");
            entity.Property(e => e.Prepdate).HasColumnName("PREPDATE");
            entity.Property(e => e.Pricingiid).HasColumnName("PRICINGIID");
            entity.Property(e => e.Pricingruleiid).HasColumnName("PRICINGRULEIID");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Prob).HasColumnName("prob");
            entity.Property(e => e.Probability).HasColumnName("PROBABILITY");
            entity.Property(e => e.Profitcentre).HasColumnName("PROFITCENTRE");
            entity.Property(e => e.Project).HasColumnName("PROJECT");
            entity.Property(e => e.Propduedate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("propduedate");
            entity.Property(e => e.Proptype)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("proptype");
            entity.Property(e => e.Quoteiid).HasColumnName("QUOTEIID");
            entity.Property(e => e.Readyforoperations).HasColumnName("READYFOROPERATIONS");
            entity.Property(e => e.Readytopack).HasColumnName("readytopack");
            entity.Property(e => e.Rehearsaldate).HasColumnName("REHEARSALDATE");
            entity.Property(e => e.Respempno).HasColumnName("respempno");
            entity.Property(e => e.Returnaddressiid).HasColumnName("RETURNADDRESSIID");
            entity.Property(e => e.Returnboothroomno).HasColumnName("RETURNBOOTHROOMNO");
            entity.Property(e => e.Returnbycustomer).HasColumnName("RETURNBYCUSTOMER");
            entity.Property(e => e.Returncarriertype).HasColumnName("RETURNCARRIERTYPE");
            entity.Property(e => e.Returnconfirmed).HasColumnName("RETURNCONFIRMED");
            entity.Property(e => e.Returncontactiid).HasColumnName("RETURNCONTACTIID");
            entity.Property(e => e.Returncontactname).HasColumnName("RETURNCONTACTNAME");
            entity.Property(e => e.Returndate).HasColumnName("RETURNDATE");
            entity.Property(e => e.Returnlocation).HasColumnName("RETURNLOCATION");
            entity.Property(e => e.Returntrackingno).HasColumnName("RETURNTRACKINGNO");
            entity.Property(e => e.Revision).HasColumnName("REVISION");
            entity.Property(e => e.Revisiondate).HasColumnName("REVISIONDATE");
            entity.Property(e => e.Roundtoid).HasColumnName("ROUNDTOID");
            entity.Property(e => e.Rushcharges).HasColumnName("RUSHCHARGES");
            entity.Property(e => e.Saleorder).HasColumnName("SALEORDER");
            entity.Property(e => e.Salespersoniid).HasColumnName("SALESPERSONIID");
            entity.Property(e => e.Scondiscountedamount).HasColumnName("SCONDISCOUNTEDAMOUNT");
            entity.Property(e => e.Servicechargeonsellitems).HasColumnName("SERVICECHARGEONSELLITEMS");
            entity.Property(e => e.Servicechargepercent).HasColumnName("SERVICECHARGEPERCENT");
            entity.Property(e => e.Servicechargetaxamount).HasColumnName("SERVICECHARGETAXAMOUNT");
            entity.Property(e => e.Servicechargetype).HasColumnName("SERVICECHARGETYPE");
            entity.Property(e => e.Servicechargevalue).HasColumnName("SERVICECHARGEVALUE");
            entity.Property(e => e.Sfactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sfactivecd");
            entity.Property(e => e.Shipcarriertype).HasColumnName("SHIPCARRIERTYPE");
            entity.Property(e => e.Shipdate).HasColumnName("SHIPDATE");
            entity.Property(e => e.Shipno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("shipno");
            entity.Property(e => e.Shippingaddressiid).HasColumnName("SHIPPINGADDRESSIID");
            entity.Property(e => e.Shippingboothroomno).HasColumnName("SHIPPINGBOOTHROOMNO");
            entity.Property(e => e.Shippingcontactname).HasColumnName("SHIPPINGCONTACTNAME");
            entity.Property(e => e.Shippingcustomeriid).HasColumnName("SHIPPINGCUSTOMERIID");
            entity.Property(e => e.Shippinglocation).HasColumnName("SHIPPINGLOCATION");
            entity.Property(e => e.Showenddate).HasColumnName("SHOWENDDATE");
            entity.Property(e => e.Showstartdate).HasColumnName("SHOWSTARTDATE");
            entity.Property(e => e.Signoffstatus).HasColumnName("SIGNOFFSTATUS");
            entity.Property(e => e.Sitecurrencyiid).HasColumnName("SITECURRENCYIID");
            entity.Property(e => e.Siteiid).HasColumnName("SITEIID");
            entity.Property(e => e.Startdate).HasColumnName("STARTDATE");
            entity.Property(e => e.StartdateF).HasColumnName("startdate_f");
            entity.Property(e => e.Stationiid).HasColumnName("STATIONIID");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Stopbillingdate).HasColumnName("STOPBILLINGDATE");
            entity.Property(e => e.Stopbillingflag).HasColumnName("STOPBILLINGFLAG");
            entity.Property(e => e.Strikedate).HasColumnName("STRIKEDATE");
            entity.Property(e => e.Subcontract)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("subcontract");
            entity.Property(e => e.Subno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("subno");
            entity.Property(e => e.Taxcertno).HasColumnName("TAXCERTNO");
            entity.Property(e => e.Taxlabor).HasColumnName("TAXLABOR");
            entity.Property(e => e.Totalitemsamount).HasColumnName("TOTALITEMSAMOUNT");
            entity.Property(e => e.Totalitemsdiscount).HasColumnName("TOTALITEMSDISCOUNT");
            entity.Property(e => e.Totalitemstaxamount).HasColumnName("TOTALITEMSTAXAMOUNT");
            entity.Property(e => e.Totallaboramount).HasColumnName("TOTALLABORAMOUNT");
            entity.Property(e => e.Totallabordiscount).HasColumnName("TOTALLABORDISCOUNT");
            entity.Property(e => e.Totallabortaxamount).HasColumnName("TOTALLABORTAXAMOUNT");
            entity.Property(e => e.Totalorderfulldurationamt).HasColumnName("TOTALORDERFULLDURATIONAMT");
            entity.Property(e => e.Totalorderfulldurationtax).HasColumnName("TOTALORDERFULLDURATIONTAX");
            entity.Property(e => e.Totaltaxamount).HasColumnName("TOTALTAXAMOUNT");
            entity.Property(e => e.Trackingno).HasColumnName("TRACKINGNO");
            entity.Property(e => e.Transactioncurrencyiid).HasColumnName("TRANSACTIONCURRENCYIID");
            entity.Property(e => e.Type).HasColumnName("TYPE");
            entity.Property(e => e.Uccontractdescription).HasColumnName("UCCONTRACTDESCRIPTION");
            entity.Property(e => e.Useeventpricing).HasColumnName("USEEVENTPRICING");
            entity.Property(e => e.Userdefinedstatus).HasColumnName("USERDEFINEDSTATUS");
            entity.Property(e => e.VersionRemarks).HasColumnName("VERSION_REMARKS");
            entity.Property(e => e.Viewfirstinvoice).HasColumnName("VIEWFIRSTINVOICE");
            entity.Property(e => e.Warehousedept).HasColumnName("WAREHOUSEDEPT");
            entity.Property(e => e.Warehousestatus).HasColumnName("WAREHOUSESTATUS");
        });

        modelBuilder.Entity<TmpEdscontractsNestedToContractsImportGreenDay>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSContractsNestedToContracts_Import_GreenDay");

            entity.Property(e => e.Accountsgroupiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("ACCOUNTSGROUPIID");
            entity.Property(e => e.AcctExecEmpno).HasColumnName("acctExecEmpno");
            entity.Property(e => e.Advance)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("ADVANCE");
            entity.Property(e => e.Agency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("agency");
            entity.Property(e => e.Applyflatprice).HasColumnName("APPLYFLATPRICE");
            entity.Property(e => e.Applytaxonconsumable).HasColumnName("APPLYTAXONCONSUMABLE");
            entity.Property(e => e.Applytaxondamagewaiver).HasColumnName("APPLYTAXONDAMAGEWAIVER");
            entity.Property(e => e.Applytaxonservicecharge).HasColumnName("APPLYTAXONSERVICECHARGE");
            entity.Property(e => e.Approvalrequired)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("APPROVALREQUIRED");
            entity.Property(e => e.Approveddiscountperc)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("APPROVEDDISCOUNTPERC");
            entity.Property(e => e.Basecurrencyiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("BASECURRENCYIID");
            entity.Property(e => e.Bidmarkup)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("bidmarkup");
            entity.Property(e => e.Bidroot).HasColumnName("bidroot");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Billingaddressiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("BILLINGADDRESSIID");
            entity.Property(e => e.Billingcontactiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("BILLINGCONTACTIID");
            entity.Property(e => e.Billingcustomeriid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("BILLINGCUSTOMERIID");
            entity.Property(e => e.Billingtermiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("BILLINGTERMIID");
            entity.Property(e => e.Boothroomno).HasColumnName("BOOTHROOMNO");
            entity.Property(e => e.Burdenpercentage)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("BURDENPERCENTAGE");
            entity.Property(e => e.Category)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CATEGORY");
            entity.Property(e => e.ChargebasedDayweekmonthprice).HasColumnName("CHARGEBASED_DAYWEEKMONTHPRICE");
            entity.Property(e => e.Chargeenddate).HasColumnName("CHARGEENDDATE");
            entity.Property(e => e.Chargestartdate).HasColumnName("CHARGESTARTDATE");
            entity.Property(e => e.Cmtaxamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CMTAXAMOUNT");
            entity.Property(e => e.Comments)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("COMMENTS");
            entity.Property(e => e.Commissiongroup).HasColumnName("COMMISSIONGROUP");
            entity.Property(e => e.Consumablepercent)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CONSUMABLEPERCENT");
            entity.Property(e => e.Consumabletype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CONSUMABLETYPE");
            entity.Property(e => e.Consumablevalue)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CONSUMABLEVALUE");
            entity.Property(e => e.Contactiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CONTACTIID");
            entity.Property(e => e.Contractdescription).HasColumnName("CONTRACTDESCRIPTION");
            entity.Property(e => e.Contractid).HasColumnName("CONTRACTID");
            entity.Property(e => e.Contractiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CONTRACTIID");
            entity.Property(e => e.Converteddate).HasColumnName("CONVERTEDDATE");
            entity.Property(e => e.Country)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("country");
            entity.Property(e => e.Createdby)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CREATEDBY");
            entity.Property(e => e.Credithold)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CREDITHOLD");
            entity.Property(e => e.Currency).HasColumnName("currency");
            entity.Property(e => e.Currencyiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CURRENCYIID");
            entity.Property(e => e.Custdiscountgroup).HasColumnName("CUSTDISCOUNTGROUP");
            entity.Property(e => e.Custno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("custno");
            entity.Property(e => e.Customerpricegroupid).HasColumnName("CUSTOMERPRICEGROUPID");
            entity.Property(e => e.Customertaxgroup).HasColumnName("CUSTOMERTAXGROUP");
            entity.Property(e => e.Customstatus)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CUSTOMSTATUS");
            entity.Property(e => e.Damagewaiverpercent)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DAMAGEWAIVERPERCENT");
            entity.Property(e => e.Damagewaivertype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DAMAGEWAIVERTYPE");
            entity.Property(e => e.Damagewaivervalue)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DAMAGEWAIVERVALUE");
            entity.Property(e => e.Datecreated).HasColumnName("DATECREATED");
            entity.Property(e => e.Datevalidtill).HasColumnName("DATEVALIDTILL");
            entity.Property(e => e.Daysinmonth)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DAYSINMONTH");
            entity.Property(e => e.Daysinweek)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DAYSINWEEK");
            entity.Property(e => e.Defaultmainorderinfotosuborder).HasColumnName("DEFAULTMAINORDERINFOTOSUBORDER");
            entity.Property(e => e.Defaultunit)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DEFAULTUNIT");
            entity.Property(e => e.Deliverycharges)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DELIVERYCHARGES");
            entity.Property(e => e.Department).HasColumnName("DEPARTMENT");
            entity.Property(e => e.Deposit)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DEPOSIT");
            entity.Property(e => e.Disclaimer).HasColumnName("DISCLAIMER");
            entity.Property(e => e.Disclaimerid).HasColumnName("DISCLAIMERID");
            entity.Property(e => e.Discountamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DISCOUNTAMOUNT");
            entity.Property(e => e.Discounttype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DISCOUNTTYPE");
            entity.Property(e => e.Dummy1)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DUMMY1");
            entity.Property(e => e.Dwtaxamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DWTAXAMOUNT");
            entity.Property(e => e.Employeeiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("EMPLOYEEIID");
            entity.Property(e => e.Enddate).HasColumnName("ENDDATE");
            entity.Property(e => e.EnddateF).HasColumnName("enddate_f");
            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("engactivecd");
            entity.Property(e => e.EngrEmpno).HasColumnName("engrEmpno");
            entity.Property(e => e.Entitydesc).HasColumnName("entitydesc");
            entity.Property(e => e.Entityno).HasColumnName("entityno");
            entity.Property(e => e.Entitytype)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("entitytype");
            entity.Property(e => e.Evenlociid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("EVENLOCIID");
            entity.Property(e => e.Eventiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("EVENTIID");
            entity.Property(e => e.Expenses)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("EXPENSES");
            entity.Property(e => e.Finactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("finactivecd");
            entity.Property(e => e.Firstinvoiceamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("FIRSTINVOICEAMOUNT");
            entity.Property(e => e.Flatprice)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("FLATPRICE");
            entity.Property(e => e.Freightcharges)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("FREIGHTCHARGES");
            entity.Property(e => e.Functioniid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("FUNCTIONIID");
            entity.Property(e => e.Industry)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("industry");
            entity.Property(e => e.Insuranceamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("INSURANCEAMOUNT");
            entity.Property(e => e.Insurancepercent)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("INSURANCEPERCENT");
            entity.Property(e => e.InternalOrg)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("internal_org");
            entity.Property(e => e.Inuseby).HasColumnName("INUSEBY");
            entity.Property(e => e.Isautoreceiveship).HasColumnName("ISAUTORECEIVESHIP");
            entity.Property(e => e.Isforcedclosed).HasColumnName("ISFORCEDCLOSED");
            entity.Property(e => e.Isicsorder).HasColumnName("ISICSORDER");
            entity.Property(e => e.Ismasterbilling).HasColumnName("ISMASTERBILLING");
            entity.Property(e => e.Istaxable).HasColumnName("ISTAXABLE");
            entity.Property(e => e.Isworkorder).HasColumnName("ISWORKORDER");
            entity.Property(e => e.Jobiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("JOBIID");
            entity.Property(e => e.Laborpricegroupid).HasColumnName("LABORPRICEGROUPID");
            entity.Property(e => e.Languageid).HasColumnName("LANGUAGEID");
            entity.Property(e => e.Lastprinteddate).HasColumnName("LASTPRINTEDDATE");
            entity.Property(e => e.Lastupdated).HasColumnName("LASTUPDATED");
            entity.Property(e => e.Lastupdateddbdate).HasColumnName("LASTUPDATEDDBDATE");
            entity.Property(e => e.Loadindate).HasColumnName("LOADINDATE");
            entity.Property(e => e.Location).HasColumnName("LOCATION");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("locationcd");
            entity.Property(e => e.Lockcount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("LOCKCOUNT");
            entity.Property(e => e.Masterbillingiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("MASTERBILLINGIID");
            entity.Property(e => e.Miscmargin)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("MISCMARGIN");
            entity.Property(e => e.Mop)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("MOP");
            entity.Property(e => e.Nextinvoicedate).HasColumnName("NEXTINVOICEDATE");
            entity.Property(e => e.Notificationflag).HasColumnName("NOTIFICATIONFLAG");
            entity.Property(e => e.Opsmgr).HasColumnName("opsmgr");
            entity.Property(e => e.Ordercategory).HasColumnName("ORDERCATEGORY");
            entity.Property(e => e.Orderdiscount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("ORDERDISCOUNT");
            entity.Property(e => e.Ordersubcategory).HasColumnName("ORDERSUBCATEGORY");
            entity.Property(e => e.Ordersubtype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("ORDERSUBTYPE");
            entity.Property(e => e.Overheadrate)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("OVERHEADRATE");
            entity.Property(e => e.Parentcontractiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PARENTCONTRACTIID");
            entity.Property(e => e.Parententitydesc).HasColumnName("parententitydesc");
            entity.Property(e => e.Parententityno).HasColumnName("parententityno");
            entity.Property(e => e.Payhow)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PAYHOW");
            entity.Property(e => e.Paymenttermsiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PAYMENTTERMSIID");
            entity.Property(e => e.Paymethodreference).HasColumnName("PAYMETHODREFERENCE");
            entity.Property(e => e.Paytype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PAYTYPE");
            entity.Property(e => e.Periodicscheduletype).HasColumnName("PERIODICSCHEDULETYPE");
            entity.Property(e => e.Periodiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PERIODIID");
            entity.Property(e => e.Pickupbycustomer).HasColumnName("PICKUPBYCUSTOMER");
            entity.Property(e => e.Pickupdate).HasColumnName("PICKUPDATE");
            entity.Property(e => e.Plactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("plactivecd");
            entity.Property(e => e.Planneriid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PLANNERIID");
            entity.Property(e => e.Ponumber)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PONUMBER");
            entity.Property(e => e.Preorposttax)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PREORPOSTTAX");
            entity.Property(e => e.Prepdate).HasColumnName("PREPDATE");
            entity.Property(e => e.Pricingiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PRICINGIID");
            entity.Property(e => e.Pricingruleiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PRICINGRULEIID");
            entity.Property(e => e.Priority)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PRIORITY");
            entity.Property(e => e.Prob).HasColumnName("prob");
            entity.Property(e => e.Probability)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PROBABILITY");
            entity.Property(e => e.Profitcentre).HasColumnName("PROFITCENTRE");
            entity.Property(e => e.Project).HasColumnName("PROJECT");
            entity.Property(e => e.Propduedate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("propduedate");
            entity.Property(e => e.Proptype)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("proptype");
            entity.Property(e => e.Quoteiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("QUOTEIID");
            entity.Property(e => e.Readyforoperations).HasColumnName("READYFOROPERATIONS");
            entity.Property(e => e.Readytopack).HasColumnName("readytopack");
            entity.Property(e => e.Rehearsaldate).HasColumnName("REHEARSALDATE");
            entity.Property(e => e.Respempno).HasColumnName("respempno");
            entity.Property(e => e.Returnaddressiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("RETURNADDRESSIID");
            entity.Property(e => e.Returnboothroomno).HasColumnName("RETURNBOOTHROOMNO");
            entity.Property(e => e.Returnbycustomer).HasColumnName("RETURNBYCUSTOMER");
            entity.Property(e => e.Returncarriertype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("RETURNCARRIERTYPE");
            entity.Property(e => e.Returnconfirmed)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("RETURNCONFIRMED");
            entity.Property(e => e.Returncontactiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("RETURNCONTACTIID");
            entity.Property(e => e.Returncontactname).HasColumnName("RETURNCONTACTNAME");
            entity.Property(e => e.Returndate).HasColumnName("RETURNDATE");
            entity.Property(e => e.Returnlocation).HasColumnName("RETURNLOCATION");
            entity.Property(e => e.Returntrackingno).HasColumnName("RETURNTRACKINGNO");
            entity.Property(e => e.Revision)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("REVISION");
            entity.Property(e => e.Revisiondate).HasColumnName("REVISIONDATE");
            entity.Property(e => e.Roundtoid).HasColumnName("ROUNDTOID");
            entity.Property(e => e.Rushcharges)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("RUSHCHARGES");
            entity.Property(e => e.Saleorder)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SALEORDER");
            entity.Property(e => e.Salespersoniid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SALESPERSONIID");
            entity.Property(e => e.Scondiscountedamount).HasColumnName("SCONDISCOUNTEDAMOUNT");
            entity.Property(e => e.Servicechargeonsellitems).HasColumnName("SERVICECHARGEONSELLITEMS");
            entity.Property(e => e.Servicechargepercent)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SERVICECHARGEPERCENT");
            entity.Property(e => e.Servicechargetaxamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SERVICECHARGETAXAMOUNT");
            entity.Property(e => e.Servicechargetype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SERVICECHARGETYPE");
            entity.Property(e => e.Servicechargevalue)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SERVICECHARGEVALUE");
            entity.Property(e => e.Sfactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sfactivecd");
            entity.Property(e => e.Shipcarriertype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SHIPCARRIERTYPE");
            entity.Property(e => e.Shipdate).HasColumnName("SHIPDATE");
            entity.Property(e => e.Shipno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("shipno");
            entity.Property(e => e.Shippingaddressiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SHIPPINGADDRESSIID");
            entity.Property(e => e.Shippingboothroomno).HasColumnName("SHIPPINGBOOTHROOMNO");
            entity.Property(e => e.Shippingcontactname).HasColumnName("SHIPPINGCONTACTNAME");
            entity.Property(e => e.Shippingcustomeriid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SHIPPINGCUSTOMERIID");
            entity.Property(e => e.Shippinglocation).HasColumnName("SHIPPINGLOCATION");
            entity.Property(e => e.Showenddate).HasColumnName("SHOWENDDATE");
            entity.Property(e => e.Showstartdate).HasColumnName("SHOWSTARTDATE");
            entity.Property(e => e.Signoffstatus).HasColumnName("SIGNOFFSTATUS");
            entity.Property(e => e.Sitecurrencyiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SITECURRENCYIID");
            entity.Property(e => e.Siteiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SITEIID");
            entity.Property(e => e.Startdate).HasColumnName("STARTDATE");
            entity.Property(e => e.StartdateF).HasColumnName("startdate_f");
            entity.Property(e => e.Stationiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("STATIONIID");
            entity.Property(e => e.Status)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("STATUS");
            entity.Property(e => e.Stopbillingdate).HasColumnName("STOPBILLINGDATE");
            entity.Property(e => e.Stopbillingflag).HasColumnName("STOPBILLINGFLAG");
            entity.Property(e => e.Strikedate).HasColumnName("STRIKEDATE");
            entity.Property(e => e.Subcontract)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("subcontract");
            entity.Property(e => e.Subno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("subno");
            entity.Property(e => e.Taxcertno).HasColumnName("TAXCERTNO");
            entity.Property(e => e.Taxlabor).HasColumnName("TAXLABOR");
            entity.Property(e => e.Totalitemsamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALITEMSAMOUNT");
            entity.Property(e => e.Totalitemsdiscount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALITEMSDISCOUNT");
            entity.Property(e => e.Totalitemstaxamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALITEMSTAXAMOUNT");
            entity.Property(e => e.Totallaboramount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALLABORAMOUNT");
            entity.Property(e => e.Totallabordiscount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALLABORDISCOUNT");
            entity.Property(e => e.Totallabortaxamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALLABORTAXAMOUNT");
            entity.Property(e => e.Totalorderfulldurationamt)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALORDERFULLDURATIONAMT");
            entity.Property(e => e.Totalorderfulldurationtax)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALORDERFULLDURATIONTAX");
            entity.Property(e => e.Totaltaxamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALTAXAMOUNT");
            entity.Property(e => e.Trackingno).HasColumnName("TRACKINGNO");
            entity.Property(e => e.Transactioncurrencyiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TRANSACTIONCURRENCYIID");
            entity.Property(e => e.Type)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TYPE");
            entity.Property(e => e.Uccontractdescription).HasColumnName("UCCONTRACTDESCRIPTION");
            entity.Property(e => e.Useeventpricing).HasColumnName("USEEVENTPRICING");
            entity.Property(e => e.Userdefinedstatus)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("USERDEFINEDSTATUS");
            entity.Property(e => e.VersionRemarks).HasColumnName("VERSION_REMARKS");
            entity.Property(e => e.Viewfirstinvoice).HasColumnName("VIEWFIRSTINVOICE");
            entity.Property(e => e.Warehousedept)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("WAREHOUSEDEPT");
            entity.Property(e => e.Warehousestatus)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("WAREHOUSESTATUS");
        });

        modelBuilder.Entity<TmpEdscontractsWithEventsAsProjectIdsImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSContractsWithEventsAsProjectIds_Import");

            entity.Property(e => e.Accountsgroupiid).HasColumnName("ACCOUNTSGROUPIID");
            entity.Property(e => e.AcctExecEmpno).HasColumnName("acctExecEmpno");
            entity.Property(e => e.Advance).HasColumnName("ADVANCE");
            entity.Property(e => e.Agency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("agency");
            entity.Property(e => e.Applyflatprice).HasColumnName("APPLYFLATPRICE");
            entity.Property(e => e.Applytaxonconsumable).HasColumnName("APPLYTAXONCONSUMABLE");
            entity.Property(e => e.Applytaxondamagewaiver).HasColumnName("APPLYTAXONDAMAGEWAIVER");
            entity.Property(e => e.Applytaxonservicecharge).HasColumnName("APPLYTAXONSERVICECHARGE");
            entity.Property(e => e.Approvalrequired).HasColumnName("APPROVALREQUIRED");
            entity.Property(e => e.Approveddiscountperc).HasColumnName("APPROVEDDISCOUNTPERC");
            entity.Property(e => e.Basecurrencyiid).HasColumnName("BASECURRENCYIID");
            entity.Property(e => e.Bidmarkup)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("bidmarkup");
            entity.Property(e => e.Bidroot).HasColumnName("bidroot");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Billingaddressiid).HasColumnName("BILLINGADDRESSIID");
            entity.Property(e => e.Billingcontactiid).HasColumnName("BILLINGCONTACTIID");
            entity.Property(e => e.Billingcustomeriid).HasColumnName("BILLINGCUSTOMERIID");
            entity.Property(e => e.Billingtermiid).HasColumnName("BILLINGTERMIID");
            entity.Property(e => e.Boothroomno).HasColumnName("BOOTHROOMNO");
            entity.Property(e => e.Burdenpercentage).HasColumnName("BURDENPERCENTAGE");
            entity.Property(e => e.Category).HasColumnName("CATEGORY");
            entity.Property(e => e.ChargebasedDayweekmonthprice).HasColumnName("CHARGEBASED_DAYWEEKMONTHPRICE");
            entity.Property(e => e.Chargeenddate).HasColumnName("CHARGEENDDATE");
            entity.Property(e => e.Chargestartdate).HasColumnName("CHARGESTARTDATE");
            entity.Property(e => e.Cmtaxamount).HasColumnName("CMTAXAMOUNT");
            entity.Property(e => e.Comments).HasColumnName("COMMENTS");
            entity.Property(e => e.Commissiongroup).HasColumnName("COMMISSIONGROUP");
            entity.Property(e => e.Consumablepercent).HasColumnName("CONSUMABLEPERCENT");
            entity.Property(e => e.Consumabletype).HasColumnName("CONSUMABLETYPE");
            entity.Property(e => e.Consumablevalue).HasColumnName("CONSUMABLEVALUE");
            entity.Property(e => e.Contactiid).HasColumnName("CONTACTIID");
            entity.Property(e => e.Contractdescription).HasColumnName("CONTRACTDESCRIPTION");
            entity.Property(e => e.Contractid).HasColumnName("CONTRACTID");
            entity.Property(e => e.Contractiid).HasColumnName("CONTRACTIID");
            entity.Property(e => e.Converteddate).HasColumnName("CONVERTEDDATE");
            entity.Property(e => e.Country)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("country");
            entity.Property(e => e.Createdby).HasColumnName("CREATEDBY");
            entity.Property(e => e.Credithold).HasColumnName("CREDITHOLD");
            entity.Property(e => e.Currency).HasColumnName("currency");
            entity.Property(e => e.Currencyiid).HasColumnName("CURRENCYIID");
            entity.Property(e => e.Custdiscountgroup).HasColumnName("CUSTDISCOUNTGROUP");
            entity.Property(e => e.Custno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("custno");
            entity.Property(e => e.Customerpricegroupid).HasColumnName("CUSTOMERPRICEGROUPID");
            entity.Property(e => e.Customertaxgroup).HasColumnName("CUSTOMERTAXGROUP");
            entity.Property(e => e.Customstatus).HasColumnName("CUSTOMSTATUS");
            entity.Property(e => e.Damagewaiverpercent).HasColumnName("DAMAGEWAIVERPERCENT");
            entity.Property(e => e.Damagewaivertype).HasColumnName("DAMAGEWAIVERTYPE");
            entity.Property(e => e.Damagewaivervalue).HasColumnName("DAMAGEWAIVERVALUE");
            entity.Property(e => e.Datecreated).HasColumnName("DATECREATED");
            entity.Property(e => e.Datevalidtill).HasColumnName("DATEVALIDTILL");
            entity.Property(e => e.Daysinmonth).HasColumnName("DAYSINMONTH");
            entity.Property(e => e.Daysinweek).HasColumnName("DAYSINWEEK");
            entity.Property(e => e.Defaultmainorderinfotosuborder).HasColumnName("DEFAULTMAINORDERINFOTOSUBORDER");
            entity.Property(e => e.Defaultunit).HasColumnName("DEFAULTUNIT");
            entity.Property(e => e.Deliverycharges).HasColumnName("DELIVERYCHARGES");
            entity.Property(e => e.Department).HasColumnName("DEPARTMENT");
            entity.Property(e => e.Deposit).HasColumnName("DEPOSIT");
            entity.Property(e => e.Disclaimer).HasColumnName("DISCLAIMER");
            entity.Property(e => e.Disclaimerid).HasColumnName("DISCLAIMERID");
            entity.Property(e => e.Discountamount).HasColumnName("DISCOUNTAMOUNT");
            entity.Property(e => e.Discounttype).HasColumnName("DISCOUNTTYPE");
            entity.Property(e => e.Dummy1).HasColumnName("DUMMY1");
            entity.Property(e => e.Dwtaxamount).HasColumnName("DWTAXAMOUNT");
            entity.Property(e => e.Employeeiid).HasColumnName("EMPLOYEEIID");
            entity.Property(e => e.Enddate).HasColumnName("ENDDATE");
            entity.Property(e => e.EnddateF).HasColumnName("enddate_f");
            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("engactivecd");
            entity.Property(e => e.EngrEmpno).HasColumnName("engrEmpno");
            entity.Property(e => e.Entitydesc).HasColumnName("entitydesc");
            entity.Property(e => e.Entityno).HasColumnName("entityno");
            entity.Property(e => e.Entitytype)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("entitytype");
            entity.Property(e => e.Evenlociid).HasColumnName("EVENLOCIID");
            entity.Property(e => e.Eventiid).HasColumnName("EVENTIID");
            entity.Property(e => e.Expenses).HasColumnName("EXPENSES");
            entity.Property(e => e.Finactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("finactivecd");
            entity.Property(e => e.Firstinvoiceamount).HasColumnName("FIRSTINVOICEAMOUNT");
            entity.Property(e => e.Flatprice).HasColumnName("FLATPRICE");
            entity.Property(e => e.Freightcharges).HasColumnName("FREIGHTCHARGES");
            entity.Property(e => e.Functioniid).HasColumnName("FUNCTIONIID");
            entity.Property(e => e.Industry)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("industry");
            entity.Property(e => e.Insuranceamount).HasColumnName("INSURANCEAMOUNT");
            entity.Property(e => e.Insurancepercent).HasColumnName("INSURANCEPERCENT");
            entity.Property(e => e.InternalOrg)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("internal_org");
            entity.Property(e => e.Inuseby).HasColumnName("INUSEBY");
            entity.Property(e => e.Isautoreceiveship).HasColumnName("ISAUTORECEIVESHIP");
            entity.Property(e => e.Isforcedclosed).HasColumnName("ISFORCEDCLOSED");
            entity.Property(e => e.Isicsorder).HasColumnName("ISICSORDER");
            entity.Property(e => e.Ismasterbilling).HasColumnName("ISMASTERBILLING");
            entity.Property(e => e.Istaxable).HasColumnName("ISTAXABLE");
            entity.Property(e => e.Isworkorder).HasColumnName("ISWORKORDER");
            entity.Property(e => e.Jobiid).HasColumnName("JOBIID");
            entity.Property(e => e.Laborpricegroupid).HasColumnName("LABORPRICEGROUPID");
            entity.Property(e => e.Languageid).HasColumnName("LANGUAGEID");
            entity.Property(e => e.Lastprinteddate).HasColumnName("LASTPRINTEDDATE");
            entity.Property(e => e.Lastupdated).HasColumnName("LASTUPDATED");
            entity.Property(e => e.Lastupdateddbdate).HasColumnName("LASTUPDATEDDBDATE");
            entity.Property(e => e.Loadindate).HasColumnName("LOADINDATE");
            entity.Property(e => e.Location).HasColumnName("LOCATION");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("locationcd");
            entity.Property(e => e.Lockcount).HasColumnName("LOCKCOUNT");
            entity.Property(e => e.Masterbillingiid).HasColumnName("MASTERBILLINGIID");
            entity.Property(e => e.Miscmargin).HasColumnName("MISCMARGIN");
            entity.Property(e => e.Mop).HasColumnName("MOP");
            entity.Property(e => e.Nextinvoicedate).HasColumnName("NEXTINVOICEDATE");
            entity.Property(e => e.Notificationflag).HasColumnName("NOTIFICATIONFLAG");
            entity.Property(e => e.Opsmgr).HasColumnName("opsmgr");
            entity.Property(e => e.Ordercategory).HasColumnName("ORDERCATEGORY");
            entity.Property(e => e.Orderdiscount).HasColumnName("ORDERDISCOUNT");
            entity.Property(e => e.Ordersubcategory).HasColumnName("ORDERSUBCATEGORY");
            entity.Property(e => e.Ordersubtype).HasColumnName("ORDERSUBTYPE");
            entity.Property(e => e.Overheadrate).HasColumnName("OVERHEADRATE");
            entity.Property(e => e.Parentcontractiid).HasColumnName("PARENTCONTRACTIID");
            entity.Property(e => e.Parententitydesc).HasColumnName("parententitydesc");
            entity.Property(e => e.Parententityno).HasColumnName("parententityno");
            entity.Property(e => e.Payhow).HasColumnName("PAYHOW");
            entity.Property(e => e.Paymenttermsiid).HasColumnName("PAYMENTTERMSIID");
            entity.Property(e => e.Paymethodreference).HasColumnName("PAYMETHODREFERENCE");
            entity.Property(e => e.Paytype).HasColumnName("PAYTYPE");
            entity.Property(e => e.Periodicscheduletype).HasColumnName("PERIODICSCHEDULETYPE");
            entity.Property(e => e.Periodiid).HasColumnName("PERIODIID");
            entity.Property(e => e.Pickupbycustomer).HasColumnName("PICKUPBYCUSTOMER");
            entity.Property(e => e.Pickupdate).HasColumnName("PICKUPDATE");
            entity.Property(e => e.Plactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("plactivecd");
            entity.Property(e => e.Planneriid).HasColumnName("PLANNERIID");
            entity.Property(e => e.Ponumber).HasColumnName("PONUMBER");
            entity.Property(e => e.Preorposttax).HasColumnName("PREORPOSTTAX");
            entity.Property(e => e.Prepdate).HasColumnName("PREPDATE");
            entity.Property(e => e.Pricingiid).HasColumnName("PRICINGIID");
            entity.Property(e => e.Pricingruleiid).HasColumnName("PRICINGRULEIID");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Prob).HasColumnName("prob");
            entity.Property(e => e.Probability).HasColumnName("PROBABILITY");
            entity.Property(e => e.Profitcentre).HasColumnName("PROFITCENTRE");
            entity.Property(e => e.Project).HasColumnName("PROJECT");
            entity.Property(e => e.Propduedate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("propduedate");
            entity.Property(e => e.Proptype)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("proptype");
            entity.Property(e => e.Quoteiid).HasColumnName("QUOTEIID");
            entity.Property(e => e.Readyforoperations).HasColumnName("READYFOROPERATIONS");
            entity.Property(e => e.Readytopack).HasColumnName("readytopack");
            entity.Property(e => e.Rehearsaldate).HasColumnName("REHEARSALDATE");
            entity.Property(e => e.Respempno).HasColumnName("respempno");
            entity.Property(e => e.Returnaddressiid).HasColumnName("RETURNADDRESSIID");
            entity.Property(e => e.Returnboothroomno).HasColumnName("RETURNBOOTHROOMNO");
            entity.Property(e => e.Returnbycustomer).HasColumnName("RETURNBYCUSTOMER");
            entity.Property(e => e.Returncarriertype).HasColumnName("RETURNCARRIERTYPE");
            entity.Property(e => e.Returnconfirmed).HasColumnName("RETURNCONFIRMED");
            entity.Property(e => e.Returncontactiid).HasColumnName("RETURNCONTACTIID");
            entity.Property(e => e.Returncontactname).HasColumnName("RETURNCONTACTNAME");
            entity.Property(e => e.Returndate).HasColumnName("RETURNDATE");
            entity.Property(e => e.Returnlocation).HasColumnName("RETURNLOCATION");
            entity.Property(e => e.Returntrackingno).HasColumnName("RETURNTRACKINGNO");
            entity.Property(e => e.Revision).HasColumnName("REVISION");
            entity.Property(e => e.Revisiondate).HasColumnName("REVISIONDATE");
            entity.Property(e => e.Roundtoid).HasColumnName("ROUNDTOID");
            entity.Property(e => e.Rushcharges).HasColumnName("RUSHCHARGES");
            entity.Property(e => e.Saleorder).HasColumnName("SALEORDER");
            entity.Property(e => e.Salespersoniid).HasColumnName("SALESPERSONIID");
            entity.Property(e => e.Scondiscountedamount).HasColumnName("SCONDISCOUNTEDAMOUNT");
            entity.Property(e => e.Servicechargeonsellitems).HasColumnName("SERVICECHARGEONSELLITEMS");
            entity.Property(e => e.Servicechargepercent).HasColumnName("SERVICECHARGEPERCENT");
            entity.Property(e => e.Servicechargetaxamount).HasColumnName("SERVICECHARGETAXAMOUNT");
            entity.Property(e => e.Servicechargetype).HasColumnName("SERVICECHARGETYPE");
            entity.Property(e => e.Servicechargevalue).HasColumnName("SERVICECHARGEVALUE");
            entity.Property(e => e.Sfactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sfactivecd");
            entity.Property(e => e.Shipcarriertype).HasColumnName("SHIPCARRIERTYPE");
            entity.Property(e => e.Shipdate).HasColumnName("SHIPDATE");
            entity.Property(e => e.Shipno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("shipno");
            entity.Property(e => e.Shippingaddressiid).HasColumnName("SHIPPINGADDRESSIID");
            entity.Property(e => e.Shippingboothroomno).HasColumnName("SHIPPINGBOOTHROOMNO");
            entity.Property(e => e.Shippingcontactname).HasColumnName("SHIPPINGCONTACTNAME");
            entity.Property(e => e.Shippingcustomeriid).HasColumnName("SHIPPINGCUSTOMERIID");
            entity.Property(e => e.Shippinglocation).HasColumnName("SHIPPINGLOCATION");
            entity.Property(e => e.Showenddate).HasColumnName("SHOWENDDATE");
            entity.Property(e => e.Showstartdate).HasColumnName("SHOWSTARTDATE");
            entity.Property(e => e.Signoffstatus).HasColumnName("SIGNOFFSTATUS");
            entity.Property(e => e.Sitecurrencyiid).HasColumnName("SITECURRENCYIID");
            entity.Property(e => e.Siteiid).HasColumnName("SITEIID");
            entity.Property(e => e.Startdate).HasColumnName("STARTDATE");
            entity.Property(e => e.StartdateF).HasColumnName("startdate_f");
            entity.Property(e => e.Stationiid).HasColumnName("STATIONIID");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Stopbillingdate).HasColumnName("STOPBILLINGDATE");
            entity.Property(e => e.Stopbillingflag).HasColumnName("STOPBILLINGFLAG");
            entity.Property(e => e.Strikedate).HasColumnName("STRIKEDATE");
            entity.Property(e => e.Subcontract)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("subcontract");
            entity.Property(e => e.Subno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("subno");
            entity.Property(e => e.Taxcertno).HasColumnName("TAXCERTNO");
            entity.Property(e => e.Taxlabor).HasColumnName("TAXLABOR");
            entity.Property(e => e.Totalitemsamount).HasColumnName("TOTALITEMSAMOUNT");
            entity.Property(e => e.Totalitemsdiscount).HasColumnName("TOTALITEMSDISCOUNT");
            entity.Property(e => e.Totalitemstaxamount).HasColumnName("TOTALITEMSTAXAMOUNT");
            entity.Property(e => e.Totallaboramount).HasColumnName("TOTALLABORAMOUNT");
            entity.Property(e => e.Totallabordiscount).HasColumnName("TOTALLABORDISCOUNT");
            entity.Property(e => e.Totallabortaxamount).HasColumnName("TOTALLABORTAXAMOUNT");
            entity.Property(e => e.Totalorderfulldurationamt).HasColumnName("TOTALORDERFULLDURATIONAMT");
            entity.Property(e => e.Totalorderfulldurationtax).HasColumnName("TOTALORDERFULLDURATIONTAX");
            entity.Property(e => e.Totaltaxamount).HasColumnName("TOTALTAXAMOUNT");
            entity.Property(e => e.Trackingno).HasColumnName("TRACKINGNO");
            entity.Property(e => e.Transactioncurrencyiid).HasColumnName("TRANSACTIONCURRENCYIID");
            entity.Property(e => e.Type).HasColumnName("TYPE");
            entity.Property(e => e.Uccontractdescription).HasColumnName("UCCONTRACTDESCRIPTION");
            entity.Property(e => e.Useeventpricing).HasColumnName("USEEVENTPRICING");
            entity.Property(e => e.Userdefinedstatus).HasColumnName("USERDEFINEDSTATUS");
            entity.Property(e => e.VersionRemarks).HasColumnName("VERSION_REMARKS");
            entity.Property(e => e.Viewfirstinvoice).HasColumnName("VIEWFIRSTINVOICE");
            entity.Property(e => e.Warehousedept).HasColumnName("WAREHOUSEDEPT");
            entity.Property(e => e.Warehousestatus).HasColumnName("WAREHOUSESTATUS");
        });

        modelBuilder.Entity<TmpEdscontractsWithEventsImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSContractsWithEvents_Import");

            entity.Property(e => e.Accountsgroupiid).HasColumnName("ACCOUNTSGROUPIID");
            entity.Property(e => e.AcctExecEmpno).HasColumnName("acctExecEmpno");
            entity.Property(e => e.Advance).HasColumnName("ADVANCE");
            entity.Property(e => e.Agency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("agency");
            entity.Property(e => e.Applyflatprice).HasColumnName("APPLYFLATPRICE");
            entity.Property(e => e.Applytaxonconsumable).HasColumnName("APPLYTAXONCONSUMABLE");
            entity.Property(e => e.Applytaxondamagewaiver).HasColumnName("APPLYTAXONDAMAGEWAIVER");
            entity.Property(e => e.Applytaxonservicecharge).HasColumnName("APPLYTAXONSERVICECHARGE");
            entity.Property(e => e.Approvalrequired).HasColumnName("APPROVALREQUIRED");
            entity.Property(e => e.Approveddiscountperc).HasColumnName("APPROVEDDISCOUNTPERC");
            entity.Property(e => e.Basecurrencyiid).HasColumnName("BASECURRENCYIID");
            entity.Property(e => e.Bidmarkup)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("bidmarkup");
            entity.Property(e => e.Bidroot).HasColumnName("bidroot");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Billingaddressiid).HasColumnName("BILLINGADDRESSIID");
            entity.Property(e => e.Billingcontactiid).HasColumnName("BILLINGCONTACTIID");
            entity.Property(e => e.Billingcustomeriid).HasColumnName("BILLINGCUSTOMERIID");
            entity.Property(e => e.Billingtermiid).HasColumnName("BILLINGTERMIID");
            entity.Property(e => e.Boothroomno).HasColumnName("BOOTHROOMNO");
            entity.Property(e => e.Burdenpercentage).HasColumnName("BURDENPERCENTAGE");
            entity.Property(e => e.Category).HasColumnName("CATEGORY");
            entity.Property(e => e.ChargebasedDayweekmonthprice).HasColumnName("CHARGEBASED_DAYWEEKMONTHPRICE");
            entity.Property(e => e.Chargeenddate).HasColumnName("CHARGEENDDATE");
            entity.Property(e => e.Chargestartdate).HasColumnName("CHARGESTARTDATE");
            entity.Property(e => e.Cmtaxamount).HasColumnName("CMTAXAMOUNT");
            entity.Property(e => e.Comments).HasColumnName("COMMENTS");
            entity.Property(e => e.Commissiongroup).HasColumnName("COMMISSIONGROUP");
            entity.Property(e => e.Consumablepercent).HasColumnName("CONSUMABLEPERCENT");
            entity.Property(e => e.Consumabletype).HasColumnName("CONSUMABLETYPE");
            entity.Property(e => e.Consumablevalue).HasColumnName("CONSUMABLEVALUE");
            entity.Property(e => e.Contactiid).HasColumnName("CONTACTIID");
            entity.Property(e => e.Contractdescription).HasColumnName("CONTRACTDESCRIPTION");
            entity.Property(e => e.Contractid).HasColumnName("CONTRACTID");
            entity.Property(e => e.Contractiid).HasColumnName("CONTRACTIID");
            entity.Property(e => e.Converteddate).HasColumnName("CONVERTEDDATE");
            entity.Property(e => e.Country)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("country");
            entity.Property(e => e.Createdby).HasColumnName("CREATEDBY");
            entity.Property(e => e.Credithold).HasColumnName("CREDITHOLD");
            entity.Property(e => e.Currency).HasColumnName("currency");
            entity.Property(e => e.Currencyiid).HasColumnName("CURRENCYIID");
            entity.Property(e => e.Custdiscountgroup).HasColumnName("CUSTDISCOUNTGROUP");
            entity.Property(e => e.Custno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("custno");
            entity.Property(e => e.Customerpricegroupid).HasColumnName("CUSTOMERPRICEGROUPID");
            entity.Property(e => e.Customertaxgroup).HasColumnName("CUSTOMERTAXGROUP");
            entity.Property(e => e.Customstatus).HasColumnName("CUSTOMSTATUS");
            entity.Property(e => e.Damagewaiverpercent).HasColumnName("DAMAGEWAIVERPERCENT");
            entity.Property(e => e.Damagewaivertype).HasColumnName("DAMAGEWAIVERTYPE");
            entity.Property(e => e.Damagewaivervalue).HasColumnName("DAMAGEWAIVERVALUE");
            entity.Property(e => e.Datecreated).HasColumnName("DATECREATED");
            entity.Property(e => e.Datevalidtill).HasColumnName("DATEVALIDTILL");
            entity.Property(e => e.Daysinmonth).HasColumnName("DAYSINMONTH");
            entity.Property(e => e.Daysinweek).HasColumnName("DAYSINWEEK");
            entity.Property(e => e.Defaultmainorderinfotosuborder).HasColumnName("DEFAULTMAINORDERINFOTOSUBORDER");
            entity.Property(e => e.Defaultunit).HasColumnName("DEFAULTUNIT");
            entity.Property(e => e.Deliverycharges).HasColumnName("DELIVERYCHARGES");
            entity.Property(e => e.Department).HasColumnName("DEPARTMENT");
            entity.Property(e => e.Deposit).HasColumnName("DEPOSIT");
            entity.Property(e => e.Disclaimer).HasColumnName("DISCLAIMER");
            entity.Property(e => e.Disclaimerid).HasColumnName("DISCLAIMERID");
            entity.Property(e => e.Discountamount).HasColumnName("DISCOUNTAMOUNT");
            entity.Property(e => e.Discounttype).HasColumnName("DISCOUNTTYPE");
            entity.Property(e => e.Dummy1).HasColumnName("DUMMY1");
            entity.Property(e => e.Dwtaxamount).HasColumnName("DWTAXAMOUNT");
            entity.Property(e => e.Employeeiid).HasColumnName("EMPLOYEEIID");
            entity.Property(e => e.Enddate).HasColumnName("ENDDATE");
            entity.Property(e => e.EnddateF).HasColumnName("enddate_f");
            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("engactivecd");
            entity.Property(e => e.EngrEmpno).HasColumnName("engrEmpno");
            entity.Property(e => e.Entitydesc).HasColumnName("entitydesc");
            entity.Property(e => e.Entityno).HasColumnName("entityno");
            entity.Property(e => e.Entitytype)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("entitytype");
            entity.Property(e => e.Evenlociid).HasColumnName("EVENLOCIID");
            entity.Property(e => e.Eventiid).HasColumnName("EVENTIID");
            entity.Property(e => e.Expenses).HasColumnName("EXPENSES");
            entity.Property(e => e.Finactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("finactivecd");
            entity.Property(e => e.Firstinvoiceamount).HasColumnName("FIRSTINVOICEAMOUNT");
            entity.Property(e => e.Flatprice).HasColumnName("FLATPRICE");
            entity.Property(e => e.Freightcharges).HasColumnName("FREIGHTCHARGES");
            entity.Property(e => e.Functioniid).HasColumnName("FUNCTIONIID");
            entity.Property(e => e.Industry)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("industry");
            entity.Property(e => e.Insuranceamount).HasColumnName("INSURANCEAMOUNT");
            entity.Property(e => e.Insurancepercent).HasColumnName("INSURANCEPERCENT");
            entity.Property(e => e.InternalOrg)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("internal_org");
            entity.Property(e => e.Inuseby).HasColumnName("INUSEBY");
            entity.Property(e => e.Isautoreceiveship).HasColumnName("ISAUTORECEIVESHIP");
            entity.Property(e => e.Isforcedclosed).HasColumnName("ISFORCEDCLOSED");
            entity.Property(e => e.Isicsorder).HasColumnName("ISICSORDER");
            entity.Property(e => e.Ismasterbilling).HasColumnName("ISMASTERBILLING");
            entity.Property(e => e.Istaxable).HasColumnName("ISTAXABLE");
            entity.Property(e => e.Isworkorder).HasColumnName("ISWORKORDER");
            entity.Property(e => e.Jobiid).HasColumnName("JOBIID");
            entity.Property(e => e.Laborpricegroupid).HasColumnName("LABORPRICEGROUPID");
            entity.Property(e => e.Languageid).HasColumnName("LANGUAGEID");
            entity.Property(e => e.Lastprinteddate).HasColumnName("LASTPRINTEDDATE");
            entity.Property(e => e.Lastupdated).HasColumnName("LASTUPDATED");
            entity.Property(e => e.Lastupdateddbdate).HasColumnName("LASTUPDATEDDBDATE");
            entity.Property(e => e.Loadindate).HasColumnName("LOADINDATE");
            entity.Property(e => e.Location).HasColumnName("LOCATION");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("locationcd");
            entity.Property(e => e.Lockcount).HasColumnName("LOCKCOUNT");
            entity.Property(e => e.Masterbillingiid).HasColumnName("MASTERBILLINGIID");
            entity.Property(e => e.Miscmargin).HasColumnName("MISCMARGIN");
            entity.Property(e => e.Mop).HasColumnName("MOP");
            entity.Property(e => e.Nextinvoicedate).HasColumnName("NEXTINVOICEDATE");
            entity.Property(e => e.Notificationflag).HasColumnName("NOTIFICATIONFLAG");
            entity.Property(e => e.Opsmgr).HasColumnName("opsmgr");
            entity.Property(e => e.Ordercategory).HasColumnName("ORDERCATEGORY");
            entity.Property(e => e.Orderdiscount).HasColumnName("ORDERDISCOUNT");
            entity.Property(e => e.Ordersubcategory).HasColumnName("ORDERSUBCATEGORY");
            entity.Property(e => e.Ordersubtype).HasColumnName("ORDERSUBTYPE");
            entity.Property(e => e.Overheadrate).HasColumnName("OVERHEADRATE");
            entity.Property(e => e.Parentcontractiid).HasColumnName("PARENTCONTRACTIID");
            entity.Property(e => e.Parententitydesc).HasColumnName("parententitydesc");
            entity.Property(e => e.Parententityno).HasColumnName("parententityno");
            entity.Property(e => e.Payhow).HasColumnName("PAYHOW");
            entity.Property(e => e.Paymenttermsiid).HasColumnName("PAYMENTTERMSIID");
            entity.Property(e => e.Paymethodreference).HasColumnName("PAYMETHODREFERENCE");
            entity.Property(e => e.Paytype).HasColumnName("PAYTYPE");
            entity.Property(e => e.Periodicscheduletype).HasColumnName("PERIODICSCHEDULETYPE");
            entity.Property(e => e.Periodiid).HasColumnName("PERIODIID");
            entity.Property(e => e.Pickupbycustomer).HasColumnName("PICKUPBYCUSTOMER");
            entity.Property(e => e.Pickupdate).HasColumnName("PICKUPDATE");
            entity.Property(e => e.Plactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("plactivecd");
            entity.Property(e => e.Planneriid).HasColumnName("PLANNERIID");
            entity.Property(e => e.Ponumber).HasColumnName("PONUMBER");
            entity.Property(e => e.Preorposttax).HasColumnName("PREORPOSTTAX");
            entity.Property(e => e.Prepdate).HasColumnName("PREPDATE");
            entity.Property(e => e.Pricingiid).HasColumnName("PRICINGIID");
            entity.Property(e => e.Pricingruleiid).HasColumnName("PRICINGRULEIID");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Prob).HasColumnName("prob");
            entity.Property(e => e.Probability).HasColumnName("PROBABILITY");
            entity.Property(e => e.Profitcentre).HasColumnName("PROFITCENTRE");
            entity.Property(e => e.Project).HasColumnName("PROJECT");
            entity.Property(e => e.Propduedate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("propduedate");
            entity.Property(e => e.Proptype)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("proptype");
            entity.Property(e => e.Quoteiid).HasColumnName("QUOTEIID");
            entity.Property(e => e.Readyforoperations).HasColumnName("READYFOROPERATIONS");
            entity.Property(e => e.Readytopack).HasColumnName("readytopack");
            entity.Property(e => e.Rehearsaldate).HasColumnName("REHEARSALDATE");
            entity.Property(e => e.Respempno).HasColumnName("respempno");
            entity.Property(e => e.Returnaddressiid).HasColumnName("RETURNADDRESSIID");
            entity.Property(e => e.Returnboothroomno).HasColumnName("RETURNBOOTHROOMNO");
            entity.Property(e => e.Returnbycustomer).HasColumnName("RETURNBYCUSTOMER");
            entity.Property(e => e.Returncarriertype).HasColumnName("RETURNCARRIERTYPE");
            entity.Property(e => e.Returnconfirmed).HasColumnName("RETURNCONFIRMED");
            entity.Property(e => e.Returncontactiid).HasColumnName("RETURNCONTACTIID");
            entity.Property(e => e.Returncontactname).HasColumnName("RETURNCONTACTNAME");
            entity.Property(e => e.Returndate).HasColumnName("RETURNDATE");
            entity.Property(e => e.Returnlocation).HasColumnName("RETURNLOCATION");
            entity.Property(e => e.Returntrackingno).HasColumnName("RETURNTRACKINGNO");
            entity.Property(e => e.Revision).HasColumnName("REVISION");
            entity.Property(e => e.Revisiondate).HasColumnName("REVISIONDATE");
            entity.Property(e => e.Roundtoid).HasColumnName("ROUNDTOID");
            entity.Property(e => e.Rushcharges).HasColumnName("RUSHCHARGES");
            entity.Property(e => e.Saleorder).HasColumnName("SALEORDER");
            entity.Property(e => e.Salespersoniid).HasColumnName("SALESPERSONIID");
            entity.Property(e => e.Scondiscountedamount).HasColumnName("SCONDISCOUNTEDAMOUNT");
            entity.Property(e => e.Servicechargeonsellitems).HasColumnName("SERVICECHARGEONSELLITEMS");
            entity.Property(e => e.Servicechargepercent).HasColumnName("SERVICECHARGEPERCENT");
            entity.Property(e => e.Servicechargetaxamount).HasColumnName("SERVICECHARGETAXAMOUNT");
            entity.Property(e => e.Servicechargetype).HasColumnName("SERVICECHARGETYPE");
            entity.Property(e => e.Servicechargevalue).HasColumnName("SERVICECHARGEVALUE");
            entity.Property(e => e.Sfactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sfactivecd");
            entity.Property(e => e.Shipcarriertype).HasColumnName("SHIPCARRIERTYPE");
            entity.Property(e => e.Shipdate).HasColumnName("SHIPDATE");
            entity.Property(e => e.Shipno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("shipno");
            entity.Property(e => e.Shippingaddressiid).HasColumnName("SHIPPINGADDRESSIID");
            entity.Property(e => e.Shippingboothroomno).HasColumnName("SHIPPINGBOOTHROOMNO");
            entity.Property(e => e.Shippingcontactname).HasColumnName("SHIPPINGCONTACTNAME");
            entity.Property(e => e.Shippingcustomeriid).HasColumnName("SHIPPINGCUSTOMERIID");
            entity.Property(e => e.Shippinglocation).HasColumnName("SHIPPINGLOCATION");
            entity.Property(e => e.Showenddate).HasColumnName("SHOWENDDATE");
            entity.Property(e => e.Showstartdate).HasColumnName("SHOWSTARTDATE");
            entity.Property(e => e.Signoffstatus).HasColumnName("SIGNOFFSTATUS");
            entity.Property(e => e.Sitecurrencyiid).HasColumnName("SITECURRENCYIID");
            entity.Property(e => e.Siteiid).HasColumnName("SITEIID");
            entity.Property(e => e.Startdate).HasColumnName("STARTDATE");
            entity.Property(e => e.StartdateF).HasColumnName("startdate_f");
            entity.Property(e => e.Stationiid).HasColumnName("STATIONIID");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Stopbillingdate).HasColumnName("STOPBILLINGDATE");
            entity.Property(e => e.Stopbillingflag).HasColumnName("STOPBILLINGFLAG");
            entity.Property(e => e.Strikedate).HasColumnName("STRIKEDATE");
            entity.Property(e => e.Subcontract)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("subcontract");
            entity.Property(e => e.Subno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("subno");
            entity.Property(e => e.Taxcertno).HasColumnName("TAXCERTNO");
            entity.Property(e => e.Taxlabor).HasColumnName("TAXLABOR");
            entity.Property(e => e.Totalitemsamount).HasColumnName("TOTALITEMSAMOUNT");
            entity.Property(e => e.Totalitemsdiscount).HasColumnName("TOTALITEMSDISCOUNT");
            entity.Property(e => e.Totalitemstaxamount).HasColumnName("TOTALITEMSTAXAMOUNT");
            entity.Property(e => e.Totallaboramount).HasColumnName("TOTALLABORAMOUNT");
            entity.Property(e => e.Totallabordiscount).HasColumnName("TOTALLABORDISCOUNT");
            entity.Property(e => e.Totallabortaxamount).HasColumnName("TOTALLABORTAXAMOUNT");
            entity.Property(e => e.Totalorderfulldurationamt).HasColumnName("TOTALORDERFULLDURATIONAMT");
            entity.Property(e => e.Totalorderfulldurationtax).HasColumnName("TOTALORDERFULLDURATIONTAX");
            entity.Property(e => e.Totaltaxamount).HasColumnName("TOTALTAXAMOUNT");
            entity.Property(e => e.Trackingno).HasColumnName("TRACKINGNO");
            entity.Property(e => e.Transactioncurrencyiid).HasColumnName("TRANSACTIONCURRENCYIID");
            entity.Property(e => e.Type).HasColumnName("TYPE");
            entity.Property(e => e.Uccontractdescription).HasColumnName("UCCONTRACTDESCRIPTION");
            entity.Property(e => e.Useeventpricing).HasColumnName("USEEVENTPRICING");
            entity.Property(e => e.Userdefinedstatus).HasColumnName("USERDEFINEDSTATUS");
            entity.Property(e => e.VersionRemarks).HasColumnName("VERSION_REMARKS");
            entity.Property(e => e.Viewfirstinvoice).HasColumnName("VIEWFIRSTINVOICE");
            entity.Property(e => e.Warehousedept).HasColumnName("WAREHOUSEDEPT");
            entity.Property(e => e.Warehousestatus).HasColumnName("WAREHOUSESTATUS");
        });

        modelBuilder.Entity<TmpEdscontractsWithEventsImportGreenDay>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSContractsWithEvents_Import_GreenDay");

            entity.Property(e => e.Accountsgroupiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("ACCOUNTSGROUPIID");
            entity.Property(e => e.AcctExecEmpno).HasColumnName("acctExecEmpno");
            entity.Property(e => e.Advance)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("ADVANCE");
            entity.Property(e => e.Agency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("agency");
            entity.Property(e => e.Applyflatprice).HasColumnName("APPLYFLATPRICE");
            entity.Property(e => e.Applytaxonconsumable).HasColumnName("APPLYTAXONCONSUMABLE");
            entity.Property(e => e.Applytaxondamagewaiver).HasColumnName("APPLYTAXONDAMAGEWAIVER");
            entity.Property(e => e.Applytaxonservicecharge).HasColumnName("APPLYTAXONSERVICECHARGE");
            entity.Property(e => e.Approvalrequired)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("APPROVALREQUIRED");
            entity.Property(e => e.Approveddiscountperc)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("APPROVEDDISCOUNTPERC");
            entity.Property(e => e.Basecurrencyiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("BASECURRENCYIID");
            entity.Property(e => e.Bidmarkup)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("bidmarkup");
            entity.Property(e => e.Bidroot).HasColumnName("bidroot");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Billingaddressiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("BILLINGADDRESSIID");
            entity.Property(e => e.Billingcontactiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("BILLINGCONTACTIID");
            entity.Property(e => e.Billingcustomeriid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("BILLINGCUSTOMERIID");
            entity.Property(e => e.Billingtermiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("BILLINGTERMIID");
            entity.Property(e => e.Boothroomno).HasColumnName("BOOTHROOMNO");
            entity.Property(e => e.Burdenpercentage)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("BURDENPERCENTAGE");
            entity.Property(e => e.Category)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CATEGORY");
            entity.Property(e => e.ChargebasedDayweekmonthprice).HasColumnName("CHARGEBASED_DAYWEEKMONTHPRICE");
            entity.Property(e => e.Chargeenddate).HasColumnName("CHARGEENDDATE");
            entity.Property(e => e.Chargestartdate).HasColumnName("CHARGESTARTDATE");
            entity.Property(e => e.Cmtaxamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CMTAXAMOUNT");
            entity.Property(e => e.Comments)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("COMMENTS");
            entity.Property(e => e.Commissiongroup).HasColumnName("COMMISSIONGROUP");
            entity.Property(e => e.Consumablepercent)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CONSUMABLEPERCENT");
            entity.Property(e => e.Consumabletype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CONSUMABLETYPE");
            entity.Property(e => e.Consumablevalue)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CONSUMABLEVALUE");
            entity.Property(e => e.Contactiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CONTACTIID");
            entity.Property(e => e.Contractdescription).HasColumnName("CONTRACTDESCRIPTION");
            entity.Property(e => e.Contractid).HasColumnName("CONTRACTID");
            entity.Property(e => e.Contractiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CONTRACTIID");
            entity.Property(e => e.Converteddate).HasColumnName("CONVERTEDDATE");
            entity.Property(e => e.Country)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("country");
            entity.Property(e => e.Createdby)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CREATEDBY");
            entity.Property(e => e.Credithold)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CREDITHOLD");
            entity.Property(e => e.Currency).HasColumnName("currency");
            entity.Property(e => e.Currencyiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CURRENCYIID");
            entity.Property(e => e.Custdiscountgroup).HasColumnName("CUSTDISCOUNTGROUP");
            entity.Property(e => e.Custno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("custno");
            entity.Property(e => e.Customerpricegroupid).HasColumnName("CUSTOMERPRICEGROUPID");
            entity.Property(e => e.Customertaxgroup).HasColumnName("CUSTOMERTAXGROUP");
            entity.Property(e => e.Customstatus)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CUSTOMSTATUS");
            entity.Property(e => e.Damagewaiverpercent)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DAMAGEWAIVERPERCENT");
            entity.Property(e => e.Damagewaivertype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DAMAGEWAIVERTYPE");
            entity.Property(e => e.Damagewaivervalue)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DAMAGEWAIVERVALUE");
            entity.Property(e => e.Datecreated).HasColumnName("DATECREATED");
            entity.Property(e => e.Datevalidtill).HasColumnName("DATEVALIDTILL");
            entity.Property(e => e.Daysinmonth)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DAYSINMONTH");
            entity.Property(e => e.Daysinweek)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DAYSINWEEK");
            entity.Property(e => e.Defaultmainorderinfotosuborder).HasColumnName("DEFAULTMAINORDERINFOTOSUBORDER");
            entity.Property(e => e.Defaultunit)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DEFAULTUNIT");
            entity.Property(e => e.Deliverycharges)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DELIVERYCHARGES");
            entity.Property(e => e.Department).HasColumnName("DEPARTMENT");
            entity.Property(e => e.Deposit)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DEPOSIT");
            entity.Property(e => e.Disclaimer).HasColumnName("DISCLAIMER");
            entity.Property(e => e.Disclaimerid).HasColumnName("DISCLAIMERID");
            entity.Property(e => e.Discountamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DISCOUNTAMOUNT");
            entity.Property(e => e.Discounttype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DISCOUNTTYPE");
            entity.Property(e => e.Dummy1)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DUMMY1");
            entity.Property(e => e.Dwtaxamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DWTAXAMOUNT");
            entity.Property(e => e.Employeeiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("EMPLOYEEIID");
            entity.Property(e => e.Enddate).HasColumnName("ENDDATE");
            entity.Property(e => e.EnddateF).HasColumnName("enddate_f");
            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("engactivecd");
            entity.Property(e => e.EngrEmpno).HasColumnName("engrEmpno");
            entity.Property(e => e.Entitydesc).HasColumnName("entitydesc");
            entity.Property(e => e.Entityno).HasColumnName("entityno");
            entity.Property(e => e.Entitytype)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("entitytype");
            entity.Property(e => e.Evenlociid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("EVENLOCIID");
            entity.Property(e => e.Eventiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("EVENTIID");
            entity.Property(e => e.Expenses)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("EXPENSES");
            entity.Property(e => e.Finactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("finactivecd");
            entity.Property(e => e.Firstinvoiceamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("FIRSTINVOICEAMOUNT");
            entity.Property(e => e.Flatprice)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("FLATPRICE");
            entity.Property(e => e.Freightcharges)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("FREIGHTCHARGES");
            entity.Property(e => e.Functioniid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("FUNCTIONIID");
            entity.Property(e => e.Industry)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("industry");
            entity.Property(e => e.Insuranceamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("INSURANCEAMOUNT");
            entity.Property(e => e.Insurancepercent)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("INSURANCEPERCENT");
            entity.Property(e => e.InternalOrg)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("internal_org");
            entity.Property(e => e.Inuseby).HasColumnName("INUSEBY");
            entity.Property(e => e.Isautoreceiveship).HasColumnName("ISAUTORECEIVESHIP");
            entity.Property(e => e.Isforcedclosed).HasColumnName("ISFORCEDCLOSED");
            entity.Property(e => e.Isicsorder).HasColumnName("ISICSORDER");
            entity.Property(e => e.Ismasterbilling).HasColumnName("ISMASTERBILLING");
            entity.Property(e => e.Istaxable).HasColumnName("ISTAXABLE");
            entity.Property(e => e.Isworkorder).HasColumnName("ISWORKORDER");
            entity.Property(e => e.Jobiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("JOBIID");
            entity.Property(e => e.Laborpricegroupid).HasColumnName("LABORPRICEGROUPID");
            entity.Property(e => e.Languageid).HasColumnName("LANGUAGEID");
            entity.Property(e => e.Lastprinteddate).HasColumnName("LASTPRINTEDDATE");
            entity.Property(e => e.Lastupdated).HasColumnName("LASTUPDATED");
            entity.Property(e => e.Lastupdateddbdate).HasColumnName("LASTUPDATEDDBDATE");
            entity.Property(e => e.Loadindate).HasColumnName("LOADINDATE");
            entity.Property(e => e.Location).HasColumnName("LOCATION");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("locationcd");
            entity.Property(e => e.Lockcount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("LOCKCOUNT");
            entity.Property(e => e.Masterbillingiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("MASTERBILLINGIID");
            entity.Property(e => e.Miscmargin)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("MISCMARGIN");
            entity.Property(e => e.Mop)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("MOP");
            entity.Property(e => e.Nextinvoicedate).HasColumnName("NEXTINVOICEDATE");
            entity.Property(e => e.Notificationflag).HasColumnName("NOTIFICATIONFLAG");
            entity.Property(e => e.Opsmgr).HasColumnName("opsmgr");
            entity.Property(e => e.Ordercategory).HasColumnName("ORDERCATEGORY");
            entity.Property(e => e.Orderdiscount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("ORDERDISCOUNT");
            entity.Property(e => e.Ordersubcategory).HasColumnName("ORDERSUBCATEGORY");
            entity.Property(e => e.Ordersubtype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("ORDERSUBTYPE");
            entity.Property(e => e.Overheadrate)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("OVERHEADRATE");
            entity.Property(e => e.Parentcontractiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PARENTCONTRACTIID");
            entity.Property(e => e.Parententitydesc).HasColumnName("parententitydesc");
            entity.Property(e => e.Parententityno).HasColumnName("parententityno");
            entity.Property(e => e.Payhow)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PAYHOW");
            entity.Property(e => e.Paymenttermsiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PAYMENTTERMSIID");
            entity.Property(e => e.Paymethodreference).HasColumnName("PAYMETHODREFERENCE");
            entity.Property(e => e.Paytype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PAYTYPE");
            entity.Property(e => e.Periodicscheduletype).HasColumnName("PERIODICSCHEDULETYPE");
            entity.Property(e => e.Periodiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PERIODIID");
            entity.Property(e => e.Pickupbycustomer).HasColumnName("PICKUPBYCUSTOMER");
            entity.Property(e => e.Pickupdate).HasColumnName("PICKUPDATE");
            entity.Property(e => e.Plactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("plactivecd");
            entity.Property(e => e.Planneriid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PLANNERIID");
            entity.Property(e => e.Ponumber)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PONUMBER");
            entity.Property(e => e.Preorposttax)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PREORPOSTTAX");
            entity.Property(e => e.Prepdate).HasColumnName("PREPDATE");
            entity.Property(e => e.Pricingiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PRICINGIID");
            entity.Property(e => e.Pricingruleiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PRICINGRULEIID");
            entity.Property(e => e.Priority)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PRIORITY");
            entity.Property(e => e.Prob).HasColumnName("prob");
            entity.Property(e => e.Probability)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PROBABILITY");
            entity.Property(e => e.Profitcentre).HasColumnName("PROFITCENTRE");
            entity.Property(e => e.Project).HasColumnName("PROJECT");
            entity.Property(e => e.Propduedate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("propduedate");
            entity.Property(e => e.Proptype)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("proptype");
            entity.Property(e => e.Quoteiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("QUOTEIID");
            entity.Property(e => e.Readyforoperations).HasColumnName("READYFOROPERATIONS");
            entity.Property(e => e.Readytopack).HasColumnName("readytopack");
            entity.Property(e => e.Rehearsaldate).HasColumnName("REHEARSALDATE");
            entity.Property(e => e.Respempno).HasColumnName("respempno");
            entity.Property(e => e.Returnaddressiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("RETURNADDRESSIID");
            entity.Property(e => e.Returnboothroomno).HasColumnName("RETURNBOOTHROOMNO");
            entity.Property(e => e.Returnbycustomer).HasColumnName("RETURNBYCUSTOMER");
            entity.Property(e => e.Returncarriertype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("RETURNCARRIERTYPE");
            entity.Property(e => e.Returnconfirmed)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("RETURNCONFIRMED");
            entity.Property(e => e.Returncontactiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("RETURNCONTACTIID");
            entity.Property(e => e.Returncontactname).HasColumnName("RETURNCONTACTNAME");
            entity.Property(e => e.Returndate).HasColumnName("RETURNDATE");
            entity.Property(e => e.Returnlocation).HasColumnName("RETURNLOCATION");
            entity.Property(e => e.Returntrackingno).HasColumnName("RETURNTRACKINGNO");
            entity.Property(e => e.Revision)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("REVISION");
            entity.Property(e => e.Revisiondate).HasColumnName("REVISIONDATE");
            entity.Property(e => e.Roundtoid).HasColumnName("ROUNDTOID");
            entity.Property(e => e.Rushcharges)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("RUSHCHARGES");
            entity.Property(e => e.Saleorder)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SALEORDER");
            entity.Property(e => e.Salespersoniid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SALESPERSONIID");
            entity.Property(e => e.Scondiscountedamount).HasColumnName("SCONDISCOUNTEDAMOUNT");
            entity.Property(e => e.Servicechargeonsellitems).HasColumnName("SERVICECHARGEONSELLITEMS");
            entity.Property(e => e.Servicechargepercent)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SERVICECHARGEPERCENT");
            entity.Property(e => e.Servicechargetaxamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SERVICECHARGETAXAMOUNT");
            entity.Property(e => e.Servicechargetype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SERVICECHARGETYPE");
            entity.Property(e => e.Servicechargevalue)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SERVICECHARGEVALUE");
            entity.Property(e => e.Sfactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sfactivecd");
            entity.Property(e => e.Shipcarriertype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SHIPCARRIERTYPE");
            entity.Property(e => e.Shipdate).HasColumnName("SHIPDATE");
            entity.Property(e => e.Shipno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("shipno");
            entity.Property(e => e.Shippingaddressiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SHIPPINGADDRESSIID");
            entity.Property(e => e.Shippingboothroomno).HasColumnName("SHIPPINGBOOTHROOMNO");
            entity.Property(e => e.Shippingcontactname).HasColumnName("SHIPPINGCONTACTNAME");
            entity.Property(e => e.Shippingcustomeriid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SHIPPINGCUSTOMERIID");
            entity.Property(e => e.Shippinglocation).HasColumnName("SHIPPINGLOCATION");
            entity.Property(e => e.Showenddate).HasColumnName("SHOWENDDATE");
            entity.Property(e => e.Showstartdate).HasColumnName("SHOWSTARTDATE");
            entity.Property(e => e.Signoffstatus).HasColumnName("SIGNOFFSTATUS");
            entity.Property(e => e.Sitecurrencyiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SITECURRENCYIID");
            entity.Property(e => e.Siteiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SITEIID");
            entity.Property(e => e.Startdate).HasColumnName("STARTDATE");
            entity.Property(e => e.StartdateF).HasColumnName("startdate_f");
            entity.Property(e => e.Stationiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("STATIONIID");
            entity.Property(e => e.Status)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("STATUS");
            entity.Property(e => e.Stopbillingdate).HasColumnName("STOPBILLINGDATE");
            entity.Property(e => e.Stopbillingflag).HasColumnName("STOPBILLINGFLAG");
            entity.Property(e => e.Strikedate).HasColumnName("STRIKEDATE");
            entity.Property(e => e.Subcontract)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("subcontract");
            entity.Property(e => e.Subno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("subno");
            entity.Property(e => e.Taxcertno).HasColumnName("TAXCERTNO");
            entity.Property(e => e.Taxlabor).HasColumnName("TAXLABOR");
            entity.Property(e => e.Totalitemsamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALITEMSAMOUNT");
            entity.Property(e => e.Totalitemsdiscount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALITEMSDISCOUNT");
            entity.Property(e => e.Totalitemstaxamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALITEMSTAXAMOUNT");
            entity.Property(e => e.Totallaboramount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALLABORAMOUNT");
            entity.Property(e => e.Totallabordiscount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALLABORDISCOUNT");
            entity.Property(e => e.Totallabortaxamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALLABORTAXAMOUNT");
            entity.Property(e => e.Totalorderfulldurationamt)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALORDERFULLDURATIONAMT");
            entity.Property(e => e.Totalorderfulldurationtax)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALORDERFULLDURATIONTAX");
            entity.Property(e => e.Totaltaxamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALTAXAMOUNT");
            entity.Property(e => e.Trackingno).HasColumnName("TRACKINGNO");
            entity.Property(e => e.Transactioncurrencyiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TRANSACTIONCURRENCYIID");
            entity.Property(e => e.Type)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TYPE");
            entity.Property(e => e.Uccontractdescription).HasColumnName("UCCONTRACTDESCRIPTION");
            entity.Property(e => e.Useeventpricing).HasColumnName("USEEVENTPRICING");
            entity.Property(e => e.Userdefinedstatus)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("USERDEFINEDSTATUS");
            entity.Property(e => e.VersionRemarks).HasColumnName("VERSION_REMARKS");
            entity.Property(e => e.Viewfirstinvoice).HasColumnName("VIEWFIRSTINVOICE");
            entity.Property(e => e.Warehousedept)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("WAREHOUSEDEPT");
            entity.Property(e => e.Warehousestatus)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("WAREHOUSESTATUS");
        });

        modelBuilder.Entity<TmpEdscontractsWithOnlyProjectsImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSContractsWithOnlyProjects_Import");

            entity.Property(e => e.Accountsgroupiid).HasColumnName("ACCOUNTSGROUPIID");
            entity.Property(e => e.AcctExecEmpno).HasColumnName("acctExecEmpno");
            entity.Property(e => e.Advance).HasColumnName("ADVANCE");
            entity.Property(e => e.Agency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("agency");
            entity.Property(e => e.Applyflatprice).HasColumnName("APPLYFLATPRICE");
            entity.Property(e => e.Applytaxonconsumable).HasColumnName("APPLYTAXONCONSUMABLE");
            entity.Property(e => e.Applytaxondamagewaiver).HasColumnName("APPLYTAXONDAMAGEWAIVER");
            entity.Property(e => e.Applytaxonservicecharge).HasColumnName("APPLYTAXONSERVICECHARGE");
            entity.Property(e => e.Approvalrequired).HasColumnName("APPROVALREQUIRED");
            entity.Property(e => e.Approveddiscountperc).HasColumnName("APPROVEDDISCOUNTPERC");
            entity.Property(e => e.Basecurrencyiid).HasColumnName("BASECURRENCYIID");
            entity.Property(e => e.Bidmarkup)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("bidmarkup");
            entity.Property(e => e.Bidroot).HasColumnName("bidroot");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Billingaddressiid).HasColumnName("BILLINGADDRESSIID");
            entity.Property(e => e.Billingcontactiid).HasColumnName("BILLINGCONTACTIID");
            entity.Property(e => e.Billingcustomeriid).HasColumnName("BILLINGCUSTOMERIID");
            entity.Property(e => e.Billingtermiid).HasColumnName("BILLINGTERMIID");
            entity.Property(e => e.Boothroomno).HasColumnName("BOOTHROOMNO");
            entity.Property(e => e.Burdenpercentage).HasColumnName("BURDENPERCENTAGE");
            entity.Property(e => e.Category).HasColumnName("CATEGORY");
            entity.Property(e => e.ChargebasedDayweekmonthprice).HasColumnName("CHARGEBASED_DAYWEEKMONTHPRICE");
            entity.Property(e => e.Chargeenddate).HasColumnName("CHARGEENDDATE");
            entity.Property(e => e.Chargestartdate).HasColumnName("CHARGESTARTDATE");
            entity.Property(e => e.Cmtaxamount).HasColumnName("CMTAXAMOUNT");
            entity.Property(e => e.Comments).HasColumnName("COMMENTS");
            entity.Property(e => e.Commissiongroup).HasColumnName("COMMISSIONGROUP");
            entity.Property(e => e.Consumablepercent).HasColumnName("CONSUMABLEPERCENT");
            entity.Property(e => e.Consumabletype).HasColumnName("CONSUMABLETYPE");
            entity.Property(e => e.Consumablevalue).HasColumnName("CONSUMABLEVALUE");
            entity.Property(e => e.Contactiid).HasColumnName("CONTACTIID");
            entity.Property(e => e.Contractdescription).HasColumnName("CONTRACTDESCRIPTION");
            entity.Property(e => e.Contractid).HasColumnName("CONTRACTID");
            entity.Property(e => e.Contractiid).HasColumnName("CONTRACTIID");
            entity.Property(e => e.Converteddate).HasColumnName("CONVERTEDDATE");
            entity.Property(e => e.Country)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("country");
            entity.Property(e => e.Createdby).HasColumnName("CREATEDBY");
            entity.Property(e => e.Credithold).HasColumnName("CREDITHOLD");
            entity.Property(e => e.Currency).HasColumnName("currency");
            entity.Property(e => e.Currencyiid).HasColumnName("CURRENCYIID");
            entity.Property(e => e.Custdiscountgroup).HasColumnName("CUSTDISCOUNTGROUP");
            entity.Property(e => e.Custno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("custno");
            entity.Property(e => e.Customerpricegroupid).HasColumnName("CUSTOMERPRICEGROUPID");
            entity.Property(e => e.Customertaxgroup).HasColumnName("CUSTOMERTAXGROUP");
            entity.Property(e => e.Customstatus).HasColumnName("CUSTOMSTATUS");
            entity.Property(e => e.Damagewaiverpercent).HasColumnName("DAMAGEWAIVERPERCENT");
            entity.Property(e => e.Damagewaivertype).HasColumnName("DAMAGEWAIVERTYPE");
            entity.Property(e => e.Damagewaivervalue).HasColumnName("DAMAGEWAIVERVALUE");
            entity.Property(e => e.Datecreated).HasColumnName("DATECREATED");
            entity.Property(e => e.Datevalidtill).HasColumnName("DATEVALIDTILL");
            entity.Property(e => e.Daysinmonth).HasColumnName("DAYSINMONTH");
            entity.Property(e => e.Daysinweek).HasColumnName("DAYSINWEEK");
            entity.Property(e => e.Defaultmainorderinfotosuborder).HasColumnName("DEFAULTMAINORDERINFOTOSUBORDER");
            entity.Property(e => e.Defaultunit).HasColumnName("DEFAULTUNIT");
            entity.Property(e => e.Deliverycharges).HasColumnName("DELIVERYCHARGES");
            entity.Property(e => e.Department).HasColumnName("DEPARTMENT");
            entity.Property(e => e.Deposit).HasColumnName("DEPOSIT");
            entity.Property(e => e.Disclaimer).HasColumnName("DISCLAIMER");
            entity.Property(e => e.Disclaimerid).HasColumnName("DISCLAIMERID");
            entity.Property(e => e.Discountamount).HasColumnName("DISCOUNTAMOUNT");
            entity.Property(e => e.Discounttype).HasColumnName("DISCOUNTTYPE");
            entity.Property(e => e.Dummy1).HasColumnName("DUMMY1");
            entity.Property(e => e.Dwtaxamount).HasColumnName("DWTAXAMOUNT");
            entity.Property(e => e.Employeeiid).HasColumnName("EMPLOYEEIID");
            entity.Property(e => e.Enddate).HasColumnName("ENDDATE");
            entity.Property(e => e.EnddateF).HasColumnName("enddate_f");
            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("engactivecd");
            entity.Property(e => e.EngrEmpno).HasColumnName("engrEmpno");
            entity.Property(e => e.Entitydesc).HasColumnName("entitydesc");
            entity.Property(e => e.Entityno).HasColumnName("entityno");
            entity.Property(e => e.Entitytype)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("entitytype");
            entity.Property(e => e.Evenlociid).HasColumnName("EVENLOCIID");
            entity.Property(e => e.Eventiid).HasColumnName("EVENTIID");
            entity.Property(e => e.Expenses).HasColumnName("EXPENSES");
            entity.Property(e => e.Finactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("finactivecd");
            entity.Property(e => e.Firstinvoiceamount).HasColumnName("FIRSTINVOICEAMOUNT");
            entity.Property(e => e.Flatprice).HasColumnName("FLATPRICE");
            entity.Property(e => e.Freightcharges).HasColumnName("FREIGHTCHARGES");
            entity.Property(e => e.Functioniid).HasColumnName("FUNCTIONIID");
            entity.Property(e => e.Industry)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("industry");
            entity.Property(e => e.Insuranceamount).HasColumnName("INSURANCEAMOUNT");
            entity.Property(e => e.Insurancepercent).HasColumnName("INSURANCEPERCENT");
            entity.Property(e => e.InternalOrg)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("internal_org");
            entity.Property(e => e.Inuseby).HasColumnName("INUSEBY");
            entity.Property(e => e.Isautoreceiveship).HasColumnName("ISAUTORECEIVESHIP");
            entity.Property(e => e.Isforcedclosed).HasColumnName("ISFORCEDCLOSED");
            entity.Property(e => e.Isicsorder).HasColumnName("ISICSORDER");
            entity.Property(e => e.Ismasterbilling).HasColumnName("ISMASTERBILLING");
            entity.Property(e => e.Istaxable).HasColumnName("ISTAXABLE");
            entity.Property(e => e.Isworkorder).HasColumnName("ISWORKORDER");
            entity.Property(e => e.Jobiid).HasColumnName("JOBIID");
            entity.Property(e => e.Laborpricegroupid).HasColumnName("LABORPRICEGROUPID");
            entity.Property(e => e.Languageid).HasColumnName("LANGUAGEID");
            entity.Property(e => e.Lastprinteddate).HasColumnName("LASTPRINTEDDATE");
            entity.Property(e => e.Lastupdated).HasColumnName("LASTUPDATED");
            entity.Property(e => e.Lastupdateddbdate).HasColumnName("LASTUPDATEDDBDATE");
            entity.Property(e => e.Loadindate).HasColumnName("LOADINDATE");
            entity.Property(e => e.Location).HasColumnName("LOCATION");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("locationcd");
            entity.Property(e => e.Lockcount).HasColumnName("LOCKCOUNT");
            entity.Property(e => e.Masterbillingiid).HasColumnName("MASTERBILLINGIID");
            entity.Property(e => e.Miscmargin).HasColumnName("MISCMARGIN");
            entity.Property(e => e.Mop).HasColumnName("MOP");
            entity.Property(e => e.Nextinvoicedate).HasColumnName("NEXTINVOICEDATE");
            entity.Property(e => e.Notificationflag).HasColumnName("NOTIFICATIONFLAG");
            entity.Property(e => e.Opsmgr).HasColumnName("opsmgr");
            entity.Property(e => e.Ordercategory).HasColumnName("ORDERCATEGORY");
            entity.Property(e => e.Orderdiscount).HasColumnName("ORDERDISCOUNT");
            entity.Property(e => e.Ordersubcategory).HasColumnName("ORDERSUBCATEGORY");
            entity.Property(e => e.Ordersubtype).HasColumnName("ORDERSUBTYPE");
            entity.Property(e => e.Overheadrate).HasColumnName("OVERHEADRATE");
            entity.Property(e => e.Parentcontractiid).HasColumnName("PARENTCONTRACTIID");
            entity.Property(e => e.Parententitydesc).HasColumnName("parententitydesc");
            entity.Property(e => e.Parententityno).HasColumnName("parententityno");
            entity.Property(e => e.Payhow).HasColumnName("PAYHOW");
            entity.Property(e => e.Paymenttermsiid).HasColumnName("PAYMENTTERMSIID");
            entity.Property(e => e.Paymethodreference).HasColumnName("PAYMETHODREFERENCE");
            entity.Property(e => e.Paytype).HasColumnName("PAYTYPE");
            entity.Property(e => e.Periodicscheduletype).HasColumnName("PERIODICSCHEDULETYPE");
            entity.Property(e => e.Periodiid).HasColumnName("PERIODIID");
            entity.Property(e => e.Pickupbycustomer).HasColumnName("PICKUPBYCUSTOMER");
            entity.Property(e => e.Pickupdate).HasColumnName("PICKUPDATE");
            entity.Property(e => e.Plactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("plactivecd");
            entity.Property(e => e.Planneriid).HasColumnName("PLANNERIID");
            entity.Property(e => e.Ponumber).HasColumnName("PONUMBER");
            entity.Property(e => e.Preorposttax).HasColumnName("PREORPOSTTAX");
            entity.Property(e => e.Prepdate).HasColumnName("PREPDATE");
            entity.Property(e => e.Pricingiid).HasColumnName("PRICINGIID");
            entity.Property(e => e.Pricingruleiid).HasColumnName("PRICINGRULEIID");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Prob).HasColumnName("prob");
            entity.Property(e => e.Probability).HasColumnName("PROBABILITY");
            entity.Property(e => e.Profitcentre).HasColumnName("PROFITCENTRE");
            entity.Property(e => e.Project).HasColumnName("PROJECT");
            entity.Property(e => e.Propduedate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("propduedate");
            entity.Property(e => e.Proptype)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("proptype");
            entity.Property(e => e.Quoteiid).HasColumnName("QUOTEIID");
            entity.Property(e => e.Readyforoperations).HasColumnName("READYFOROPERATIONS");
            entity.Property(e => e.Readytopack).HasColumnName("readytopack");
            entity.Property(e => e.Rehearsaldate).HasColumnName("REHEARSALDATE");
            entity.Property(e => e.Respempno).HasColumnName("respempno");
            entity.Property(e => e.Returnaddressiid).HasColumnName("RETURNADDRESSIID");
            entity.Property(e => e.Returnboothroomno).HasColumnName("RETURNBOOTHROOMNO");
            entity.Property(e => e.Returnbycustomer).HasColumnName("RETURNBYCUSTOMER");
            entity.Property(e => e.Returncarriertype).HasColumnName("RETURNCARRIERTYPE");
            entity.Property(e => e.Returnconfirmed).HasColumnName("RETURNCONFIRMED");
            entity.Property(e => e.Returncontactiid).HasColumnName("RETURNCONTACTIID");
            entity.Property(e => e.Returncontactname).HasColumnName("RETURNCONTACTNAME");
            entity.Property(e => e.Returndate).HasColumnName("RETURNDATE");
            entity.Property(e => e.Returnlocation).HasColumnName("RETURNLOCATION");
            entity.Property(e => e.Returntrackingno).HasColumnName("RETURNTRACKINGNO");
            entity.Property(e => e.Revision).HasColumnName("REVISION");
            entity.Property(e => e.Revisiondate).HasColumnName("REVISIONDATE");
            entity.Property(e => e.Roundtoid).HasColumnName("ROUNDTOID");
            entity.Property(e => e.Rushcharges).HasColumnName("RUSHCHARGES");
            entity.Property(e => e.Saleorder).HasColumnName("SALEORDER");
            entity.Property(e => e.Salespersoniid).HasColumnName("SALESPERSONIID");
            entity.Property(e => e.Scondiscountedamount).HasColumnName("SCONDISCOUNTEDAMOUNT");
            entity.Property(e => e.Servicechargeonsellitems).HasColumnName("SERVICECHARGEONSELLITEMS");
            entity.Property(e => e.Servicechargepercent).HasColumnName("SERVICECHARGEPERCENT");
            entity.Property(e => e.Servicechargetaxamount).HasColumnName("SERVICECHARGETAXAMOUNT");
            entity.Property(e => e.Servicechargetype).HasColumnName("SERVICECHARGETYPE");
            entity.Property(e => e.Servicechargevalue).HasColumnName("SERVICECHARGEVALUE");
            entity.Property(e => e.Sfactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sfactivecd");
            entity.Property(e => e.Shipcarriertype).HasColumnName("SHIPCARRIERTYPE");
            entity.Property(e => e.Shipdate).HasColumnName("SHIPDATE");
            entity.Property(e => e.Shipno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("shipno");
            entity.Property(e => e.Shippingaddressiid).HasColumnName("SHIPPINGADDRESSIID");
            entity.Property(e => e.Shippingboothroomno).HasColumnName("SHIPPINGBOOTHROOMNO");
            entity.Property(e => e.Shippingcontactname).HasColumnName("SHIPPINGCONTACTNAME");
            entity.Property(e => e.Shippingcustomeriid).HasColumnName("SHIPPINGCUSTOMERIID");
            entity.Property(e => e.Shippinglocation).HasColumnName("SHIPPINGLOCATION");
            entity.Property(e => e.Showenddate).HasColumnName("SHOWENDDATE");
            entity.Property(e => e.Showstartdate).HasColumnName("SHOWSTARTDATE");
            entity.Property(e => e.Signoffstatus).HasColumnName("SIGNOFFSTATUS");
            entity.Property(e => e.Sitecurrencyiid).HasColumnName("SITECURRENCYIID");
            entity.Property(e => e.Siteiid).HasColumnName("SITEIID");
            entity.Property(e => e.Startdate).HasColumnName("STARTDATE");
            entity.Property(e => e.StartdateF).HasColumnName("startdate_f");
            entity.Property(e => e.Stationiid).HasColumnName("STATIONIID");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Stopbillingdate).HasColumnName("STOPBILLINGDATE");
            entity.Property(e => e.Stopbillingflag).HasColumnName("STOPBILLINGFLAG");
            entity.Property(e => e.Strikedate).HasColumnName("STRIKEDATE");
            entity.Property(e => e.Subcontract)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("subcontract");
            entity.Property(e => e.Subno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("subno");
            entity.Property(e => e.Taxcertno).HasColumnName("TAXCERTNO");
            entity.Property(e => e.Taxlabor).HasColumnName("TAXLABOR");
            entity.Property(e => e.Totalitemsamount).HasColumnName("TOTALITEMSAMOUNT");
            entity.Property(e => e.Totalitemsdiscount).HasColumnName("TOTALITEMSDISCOUNT");
            entity.Property(e => e.Totalitemstaxamount).HasColumnName("TOTALITEMSTAXAMOUNT");
            entity.Property(e => e.Totallaboramount).HasColumnName("TOTALLABORAMOUNT");
            entity.Property(e => e.Totallabordiscount).HasColumnName("TOTALLABORDISCOUNT");
            entity.Property(e => e.Totallabortaxamount).HasColumnName("TOTALLABORTAXAMOUNT");
            entity.Property(e => e.Totalorderfulldurationamt).HasColumnName("TOTALORDERFULLDURATIONAMT");
            entity.Property(e => e.Totalorderfulldurationtax).HasColumnName("TOTALORDERFULLDURATIONTAX");
            entity.Property(e => e.Totaltaxamount).HasColumnName("TOTALTAXAMOUNT");
            entity.Property(e => e.Trackingno).HasColumnName("TRACKINGNO");
            entity.Property(e => e.Transactioncurrencyiid).HasColumnName("TRANSACTIONCURRENCYIID");
            entity.Property(e => e.Type).HasColumnName("TYPE");
            entity.Property(e => e.Uccontractdescription).HasColumnName("UCCONTRACTDESCRIPTION");
            entity.Property(e => e.Useeventpricing).HasColumnName("USEEVENTPRICING");
            entity.Property(e => e.Userdefinedstatus).HasColumnName("USERDEFINEDSTATUS");
            entity.Property(e => e.VersionRemarks).HasColumnName("VERSION_REMARKS");
            entity.Property(e => e.Viewfirstinvoice).HasColumnName("VIEWFIRSTINVOICE");
            entity.Property(e => e.Warehousedept).HasColumnName("WAREHOUSEDEPT");
            entity.Property(e => e.Warehousestatus).HasColumnName("WAREHOUSESTATUS");
        });

        modelBuilder.Entity<TmpEdscontractsWithOnlyProjectsImportDumbProjectRecode>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSContractsWithOnlyProjects_Import_DumbProjectRecodes");

            entity.Property(e => e.Accountsgroupiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("ACCOUNTSGROUPIID");
            entity.Property(e => e.AcctExecEmpno).HasColumnName("acctExecEmpno");
            entity.Property(e => e.Advance)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("ADVANCE");
            entity.Property(e => e.Agency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("agency");
            entity.Property(e => e.Applyflatprice).HasColumnName("APPLYFLATPRICE");
            entity.Property(e => e.Applytaxonconsumable).HasColumnName("APPLYTAXONCONSUMABLE");
            entity.Property(e => e.Applytaxondamagewaiver).HasColumnName("APPLYTAXONDAMAGEWAIVER");
            entity.Property(e => e.Applytaxonservicecharge).HasColumnName("APPLYTAXONSERVICECHARGE");
            entity.Property(e => e.Approvalrequired)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("APPROVALREQUIRED");
            entity.Property(e => e.Approveddiscountperc)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("APPROVEDDISCOUNTPERC");
            entity.Property(e => e.Basecurrencyiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("BASECURRENCYIID");
            entity.Property(e => e.Bidmarkup)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("bidmarkup");
            entity.Property(e => e.Bidroot).HasColumnName("bidroot");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Billingaddressiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("BILLINGADDRESSIID");
            entity.Property(e => e.Billingcontactiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("BILLINGCONTACTIID");
            entity.Property(e => e.Billingcustomeriid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("BILLINGCUSTOMERIID");
            entity.Property(e => e.Billingtermiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("BILLINGTERMIID");
            entity.Property(e => e.Boothroomno).HasColumnName("BOOTHROOMNO");
            entity.Property(e => e.Burdenpercentage)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("BURDENPERCENTAGE");
            entity.Property(e => e.Category)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CATEGORY");
            entity.Property(e => e.ChargebasedDayweekmonthprice).HasColumnName("CHARGEBASED_DAYWEEKMONTHPRICE");
            entity.Property(e => e.Chargeenddate).HasColumnName("CHARGEENDDATE");
            entity.Property(e => e.Chargestartdate).HasColumnName("CHARGESTARTDATE");
            entity.Property(e => e.Cmtaxamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CMTAXAMOUNT");
            entity.Property(e => e.Comments)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("COMMENTS");
            entity.Property(e => e.Commissiongroup).HasColumnName("COMMISSIONGROUP");
            entity.Property(e => e.Consumablepercent)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CONSUMABLEPERCENT");
            entity.Property(e => e.Consumabletype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CONSUMABLETYPE");
            entity.Property(e => e.Consumablevalue)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CONSUMABLEVALUE");
            entity.Property(e => e.Contactiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CONTACTIID");
            entity.Property(e => e.Contractdescription).HasColumnName("CONTRACTDESCRIPTION");
            entity.Property(e => e.Contractid).HasColumnName("CONTRACTID");
            entity.Property(e => e.Contractiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CONTRACTIID");
            entity.Property(e => e.Converteddate).HasColumnName("CONVERTEDDATE");
            entity.Property(e => e.Country)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("country");
            entity.Property(e => e.Createdby)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CREATEDBY");
            entity.Property(e => e.Credithold)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CREDITHOLD");
            entity.Property(e => e.Currency).HasColumnName("currency");
            entity.Property(e => e.Currencyiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CURRENCYIID");
            entity.Property(e => e.Custdiscountgroup).HasColumnName("CUSTDISCOUNTGROUP");
            entity.Property(e => e.Custno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("custno");
            entity.Property(e => e.Customerpricegroupid).HasColumnName("CUSTOMERPRICEGROUPID");
            entity.Property(e => e.Customertaxgroup).HasColumnName("CUSTOMERTAXGROUP");
            entity.Property(e => e.Customstatus)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CUSTOMSTATUS");
            entity.Property(e => e.Damagewaiverpercent)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DAMAGEWAIVERPERCENT");
            entity.Property(e => e.Damagewaivertype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DAMAGEWAIVERTYPE");
            entity.Property(e => e.Damagewaivervalue)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DAMAGEWAIVERVALUE");
            entity.Property(e => e.Datecreated).HasColumnName("DATECREATED");
            entity.Property(e => e.Datevalidtill).HasColumnName("DATEVALIDTILL");
            entity.Property(e => e.Daysinmonth)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DAYSINMONTH");
            entity.Property(e => e.Daysinweek)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DAYSINWEEK");
            entity.Property(e => e.Defaultmainorderinfotosuborder).HasColumnName("DEFAULTMAINORDERINFOTOSUBORDER");
            entity.Property(e => e.Defaultunit)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DEFAULTUNIT");
            entity.Property(e => e.Deliverycharges)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DELIVERYCHARGES");
            entity.Property(e => e.Department).HasColumnName("DEPARTMENT");
            entity.Property(e => e.Deposit)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DEPOSIT");
            entity.Property(e => e.Disclaimer).HasColumnName("DISCLAIMER");
            entity.Property(e => e.Disclaimerid).HasColumnName("DISCLAIMERID");
            entity.Property(e => e.Discountamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DISCOUNTAMOUNT");
            entity.Property(e => e.Discounttype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DISCOUNTTYPE");
            entity.Property(e => e.Dummy1)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DUMMY1");
            entity.Property(e => e.Dwtaxamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DWTAXAMOUNT");
            entity.Property(e => e.Employeeiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("EMPLOYEEIID");
            entity.Property(e => e.Enddate).HasColumnName("ENDDATE");
            entity.Property(e => e.EnddateF).HasColumnName("enddate_f");
            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("engactivecd");
            entity.Property(e => e.EngrEmpno).HasColumnName("engrEmpno");
            entity.Property(e => e.Entitydesc).HasColumnName("entitydesc");
            entity.Property(e => e.Entityno).HasColumnName("entityno");
            entity.Property(e => e.Entitytype)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("entitytype");
            entity.Property(e => e.Evenlociid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("EVENLOCIID");
            entity.Property(e => e.Eventiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("EVENTIID");
            entity.Property(e => e.Expenses)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("EXPENSES");
            entity.Property(e => e.Finactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("finactivecd");
            entity.Property(e => e.Firstinvoiceamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("FIRSTINVOICEAMOUNT");
            entity.Property(e => e.Flatprice)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("FLATPRICE");
            entity.Property(e => e.Freightcharges)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("FREIGHTCHARGES");
            entity.Property(e => e.Functioniid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("FUNCTIONIID");
            entity.Property(e => e.Industry)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("industry");
            entity.Property(e => e.Insuranceamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("INSURANCEAMOUNT");
            entity.Property(e => e.Insurancepercent)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("INSURANCEPERCENT");
            entity.Property(e => e.InternalOrg)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("internal_org");
            entity.Property(e => e.Inuseby).HasColumnName("INUSEBY");
            entity.Property(e => e.Isautoreceiveship).HasColumnName("ISAUTORECEIVESHIP");
            entity.Property(e => e.Isforcedclosed).HasColumnName("ISFORCEDCLOSED");
            entity.Property(e => e.Isicsorder).HasColumnName("ISICSORDER");
            entity.Property(e => e.Ismasterbilling).HasColumnName("ISMASTERBILLING");
            entity.Property(e => e.Istaxable).HasColumnName("ISTAXABLE");
            entity.Property(e => e.Isworkorder).HasColumnName("ISWORKORDER");
            entity.Property(e => e.Jobiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("JOBIID");
            entity.Property(e => e.Laborpricegroupid).HasColumnName("LABORPRICEGROUPID");
            entity.Property(e => e.Languageid).HasColumnName("LANGUAGEID");
            entity.Property(e => e.Lastprinteddate).HasColumnName("LASTPRINTEDDATE");
            entity.Property(e => e.Lastupdated).HasColumnName("LASTUPDATED");
            entity.Property(e => e.Lastupdateddbdate).HasColumnName("LASTUPDATEDDBDATE");
            entity.Property(e => e.Loadindate).HasColumnName("LOADINDATE");
            entity.Property(e => e.Location).HasColumnName("LOCATION");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("locationcd");
            entity.Property(e => e.Lockcount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("LOCKCOUNT");
            entity.Property(e => e.Masterbillingiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("MASTERBILLINGIID");
            entity.Property(e => e.Miscmargin)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("MISCMARGIN");
            entity.Property(e => e.Mop)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("MOP");
            entity.Property(e => e.Nextinvoicedate).HasColumnName("NEXTINVOICEDATE");
            entity.Property(e => e.Notificationflag).HasColumnName("NOTIFICATIONFLAG");
            entity.Property(e => e.Opsmgr).HasColumnName("opsmgr");
            entity.Property(e => e.Ordercategory).HasColumnName("ORDERCATEGORY");
            entity.Property(e => e.Orderdiscount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("ORDERDISCOUNT");
            entity.Property(e => e.Ordersubcategory).HasColumnName("ORDERSUBCATEGORY");
            entity.Property(e => e.Ordersubtype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("ORDERSUBTYPE");
            entity.Property(e => e.Overheadrate)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("OVERHEADRATE");
            entity.Property(e => e.Parentcontractiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PARENTCONTRACTIID");
            entity.Property(e => e.Parententitydesc).HasColumnName("parententitydesc");
            entity.Property(e => e.Parententityno).HasColumnName("parententityno");
            entity.Property(e => e.Payhow)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PAYHOW");
            entity.Property(e => e.Paymenttermsiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PAYMENTTERMSIID");
            entity.Property(e => e.Paymethodreference).HasColumnName("PAYMETHODREFERENCE");
            entity.Property(e => e.Paytype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PAYTYPE");
            entity.Property(e => e.Periodicscheduletype).HasColumnName("PERIODICSCHEDULETYPE");
            entity.Property(e => e.Periodiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PERIODIID");
            entity.Property(e => e.Pickupbycustomer).HasColumnName("PICKUPBYCUSTOMER");
            entity.Property(e => e.Pickupdate).HasColumnName("PICKUPDATE");
            entity.Property(e => e.Plactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("plactivecd");
            entity.Property(e => e.Planneriid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PLANNERIID");
            entity.Property(e => e.Ponumber)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PONUMBER");
            entity.Property(e => e.Preorposttax)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PREORPOSTTAX");
            entity.Property(e => e.Prepdate).HasColumnName("PREPDATE");
            entity.Property(e => e.Pricingiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PRICINGIID");
            entity.Property(e => e.Pricingruleiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PRICINGRULEIID");
            entity.Property(e => e.Priority)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PRIORITY");
            entity.Property(e => e.Prob).HasColumnName("prob");
            entity.Property(e => e.Probability)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PROBABILITY");
            entity.Property(e => e.Profitcentre).HasColumnName("PROFITCENTRE");
            entity.Property(e => e.Project).HasColumnName("PROJECT");
            entity.Property(e => e.Propduedate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("propduedate");
            entity.Property(e => e.Proptype)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("proptype");
            entity.Property(e => e.Quoteiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("QUOTEIID");
            entity.Property(e => e.Readyforoperations).HasColumnName("READYFOROPERATIONS");
            entity.Property(e => e.Readytopack).HasColumnName("readytopack");
            entity.Property(e => e.Rehearsaldate).HasColumnName("REHEARSALDATE");
            entity.Property(e => e.Respempno).HasColumnName("respempno");
            entity.Property(e => e.Returnaddressiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("RETURNADDRESSIID");
            entity.Property(e => e.Returnboothroomno).HasColumnName("RETURNBOOTHROOMNO");
            entity.Property(e => e.Returnbycustomer).HasColumnName("RETURNBYCUSTOMER");
            entity.Property(e => e.Returncarriertype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("RETURNCARRIERTYPE");
            entity.Property(e => e.Returnconfirmed)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("RETURNCONFIRMED");
            entity.Property(e => e.Returncontactiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("RETURNCONTACTIID");
            entity.Property(e => e.Returncontactname).HasColumnName("RETURNCONTACTNAME");
            entity.Property(e => e.Returndate).HasColumnName("RETURNDATE");
            entity.Property(e => e.Returnlocation).HasColumnName("RETURNLOCATION");
            entity.Property(e => e.Returntrackingno).HasColumnName("RETURNTRACKINGNO");
            entity.Property(e => e.Revision)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("REVISION");
            entity.Property(e => e.Revisiondate).HasColumnName("REVISIONDATE");
            entity.Property(e => e.Roundtoid).HasColumnName("ROUNDTOID");
            entity.Property(e => e.Rushcharges)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("RUSHCHARGES");
            entity.Property(e => e.Saleorder)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SALEORDER");
            entity.Property(e => e.Salespersoniid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SALESPERSONIID");
            entity.Property(e => e.Scondiscountedamount).HasColumnName("SCONDISCOUNTEDAMOUNT");
            entity.Property(e => e.Servicechargeonsellitems).HasColumnName("SERVICECHARGEONSELLITEMS");
            entity.Property(e => e.Servicechargepercent)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SERVICECHARGEPERCENT");
            entity.Property(e => e.Servicechargetaxamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SERVICECHARGETAXAMOUNT");
            entity.Property(e => e.Servicechargetype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SERVICECHARGETYPE");
            entity.Property(e => e.Servicechargevalue)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SERVICECHARGEVALUE");
            entity.Property(e => e.Sfactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sfactivecd");
            entity.Property(e => e.Shipcarriertype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SHIPCARRIERTYPE");
            entity.Property(e => e.Shipdate).HasColumnName("SHIPDATE");
            entity.Property(e => e.Shipno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("shipno");
            entity.Property(e => e.Shippingaddressiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SHIPPINGADDRESSIID");
            entity.Property(e => e.Shippingboothroomno).HasColumnName("SHIPPINGBOOTHROOMNO");
            entity.Property(e => e.Shippingcontactname).HasColumnName("SHIPPINGCONTACTNAME");
            entity.Property(e => e.Shippingcustomeriid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SHIPPINGCUSTOMERIID");
            entity.Property(e => e.Shippinglocation).HasColumnName("SHIPPINGLOCATION");
            entity.Property(e => e.Showenddate).HasColumnName("SHOWENDDATE");
            entity.Property(e => e.Showstartdate).HasColumnName("SHOWSTARTDATE");
            entity.Property(e => e.Signoffstatus).HasColumnName("SIGNOFFSTATUS");
            entity.Property(e => e.Sitecurrencyiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SITECURRENCYIID");
            entity.Property(e => e.Siteiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SITEIID");
            entity.Property(e => e.Startdate).HasColumnName("STARTDATE");
            entity.Property(e => e.StartdateF).HasColumnName("startdate_f");
            entity.Property(e => e.Stationiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("STATIONIID");
            entity.Property(e => e.Status)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("STATUS");
            entity.Property(e => e.Stopbillingdate).HasColumnName("STOPBILLINGDATE");
            entity.Property(e => e.Stopbillingflag).HasColumnName("STOPBILLINGFLAG");
            entity.Property(e => e.Strikedate).HasColumnName("STRIKEDATE");
            entity.Property(e => e.Subcontract)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("subcontract");
            entity.Property(e => e.Subno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("subno");
            entity.Property(e => e.Taxcertno).HasColumnName("TAXCERTNO");
            entity.Property(e => e.Taxlabor).HasColumnName("TAXLABOR");
            entity.Property(e => e.Totalitemsamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALITEMSAMOUNT");
            entity.Property(e => e.Totalitemsdiscount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALITEMSDISCOUNT");
            entity.Property(e => e.Totalitemstaxamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALITEMSTAXAMOUNT");
            entity.Property(e => e.Totallaboramount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALLABORAMOUNT");
            entity.Property(e => e.Totallabordiscount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALLABORDISCOUNT");
            entity.Property(e => e.Totallabortaxamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALLABORTAXAMOUNT");
            entity.Property(e => e.Totalorderfulldurationamt)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALORDERFULLDURATIONAMT");
            entity.Property(e => e.Totalorderfulldurationtax)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALORDERFULLDURATIONTAX");
            entity.Property(e => e.Totaltaxamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALTAXAMOUNT");
            entity.Property(e => e.Trackingno).HasColumnName("TRACKINGNO");
            entity.Property(e => e.Transactioncurrencyiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TRANSACTIONCURRENCYIID");
            entity.Property(e => e.Type)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TYPE");
            entity.Property(e => e.Uccontractdescription).HasColumnName("UCCONTRACTDESCRIPTION");
            entity.Property(e => e.Useeventpricing).HasColumnName("USEEVENTPRICING");
            entity.Property(e => e.Userdefinedstatus)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("USERDEFINEDSTATUS");
            entity.Property(e => e.VersionRemarks).HasColumnName("VERSION_REMARKS");
            entity.Property(e => e.Viewfirstinvoice).HasColumnName("VIEWFIRSTINVOICE");
            entity.Property(e => e.Warehousedept)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("WAREHOUSEDEPT");
            entity.Property(e => e.Warehousestatus)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("WAREHOUSESTATUS");
        });

        modelBuilder.Entity<TmpEdscontractsWithOnlyProjectsImportGreenDay>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSContractsWithOnlyProjects_Import_GreenDay");

            entity.Property(e => e.Accountsgroupiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("ACCOUNTSGROUPIID");
            entity.Property(e => e.AcctExecEmpno).HasColumnName("acctExecEmpno");
            entity.Property(e => e.Advance)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("ADVANCE");
            entity.Property(e => e.Agency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("agency");
            entity.Property(e => e.Applyflatprice).HasColumnName("APPLYFLATPRICE");
            entity.Property(e => e.Applytaxonconsumable).HasColumnName("APPLYTAXONCONSUMABLE");
            entity.Property(e => e.Applytaxondamagewaiver).HasColumnName("APPLYTAXONDAMAGEWAIVER");
            entity.Property(e => e.Applytaxonservicecharge).HasColumnName("APPLYTAXONSERVICECHARGE");
            entity.Property(e => e.Approvalrequired)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("APPROVALREQUIRED");
            entity.Property(e => e.Approveddiscountperc)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("APPROVEDDISCOUNTPERC");
            entity.Property(e => e.Basecurrencyiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("BASECURRENCYIID");
            entity.Property(e => e.Bidmarkup)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("bidmarkup");
            entity.Property(e => e.Bidroot).HasColumnName("bidroot");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Billingaddressiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("BILLINGADDRESSIID");
            entity.Property(e => e.Billingcontactiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("BILLINGCONTACTIID");
            entity.Property(e => e.Billingcustomeriid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("BILLINGCUSTOMERIID");
            entity.Property(e => e.Billingtermiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("BILLINGTERMIID");
            entity.Property(e => e.Boothroomno).HasColumnName("BOOTHROOMNO");
            entity.Property(e => e.Burdenpercentage)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("BURDENPERCENTAGE");
            entity.Property(e => e.Category)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CATEGORY");
            entity.Property(e => e.ChargebasedDayweekmonthprice).HasColumnName("CHARGEBASED_DAYWEEKMONTHPRICE");
            entity.Property(e => e.Chargeenddate).HasColumnName("CHARGEENDDATE");
            entity.Property(e => e.Chargestartdate).HasColumnName("CHARGESTARTDATE");
            entity.Property(e => e.Cmtaxamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CMTAXAMOUNT");
            entity.Property(e => e.Comments)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("COMMENTS");
            entity.Property(e => e.Commissiongroup).HasColumnName("COMMISSIONGROUP");
            entity.Property(e => e.Consumablepercent)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CONSUMABLEPERCENT");
            entity.Property(e => e.Consumabletype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CONSUMABLETYPE");
            entity.Property(e => e.Consumablevalue)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CONSUMABLEVALUE");
            entity.Property(e => e.Contactiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CONTACTIID");
            entity.Property(e => e.Contractdescription).HasColumnName("CONTRACTDESCRIPTION");
            entity.Property(e => e.Contractid).HasColumnName("CONTRACTID");
            entity.Property(e => e.Contractiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CONTRACTIID");
            entity.Property(e => e.Converteddate).HasColumnName("CONVERTEDDATE");
            entity.Property(e => e.Country)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("country");
            entity.Property(e => e.Createdby)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CREATEDBY");
            entity.Property(e => e.Credithold)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CREDITHOLD");
            entity.Property(e => e.Currency).HasColumnName("currency");
            entity.Property(e => e.Currencyiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CURRENCYIID");
            entity.Property(e => e.Custdiscountgroup).HasColumnName("CUSTDISCOUNTGROUP");
            entity.Property(e => e.Custno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("custno");
            entity.Property(e => e.Customerpricegroupid).HasColumnName("CUSTOMERPRICEGROUPID");
            entity.Property(e => e.Customertaxgroup).HasColumnName("CUSTOMERTAXGROUP");
            entity.Property(e => e.Customstatus)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CUSTOMSTATUS");
            entity.Property(e => e.Damagewaiverpercent)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DAMAGEWAIVERPERCENT");
            entity.Property(e => e.Damagewaivertype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DAMAGEWAIVERTYPE");
            entity.Property(e => e.Damagewaivervalue)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DAMAGEWAIVERVALUE");
            entity.Property(e => e.Datecreated).HasColumnName("DATECREATED");
            entity.Property(e => e.Datevalidtill).HasColumnName("DATEVALIDTILL");
            entity.Property(e => e.Daysinmonth)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DAYSINMONTH");
            entity.Property(e => e.Daysinweek)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DAYSINWEEK");
            entity.Property(e => e.Defaultmainorderinfotosuborder).HasColumnName("DEFAULTMAINORDERINFOTOSUBORDER");
            entity.Property(e => e.Defaultunit)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DEFAULTUNIT");
            entity.Property(e => e.Deliverycharges)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DELIVERYCHARGES");
            entity.Property(e => e.Department).HasColumnName("DEPARTMENT");
            entity.Property(e => e.Deposit)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DEPOSIT");
            entity.Property(e => e.Disclaimer).HasColumnName("DISCLAIMER");
            entity.Property(e => e.Disclaimerid).HasColumnName("DISCLAIMERID");
            entity.Property(e => e.Discountamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DISCOUNTAMOUNT");
            entity.Property(e => e.Discounttype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DISCOUNTTYPE");
            entity.Property(e => e.Dummy1)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DUMMY1");
            entity.Property(e => e.Dwtaxamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DWTAXAMOUNT");
            entity.Property(e => e.Employeeiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("EMPLOYEEIID");
            entity.Property(e => e.Enddate).HasColumnName("ENDDATE");
            entity.Property(e => e.EnddateF).HasColumnName("enddate_f");
            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("engactivecd");
            entity.Property(e => e.EngrEmpno).HasColumnName("engrEmpno");
            entity.Property(e => e.Entitydesc).HasColumnName("entitydesc");
            entity.Property(e => e.Entityno).HasColumnName("entityno");
            entity.Property(e => e.Entitytype)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("entitytype");
            entity.Property(e => e.Evenlociid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("EVENLOCIID");
            entity.Property(e => e.Eventiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("EVENTIID");
            entity.Property(e => e.Expenses)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("EXPENSES");
            entity.Property(e => e.Finactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("finactivecd");
            entity.Property(e => e.Firstinvoiceamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("FIRSTINVOICEAMOUNT");
            entity.Property(e => e.Flatprice)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("FLATPRICE");
            entity.Property(e => e.Freightcharges)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("FREIGHTCHARGES");
            entity.Property(e => e.Functioniid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("FUNCTIONIID");
            entity.Property(e => e.Industry)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("industry");
            entity.Property(e => e.Insuranceamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("INSURANCEAMOUNT");
            entity.Property(e => e.Insurancepercent)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("INSURANCEPERCENT");
            entity.Property(e => e.InternalOrg)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("internal_org");
            entity.Property(e => e.Inuseby).HasColumnName("INUSEBY");
            entity.Property(e => e.Isautoreceiveship).HasColumnName("ISAUTORECEIVESHIP");
            entity.Property(e => e.Isforcedclosed).HasColumnName("ISFORCEDCLOSED");
            entity.Property(e => e.Isicsorder).HasColumnName("ISICSORDER");
            entity.Property(e => e.Ismasterbilling).HasColumnName("ISMASTERBILLING");
            entity.Property(e => e.Istaxable).HasColumnName("ISTAXABLE");
            entity.Property(e => e.Isworkorder).HasColumnName("ISWORKORDER");
            entity.Property(e => e.Jobiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("JOBIID");
            entity.Property(e => e.Laborpricegroupid).HasColumnName("LABORPRICEGROUPID");
            entity.Property(e => e.Languageid).HasColumnName("LANGUAGEID");
            entity.Property(e => e.Lastprinteddate).HasColumnName("LASTPRINTEDDATE");
            entity.Property(e => e.Lastupdated).HasColumnName("LASTUPDATED");
            entity.Property(e => e.Lastupdateddbdate).HasColumnName("LASTUPDATEDDBDATE");
            entity.Property(e => e.Loadindate).HasColumnName("LOADINDATE");
            entity.Property(e => e.Location).HasColumnName("LOCATION");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("locationcd");
            entity.Property(e => e.Lockcount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("LOCKCOUNT");
            entity.Property(e => e.Masterbillingiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("MASTERBILLINGIID");
            entity.Property(e => e.Miscmargin)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("MISCMARGIN");
            entity.Property(e => e.Mop)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("MOP");
            entity.Property(e => e.Nextinvoicedate).HasColumnName("NEXTINVOICEDATE");
            entity.Property(e => e.Notificationflag).HasColumnName("NOTIFICATIONFLAG");
            entity.Property(e => e.Opsmgr).HasColumnName("opsmgr");
            entity.Property(e => e.Ordercategory).HasColumnName("ORDERCATEGORY");
            entity.Property(e => e.Orderdiscount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("ORDERDISCOUNT");
            entity.Property(e => e.Ordersubcategory).HasColumnName("ORDERSUBCATEGORY");
            entity.Property(e => e.Ordersubtype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("ORDERSUBTYPE");
            entity.Property(e => e.Overheadrate)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("OVERHEADRATE");
            entity.Property(e => e.Parentcontractiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PARENTCONTRACTIID");
            entity.Property(e => e.Parententitydesc).HasColumnName("parententitydesc");
            entity.Property(e => e.Parententityno).HasColumnName("parententityno");
            entity.Property(e => e.Payhow)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PAYHOW");
            entity.Property(e => e.Paymenttermsiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PAYMENTTERMSIID");
            entity.Property(e => e.Paymethodreference).HasColumnName("PAYMETHODREFERENCE");
            entity.Property(e => e.Paytype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PAYTYPE");
            entity.Property(e => e.Periodicscheduletype).HasColumnName("PERIODICSCHEDULETYPE");
            entity.Property(e => e.Periodiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PERIODIID");
            entity.Property(e => e.Pickupbycustomer).HasColumnName("PICKUPBYCUSTOMER");
            entity.Property(e => e.Pickupdate).HasColumnName("PICKUPDATE");
            entity.Property(e => e.Plactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("plactivecd");
            entity.Property(e => e.Planneriid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PLANNERIID");
            entity.Property(e => e.Ponumber)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PONUMBER");
            entity.Property(e => e.Preorposttax)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PREORPOSTTAX");
            entity.Property(e => e.Prepdate).HasColumnName("PREPDATE");
            entity.Property(e => e.Pricingiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PRICINGIID");
            entity.Property(e => e.Pricingruleiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PRICINGRULEIID");
            entity.Property(e => e.Priority)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PRIORITY");
            entity.Property(e => e.Prob).HasColumnName("prob");
            entity.Property(e => e.Probability)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PROBABILITY");
            entity.Property(e => e.Profitcentre).HasColumnName("PROFITCENTRE");
            entity.Property(e => e.Project).HasColumnName("PROJECT");
            entity.Property(e => e.Propduedate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("propduedate");
            entity.Property(e => e.Proptype)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("proptype");
            entity.Property(e => e.Quoteiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("QUOTEIID");
            entity.Property(e => e.Readyforoperations).HasColumnName("READYFOROPERATIONS");
            entity.Property(e => e.Readytopack).HasColumnName("readytopack");
            entity.Property(e => e.Rehearsaldate).HasColumnName("REHEARSALDATE");
            entity.Property(e => e.Respempno).HasColumnName("respempno");
            entity.Property(e => e.Returnaddressiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("RETURNADDRESSIID");
            entity.Property(e => e.Returnboothroomno).HasColumnName("RETURNBOOTHROOMNO");
            entity.Property(e => e.Returnbycustomer).HasColumnName("RETURNBYCUSTOMER");
            entity.Property(e => e.Returncarriertype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("RETURNCARRIERTYPE");
            entity.Property(e => e.Returnconfirmed)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("RETURNCONFIRMED");
            entity.Property(e => e.Returncontactiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("RETURNCONTACTIID");
            entity.Property(e => e.Returncontactname).HasColumnName("RETURNCONTACTNAME");
            entity.Property(e => e.Returndate).HasColumnName("RETURNDATE");
            entity.Property(e => e.Returnlocation).HasColumnName("RETURNLOCATION");
            entity.Property(e => e.Returntrackingno).HasColumnName("RETURNTRACKINGNO");
            entity.Property(e => e.Revision)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("REVISION");
            entity.Property(e => e.Revisiondate).HasColumnName("REVISIONDATE");
            entity.Property(e => e.Roundtoid).HasColumnName("ROUNDTOID");
            entity.Property(e => e.Rushcharges)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("RUSHCHARGES");
            entity.Property(e => e.Saleorder)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SALEORDER");
            entity.Property(e => e.Salespersoniid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SALESPERSONIID");
            entity.Property(e => e.Scondiscountedamount).HasColumnName("SCONDISCOUNTEDAMOUNT");
            entity.Property(e => e.Servicechargeonsellitems).HasColumnName("SERVICECHARGEONSELLITEMS");
            entity.Property(e => e.Servicechargepercent)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SERVICECHARGEPERCENT");
            entity.Property(e => e.Servicechargetaxamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SERVICECHARGETAXAMOUNT");
            entity.Property(e => e.Servicechargetype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SERVICECHARGETYPE");
            entity.Property(e => e.Servicechargevalue)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SERVICECHARGEVALUE");
            entity.Property(e => e.Sfactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sfactivecd");
            entity.Property(e => e.Shipcarriertype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SHIPCARRIERTYPE");
            entity.Property(e => e.Shipdate).HasColumnName("SHIPDATE");
            entity.Property(e => e.Shipno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("shipno");
            entity.Property(e => e.Shippingaddressiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SHIPPINGADDRESSIID");
            entity.Property(e => e.Shippingboothroomno).HasColumnName("SHIPPINGBOOTHROOMNO");
            entity.Property(e => e.Shippingcontactname).HasColumnName("SHIPPINGCONTACTNAME");
            entity.Property(e => e.Shippingcustomeriid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SHIPPINGCUSTOMERIID");
            entity.Property(e => e.Shippinglocation).HasColumnName("SHIPPINGLOCATION");
            entity.Property(e => e.Showenddate).HasColumnName("SHOWENDDATE");
            entity.Property(e => e.Showstartdate).HasColumnName("SHOWSTARTDATE");
            entity.Property(e => e.Signoffstatus).HasColumnName("SIGNOFFSTATUS");
            entity.Property(e => e.Sitecurrencyiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SITECURRENCYIID");
            entity.Property(e => e.Siteiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SITEIID");
            entity.Property(e => e.Startdate).HasColumnName("STARTDATE");
            entity.Property(e => e.StartdateF).HasColumnName("startdate_f");
            entity.Property(e => e.Stationiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("STATIONIID");
            entity.Property(e => e.Status)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("STATUS");
            entity.Property(e => e.Stopbillingdate).HasColumnName("STOPBILLINGDATE");
            entity.Property(e => e.Stopbillingflag).HasColumnName("STOPBILLINGFLAG");
            entity.Property(e => e.Strikedate).HasColumnName("STRIKEDATE");
            entity.Property(e => e.Subcontract)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("subcontract");
            entity.Property(e => e.Subno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("subno");
            entity.Property(e => e.Taxcertno).HasColumnName("TAXCERTNO");
            entity.Property(e => e.Taxlabor).HasColumnName("TAXLABOR");
            entity.Property(e => e.Totalitemsamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALITEMSAMOUNT");
            entity.Property(e => e.Totalitemsdiscount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALITEMSDISCOUNT");
            entity.Property(e => e.Totalitemstaxamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALITEMSTAXAMOUNT");
            entity.Property(e => e.Totallaboramount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALLABORAMOUNT");
            entity.Property(e => e.Totallabordiscount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALLABORDISCOUNT");
            entity.Property(e => e.Totallabortaxamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALLABORTAXAMOUNT");
            entity.Property(e => e.Totalorderfulldurationamt)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALORDERFULLDURATIONAMT");
            entity.Property(e => e.Totalorderfulldurationtax)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALORDERFULLDURATIONTAX");
            entity.Property(e => e.Totaltaxamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALTAXAMOUNT");
            entity.Property(e => e.Trackingno).HasColumnName("TRACKINGNO");
            entity.Property(e => e.Transactioncurrencyiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TRANSACTIONCURRENCYIID");
            entity.Property(e => e.Type)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TYPE");
            entity.Property(e => e.Uccontractdescription).HasColumnName("UCCONTRACTDESCRIPTION");
            entity.Property(e => e.Useeventpricing).HasColumnName("USEEVENTPRICING");
            entity.Property(e => e.Userdefinedstatus)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("USERDEFINEDSTATUS");
            entity.Property(e => e.VersionRemarks).HasColumnName("VERSION_REMARKS");
            entity.Property(e => e.Viewfirstinvoice).HasColumnName("VIEWFIRSTINVOICE");
            entity.Property(e => e.Warehousedept)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("WAREHOUSEDEPT");
            entity.Property(e => e.Warehousestatus)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("WAREHOUSESTATUS");
        });

        modelBuilder.Entity<TmpEdscontractsWithoutEventsOrProjectsImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSContractsWithoutEventsOrProjects_Import");

            entity.Property(e => e.Accountsgroupiid).HasColumnName("ACCOUNTSGROUPIID");
            entity.Property(e => e.AcctExecEmpno).HasColumnName("acctExecEmpno");
            entity.Property(e => e.Advance).HasColumnName("ADVANCE");
            entity.Property(e => e.Agency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("agency");
            entity.Property(e => e.Applyflatprice).HasColumnName("APPLYFLATPRICE");
            entity.Property(e => e.Applytaxonconsumable).HasColumnName("APPLYTAXONCONSUMABLE");
            entity.Property(e => e.Applytaxondamagewaiver).HasColumnName("APPLYTAXONDAMAGEWAIVER");
            entity.Property(e => e.Applytaxonservicecharge).HasColumnName("APPLYTAXONSERVICECHARGE");
            entity.Property(e => e.Approvalrequired).HasColumnName("APPROVALREQUIRED");
            entity.Property(e => e.Approveddiscountperc).HasColumnName("APPROVEDDISCOUNTPERC");
            entity.Property(e => e.Basecurrencyiid).HasColumnName("BASECURRENCYIID");
            entity.Property(e => e.Bidmarkup)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("bidmarkup");
            entity.Property(e => e.Bidroot).HasColumnName("bidroot");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Billingaddressiid).HasColumnName("BILLINGADDRESSIID");
            entity.Property(e => e.Billingcontactiid).HasColumnName("BILLINGCONTACTIID");
            entity.Property(e => e.Billingcustomeriid).HasColumnName("BILLINGCUSTOMERIID");
            entity.Property(e => e.Billingtermiid).HasColumnName("BILLINGTERMIID");
            entity.Property(e => e.Boothroomno).HasColumnName("BOOTHROOMNO");
            entity.Property(e => e.Burdenpercentage).HasColumnName("BURDENPERCENTAGE");
            entity.Property(e => e.Category).HasColumnName("CATEGORY");
            entity.Property(e => e.ChargebasedDayweekmonthprice).HasColumnName("CHARGEBASED_DAYWEEKMONTHPRICE");
            entity.Property(e => e.Chargeenddate).HasColumnName("CHARGEENDDATE");
            entity.Property(e => e.Chargestartdate).HasColumnName("CHARGESTARTDATE");
            entity.Property(e => e.Cmtaxamount).HasColumnName("CMTAXAMOUNT");
            entity.Property(e => e.Comments).HasColumnName("COMMENTS");
            entity.Property(e => e.Commissiongroup).HasColumnName("COMMISSIONGROUP");
            entity.Property(e => e.Consumablepercent).HasColumnName("CONSUMABLEPERCENT");
            entity.Property(e => e.Consumabletype).HasColumnName("CONSUMABLETYPE");
            entity.Property(e => e.Consumablevalue).HasColumnName("CONSUMABLEVALUE");
            entity.Property(e => e.Contactiid).HasColumnName("CONTACTIID");
            entity.Property(e => e.Contractdescription).HasColumnName("CONTRACTDESCRIPTION");
            entity.Property(e => e.Contractid).HasColumnName("CONTRACTID");
            entity.Property(e => e.Contractiid).HasColumnName("CONTRACTIID");
            entity.Property(e => e.Converteddate).HasColumnName("CONVERTEDDATE");
            entity.Property(e => e.Country)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("country");
            entity.Property(e => e.Createdby).HasColumnName("CREATEDBY");
            entity.Property(e => e.Credithold).HasColumnName("CREDITHOLD");
            entity.Property(e => e.Currency).HasColumnName("currency");
            entity.Property(e => e.Currencyiid).HasColumnName("CURRENCYIID");
            entity.Property(e => e.Custdiscountgroup).HasColumnName("CUSTDISCOUNTGROUP");
            entity.Property(e => e.Custno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("custno");
            entity.Property(e => e.Customerpricegroupid).HasColumnName("CUSTOMERPRICEGROUPID");
            entity.Property(e => e.Customertaxgroup).HasColumnName("CUSTOMERTAXGROUP");
            entity.Property(e => e.Customstatus).HasColumnName("CUSTOMSTATUS");
            entity.Property(e => e.Damagewaiverpercent).HasColumnName("DAMAGEWAIVERPERCENT");
            entity.Property(e => e.Damagewaivertype).HasColumnName("DAMAGEWAIVERTYPE");
            entity.Property(e => e.Damagewaivervalue).HasColumnName("DAMAGEWAIVERVALUE");
            entity.Property(e => e.Datecreated).HasColumnName("DATECREATED");
            entity.Property(e => e.Datevalidtill).HasColumnName("DATEVALIDTILL");
            entity.Property(e => e.Daysinmonth).HasColumnName("DAYSINMONTH");
            entity.Property(e => e.Daysinweek).HasColumnName("DAYSINWEEK");
            entity.Property(e => e.Defaultmainorderinfotosuborder).HasColumnName("DEFAULTMAINORDERINFOTOSUBORDER");
            entity.Property(e => e.Defaultunit).HasColumnName("DEFAULTUNIT");
            entity.Property(e => e.Deliverycharges).HasColumnName("DELIVERYCHARGES");
            entity.Property(e => e.Department).HasColumnName("DEPARTMENT");
            entity.Property(e => e.Deposit).HasColumnName("DEPOSIT");
            entity.Property(e => e.Disclaimer).HasColumnName("DISCLAIMER");
            entity.Property(e => e.Disclaimerid).HasColumnName("DISCLAIMERID");
            entity.Property(e => e.Discountamount).HasColumnName("DISCOUNTAMOUNT");
            entity.Property(e => e.Discounttype).HasColumnName("DISCOUNTTYPE");
            entity.Property(e => e.Dummy1).HasColumnName("DUMMY1");
            entity.Property(e => e.Dwtaxamount).HasColumnName("DWTAXAMOUNT");
            entity.Property(e => e.Employeeiid).HasColumnName("EMPLOYEEIID");
            entity.Property(e => e.Enddate).HasColumnName("ENDDATE");
            entity.Property(e => e.EnddateF).HasColumnName("enddate_f");
            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("engactivecd");
            entity.Property(e => e.EngrEmpno).HasColumnName("engrEmpno");
            entity.Property(e => e.Entitydesc).HasColumnName("entitydesc");
            entity.Property(e => e.Entityno).HasColumnName("entityno");
            entity.Property(e => e.Entitytype)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("entitytype");
            entity.Property(e => e.Evenlociid).HasColumnName("EVENLOCIID");
            entity.Property(e => e.Eventiid).HasColumnName("EVENTIID");
            entity.Property(e => e.Expenses).HasColumnName("EXPENSES");
            entity.Property(e => e.Finactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("finactivecd");
            entity.Property(e => e.Firstinvoiceamount).HasColumnName("FIRSTINVOICEAMOUNT");
            entity.Property(e => e.Flatprice).HasColumnName("FLATPRICE");
            entity.Property(e => e.Freightcharges).HasColumnName("FREIGHTCHARGES");
            entity.Property(e => e.Functioniid).HasColumnName("FUNCTIONIID");
            entity.Property(e => e.Industry)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("industry");
            entity.Property(e => e.Insuranceamount).HasColumnName("INSURANCEAMOUNT");
            entity.Property(e => e.Insurancepercent).HasColumnName("INSURANCEPERCENT");
            entity.Property(e => e.InternalOrg)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("internal_org");
            entity.Property(e => e.Inuseby).HasColumnName("INUSEBY");
            entity.Property(e => e.Isautoreceiveship).HasColumnName("ISAUTORECEIVESHIP");
            entity.Property(e => e.Isforcedclosed).HasColumnName("ISFORCEDCLOSED");
            entity.Property(e => e.Isicsorder).HasColumnName("ISICSORDER");
            entity.Property(e => e.Ismasterbilling).HasColumnName("ISMASTERBILLING");
            entity.Property(e => e.Istaxable).HasColumnName("ISTAXABLE");
            entity.Property(e => e.Isworkorder).HasColumnName("ISWORKORDER");
            entity.Property(e => e.Jobiid).HasColumnName("JOBIID");
            entity.Property(e => e.Laborpricegroupid).HasColumnName("LABORPRICEGROUPID");
            entity.Property(e => e.Languageid).HasColumnName("LANGUAGEID");
            entity.Property(e => e.Lastprinteddate).HasColumnName("LASTPRINTEDDATE");
            entity.Property(e => e.Lastupdated).HasColumnName("LASTUPDATED");
            entity.Property(e => e.Lastupdateddbdate).HasColumnName("LASTUPDATEDDBDATE");
            entity.Property(e => e.Loadindate).HasColumnName("LOADINDATE");
            entity.Property(e => e.Location).HasColumnName("LOCATION");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("locationcd");
            entity.Property(e => e.Lockcount).HasColumnName("LOCKCOUNT");
            entity.Property(e => e.Masterbillingiid).HasColumnName("MASTERBILLINGIID");
            entity.Property(e => e.Miscmargin).HasColumnName("MISCMARGIN");
            entity.Property(e => e.Mop).HasColumnName("MOP");
            entity.Property(e => e.Nextinvoicedate).HasColumnName("NEXTINVOICEDATE");
            entity.Property(e => e.Notificationflag).HasColumnName("NOTIFICATIONFLAG");
            entity.Property(e => e.Opsmgr).HasColumnName("opsmgr");
            entity.Property(e => e.Ordercategory).HasColumnName("ORDERCATEGORY");
            entity.Property(e => e.Orderdiscount).HasColumnName("ORDERDISCOUNT");
            entity.Property(e => e.Ordersubcategory).HasColumnName("ORDERSUBCATEGORY");
            entity.Property(e => e.Ordersubtype).HasColumnName("ORDERSUBTYPE");
            entity.Property(e => e.Overheadrate).HasColumnName("OVERHEADRATE");
            entity.Property(e => e.Parentcontractiid).HasColumnName("PARENTCONTRACTIID");
            entity.Property(e => e.Parententitydesc).HasColumnName("parententitydesc");
            entity.Property(e => e.Parententityno).HasColumnName("parententityno");
            entity.Property(e => e.Payhow).HasColumnName("PAYHOW");
            entity.Property(e => e.Paymenttermsiid).HasColumnName("PAYMENTTERMSIID");
            entity.Property(e => e.Paymethodreference).HasColumnName("PAYMETHODREFERENCE");
            entity.Property(e => e.Paytype).HasColumnName("PAYTYPE");
            entity.Property(e => e.Periodicscheduletype).HasColumnName("PERIODICSCHEDULETYPE");
            entity.Property(e => e.Periodiid).HasColumnName("PERIODIID");
            entity.Property(e => e.Pickupbycustomer).HasColumnName("PICKUPBYCUSTOMER");
            entity.Property(e => e.Pickupdate).HasColumnName("PICKUPDATE");
            entity.Property(e => e.Plactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("plactivecd");
            entity.Property(e => e.Planneriid).HasColumnName("PLANNERIID");
            entity.Property(e => e.Ponumber).HasColumnName("PONUMBER");
            entity.Property(e => e.Preorposttax).HasColumnName("PREORPOSTTAX");
            entity.Property(e => e.Prepdate).HasColumnName("PREPDATE");
            entity.Property(e => e.Pricingiid).HasColumnName("PRICINGIID");
            entity.Property(e => e.Pricingruleiid).HasColumnName("PRICINGRULEIID");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Prob).HasColumnName("prob");
            entity.Property(e => e.Probability).HasColumnName("PROBABILITY");
            entity.Property(e => e.Profitcentre).HasColumnName("PROFITCENTRE");
            entity.Property(e => e.Project).HasColumnName("PROJECT");
            entity.Property(e => e.Propduedate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("propduedate");
            entity.Property(e => e.Proptype)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("proptype");
            entity.Property(e => e.Quoteiid).HasColumnName("QUOTEIID");
            entity.Property(e => e.Readyforoperations).HasColumnName("READYFOROPERATIONS");
            entity.Property(e => e.Readytopack).HasColumnName("readytopack");
            entity.Property(e => e.Rehearsaldate).HasColumnName("REHEARSALDATE");
            entity.Property(e => e.Respempno).HasColumnName("respempno");
            entity.Property(e => e.Returnaddressiid).HasColumnName("RETURNADDRESSIID");
            entity.Property(e => e.Returnboothroomno).HasColumnName("RETURNBOOTHROOMNO");
            entity.Property(e => e.Returnbycustomer).HasColumnName("RETURNBYCUSTOMER");
            entity.Property(e => e.Returncarriertype).HasColumnName("RETURNCARRIERTYPE");
            entity.Property(e => e.Returnconfirmed).HasColumnName("RETURNCONFIRMED");
            entity.Property(e => e.Returncontactiid).HasColumnName("RETURNCONTACTIID");
            entity.Property(e => e.Returncontactname).HasColumnName("RETURNCONTACTNAME");
            entity.Property(e => e.Returndate).HasColumnName("RETURNDATE");
            entity.Property(e => e.Returnlocation).HasColumnName("RETURNLOCATION");
            entity.Property(e => e.Returntrackingno).HasColumnName("RETURNTRACKINGNO");
            entity.Property(e => e.Revision).HasColumnName("REVISION");
            entity.Property(e => e.Revisiondate).HasColumnName("REVISIONDATE");
            entity.Property(e => e.Roundtoid).HasColumnName("ROUNDTOID");
            entity.Property(e => e.Rushcharges).HasColumnName("RUSHCHARGES");
            entity.Property(e => e.Saleorder).HasColumnName("SALEORDER");
            entity.Property(e => e.Salespersoniid).HasColumnName("SALESPERSONIID");
            entity.Property(e => e.Scondiscountedamount).HasColumnName("SCONDISCOUNTEDAMOUNT");
            entity.Property(e => e.Servicechargeonsellitems).HasColumnName("SERVICECHARGEONSELLITEMS");
            entity.Property(e => e.Servicechargepercent).HasColumnName("SERVICECHARGEPERCENT");
            entity.Property(e => e.Servicechargetaxamount).HasColumnName("SERVICECHARGETAXAMOUNT");
            entity.Property(e => e.Servicechargetype).HasColumnName("SERVICECHARGETYPE");
            entity.Property(e => e.Servicechargevalue).HasColumnName("SERVICECHARGEVALUE");
            entity.Property(e => e.Sfactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sfactivecd");
            entity.Property(e => e.Shipcarriertype).HasColumnName("SHIPCARRIERTYPE");
            entity.Property(e => e.Shipdate).HasColumnName("SHIPDATE");
            entity.Property(e => e.Shipno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("shipno");
            entity.Property(e => e.Shippingaddressiid).HasColumnName("SHIPPINGADDRESSIID");
            entity.Property(e => e.Shippingboothroomno).HasColumnName("SHIPPINGBOOTHROOMNO");
            entity.Property(e => e.Shippingcontactname).HasColumnName("SHIPPINGCONTACTNAME");
            entity.Property(e => e.Shippingcustomeriid).HasColumnName("SHIPPINGCUSTOMERIID");
            entity.Property(e => e.Shippinglocation).HasColumnName("SHIPPINGLOCATION");
            entity.Property(e => e.Showenddate).HasColumnName("SHOWENDDATE");
            entity.Property(e => e.Showstartdate).HasColumnName("SHOWSTARTDATE");
            entity.Property(e => e.Signoffstatus).HasColumnName("SIGNOFFSTATUS");
            entity.Property(e => e.Sitecurrencyiid).HasColumnName("SITECURRENCYIID");
            entity.Property(e => e.Siteiid).HasColumnName("SITEIID");
            entity.Property(e => e.Startdate).HasColumnName("STARTDATE");
            entity.Property(e => e.StartdateF).HasColumnName("startdate_f");
            entity.Property(e => e.Stationiid).HasColumnName("STATIONIID");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Stopbillingdate).HasColumnName("STOPBILLINGDATE");
            entity.Property(e => e.Stopbillingflag).HasColumnName("STOPBILLINGFLAG");
            entity.Property(e => e.Strikedate).HasColumnName("STRIKEDATE");
            entity.Property(e => e.Subcontract)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("subcontract");
            entity.Property(e => e.Subno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("subno");
            entity.Property(e => e.Taxcertno).HasColumnName("TAXCERTNO");
            entity.Property(e => e.Taxlabor).HasColumnName("TAXLABOR");
            entity.Property(e => e.Totalitemsamount).HasColumnName("TOTALITEMSAMOUNT");
            entity.Property(e => e.Totalitemsdiscount).HasColumnName("TOTALITEMSDISCOUNT");
            entity.Property(e => e.Totalitemstaxamount).HasColumnName("TOTALITEMSTAXAMOUNT");
            entity.Property(e => e.Totallaboramount).HasColumnName("TOTALLABORAMOUNT");
            entity.Property(e => e.Totallabordiscount).HasColumnName("TOTALLABORDISCOUNT");
            entity.Property(e => e.Totallabortaxamount).HasColumnName("TOTALLABORTAXAMOUNT");
            entity.Property(e => e.Totalorderfulldurationamt).HasColumnName("TOTALORDERFULLDURATIONAMT");
            entity.Property(e => e.Totalorderfulldurationtax).HasColumnName("TOTALORDERFULLDURATIONTAX");
            entity.Property(e => e.Totaltaxamount).HasColumnName("TOTALTAXAMOUNT");
            entity.Property(e => e.Trackingno).HasColumnName("TRACKINGNO");
            entity.Property(e => e.Transactioncurrencyiid).HasColumnName("TRANSACTIONCURRENCYIID");
            entity.Property(e => e.Type).HasColumnName("TYPE");
            entity.Property(e => e.Uccontractdescription).HasColumnName("UCCONTRACTDESCRIPTION");
            entity.Property(e => e.Useeventpricing).HasColumnName("USEEVENTPRICING");
            entity.Property(e => e.Userdefinedstatus).HasColumnName("USERDEFINEDSTATUS");
            entity.Property(e => e.VersionRemarks).HasColumnName("VERSION_REMARKS");
            entity.Property(e => e.Viewfirstinvoice).HasColumnName("VIEWFIRSTINVOICE");
            entity.Property(e => e.Warehousedept).HasColumnName("WAREHOUSEDEPT");
            entity.Property(e => e.Warehousestatus).HasColumnName("WAREHOUSESTATUS");
        });

        modelBuilder.Entity<TmpEdscontractsWithoutEventsOrProjectsImportGreenDay>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSContractsWithoutEventsOrProjects_Import_GreenDay");

            entity.Property(e => e.Accountsgroupiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("ACCOUNTSGROUPIID");
            entity.Property(e => e.AcctExecEmpno).HasColumnName("acctExecEmpno");
            entity.Property(e => e.Advance)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("ADVANCE");
            entity.Property(e => e.Agency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("agency");
            entity.Property(e => e.Applyflatprice).HasColumnName("APPLYFLATPRICE");
            entity.Property(e => e.Applytaxonconsumable).HasColumnName("APPLYTAXONCONSUMABLE");
            entity.Property(e => e.Applytaxondamagewaiver).HasColumnName("APPLYTAXONDAMAGEWAIVER");
            entity.Property(e => e.Applytaxonservicecharge).HasColumnName("APPLYTAXONSERVICECHARGE");
            entity.Property(e => e.Approvalrequired)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("APPROVALREQUIRED");
            entity.Property(e => e.Approveddiscountperc)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("APPROVEDDISCOUNTPERC");
            entity.Property(e => e.Basecurrencyiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("BASECURRENCYIID");
            entity.Property(e => e.Bidmarkup)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("bidmarkup");
            entity.Property(e => e.Bidroot).HasColumnName("bidroot");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Billingaddressiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("BILLINGADDRESSIID");
            entity.Property(e => e.Billingcontactiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("BILLINGCONTACTIID");
            entity.Property(e => e.Billingcustomeriid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("BILLINGCUSTOMERIID");
            entity.Property(e => e.Billingtermiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("BILLINGTERMIID");
            entity.Property(e => e.Boothroomno).HasColumnName("BOOTHROOMNO");
            entity.Property(e => e.Burdenpercentage)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("BURDENPERCENTAGE");
            entity.Property(e => e.Category)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CATEGORY");
            entity.Property(e => e.ChargebasedDayweekmonthprice).HasColumnName("CHARGEBASED_DAYWEEKMONTHPRICE");
            entity.Property(e => e.Chargeenddate).HasColumnName("CHARGEENDDATE");
            entity.Property(e => e.Chargestartdate).HasColumnName("CHARGESTARTDATE");
            entity.Property(e => e.Cmtaxamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CMTAXAMOUNT");
            entity.Property(e => e.Comments)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("COMMENTS");
            entity.Property(e => e.Commissiongroup).HasColumnName("COMMISSIONGROUP");
            entity.Property(e => e.Consumablepercent)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CONSUMABLEPERCENT");
            entity.Property(e => e.Consumabletype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CONSUMABLETYPE");
            entity.Property(e => e.Consumablevalue)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CONSUMABLEVALUE");
            entity.Property(e => e.Contactiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CONTACTIID");
            entity.Property(e => e.Contractdescription).HasColumnName("CONTRACTDESCRIPTION");
            entity.Property(e => e.Contractid).HasColumnName("CONTRACTID");
            entity.Property(e => e.Contractiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CONTRACTIID");
            entity.Property(e => e.Converteddate).HasColumnName("CONVERTEDDATE");
            entity.Property(e => e.Country)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("country");
            entity.Property(e => e.Createdby)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CREATEDBY");
            entity.Property(e => e.Credithold)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CREDITHOLD");
            entity.Property(e => e.Currency).HasColumnName("currency");
            entity.Property(e => e.Currencyiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CURRENCYIID");
            entity.Property(e => e.Custdiscountgroup).HasColumnName("CUSTDISCOUNTGROUP");
            entity.Property(e => e.Custno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("custno");
            entity.Property(e => e.Customerpricegroupid).HasColumnName("CUSTOMERPRICEGROUPID");
            entity.Property(e => e.Customertaxgroup).HasColumnName("CUSTOMERTAXGROUP");
            entity.Property(e => e.Customstatus)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CUSTOMSTATUS");
            entity.Property(e => e.Damagewaiverpercent)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DAMAGEWAIVERPERCENT");
            entity.Property(e => e.Damagewaivertype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DAMAGEWAIVERTYPE");
            entity.Property(e => e.Damagewaivervalue)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DAMAGEWAIVERVALUE");
            entity.Property(e => e.Datecreated).HasColumnName("DATECREATED");
            entity.Property(e => e.Datevalidtill).HasColumnName("DATEVALIDTILL");
            entity.Property(e => e.Daysinmonth)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DAYSINMONTH");
            entity.Property(e => e.Daysinweek)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DAYSINWEEK");
            entity.Property(e => e.Defaultmainorderinfotosuborder).HasColumnName("DEFAULTMAINORDERINFOTOSUBORDER");
            entity.Property(e => e.Defaultunit)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DEFAULTUNIT");
            entity.Property(e => e.Deliverycharges)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DELIVERYCHARGES");
            entity.Property(e => e.Department).HasColumnName("DEPARTMENT");
            entity.Property(e => e.Deposit)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DEPOSIT");
            entity.Property(e => e.Disclaimer).HasColumnName("DISCLAIMER");
            entity.Property(e => e.Disclaimerid).HasColumnName("DISCLAIMERID");
            entity.Property(e => e.Discountamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DISCOUNTAMOUNT");
            entity.Property(e => e.Discounttype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DISCOUNTTYPE");
            entity.Property(e => e.Dummy1)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DUMMY1");
            entity.Property(e => e.Dwtaxamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DWTAXAMOUNT");
            entity.Property(e => e.Employeeiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("EMPLOYEEIID");
            entity.Property(e => e.Enddate).HasColumnName("ENDDATE");
            entity.Property(e => e.EnddateF).HasColumnName("enddate_f");
            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("engactivecd");
            entity.Property(e => e.EngrEmpno).HasColumnName("engrEmpno");
            entity.Property(e => e.Entitydesc).HasColumnName("entitydesc");
            entity.Property(e => e.Entityno).HasColumnName("entityno");
            entity.Property(e => e.Entitytype)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("entitytype");
            entity.Property(e => e.Evenlociid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("EVENLOCIID");
            entity.Property(e => e.Eventiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("EVENTIID");
            entity.Property(e => e.Expenses)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("EXPENSES");
            entity.Property(e => e.Finactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("finactivecd");
            entity.Property(e => e.Firstinvoiceamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("FIRSTINVOICEAMOUNT");
            entity.Property(e => e.Flatprice)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("FLATPRICE");
            entity.Property(e => e.Freightcharges)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("FREIGHTCHARGES");
            entity.Property(e => e.Functioniid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("FUNCTIONIID");
            entity.Property(e => e.Industry)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("industry");
            entity.Property(e => e.Insuranceamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("INSURANCEAMOUNT");
            entity.Property(e => e.Insurancepercent)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("INSURANCEPERCENT");
            entity.Property(e => e.InternalOrg)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("internal_org");
            entity.Property(e => e.Inuseby).HasColumnName("INUSEBY");
            entity.Property(e => e.Isautoreceiveship).HasColumnName("ISAUTORECEIVESHIP");
            entity.Property(e => e.Isforcedclosed).HasColumnName("ISFORCEDCLOSED");
            entity.Property(e => e.Isicsorder).HasColumnName("ISICSORDER");
            entity.Property(e => e.Ismasterbilling).HasColumnName("ISMASTERBILLING");
            entity.Property(e => e.Istaxable).HasColumnName("ISTAXABLE");
            entity.Property(e => e.Isworkorder).HasColumnName("ISWORKORDER");
            entity.Property(e => e.Jobiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("JOBIID");
            entity.Property(e => e.Laborpricegroupid).HasColumnName("LABORPRICEGROUPID");
            entity.Property(e => e.Languageid).HasColumnName("LANGUAGEID");
            entity.Property(e => e.Lastprinteddate).HasColumnName("LASTPRINTEDDATE");
            entity.Property(e => e.Lastupdated).HasColumnName("LASTUPDATED");
            entity.Property(e => e.Lastupdateddbdate).HasColumnName("LASTUPDATEDDBDATE");
            entity.Property(e => e.Loadindate).HasColumnName("LOADINDATE");
            entity.Property(e => e.Location).HasColumnName("LOCATION");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("locationcd");
            entity.Property(e => e.Lockcount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("LOCKCOUNT");
            entity.Property(e => e.Masterbillingiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("MASTERBILLINGIID");
            entity.Property(e => e.Miscmargin)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("MISCMARGIN");
            entity.Property(e => e.Mop)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("MOP");
            entity.Property(e => e.Nextinvoicedate).HasColumnName("NEXTINVOICEDATE");
            entity.Property(e => e.Notificationflag).HasColumnName("NOTIFICATIONFLAG");
            entity.Property(e => e.Opsmgr).HasColumnName("opsmgr");
            entity.Property(e => e.Ordercategory).HasColumnName("ORDERCATEGORY");
            entity.Property(e => e.Orderdiscount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("ORDERDISCOUNT");
            entity.Property(e => e.Ordersubcategory).HasColumnName("ORDERSUBCATEGORY");
            entity.Property(e => e.Ordersubtype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("ORDERSUBTYPE");
            entity.Property(e => e.Overheadrate)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("OVERHEADRATE");
            entity.Property(e => e.Parentcontractiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PARENTCONTRACTIID");
            entity.Property(e => e.Parententitydesc).HasColumnName("parententitydesc");
            entity.Property(e => e.Parententityno).HasColumnName("parententityno");
            entity.Property(e => e.Payhow)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PAYHOW");
            entity.Property(e => e.Paymenttermsiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PAYMENTTERMSIID");
            entity.Property(e => e.Paymethodreference).HasColumnName("PAYMETHODREFERENCE");
            entity.Property(e => e.Paytype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PAYTYPE");
            entity.Property(e => e.Periodicscheduletype).HasColumnName("PERIODICSCHEDULETYPE");
            entity.Property(e => e.Periodiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PERIODIID");
            entity.Property(e => e.Pickupbycustomer).HasColumnName("PICKUPBYCUSTOMER");
            entity.Property(e => e.Pickupdate).HasColumnName("PICKUPDATE");
            entity.Property(e => e.Plactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("plactivecd");
            entity.Property(e => e.Planneriid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PLANNERIID");
            entity.Property(e => e.Ponumber)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PONUMBER");
            entity.Property(e => e.Preorposttax)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PREORPOSTTAX");
            entity.Property(e => e.Prepdate).HasColumnName("PREPDATE");
            entity.Property(e => e.Pricingiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PRICINGIID");
            entity.Property(e => e.Pricingruleiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PRICINGRULEIID");
            entity.Property(e => e.Priority)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PRIORITY");
            entity.Property(e => e.Prob).HasColumnName("prob");
            entity.Property(e => e.Probability)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PROBABILITY");
            entity.Property(e => e.Profitcentre).HasColumnName("PROFITCENTRE");
            entity.Property(e => e.Project).HasColumnName("PROJECT");
            entity.Property(e => e.Propduedate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("propduedate");
            entity.Property(e => e.Proptype)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("proptype");
            entity.Property(e => e.Quoteiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("QUOTEIID");
            entity.Property(e => e.Readyforoperations).HasColumnName("READYFOROPERATIONS");
            entity.Property(e => e.Readytopack).HasColumnName("readytopack");
            entity.Property(e => e.Rehearsaldate).HasColumnName("REHEARSALDATE");
            entity.Property(e => e.Respempno).HasColumnName("respempno");
            entity.Property(e => e.Returnaddressiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("RETURNADDRESSIID");
            entity.Property(e => e.Returnboothroomno).HasColumnName("RETURNBOOTHROOMNO");
            entity.Property(e => e.Returnbycustomer).HasColumnName("RETURNBYCUSTOMER");
            entity.Property(e => e.Returncarriertype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("RETURNCARRIERTYPE");
            entity.Property(e => e.Returnconfirmed)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("RETURNCONFIRMED");
            entity.Property(e => e.Returncontactiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("RETURNCONTACTIID");
            entity.Property(e => e.Returncontactname).HasColumnName("RETURNCONTACTNAME");
            entity.Property(e => e.Returndate).HasColumnName("RETURNDATE");
            entity.Property(e => e.Returnlocation).HasColumnName("RETURNLOCATION");
            entity.Property(e => e.Returntrackingno).HasColumnName("RETURNTRACKINGNO");
            entity.Property(e => e.Revision)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("REVISION");
            entity.Property(e => e.Revisiondate).HasColumnName("REVISIONDATE");
            entity.Property(e => e.Roundtoid).HasColumnName("ROUNDTOID");
            entity.Property(e => e.Rushcharges)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("RUSHCHARGES");
            entity.Property(e => e.Saleorder)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SALEORDER");
            entity.Property(e => e.Salespersoniid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SALESPERSONIID");
            entity.Property(e => e.Scondiscountedamount).HasColumnName("SCONDISCOUNTEDAMOUNT");
            entity.Property(e => e.Servicechargeonsellitems).HasColumnName("SERVICECHARGEONSELLITEMS");
            entity.Property(e => e.Servicechargepercent)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SERVICECHARGEPERCENT");
            entity.Property(e => e.Servicechargetaxamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SERVICECHARGETAXAMOUNT");
            entity.Property(e => e.Servicechargetype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SERVICECHARGETYPE");
            entity.Property(e => e.Servicechargevalue)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SERVICECHARGEVALUE");
            entity.Property(e => e.Sfactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sfactivecd");
            entity.Property(e => e.Shipcarriertype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SHIPCARRIERTYPE");
            entity.Property(e => e.Shipdate).HasColumnName("SHIPDATE");
            entity.Property(e => e.Shipno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("shipno");
            entity.Property(e => e.Shippingaddressiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SHIPPINGADDRESSIID");
            entity.Property(e => e.Shippingboothroomno).HasColumnName("SHIPPINGBOOTHROOMNO");
            entity.Property(e => e.Shippingcontactname).HasColumnName("SHIPPINGCONTACTNAME");
            entity.Property(e => e.Shippingcustomeriid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SHIPPINGCUSTOMERIID");
            entity.Property(e => e.Shippinglocation).HasColumnName("SHIPPINGLOCATION");
            entity.Property(e => e.Showenddate).HasColumnName("SHOWENDDATE");
            entity.Property(e => e.Showstartdate).HasColumnName("SHOWSTARTDATE");
            entity.Property(e => e.Signoffstatus).HasColumnName("SIGNOFFSTATUS");
            entity.Property(e => e.Sitecurrencyiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SITECURRENCYIID");
            entity.Property(e => e.Siteiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SITEIID");
            entity.Property(e => e.Startdate).HasColumnName("STARTDATE");
            entity.Property(e => e.StartdateF).HasColumnName("startdate_f");
            entity.Property(e => e.Stationiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("STATIONIID");
            entity.Property(e => e.Status)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("STATUS");
            entity.Property(e => e.Stopbillingdate).HasColumnName("STOPBILLINGDATE");
            entity.Property(e => e.Stopbillingflag).HasColumnName("STOPBILLINGFLAG");
            entity.Property(e => e.Strikedate).HasColumnName("STRIKEDATE");
            entity.Property(e => e.Subcontract)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("subcontract");
            entity.Property(e => e.Subno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("subno");
            entity.Property(e => e.Taxcertno).HasColumnName("TAXCERTNO");
            entity.Property(e => e.Taxlabor).HasColumnName("TAXLABOR");
            entity.Property(e => e.Totalitemsamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALITEMSAMOUNT");
            entity.Property(e => e.Totalitemsdiscount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALITEMSDISCOUNT");
            entity.Property(e => e.Totalitemstaxamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALITEMSTAXAMOUNT");
            entity.Property(e => e.Totallaboramount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALLABORAMOUNT");
            entity.Property(e => e.Totallabordiscount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALLABORDISCOUNT");
            entity.Property(e => e.Totallabortaxamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALLABORTAXAMOUNT");
            entity.Property(e => e.Totalorderfulldurationamt)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALORDERFULLDURATIONAMT");
            entity.Property(e => e.Totalorderfulldurationtax)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALORDERFULLDURATIONTAX");
            entity.Property(e => e.Totaltaxamount)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TOTALTAXAMOUNT");
            entity.Property(e => e.Trackingno).HasColumnName("TRACKINGNO");
            entity.Property(e => e.Transactioncurrencyiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TRANSACTIONCURRENCYIID");
            entity.Property(e => e.Type)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TYPE");
            entity.Property(e => e.Uccontractdescription).HasColumnName("UCCONTRACTDESCRIPTION");
            entity.Property(e => e.Useeventpricing).HasColumnName("USEEVENTPRICING");
            entity.Property(e => e.Userdefinedstatus)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("USERDEFINEDSTATUS");
            entity.Property(e => e.VersionRemarks).HasColumnName("VERSION_REMARKS");
            entity.Property(e => e.Viewfirstinvoice).HasColumnName("VIEWFIRSTINVOICE");
            entity.Property(e => e.Warehousedept)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("WAREHOUSEDEPT");
            entity.Property(e => e.Warehousestatus)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("WAREHOUSESTATUS");
        });

        modelBuilder.Entity<TmpEdscontractsWithoutProjectsOrEventsImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSContractsWithoutProjectsOrEvents_Import");

            entity.Property(e => e.Accountsgroupiid).HasColumnName("ACCOUNTSGROUPIID");
            entity.Property(e => e.AcctExecEmpno).HasColumnName("acctExecEmpno");
            entity.Property(e => e.Advance).HasColumnName("ADVANCE");
            entity.Property(e => e.Agency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("agency");
            entity.Property(e => e.Applyflatprice).HasColumnName("APPLYFLATPRICE");
            entity.Property(e => e.Applytaxonconsumable).HasColumnName("APPLYTAXONCONSUMABLE");
            entity.Property(e => e.Applytaxondamagewaiver).HasColumnName("APPLYTAXONDAMAGEWAIVER");
            entity.Property(e => e.Applytaxonservicecharge).HasColumnName("APPLYTAXONSERVICECHARGE");
            entity.Property(e => e.Approvalrequired).HasColumnName("APPROVALREQUIRED");
            entity.Property(e => e.Approveddiscountperc).HasColumnName("APPROVEDDISCOUNTPERC");
            entity.Property(e => e.Basecurrencyiid).HasColumnName("BASECURRENCYIID");
            entity.Property(e => e.Bidmarkup)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("bidmarkup");
            entity.Property(e => e.Bidroot).HasColumnName("bidroot");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Billingaddressiid).HasColumnName("BILLINGADDRESSIID");
            entity.Property(e => e.Billingcontactiid).HasColumnName("BILLINGCONTACTIID");
            entity.Property(e => e.Billingcustomeriid).HasColumnName("BILLINGCUSTOMERIID");
            entity.Property(e => e.Billingtermiid).HasColumnName("BILLINGTERMIID");
            entity.Property(e => e.Boothroomno).HasColumnName("BOOTHROOMNO");
            entity.Property(e => e.Burdenpercentage).HasColumnName("BURDENPERCENTAGE");
            entity.Property(e => e.Category).HasColumnName("CATEGORY");
            entity.Property(e => e.ChargebasedDayweekmonthprice).HasColumnName("CHARGEBASED_DAYWEEKMONTHPRICE");
            entity.Property(e => e.Chargeenddate).HasColumnName("CHARGEENDDATE");
            entity.Property(e => e.Chargestartdate).HasColumnName("CHARGESTARTDATE");
            entity.Property(e => e.Cmtaxamount).HasColumnName("CMTAXAMOUNT");
            entity.Property(e => e.Comments).HasColumnName("COMMENTS");
            entity.Property(e => e.Commissiongroup).HasColumnName("COMMISSIONGROUP");
            entity.Property(e => e.Consumablepercent).HasColumnName("CONSUMABLEPERCENT");
            entity.Property(e => e.Consumabletype).HasColumnName("CONSUMABLETYPE");
            entity.Property(e => e.Consumablevalue).HasColumnName("CONSUMABLEVALUE");
            entity.Property(e => e.Contactiid).HasColumnName("CONTACTIID");
            entity.Property(e => e.Contractdescription).HasColumnName("CONTRACTDESCRIPTION");
            entity.Property(e => e.Contractid).HasColumnName("CONTRACTID");
            entity.Property(e => e.Contractiid).HasColumnName("CONTRACTIID");
            entity.Property(e => e.Converteddate).HasColumnName("CONVERTEDDATE");
            entity.Property(e => e.Country)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("country");
            entity.Property(e => e.Createdby).HasColumnName("CREATEDBY");
            entity.Property(e => e.Credithold).HasColumnName("CREDITHOLD");
            entity.Property(e => e.Currency).HasColumnName("currency");
            entity.Property(e => e.Currencyiid).HasColumnName("CURRENCYIID");
            entity.Property(e => e.Custdiscountgroup).HasColumnName("CUSTDISCOUNTGROUP");
            entity.Property(e => e.Custno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("custno");
            entity.Property(e => e.Customerpricegroupid).HasColumnName("CUSTOMERPRICEGROUPID");
            entity.Property(e => e.Customertaxgroup).HasColumnName("CUSTOMERTAXGROUP");
            entity.Property(e => e.Customstatus).HasColumnName("CUSTOMSTATUS");
            entity.Property(e => e.Damagewaiverpercent).HasColumnName("DAMAGEWAIVERPERCENT");
            entity.Property(e => e.Damagewaivertype).HasColumnName("DAMAGEWAIVERTYPE");
            entity.Property(e => e.Damagewaivervalue).HasColumnName("DAMAGEWAIVERVALUE");
            entity.Property(e => e.Datecreated).HasColumnName("DATECREATED");
            entity.Property(e => e.Datevalidtill).HasColumnName("DATEVALIDTILL");
            entity.Property(e => e.Daysinmonth).HasColumnName("DAYSINMONTH");
            entity.Property(e => e.Daysinweek).HasColumnName("DAYSINWEEK");
            entity.Property(e => e.Defaultmainorderinfotosuborder).HasColumnName("DEFAULTMAINORDERINFOTOSUBORDER");
            entity.Property(e => e.Defaultunit).HasColumnName("DEFAULTUNIT");
            entity.Property(e => e.Deliverycharges).HasColumnName("DELIVERYCHARGES");
            entity.Property(e => e.Department).HasColumnName("DEPARTMENT");
            entity.Property(e => e.Deposit).HasColumnName("DEPOSIT");
            entity.Property(e => e.Disclaimer).HasColumnName("DISCLAIMER");
            entity.Property(e => e.Disclaimerid).HasColumnName("DISCLAIMERID");
            entity.Property(e => e.Discountamount).HasColumnName("DISCOUNTAMOUNT");
            entity.Property(e => e.Discounttype).HasColumnName("DISCOUNTTYPE");
            entity.Property(e => e.Dummy1).HasColumnName("DUMMY1");
            entity.Property(e => e.Dwtaxamount).HasColumnName("DWTAXAMOUNT");
            entity.Property(e => e.Employeeiid).HasColumnName("EMPLOYEEIID");
            entity.Property(e => e.Enddate).HasColumnName("ENDDATE");
            entity.Property(e => e.EnddateF).HasColumnName("enddate_f");
            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("engactivecd");
            entity.Property(e => e.EngrEmpno).HasColumnName("engrEmpno");
            entity.Property(e => e.Entitydesc).HasColumnName("entitydesc");
            entity.Property(e => e.Entityno).HasColumnName("entityno");
            entity.Property(e => e.Entitytype)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("entitytype");
            entity.Property(e => e.Evenlociid).HasColumnName("EVENLOCIID");
            entity.Property(e => e.Eventiid).HasColumnName("EVENTIID");
            entity.Property(e => e.Expenses).HasColumnName("EXPENSES");
            entity.Property(e => e.Finactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("finactivecd");
            entity.Property(e => e.Firstinvoiceamount).HasColumnName("FIRSTINVOICEAMOUNT");
            entity.Property(e => e.Flatprice).HasColumnName("FLATPRICE");
            entity.Property(e => e.Freightcharges).HasColumnName("FREIGHTCHARGES");
            entity.Property(e => e.Functioniid).HasColumnName("FUNCTIONIID");
            entity.Property(e => e.Industry)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("industry");
            entity.Property(e => e.Insuranceamount).HasColumnName("INSURANCEAMOUNT");
            entity.Property(e => e.Insurancepercent).HasColumnName("INSURANCEPERCENT");
            entity.Property(e => e.InternalOrg)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("internal_org");
            entity.Property(e => e.Inuseby).HasColumnName("INUSEBY");
            entity.Property(e => e.Isautoreceiveship).HasColumnName("ISAUTORECEIVESHIP");
            entity.Property(e => e.Isforcedclosed).HasColumnName("ISFORCEDCLOSED");
            entity.Property(e => e.Isicsorder).HasColumnName("ISICSORDER");
            entity.Property(e => e.Ismasterbilling).HasColumnName("ISMASTERBILLING");
            entity.Property(e => e.Istaxable).HasColumnName("ISTAXABLE");
            entity.Property(e => e.Isworkorder).HasColumnName("ISWORKORDER");
            entity.Property(e => e.Jobiid).HasColumnName("JOBIID");
            entity.Property(e => e.Laborpricegroupid).HasColumnName("LABORPRICEGROUPID");
            entity.Property(e => e.Languageid).HasColumnName("LANGUAGEID");
            entity.Property(e => e.Lastprinteddate).HasColumnName("LASTPRINTEDDATE");
            entity.Property(e => e.Lastupdated).HasColumnName("LASTUPDATED");
            entity.Property(e => e.Lastupdateddbdate).HasColumnName("LASTUPDATEDDBDATE");
            entity.Property(e => e.Loadindate).HasColumnName("LOADINDATE");
            entity.Property(e => e.Location).HasColumnName("LOCATION");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("locationcd");
            entity.Property(e => e.Lockcount).HasColumnName("LOCKCOUNT");
            entity.Property(e => e.Masterbillingiid).HasColumnName("MASTERBILLINGIID");
            entity.Property(e => e.Miscmargin).HasColumnName("MISCMARGIN");
            entity.Property(e => e.Mop).HasColumnName("MOP");
            entity.Property(e => e.Nextinvoicedate).HasColumnName("NEXTINVOICEDATE");
            entity.Property(e => e.Notificationflag).HasColumnName("NOTIFICATIONFLAG");
            entity.Property(e => e.Opsmgr).HasColumnName("opsmgr");
            entity.Property(e => e.Ordercategory).HasColumnName("ORDERCATEGORY");
            entity.Property(e => e.Orderdiscount).HasColumnName("ORDERDISCOUNT");
            entity.Property(e => e.Ordersubcategory).HasColumnName("ORDERSUBCATEGORY");
            entity.Property(e => e.Ordersubtype).HasColumnName("ORDERSUBTYPE");
            entity.Property(e => e.Overheadrate).HasColumnName("OVERHEADRATE");
            entity.Property(e => e.Parentcontractiid).HasColumnName("PARENTCONTRACTIID");
            entity.Property(e => e.Parententitydesc).HasColumnName("parententitydesc");
            entity.Property(e => e.Parententityno).HasColumnName("parententityno");
            entity.Property(e => e.Payhow).HasColumnName("PAYHOW");
            entity.Property(e => e.Paymenttermsiid).HasColumnName("PAYMENTTERMSIID");
            entity.Property(e => e.Paymethodreference).HasColumnName("PAYMETHODREFERENCE");
            entity.Property(e => e.Paytype).HasColumnName("PAYTYPE");
            entity.Property(e => e.Periodicscheduletype).HasColumnName("PERIODICSCHEDULETYPE");
            entity.Property(e => e.Periodiid).HasColumnName("PERIODIID");
            entity.Property(e => e.Pickupbycustomer).HasColumnName("PICKUPBYCUSTOMER");
            entity.Property(e => e.Pickupdate).HasColumnName("PICKUPDATE");
            entity.Property(e => e.Plactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("plactivecd");
            entity.Property(e => e.Planneriid).HasColumnName("PLANNERIID");
            entity.Property(e => e.Ponumber).HasColumnName("PONUMBER");
            entity.Property(e => e.Preorposttax).HasColumnName("PREORPOSTTAX");
            entity.Property(e => e.Prepdate).HasColumnName("PREPDATE");
            entity.Property(e => e.Pricingiid).HasColumnName("PRICINGIID");
            entity.Property(e => e.Pricingruleiid).HasColumnName("PRICINGRULEIID");
            entity.Property(e => e.Priority).HasColumnName("PRIORITY");
            entity.Property(e => e.Prob).HasColumnName("prob");
            entity.Property(e => e.Probability).HasColumnName("PROBABILITY");
            entity.Property(e => e.Profitcentre).HasColumnName("PROFITCENTRE");
            entity.Property(e => e.Project).HasColumnName("PROJECT");
            entity.Property(e => e.Propduedate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("propduedate");
            entity.Property(e => e.Proptype)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("proptype");
            entity.Property(e => e.Quoteiid).HasColumnName("QUOTEIID");
            entity.Property(e => e.Readyforoperations).HasColumnName("READYFOROPERATIONS");
            entity.Property(e => e.Readytopack).HasColumnName("readytopack");
            entity.Property(e => e.Rehearsaldate).HasColumnName("REHEARSALDATE");
            entity.Property(e => e.Respempno).HasColumnName("respempno");
            entity.Property(e => e.Returnaddressiid).HasColumnName("RETURNADDRESSIID");
            entity.Property(e => e.Returnboothroomno).HasColumnName("RETURNBOOTHROOMNO");
            entity.Property(e => e.Returnbycustomer).HasColumnName("RETURNBYCUSTOMER");
            entity.Property(e => e.Returncarriertype).HasColumnName("RETURNCARRIERTYPE");
            entity.Property(e => e.Returnconfirmed).HasColumnName("RETURNCONFIRMED");
            entity.Property(e => e.Returncontactiid).HasColumnName("RETURNCONTACTIID");
            entity.Property(e => e.Returncontactname).HasColumnName("RETURNCONTACTNAME");
            entity.Property(e => e.Returndate).HasColumnName("RETURNDATE");
            entity.Property(e => e.Returnlocation).HasColumnName("RETURNLOCATION");
            entity.Property(e => e.Returntrackingno).HasColumnName("RETURNTRACKINGNO");
            entity.Property(e => e.Revision).HasColumnName("REVISION");
            entity.Property(e => e.Revisiondate).HasColumnName("REVISIONDATE");
            entity.Property(e => e.Roundtoid).HasColumnName("ROUNDTOID");
            entity.Property(e => e.Rushcharges).HasColumnName("RUSHCHARGES");
            entity.Property(e => e.Saleorder).HasColumnName("SALEORDER");
            entity.Property(e => e.Salespersoniid).HasColumnName("SALESPERSONIID");
            entity.Property(e => e.Scondiscountedamount).HasColumnName("SCONDISCOUNTEDAMOUNT");
            entity.Property(e => e.Servicechargeonsellitems).HasColumnName("SERVICECHARGEONSELLITEMS");
            entity.Property(e => e.Servicechargepercent).HasColumnName("SERVICECHARGEPERCENT");
            entity.Property(e => e.Servicechargetaxamount).HasColumnName("SERVICECHARGETAXAMOUNT");
            entity.Property(e => e.Servicechargetype).HasColumnName("SERVICECHARGETYPE");
            entity.Property(e => e.Servicechargevalue).HasColumnName("SERVICECHARGEVALUE");
            entity.Property(e => e.Sfactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sfactivecd");
            entity.Property(e => e.Shipcarriertype).HasColumnName("SHIPCARRIERTYPE");
            entity.Property(e => e.Shipdate).HasColumnName("SHIPDATE");
            entity.Property(e => e.Shipno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("shipno");
            entity.Property(e => e.Shippingaddressiid).HasColumnName("SHIPPINGADDRESSIID");
            entity.Property(e => e.Shippingboothroomno).HasColumnName("SHIPPINGBOOTHROOMNO");
            entity.Property(e => e.Shippingcontactname).HasColumnName("SHIPPINGCONTACTNAME");
            entity.Property(e => e.Shippingcustomeriid).HasColumnName("SHIPPINGCUSTOMERIID");
            entity.Property(e => e.Shippinglocation).HasColumnName("SHIPPINGLOCATION");
            entity.Property(e => e.Showenddate).HasColumnName("SHOWENDDATE");
            entity.Property(e => e.Showstartdate).HasColumnName("SHOWSTARTDATE");
            entity.Property(e => e.Signoffstatus).HasColumnName("SIGNOFFSTATUS");
            entity.Property(e => e.Sitecurrencyiid).HasColumnName("SITECURRENCYIID");
            entity.Property(e => e.Siteiid).HasColumnName("SITEIID");
            entity.Property(e => e.Startdate).HasColumnName("STARTDATE");
            entity.Property(e => e.StartdateF).HasColumnName("startdate_f");
            entity.Property(e => e.Stationiid).HasColumnName("STATIONIID");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Stopbillingdate).HasColumnName("STOPBILLINGDATE");
            entity.Property(e => e.Stopbillingflag).HasColumnName("STOPBILLINGFLAG");
            entity.Property(e => e.Strikedate).HasColumnName("STRIKEDATE");
            entity.Property(e => e.Subcontract)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("subcontract");
            entity.Property(e => e.Subno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("subno");
            entity.Property(e => e.Taxcertno).HasColumnName("TAXCERTNO");
            entity.Property(e => e.Taxlabor).HasColumnName("TAXLABOR");
            entity.Property(e => e.Totalitemsamount).HasColumnName("TOTALITEMSAMOUNT");
            entity.Property(e => e.Totalitemsdiscount).HasColumnName("TOTALITEMSDISCOUNT");
            entity.Property(e => e.Totalitemstaxamount).HasColumnName("TOTALITEMSTAXAMOUNT");
            entity.Property(e => e.Totallaboramount).HasColumnName("TOTALLABORAMOUNT");
            entity.Property(e => e.Totallabordiscount).HasColumnName("TOTALLABORDISCOUNT");
            entity.Property(e => e.Totallabortaxamount).HasColumnName("TOTALLABORTAXAMOUNT");
            entity.Property(e => e.Totalorderfulldurationamt).HasColumnName("TOTALORDERFULLDURATIONAMT");
            entity.Property(e => e.Totalorderfulldurationtax).HasColumnName("TOTALORDERFULLDURATIONTAX");
            entity.Property(e => e.Totaltaxamount).HasColumnName("TOTALTAXAMOUNT");
            entity.Property(e => e.Trackingno).HasColumnName("TRACKINGNO");
            entity.Property(e => e.Transactioncurrencyiid).HasColumnName("TRANSACTIONCURRENCYIID");
            entity.Property(e => e.Type).HasColumnName("TYPE");
            entity.Property(e => e.Uccontractdescription).HasColumnName("UCCONTRACTDESCRIPTION");
            entity.Property(e => e.Useeventpricing).HasColumnName("USEEVENTPRICING");
            entity.Property(e => e.Userdefinedstatus).HasColumnName("USERDEFINEDSTATUS");
            entity.Property(e => e.VersionRemarks).HasColumnName("VERSION_REMARKS");
            entity.Property(e => e.Viewfirstinvoice).HasColumnName("VIEWFIRSTINVOICE");
            entity.Property(e => e.Warehousedept).HasColumnName("WAREHOUSEDEPT");
            entity.Property(e => e.Warehousestatus).HasColumnName("WAREHOUSESTATUS");
        });

        modelBuilder.Entity<TmpEdscrewDetailsUpdate>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSCrewDetails_Update");

            entity.Property(e => e.AddressLine).HasMaxLength(255);
            entity.Property(e => e.Citizenship).HasMaxLength(255);
            entity.Property(e => e.City).HasMaxLength(255);
            entity.Property(e => e.CompanyName).HasMaxLength(255);
            entity.Property(e => e.Country).HasMaxLength(255);
            entity.Property(e => e.DietaryRestrictions)
                .HasMaxLength(255)
                .HasColumnName("Dietary Restrictions");
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.EmergencyContactEmailAddress)
                .HasMaxLength(255)
                .HasColumnName("Emergency Contact Email Address");
            entity.Property(e => e.EmergencyContactRelationship)
                .HasMaxLength(255)
                .HasColumnName("Emergency Contact & Relationship");
            entity.Property(e => e.EmergencyPhoneNumber1)
                .HasMaxLength(255)
                .HasColumnName("Emergency Phone Number #1");
            entity.Property(e => e.EmergencyPhoneNumber2)
                .HasMaxLength(255)
                .HasColumnName("Emergency Phone Number #2");
            entity.Property(e => e.F52).HasMaxLength(255);
            entity.Property(e => e.F53).HasMaxLength(255);
            entity.Property(e => e.F54).HasMaxLength(255);
            entity.Property(e => e.Finesse).HasMaxLength(255);
            entity.Property(e => e.FirstName).HasMaxLength(255);
            entity.Property(e => e.FrequentFlyerAmericanAirlines)
                .HasMaxLength(255)
                .HasColumnName("Frequent Flyer #: American Airlines");
            entity.Property(e => e.FrequentFlyerBritishAirways)
                .HasMaxLength(255)
                .HasColumnName("Frequent Flyer #: British Airways");
            entity.Property(e => e.FrequentFlyerDelta)
                .HasMaxLength(255)
                .HasColumnName("Frequent Flyer #: Delta");
            entity.Property(e => e.FrequentFlyerOther)
                .HasMaxLength(255)
                .HasColumnName("Frequent Flyer #: Other");
            entity.Property(e => e.FrequentFlyerQantas)
                .HasMaxLength(255)
                .HasColumnName("Frequent Flyer #: Qantas");
            entity.Property(e => e.FrequentFlyerSouthwest)
                .HasMaxLength(255)
                .HasColumnName("Frequent Flyer #: Southwest");
            entity.Property(e => e.FrequentFlyerUnited)
                .HasMaxLength(255)
                .HasColumnName("Frequent Flyer #: United");
            entity.Property(e => e.HomeAirport)
                .HasMaxLength(255)
                .HasColumnName("Home Airport");
            entity.Property(e => e.HomePhone).HasMaxLength(255);
            entity.Property(e => e.IssuingGovernmentOfPassport)
                .HasMaxLength(255)
                .HasColumnName("Issuing Government of Passport");
            entity.Property(e => e.KnownTravelerNumberTsaPreCheck)
                .HasMaxLength(255)
                .HasColumnName("Known Traveler Number (TSA Pre-check):");
            entity.Property(e => e.LastName).HasMaxLength(255);
            entity.Property(e => e.Level).HasMaxLength(255);
            entity.Property(e => e.MedicalAllergiesOrConditions)
                .HasMaxLength(255)
                .HasColumnName("Medical Allergies or Conditions");
            entity.Property(e => e.MiddleName).HasMaxLength(255);
            entity.Property(e => e.MobilePhone).HasMaxLength(255);
            entity.Property(e => e.Nickname).HasMaxLength(255);
            entity.Property(e => e.Pager).HasMaxLength(255);
            entity.Property(e => e.PassportDateOfExpiration)
                .HasMaxLength(255)
                .HasColumnName("Passport Date of Expiration");
            entity.Property(e => e.PassportDateOfIssue)
                .HasMaxLength(255)
                .HasColumnName("Passport Date of Issue");
            entity.Property(e => e.PassportNumber)
                .HasMaxLength(255)
                .HasColumnName("Passport Number");
            entity.Property(e => e.Password).HasMaxLength(255);
            entity.Property(e => e.PlaceOfBirth)
                .HasMaxLength(255)
                .HasColumnName("Place of Birth");
            entity.Property(e => e.PlaceOfIssueNewOrleansPassportAgency)
                .HasMaxLength(255)
                .HasColumnName("Place of Issue (New Orleans Passport Agency)");
            entity.Property(e => e.SeatPreference)
                .HasMaxLength(255)
                .HasColumnName("Seat Preference");
            entity.Property(e => e.SecondaryEmergencyContact)
                .HasMaxLength(255)
                .HasColumnName("Secondary Emergency Contact #");
            entity.Property(e => e.SecondaryEmergencyContactRelationship)
                .HasMaxLength(255)
                .HasColumnName("Secondary Emergency Contact & Relationship");
            entity.Property(e => e.SiteId)
                .HasMaxLength(255)
                .HasColumnName("SiteID");
            entity.Property(e => e.SmokingPreference)
                .HasMaxLength(255)
                .HasColumnName("Smoking Preference");
            entity.Property(e => e.State).HasMaxLength(255);
            entity.Property(e => e.SwagGender)
                .HasMaxLength(255)
                .HasColumnName("Swag Gender");
            entity.Property(e => e.SwagShirtSize)
                .HasMaxLength(255)
                .HasColumnName("Swag Shirt Size");
            entity.Property(e => e.TxtMsgAddress).HasMaxLength(255);
            entity.Property(e => e.UserName).HasMaxLength(255);
            entity.Property(e => e.WorkPhone).HasMaxLength(255);
        });

        modelBuilder.Entity<TmpEdscrewImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSCrew_Import");

            entity.Property(e => e.Addr1).HasColumnName("addr1");
            entity.Property(e => e.Addressiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("ADDRESSIID");
            entity.Property(e => e.Addressline).HasColumnName("ADDRESSLINE");
            entity.Property(e => e.Allowcalenderupdate).HasColumnName("ALLOWCALENDERUPDATE");
            entity.Property(e => e.Alloweditcontact).HasColumnName("ALLOWEDITCONTACT");
            entity.Property(e => e.Allowlogin).HasColumnName("ALLOWLOGIN");
            entity.Property(e => e.Birthdate).HasColumnName("BIRTHDATE");
            entity.Property(e => e.Categoryiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CATEGORYIID");
            entity.Property(e => e.Cellphone).HasColumnName("cellphone");
            entity.Property(e => e.Changedate).HasColumnName("CHANGEDATE");
            entity.Property(e => e.City).HasColumnName("CITY");
            entity.Property(e => e.CityF).HasColumnName("city_f");
            entity.Property(e => e.Contactid).HasColumnName("CONTACTID");
            entity.Property(e => e.Contactiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CONTACTIID");
            entity.Property(e => e.Countrycode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("countrycode");
            entity.Property(e => e.Createdbyempiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CREATEDBYEMPIID");
            entity.Property(e => e.Createddate).HasColumnName("CREATEDDATE");
            entity.Property(e => e.Crewid).HasColumnName("CREWID");
            entity.Property(e => e.Crewlocationiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CREWLOCATIONIID");
            entity.Property(e => e.Crewlocationtype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CREWLOCATIONTYPE");
            entity.Property(e => e.Crewmasteriid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CREWMASTERIID");
            entity.Property(e => e.Crewtype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CREWTYPE");
            entity.Property(e => e.Customeriid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("CUSTOMERIID");
            entity.Property(e => e.Email).HasColumnName("email");
            entity.Property(e => e.Emailaddr).HasColumnName("EMAILADDR");
            entity.Property(e => e.Empno)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.Empstatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("empstatus");
            entity.Property(e => e.Fax).HasColumnName("fax");
            entity.Property(e => e.Faxnumber).HasColumnName("FAXNUMBER");
            entity.Property(e => e.Firstname).HasColumnName("FIRSTNAME");
            entity.Property(e => e.FirstnameF).HasColumnName("firstname_f");
            entity.Property(e => e.Gradecd)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("gradecd");
            entity.Property(e => e.Groupno)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("groupno");
            entity.Property(e => e.Homephone).HasColumnName("HOMEPHONE");
            entity.Property(e => e.Includeoverheadcost)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("INCLUDEOVERHEADCOST");
            entity.Property(e => e.Isloginallowed).HasColumnName("ISLOGINALLOWED");
            entity.Property(e => e.Lastlogindate).HasColumnName("LASTLOGINDATE");
            entity.Property(e => e.Lastname).HasColumnName("LASTNAME");
            entity.Property(e => e.LastnameF).HasColumnName("lastname_f");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("locationcd");
            entity.Property(e => e.Middlename).HasColumnName("MIDDLENAME");
            entity.Property(e => e.Midname).HasColumnName("midname");
            entity.Property(e => e.Mobilephone).HasColumnName("MOBILEPHONE");
            entity.Property(e => e.Modifiedbyempiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("MODIFIEDBYEMPIID");
            entity.Property(e => e.OtherEcontact).HasColumnName("otherEContact");
            entity.Property(e => e.Parentiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PARENTIID");
            entity.Property(e => e.Parenttype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PARENTTYPE");
            entity.Property(e => e.Phone).HasColumnName("phone");
            entity.Property(e => e.Ref4)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("ref4");
            entity.Property(e => e.State).HasColumnName("STATE");
            entity.Property(e => e.StateF).HasColumnName("state_f");
            entity.Property(e => e.Txtmsgaddr).HasColumnName("TXTMSGADDR");
            entity.Property(e => e.UserName).HasColumnName("user_name");
            entity.Property(e => e.Username).HasColumnName("USERNAME");
            entity.Property(e => e.WarehouseCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Workphone).HasColumnName("WORKPHONE");
            entity.Property(e => e.Zip).HasColumnName("ZIP");
            entity.Property(e => e.ZipF).HasColumnName("zip_f");
        });

        modelBuilder.Entity<TmpEdscrewImportFeb0121>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSCrew_Import_FEB0121");

            entity.Property(e => e.Cellphone)
                .HasMaxLength(255)
                .HasColumnName("cellphone");
            entity.Property(e => e.Email)
                .HasMaxLength(255)
                .HasColumnName("email");
            entity.Property(e => e.Empno)
                .HasMaxLength(255)
                .HasColumnName("empno");
            entity.Property(e => e.Firstname)
                .HasMaxLength(255)
                .HasColumnName("firstname");
            entity.Property(e => e.Fullname)
                .HasMaxLength(255)
                .HasColumnName("fullname");
            entity.Property(e => e.Lastname)
                .HasMaxLength(255)
                .HasColumnName("lastname");
            entity.Property(e => e.PayBirthDate)
                .HasColumnType("datetime")
                .HasColumnName("Pay#Birth Date");
            entity.Property(e => e.PayCity)
                .HasMaxLength(255)
                .HasColumnName("Pay#City");
            entity.Property(e => e.PayContactName)
                .HasMaxLength(255)
                .HasColumnName("Pay#Contact Name");
            entity.Property(e => e.PayFirstName)
                .HasMaxLength(255)
                .HasColumnName("Pay#First Name");
            entity.Property(e => e.PayHomePhoneEPhone)
                .HasMaxLength(255)
                .HasColumnName("Pay#Home Phone (E-Phone)");
            entity.Property(e => e.PayLastName)
                .HasMaxLength(255)
                .HasColumnName("Pay#Last Name");
            entity.Property(e => e.PayMiddleName)
                .HasMaxLength(255)
                .HasColumnName("Pay#Middle Name");
            entity.Property(e => e.PayMobilePhone)
                .HasMaxLength(255)
                .HasColumnName("Pay#Mobile Phone");
            entity.Property(e => e.PayPersonalContactHomePhone)
                .HasMaxLength(255)
                .HasColumnName("Pay#Personal Contact: Home Phone");
            entity.Property(e => e.PayPersonalContactPersonalEmail)
                .HasMaxLength(255)
                .HasColumnName("Pay#Personal Contact: Personal Email");
            entity.Property(e => e.PayPersonalContactPersonalMobile)
                .HasMaxLength(255)
                .HasColumnName("Pay#Personal Contact: Personal Mobile");
            entity.Property(e => e.PayPrimaryAddressAddressLine1)
                .HasMaxLength(255)
                .HasColumnName("Pay#Primary Address: Address Line 1");
            entity.Property(e => e.PayPrimaryAddressAddressLine2)
                .HasMaxLength(255)
                .HasColumnName("Pay#Primary Address: Address Line 2");
            entity.Property(e => e.PayPrimaryAddressZipPostalCode)
                .HasMaxLength(255)
                .HasColumnName("Pay#Primary Address: Zip / Postal Code");
            entity.Property(e => e.PayState)
                .HasMaxLength(255)
                .HasColumnName("Pay#State");
            entity.Property(e => e.PayWorkContactWorkEmail)
                .HasMaxLength(255)
                .HasColumnName("Pay#Work Contact: Work Email");
            entity.Property(e => e.PayWorkContactWorkMobile)
                .HasMaxLength(255)
                .HasColumnName("Pay#Work Contact: Work Mobile");
            entity.Property(e => e.PayWorkContactWorkPhone)
                .HasMaxLength(255)
                .HasColumnName("Pay#Work Contact: Work Phone");
            entity.Property(e => e.PdfsCanYouTravelToForeignCountriesCanada)
                .HasMaxLength(255)
                .HasColumnName("PDFS#Can you travel to foreign countries (Canada)");
            entity.Property(e => e.PdfsCitzenship)
                .HasMaxLength(255)
                .HasColumnName("PDFS#Citzenship");
            entity.Property(e => e.PdfsCriminalRecordThatWouldPreventYouFromTravelingInto)
                .HasMaxLength(255)
                .HasColumnName("PDFS#Criminal record that would prevent you from traveling into ");
            entity.Property(e => e.PdfsDateOfBirth)
                .HasMaxLength(255)
                .HasColumnName("PDFS#Date of Birth");
            entity.Property(e => e.PdfsDietaryRestrictions)
                .HasMaxLength(255)
                .HasColumnName("PDFS#Dietary Restrictions");
            entity.Property(e => e.PdfsEmergencyContactEmailAddress)
                .HasMaxLength(255)
                .HasColumnName("PDFS#Emergency Contact Email Address");
            entity.Property(e => e.PdfsEmergencyContactRelationship)
                .HasMaxLength(255)
                .HasColumnName("PDFS#Emergency Contact & Relationship");
            entity.Property(e => e.PdfsEmergencyPhoneNumber1)
                .HasMaxLength(255)
                .HasColumnName("PDFS#Emergency Phone Number #1");
            entity.Property(e => e.PdfsEmergencyPhoneNumber2)
                .HasMaxLength(255)
                .HasColumnName("PDFS#Emergency Phone Number #2");
            entity.Property(e => e.PdfsFileCreated)
                .HasMaxLength(255)
                .HasColumnName("PDFS#FileCreated");
            entity.Property(e => e.PdfsFrequentFlyerAmericanAirlines)
                .HasMaxLength(255)
                .HasColumnName("PDFS#Frequent Flyer #: American Airlines");
            entity.Property(e => e.PdfsFrequentFlyerBritishAirways)
                .HasMaxLength(255)
                .HasColumnName("PDFS#Frequent Flyer #: British Airways");
            entity.Property(e => e.PdfsFrequentFlyerBritishAirwaysOld).HasColumnName("PDFS#Frequent Flyer #: British AirwaysOLD");
            entity.Property(e => e.PdfsFrequentFlyerDelta)
                .HasMaxLength(255)
                .HasColumnName("PDFS#Frequent Flyer #: Delta");
            entity.Property(e => e.PdfsFrequentFlyerDeltaOld).HasColumnName("PDFS#Frequent Flyer #: DeltaOLD");
            entity.Property(e => e.PdfsFrequentFlyerOther)
                .HasMaxLength(255)
                .HasColumnName("PDFS#Frequent Flyer #: Other");
            entity.Property(e => e.PdfsFrequentFlyerQantas)
                .HasMaxLength(255)
                .HasColumnName("PDFS#Frequent Flyer #: Qantas");
            entity.Property(e => e.PdfsFrequentFlyerSouthwest)
                .HasMaxLength(255)
                .HasColumnName("PDFS#Frequent Flyer #: Southwest");
            entity.Property(e => e.PdfsFrequentFlyerUnited)
                .HasMaxLength(255)
                .HasColumnName("PDFS#Frequent Flyer #: United");
            entity.Property(e => e.PdfsHomeAirport)
                .HasMaxLength(255)
                .HasColumnName("PDFS#Home Airport");
            entity.Property(e => e.PdfsIssuingGovernmentOfPassport)
                .HasMaxLength(255)
                .HasColumnName("PDFS#Issuing Government of Passport");
            entity.Property(e => e.PdfsKnownTravelerNumber)
                .HasMaxLength(255)
                .HasColumnName("PDFS#Known Traveler Number");
            entity.Property(e => e.PdfsMedicalAllergiesOrConditions)
                .HasMaxLength(255)
                .HasColumnName("PDFS#Medical Allergies or Conditions");
            entity.Property(e => e.PdfsPassportDateOfExpiration)
                .HasMaxLength(255)
                .HasColumnName("PDFS#Passport Date of Expiration");
            entity.Property(e => e.PdfsPassportDateOfIssue)
                .HasMaxLength(255)
                .HasColumnName("PDFS#Passport Date of Issue");
            entity.Property(e => e.PdfsPassportNumber)
                .HasMaxLength(255)
                .HasColumnName("PDFS#Passport Number");
            entity.Property(e => e.PdfsPlaceOfBirth)
                .HasMaxLength(255)
                .HasColumnName("PDFS#Place of Birth");
            entity.Property(e => e.PdfsPlaceOfIssueNewOrleansPassportAgency)
                .HasMaxLength(255)
                .HasColumnName("PDFS#Place of Issue (New Orleans Passport Agency)");
            entity.Property(e => e.PdfsSeatPreference)
                .HasMaxLength(255)
                .HasColumnName("PDFS#Seat Preference");
            entity.Property(e => e.PdfsSecondaryEmergencyContact)
                .HasMaxLength(255)
                .HasColumnName("PDFS#Secondary Emergency Contact #");
            entity.Property(e => e.PdfsSecondaryEmergencyContactRelationship)
                .HasMaxLength(255)
                .HasColumnName("PDFS#Secondary Emergency Contact & Relationship");
            entity.Property(e => e.PdfsSmokingPreference)
                .HasMaxLength(255)
                .HasColumnName("PDFS#Smoking Preference");
            entity.Property(e => e.PdfsSwagGender)
                .HasMaxLength(255)
                .HasColumnName("PDFS#Swag Gender");
            entity.Property(e => e.PdfsSwagShirtSize)
                .HasMaxLength(255)
                .HasColumnName("PDFS#Swag Shirt Size");
        });

        modelBuilder.Entity<TmpEdseventTypesMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSEventTypes_Mapping");

            entity.Property(e => e.Eventno)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("EVENTNO");
            entity.Property(e => e.Eventtype).HasColumnName("EVENTTYPE");
            entity.Property(e => e.Proptype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("proptype");
        });

        modelBuilder.Entity<TmpEdseventsWithProjectsImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSEventsWithProjects_Import");

            entity.Property(e => e.AcctExecEmpno).HasColumnName("acctExecEmpno");
            entity.Property(e => e.Agency)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("agency");
            entity.Property(e => e.Approvalrequired).HasColumnName("APPROVALREQUIRED");
            entity.Property(e => e.Bidmarkup)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("bidmarkup");
            entity.Property(e => e.Bidroot).HasColumnName("bidroot");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Category).HasColumnName("CATEGORY");
            entity.Property(e => e.Commissioniid).HasColumnName("COMMISSIONIID");
            entity.Property(e => e.Country)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("country");
            entity.Property(e => e.Createdby).HasColumnName("CREATEDBY");
            entity.Property(e => e.Currency).HasColumnName("currency");
            entity.Property(e => e.Custno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("custno");
            entity.Property(e => e.Customeriid).HasColumnName("CUSTOMERIID");
            entity.Property(e => e.Datecreated).HasColumnName("DATECREATED");
            entity.Property(e => e.Discamount).HasColumnName("DISCAMOUNT");
            entity.Property(e => e.Disctype).HasColumnName("DISCTYPE");
            entity.Property(e => e.Enddate).HasColumnName("enddate");
            entity.Property(e => e.Endeventdate).HasColumnName("ENDEVENTDATE");
            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("engactivecd");
            entity.Property(e => e.EngrEmpno).HasColumnName("engrEmpno");
            entity.Property(e => e.Entitydesc).HasColumnName("entitydesc");
            entity.Property(e => e.Entityno).HasColumnName("entityno");
            entity.Property(e => e.Entitytype)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("entitytype");
            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Eventiid).HasColumnName("EVENTIID");
            entity.Property(e => e.Eventmanageriid).HasColumnName("EVENTMANAGERIID");
            entity.Property(e => e.Eventname).HasColumnName("EVENTNAME");
            entity.Property(e => e.Eventtype).HasColumnName("EVENTTYPE");
            entity.Property(e => e.Finactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("finactivecd");
            entity.Property(e => e.Industry)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("industry");
            entity.Property(e => e.InternalOrg)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("internal_org");
            entity.Property(e => e.Isclosed).HasColumnName("ISCLOSED");
            entity.Property(e => e.Laborpricegroup).HasColumnName("LABORPRICEGROUP");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("locationcd");
            entity.Property(e => e.Maincontactiid).HasColumnName("MAINCONTACTIID");
            entity.Property(e => e.Opsmgr).HasColumnName("opsmgr");
            entity.Property(e => e.Parententityno).HasColumnName("parententityno");
            entity.Property(e => e.Plactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("plactivecd");
            entity.Property(e => e.Pricegroup).HasColumnName("PRICEGROUP");
            entity.Property(e => e.Prob).HasColumnName("prob");
            entity.Property(e => e.Profitcenter).HasColumnName("PROFITCENTER");
            entity.Property(e => e.Projectid).HasColumnName("PROJECTID");
            entity.Property(e => e.Projectmanageriid).HasColumnName("PROJECTMANAGERIID");
            entity.Property(e => e.Propduedate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("propduedate");
            entity.Property(e => e.Proptype)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("proptype");
            entity.Property(e => e.Readytopack).HasColumnName("readytopack");
            entity.Property(e => e.Referenceno).HasColumnName("REFERENCENO");
            entity.Property(e => e.Respempno).HasColumnName("respempno");
            entity.Property(e => e.Salespersoniid).HasColumnName("SALESPERSONIID");
            entity.Property(e => e.Sfactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sfactivecd");
            entity.Property(e => e.Shipno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("shipno");
            entity.Property(e => e.Startdate).HasColumnName("startdate");
            entity.Property(e => e.Starteventdate).HasColumnName("STARTEVENTDATE");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Subcontract)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("subcontract");
            entity.Property(e => e.Subno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("subno");
            entity.Property(e => e.Type).HasColumnName("TYPE");
        });

        modelBuilder.Entity<TmpEdseventsWithoutProjectsImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSEventsWithoutProjects_Import");

            entity.Property(e => e.AcctExecEmpno).HasColumnName("acctExecEmpno");
            entity.Property(e => e.Agency)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("agency");
            entity.Property(e => e.Approvalrequired).HasColumnName("APPROVALREQUIRED");
            entity.Property(e => e.Bidmarkup)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("bidmarkup");
            entity.Property(e => e.Bidroot).HasColumnName("bidroot");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Category).HasColumnName("CATEGORY");
            entity.Property(e => e.Commissioniid).HasColumnName("COMMISSIONIID");
            entity.Property(e => e.Country)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("country");
            entity.Property(e => e.Createdby).HasColumnName("CREATEDBY");
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.Custno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("custno");
            entity.Property(e => e.Customeriid).HasColumnName("CUSTOMERIID");
            entity.Property(e => e.Datecreated).HasColumnName("DATECREATED");
            entity.Property(e => e.Discamount).HasColumnName("DISCAMOUNT");
            entity.Property(e => e.Disctype).HasColumnName("DISCTYPE");
            entity.Property(e => e.Enddate).HasColumnName("enddate");
            entity.Property(e => e.Endeventdate).HasColumnName("ENDEVENTDATE");
            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("engactivecd");
            entity.Property(e => e.EngrEmpno).HasColumnName("engrEmpno");
            entity.Property(e => e.Entitydesc).HasColumnName("entitydesc");
            entity.Property(e => e.Entityno).HasColumnName("entityno");
            entity.Property(e => e.Entitytype)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("entitytype");
            entity.Property(e => e.Eventid).HasColumnName("EVENTID");
            entity.Property(e => e.Eventiid).HasColumnName("EVENTIID");
            entity.Property(e => e.Eventmanageriid).HasColumnName("EVENTMANAGERIID");
            entity.Property(e => e.Eventname).HasColumnName("EVENTNAME");
            entity.Property(e => e.Eventtype).HasColumnName("EVENTTYPE");
            entity.Property(e => e.Finactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("finactivecd");
            entity.Property(e => e.Industry)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("industry");
            entity.Property(e => e.InternalOrg)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("internal_org");
            entity.Property(e => e.Isclosed).HasColumnName("ISCLOSED");
            entity.Property(e => e.Laborpricegroup).HasColumnName("LABORPRICEGROUP");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("locationcd");
            entity.Property(e => e.Maincontactiid).HasColumnName("MAINCONTACTIID");
            entity.Property(e => e.Opsmgr).HasColumnName("opsmgr");
            entity.Property(e => e.Parententityno).HasColumnName("parententityno");
            entity.Property(e => e.Plactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("plactivecd");
            entity.Property(e => e.Pricegroup).HasColumnName("PRICEGROUP");
            entity.Property(e => e.Prob).HasColumnName("prob");
            entity.Property(e => e.Profitcenter).HasColumnName("PROFITCENTER");
            entity.Property(e => e.Projectid).HasColumnName("PROJECTID");
            entity.Property(e => e.Projectmanageriid).HasColumnName("PROJECTMANAGERIID");
            entity.Property(e => e.Propduedate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("propduedate");
            entity.Property(e => e.Proptype)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("proptype");
            entity.Property(e => e.Readytopack).HasColumnName("readytopack");
            entity.Property(e => e.Referenceno).HasColumnName("REFERENCENO");
            entity.Property(e => e.Respempno).HasColumnName("respempno");
            entity.Property(e => e.Salespersoniid).HasColumnName("SALESPERSONIID");
            entity.Property(e => e.Sfactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sfactivecd");
            entity.Property(e => e.Shipno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("shipno");
            entity.Property(e => e.Startdate).HasColumnName("startdate");
            entity.Property(e => e.Starteventdate).HasColumnName("STARTEVENTDATE");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Subcontract)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("subcontract");
            entity.Property(e => e.Subno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("subno");
            entity.Property(e => e.Type).HasColumnName("TYPE");
        });

        modelBuilder.Entity<TmpEdsitemSitesMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSItemSites_Mapping");

            entity.Property(e => e.Siteiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SITEIID");
            entity.Property(e => e.WarehouseCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpEdsitemStatusMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSItemStatus_Mapping");

            entity.Property(e => e.Assetstatus)
                .HasMaxLength(255)
                .HasColumnName("ASSETSTATUS");
            entity.Property(e => e.Itemstatus)
                .HasColumnType("numeric(9, 5)")
                .HasColumnName("ITEMSTATUS");
        });

        modelBuilder.Entity<TmpEdsjobTypesMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSJobTypes_Mapping");

            entity.Property(e => e.Active).HasColumnName("ACTIVE");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.Discountgroup).HasColumnName("DISCOUNTGROUP");
            entity.Property(e => e.Inventorygroup).HasColumnName("INVENTORYGROUP");
            entity.Property(e => e.Inviid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("INVIID");
            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("jobtype");
            entity.Property(e => e.Maingroup).HasColumnName("MAINGROUP");
            entity.Property(e => e.Sku).HasColumnName("SKU");
        });

        modelBuilder.Entity<TmpEdskitDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSKitDetail");

            entity.Property(e => e.Dept)
                .HasMaxLength(255)
                .HasColumnName("DEPT");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Itemlevel).HasColumnName("ITEMLEVEL");
            entity.Property(e => e.Itemsequence)
                .HasMaxLength(255)
                .HasColumnName("ITEMSEQUENCE");
            entity.Property(e => e.Kitsku)
                .HasMaxLength(255)
                .HasColumnName("KITSKU");
            entity.Property(e => e.Lineno).HasColumnName("LINENO");
            entity.Property(e => e.Pricingmethod)
                .HasMaxLength(255)
                .HasColumnName("PRICINGMETHOD");
            entity.Property(e => e.Quantity).HasColumnName("QUANTITY");
            entity.Property(e => e.Sku)
                .HasMaxLength(255)
                .HasColumnName("SKU");
            entity.Property(e => e.Type)
                .HasMaxLength(255)
                .HasColumnName("TYPE");
        });

        modelBuilder.Entity<TmpEdsmanufacturerMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSManufacturer_Mapping");

            entity.Property(e => e.Groupdesc).HasColumnName("GROUPDESC");
            entity.Property(e => e.Groupid).HasColumnName("GROUPID");
            entity.Property(e => e.ImportManufacturer).HasColumnName("Import_Manufacturer");
            entity.Property(e => e.Madein).HasColumnName("MADEIN");
            entity.Property(e => e.Manufacturer).HasColumnName("MANUFACTURER");
            entity.Property(e => e.ManufacturerDescFinesse)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ManufacturerDesc_Finesse");
            entity.Property(e => e.ManufacturerFixed).HasColumnName("MANUFACTURER_fixed");
        });

        modelBuilder.Entity<TmpEdsnonBarcodesTransfer>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSNonBarcodes_Transfer");

            entity.Property(e => e.Action).HasColumnName("ACTION");
            entity.Property(e => e.Comments).HasColumnName("COMMENTS");
            entity.Property(e => e.Conlineiid).HasColumnName("CONLINEIID");
            entity.Property(e => e.Conlineserialiid).HasColumnName("CONLINESERIALIID");
            entity.Property(e => e.Containerid).HasColumnName("CONTAINERID");
            entity.Property(e => e.Contractiid).HasColumnName("CONTRACTIID");
            entity.Property(e => e.Departmentid).HasColumnName("DEPARTMENTID");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.FromArea)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("fromArea");
            entity.Property(e => e.FromBatchNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("fromBatchNo");
            entity.Property(e => e.FromBld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fromBld");
            entity.Property(e => e.FromDept)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("fromDept");
            entity.Property(e => e.Inviid).HasColumnName("INVIID");
            entity.Property(e => e.Keeporiginalitemdescription).HasColumnName("KEEPORIGINALITEMDESCRIPTION");
            entity.Property(e => e.Lineno).HasColumnName("LINENO");
            entity.Property(e => e.Linetype).HasColumnName("LINETYPE");
            entity.Property(e => e.Loadingbayid).HasColumnName("LOADINGBAYID");
            entity.Property(e => e.Orderedqty).HasColumnName("ORDEREDQTY");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Pieces).HasColumnName("pieces");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Quickturnaroundfor).HasColumnName("QUICKTURNAROUNDFOR");
            entity.Property(e => e.Returnedqty).HasColumnName("RETURNEDQTY");
            entity.Property(e => e.Row)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.Secondarystatus).HasColumnName("SECONDARYSTATUS");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.Serialiid).HasColumnName("SERIALIID");
            entity.Property(e => e.Serialnumber).HasColumnName("SERIALNUMBER");
            entity.Property(e => e.Shippedqty).HasColumnName("SHIPPEDQTY");
            entity.Property(e => e.Shippingstatus).HasColumnName("SHIPPINGSTATUS");
            entity.Property(e => e.Sku).HasColumnName("SKU");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Statusdate).HasColumnName("STATUSDATE");
            entity.Property(e => e.ToArea)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("toArea");
            entity.Property(e => e.ToBatchNo).HasColumnName("toBatchNo");
            entity.Property(e => e.ToBld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("toBld");
            entity.Property(e => e.ToDept)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("toDept");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<TmpEdsnonBarcodesTransferMassTransferCurrentRecord>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSNonBarcodes_Transfer_MassTransferCurrentRecord");

            entity.Property(e => e.FromArea)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("fromArea");
            entity.Property(e => e.FromBatchNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("fromBatchNo");
            entity.Property(e => e.FromBld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fromBld");
            entity.Property(e => e.FromDept)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("fromDept");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Pieces).HasColumnName("pieces");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Row)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.ToArea)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("toArea");
            entity.Property(e => e.ToBatchNo).HasColumnName("toBatchNo");
            entity.Property(e => e.ToBld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("toBld");
            entity.Property(e => e.ToDept)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("toDept");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<TmpEdsnonBarcodesTransferMassTransferLoop>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSNonBarcodes_Transfer_MassTransferLoop");

            entity.Property(e => e.FromArea)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("fromArea");
            entity.Property(e => e.FromBatchNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("fromBatchNo");
            entity.Property(e => e.FromBld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fromBld");
            entity.Property(e => e.FromDept)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("fromDept");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Pieces).HasColumnName("pieces");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Row)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.ToArea)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("toArea");
            entity.Property(e => e.ToBatchNo).HasColumnName("toBatchNo");
            entity.Property(e => e.ToBld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("toBld");
            entity.Property(e => e.ToDept)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("toDept");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<TmpEdsorderedPartsImportGreenDay>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSOrderedParts_Import_GreenDay");

            entity.Property(e => e.Action).HasColumnName("ACTION");
            entity.Property(e => e.Amount).HasColumnName("AMOUNT");
            entity.Property(e => e.Attribute).HasColumnName("ATTRIBUTE");
            entity.Property(e => e.Basecurrencyamount).HasColumnName("BASECURRENCYAMOUNT");
            entity.Property(e => e.Basecurrencydiscountamount).HasColumnName("BASECURRENCYDISCOUNTAMOUNT");
            entity.Property(e => e.Basecurrencyprice).HasColumnName("BASECURRENCYPRICE");
            entity.Property(e => e.Chargeenddate).HasColumnName("CHARGEENDDATE");
            entity.Property(e => e.Chargestartdate).HasColumnName("CHARGESTARTDATE");
            entity.Property(e => e.Conlineiid).HasColumnName("CONLINEIID");
            entity.Property(e => e.Contractiid).HasColumnName("CONTRACTIID");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.Discountamount).HasColumnName("DISCOUNTAMOUNT");
            entity.Property(e => e.Enddate).HasColumnName("ENDDATE");
            entity.Property(e => e.Entityno).HasColumnName("entityno");
            entity.Property(e => e.EstAmount)
                .HasColumnType("decimal(29, 0)")
                .HasColumnName("est_amount");
            entity.Property(e => e.EstQty).HasColumnName("est_qty");
            entity.Property(e => e.EstRevAmount)
                .HasColumnType("numeric(23, 2)")
                .HasColumnName("est_rev_amount");
            entity.Property(e => e.EstRevTotal)
                .HasColumnType("numeric(34, 2)")
                .HasColumnName("est_rev_total");
            entity.Property(e => e.EstUnitAmount)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("est_unit_amount");
            entity.Property(e => e.Expanded).HasColumnName("EXPANDED");
            entity.Property(e => e.Expcd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("expcd");
            entity.Property(e => e.Immediateparentconlineiid).HasColumnName("IMMEDIATEPARENTCONLINEIID");
            entity.Property(e => e.Inviid).HasColumnName("INVIID");
            entity.Property(e => e.Isdescriptionmodified).HasColumnName("ISDESCRIPTIONMODIFIED");
            entity.Property(e => e.Isfreight).HasColumnName("ISFREIGHT");
            entity.Property(e => e.Levelno).HasColumnName("LEVELNO");
            entity.Property(e => e.LineNo).HasColumnName("line_no");
            entity.Property(e => e.Lineno).HasColumnName("LINENO");
            entity.Property(e => e.Loadindate).HasColumnName("LOADINDATE");
            entity.Property(e => e.Mainparentconlineiid).HasColumnName("MAINPARENTCONLINEIID");
            entity.Property(e => e.Markup).HasColumnName("markup");
            entity.Property(e => e.MfgDesc).HasColumnName("mfg_desc");
            entity.Property(e => e.MfgNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("mfg_no");
            entity.Property(e => e.NoteInternal)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Partdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Pickupdate).HasColumnName("PICKUPDATE");
            entity.Property(e => e.Prepdate).HasColumnName("PREPDATE");
            entity.Property(e => e.Price).HasColumnName("PRICE");
            entity.Property(e => e.Quantity).HasColumnName("QUANTITY");
            entity.Property(e => e.Rehearsaldate).HasColumnName("REHEARSALDATE");
            entity.Property(e => e.Returndate).HasColumnName("RETURNDATE");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Shipdate).HasColumnName("SHIPDATE");
            entity.Property(e => e.Showenddate).HasColumnName("SHOWENDDATE");
            entity.Property(e => e.Showstartdate).HasColumnName("SHOWSTARTDATE");
            entity.Property(e => e.Sitecurrencyamount).HasColumnName("SITECURRENCYAMOUNT");
            entity.Property(e => e.Sitecurrencydiscountamount).HasColumnName("SITECURRENCYDISCOUNTAMOUNT");
            entity.Property(e => e.Sitecurrencyprice).HasColumnName("SITECURRENCYPRICE");
            entity.Property(e => e.Sku).HasColumnName("SKU");
            entity.Property(e => e.Startdate).HasColumnName("STARTDATE");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Strikedate).HasColumnName("STRIKEDATE");
            entity.Property(e => e.Todate).HasColumnName("todate");
            entity.Property(e => e.Trandate).HasColumnName("trandate");
            entity.Property(e => e.Type).HasColumnName("TYPE");
        });

        modelBuilder.Entity<TmpEdsorderedPartsOnContractsNestedToContractsImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSOrderedPartsOnContractsNestedToContracts_Import");

            entity.Property(e => e.Action).HasColumnName("ACTION");
            entity.Property(e => e.Amount).HasColumnName("AMOUNT");
            entity.Property(e => e.Attribute).HasColumnName("ATTRIBUTE");
            entity.Property(e => e.Basecurrencyamount).HasColumnName("BASECURRENCYAMOUNT");
            entity.Property(e => e.Basecurrencydiscountamount).HasColumnName("BASECURRENCYDISCOUNTAMOUNT");
            entity.Property(e => e.Basecurrencyprice).HasColumnName("BASECURRENCYPRICE");
            entity.Property(e => e.Chargeenddate).HasColumnName("CHARGEENDDATE");
            entity.Property(e => e.Chargestartdate).HasColumnName("CHARGESTARTDATE");
            entity.Property(e => e.Conlineiid).HasColumnName("CONLINEIID");
            entity.Property(e => e.Contractiid).HasColumnName("CONTRACTIID");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.Discountamount).HasColumnName("DISCOUNTAMOUNT");
            entity.Property(e => e.Enddate).HasColumnName("ENDDATE");
            entity.Property(e => e.Entityno).HasColumnName("entityno");
            entity.Property(e => e.EstAmount)
                .HasColumnType("decimal(29, 0)")
                .HasColumnName("est_amount");
            entity.Property(e => e.EstQty).HasColumnName("est_qty");
            entity.Property(e => e.EstRevAmount)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("est_rev_amount");
            entity.Property(e => e.EstRevTotal)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("est_rev_total");
            entity.Property(e => e.EstUnitAmount)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("est_unit_amount");
            entity.Property(e => e.Expanded).HasColumnName("EXPANDED");
            entity.Property(e => e.Expcd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("expcd");
            entity.Property(e => e.Immediateparentconlineiid).HasColumnName("IMMEDIATEPARENTCONLINEIID");
            entity.Property(e => e.Inviid).HasColumnName("INVIID");
            entity.Property(e => e.Isdescriptionmodified).HasColumnName("ISDESCRIPTIONMODIFIED");
            entity.Property(e => e.Isfreight).HasColumnName("ISFREIGHT");
            entity.Property(e => e.Levelno).HasColumnName("LEVELNO");
            entity.Property(e => e.LineNo).HasColumnName("line_no");
            entity.Property(e => e.Lineno).HasColumnName("LINENO");
            entity.Property(e => e.Loadindate).HasColumnName("LOADINDATE");
            entity.Property(e => e.Mainparentconlineiid).HasColumnName("MAINPARENTCONLINEIID");
            entity.Property(e => e.Markup).HasColumnName("markup");
            entity.Property(e => e.MfgDesc).HasColumnName("mfg_desc");
            entity.Property(e => e.MfgNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("mfg_no");
            entity.Property(e => e.NoteInternal)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Partdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Pickupdate).HasColumnName("PICKUPDATE");
            entity.Property(e => e.Prepdate).HasColumnName("PREPDATE");
            entity.Property(e => e.Price).HasColumnName("PRICE");
            entity.Property(e => e.Quantity).HasColumnName("QUANTITY");
            entity.Property(e => e.Rehearsaldate).HasColumnName("REHEARSALDATE");
            entity.Property(e => e.Returndate).HasColumnName("RETURNDATE");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Shipdate).HasColumnName("SHIPDATE");
            entity.Property(e => e.Showenddate).HasColumnName("SHOWENDDATE");
            entity.Property(e => e.Showstartdate).HasColumnName("SHOWSTARTDATE");
            entity.Property(e => e.Sitecurrencyamount).HasColumnName("SITECURRENCYAMOUNT");
            entity.Property(e => e.Sitecurrencydiscountamount).HasColumnName("SITECURRENCYDISCOUNTAMOUNT");
            entity.Property(e => e.Sitecurrencyprice).HasColumnName("SITECURRENCYPRICE");
            entity.Property(e => e.Sku).HasColumnName("SKU");
            entity.Property(e => e.Startdate).HasColumnName("STARTDATE");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Strikedate).HasColumnName("STRIKEDATE");
            entity.Property(e => e.Todate).HasColumnName("todate");
            entity.Property(e => e.Trandate).HasColumnName("trandate");
            entity.Property(e => e.Type).HasColumnName("TYPE");
        });

        modelBuilder.Entity<TmpEdsorderedPartsOnContractsNestedToContractsImportGreenDay>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSOrderedPartsOnContractsNestedToContracts_Import_GreenDay");

            entity.Property(e => e.Action).HasColumnName("ACTION");
            entity.Property(e => e.Amount).HasColumnName("AMOUNT");
            entity.Property(e => e.Attribute).HasColumnName("ATTRIBUTE");
            entity.Property(e => e.Basecurrencyamount).HasColumnName("BASECURRENCYAMOUNT");
            entity.Property(e => e.Basecurrencydiscountamount).HasColumnName("BASECURRENCYDISCOUNTAMOUNT");
            entity.Property(e => e.Basecurrencyprice).HasColumnName("BASECURRENCYPRICE");
            entity.Property(e => e.Chargeenddate).HasColumnName("CHARGEENDDATE");
            entity.Property(e => e.Chargestartdate).HasColumnName("CHARGESTARTDATE");
            entity.Property(e => e.Conlineiid).HasColumnName("CONLINEIID");
            entity.Property(e => e.Contractiid).HasColumnName("CONTRACTIID");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.Discountamount).HasColumnName("DISCOUNTAMOUNT");
            entity.Property(e => e.Enddate).HasColumnName("ENDDATE");
            entity.Property(e => e.Entityno).HasColumnName("entityno");
            entity.Property(e => e.EstAmount)
                .HasColumnType("decimal(29, 0)")
                .HasColumnName("est_amount");
            entity.Property(e => e.EstQty).HasColumnName("est_qty");
            entity.Property(e => e.EstRevAmount)
                .HasColumnType("numeric(23, 2)")
                .HasColumnName("est_rev_amount");
            entity.Property(e => e.EstRevTotal)
                .HasColumnType("numeric(34, 2)")
                .HasColumnName("est_rev_total");
            entity.Property(e => e.EstUnitAmount)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("est_unit_amount");
            entity.Property(e => e.Expanded).HasColumnName("EXPANDED");
            entity.Property(e => e.Expcd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("expcd");
            entity.Property(e => e.Immediateparentconlineiid).HasColumnName("IMMEDIATEPARENTCONLINEIID");
            entity.Property(e => e.Inviid).HasColumnName("INVIID");
            entity.Property(e => e.Isdescriptionmodified).HasColumnName("ISDESCRIPTIONMODIFIED");
            entity.Property(e => e.Isfreight).HasColumnName("ISFREIGHT");
            entity.Property(e => e.Levelno).HasColumnName("LEVELNO");
            entity.Property(e => e.LineNo).HasColumnName("line_no");
            entity.Property(e => e.Lineno).HasColumnName("LINENO");
            entity.Property(e => e.Loadindate).HasColumnName("LOADINDATE");
            entity.Property(e => e.Mainparentconlineiid).HasColumnName("MAINPARENTCONLINEIID");
            entity.Property(e => e.Markup).HasColumnName("markup");
            entity.Property(e => e.MfgDesc).HasColumnName("mfg_desc");
            entity.Property(e => e.MfgNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("mfg_no");
            entity.Property(e => e.NoteInternal)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Partdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Pickupdate).HasColumnName("PICKUPDATE");
            entity.Property(e => e.Prepdate).HasColumnName("PREPDATE");
            entity.Property(e => e.Price).HasColumnName("PRICE");
            entity.Property(e => e.Quantity).HasColumnName("QUANTITY");
            entity.Property(e => e.Rehearsaldate).HasColumnName("REHEARSALDATE");
            entity.Property(e => e.Returndate).HasColumnName("RETURNDATE");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Shipdate).HasColumnName("SHIPDATE");
            entity.Property(e => e.Showenddate).HasColumnName("SHOWENDDATE");
            entity.Property(e => e.Showstartdate).HasColumnName("SHOWSTARTDATE");
            entity.Property(e => e.Sitecurrencyamount).HasColumnName("SITECURRENCYAMOUNT");
            entity.Property(e => e.Sitecurrencydiscountamount).HasColumnName("SITECURRENCYDISCOUNTAMOUNT");
            entity.Property(e => e.Sitecurrencyprice).HasColumnName("SITECURRENCYPRICE");
            entity.Property(e => e.Sku).HasColumnName("SKU");
            entity.Property(e => e.Startdate).HasColumnName("STARTDATE");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Strikedate).HasColumnName("STRIKEDATE");
            entity.Property(e => e.Todate).HasColumnName("todate");
            entity.Property(e => e.Trandate).HasColumnName("trandate");
            entity.Property(e => e.Type).HasColumnName("TYPE");
        });

        modelBuilder.Entity<TmpEdsorderedPartsOnContractsWithEventsAsProjectIdsImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSOrderedPartsOnContractsWithEventsAsProjectIds_Import");

            entity.Property(e => e.Action).HasColumnName("ACTION");
            entity.Property(e => e.Amount).HasColumnName("AMOUNT");
            entity.Property(e => e.Attribute).HasColumnName("ATTRIBUTE");
            entity.Property(e => e.Basecurrencyamount).HasColumnName("BASECURRENCYAMOUNT");
            entity.Property(e => e.Basecurrencydiscountamount).HasColumnName("BASECURRENCYDISCOUNTAMOUNT");
            entity.Property(e => e.Basecurrencyprice).HasColumnName("BASECURRENCYPRICE");
            entity.Property(e => e.Chargeenddate).HasColumnName("CHARGEENDDATE");
            entity.Property(e => e.Chargestartdate).HasColumnName("CHARGESTARTDATE");
            entity.Property(e => e.Conlineiid).HasColumnName("CONLINEIID");
            entity.Property(e => e.Contractiid).HasColumnName("CONTRACTIID");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.Discountamount).HasColumnName("DISCOUNTAMOUNT");
            entity.Property(e => e.Enddate).HasColumnName("ENDDATE");
            entity.Property(e => e.Entityno).HasColumnName("entityno");
            entity.Property(e => e.EstAmount)
                .HasColumnType("decimal(29, 0)")
                .HasColumnName("est_amount");
            entity.Property(e => e.EstQty).HasColumnName("est_qty");
            entity.Property(e => e.EstRevAmount)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("est_rev_amount");
            entity.Property(e => e.EstRevTotal)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("est_rev_total");
            entity.Property(e => e.EstUnitAmount)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("est_unit_amount");
            entity.Property(e => e.Expanded).HasColumnName("EXPANDED");
            entity.Property(e => e.Expcd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("expcd");
            entity.Property(e => e.Immediateparentconlineiid).HasColumnName("IMMEDIATEPARENTCONLINEIID");
            entity.Property(e => e.Inviid).HasColumnName("INVIID");
            entity.Property(e => e.Isdescriptionmodified).HasColumnName("ISDESCRIPTIONMODIFIED");
            entity.Property(e => e.Isfreight).HasColumnName("ISFREIGHT");
            entity.Property(e => e.Levelno).HasColumnName("LEVELNO");
            entity.Property(e => e.LineNo).HasColumnName("line_no");
            entity.Property(e => e.Lineno).HasColumnName("LINENO");
            entity.Property(e => e.Loadindate).HasColumnName("LOADINDATE");
            entity.Property(e => e.Mainparentconlineiid).HasColumnName("MAINPARENTCONLINEIID");
            entity.Property(e => e.Markup).HasColumnName("markup");
            entity.Property(e => e.MfgDesc).HasColumnName("mfg_desc");
            entity.Property(e => e.MfgNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("mfg_no");
            entity.Property(e => e.NoteInternal)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Partdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Pickupdate).HasColumnName("PICKUPDATE");
            entity.Property(e => e.Prepdate).HasColumnName("PREPDATE");
            entity.Property(e => e.Price).HasColumnName("PRICE");
            entity.Property(e => e.Quantity).HasColumnName("QUANTITY");
            entity.Property(e => e.Rehearsaldate).HasColumnName("REHEARSALDATE");
            entity.Property(e => e.Returndate).HasColumnName("RETURNDATE");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Shipdate).HasColumnName("SHIPDATE");
            entity.Property(e => e.Showenddate).HasColumnName("SHOWENDDATE");
            entity.Property(e => e.Showstartdate).HasColumnName("SHOWSTARTDATE");
            entity.Property(e => e.Sitecurrencyamount).HasColumnName("SITECURRENCYAMOUNT");
            entity.Property(e => e.Sitecurrencydiscountamount).HasColumnName("SITECURRENCYDISCOUNTAMOUNT");
            entity.Property(e => e.Sitecurrencyprice).HasColumnName("SITECURRENCYPRICE");
            entity.Property(e => e.Sku).HasColumnName("SKU");
            entity.Property(e => e.Startdate).HasColumnName("STARTDATE");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Strikedate).HasColumnName("STRIKEDATE");
            entity.Property(e => e.Todate).HasColumnName("todate");
            entity.Property(e => e.Trandate).HasColumnName("trandate");
            entity.Property(e => e.Type).HasColumnName("TYPE");
        });

        modelBuilder.Entity<TmpEdsorderedPartsOnContractsWithEventsImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSOrderedPartsOnContractsWithEvents_Import");

            entity.Property(e => e.Action).HasColumnName("ACTION");
            entity.Property(e => e.Amount).HasColumnName("AMOUNT");
            entity.Property(e => e.Attribute).HasColumnName("ATTRIBUTE");
            entity.Property(e => e.Basecurrencyamount).HasColumnName("BASECURRENCYAMOUNT");
            entity.Property(e => e.Basecurrencydiscountamount).HasColumnName("BASECURRENCYDISCOUNTAMOUNT");
            entity.Property(e => e.Basecurrencyprice).HasColumnName("BASECURRENCYPRICE");
            entity.Property(e => e.Chargeenddate).HasColumnName("CHARGEENDDATE");
            entity.Property(e => e.Chargestartdate).HasColumnName("CHARGESTARTDATE");
            entity.Property(e => e.Conlineiid).HasColumnName("CONLINEIID");
            entity.Property(e => e.Contractiid).HasColumnName("CONTRACTIID");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.Discountamount).HasColumnName("DISCOUNTAMOUNT");
            entity.Property(e => e.Enddate).HasColumnName("ENDDATE");
            entity.Property(e => e.Entityno).HasColumnName("entityno");
            entity.Property(e => e.EstAmount)
                .HasColumnType("decimal(29, 0)")
                .HasColumnName("est_amount");
            entity.Property(e => e.EstQty).HasColumnName("est_qty");
            entity.Property(e => e.EstRevAmount)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("est_rev_amount");
            entity.Property(e => e.EstRevTotal)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("est_rev_total");
            entity.Property(e => e.EstUnitAmount)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("est_unit_amount");
            entity.Property(e => e.Expanded).HasColumnName("EXPANDED");
            entity.Property(e => e.Expcd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("expcd");
            entity.Property(e => e.Immediateparentconlineiid).HasColumnName("IMMEDIATEPARENTCONLINEIID");
            entity.Property(e => e.Inviid).HasColumnName("INVIID");
            entity.Property(e => e.Isdescriptionmodified).HasColumnName("ISDESCRIPTIONMODIFIED");
            entity.Property(e => e.Isfreight).HasColumnName("ISFREIGHT");
            entity.Property(e => e.Levelno).HasColumnName("LEVELNO");
            entity.Property(e => e.LineNo).HasColumnName("line_no");
            entity.Property(e => e.Lineno).HasColumnName("LINENO");
            entity.Property(e => e.Loadindate).HasColumnName("LOADINDATE");
            entity.Property(e => e.Mainparentconlineiid).HasColumnName("MAINPARENTCONLINEIID");
            entity.Property(e => e.Markup).HasColumnName("markup");
            entity.Property(e => e.MfgDesc).HasColumnName("mfg_desc");
            entity.Property(e => e.MfgNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("mfg_no");
            entity.Property(e => e.NoteInternal)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Partdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Pickupdate).HasColumnName("PICKUPDATE");
            entity.Property(e => e.Prepdate).HasColumnName("PREPDATE");
            entity.Property(e => e.Price).HasColumnName("PRICE");
            entity.Property(e => e.Quantity).HasColumnName("QUANTITY");
            entity.Property(e => e.Rehearsaldate).HasColumnName("REHEARSALDATE");
            entity.Property(e => e.Returndate).HasColumnName("RETURNDATE");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Shipdate).HasColumnName("SHIPDATE");
            entity.Property(e => e.Showenddate).HasColumnName("SHOWENDDATE");
            entity.Property(e => e.Showstartdate).HasColumnName("SHOWSTARTDATE");
            entity.Property(e => e.Sitecurrencyamount).HasColumnName("SITECURRENCYAMOUNT");
            entity.Property(e => e.Sitecurrencydiscountamount).HasColumnName("SITECURRENCYDISCOUNTAMOUNT");
            entity.Property(e => e.Sitecurrencyprice).HasColumnName("SITECURRENCYPRICE");
            entity.Property(e => e.Sku).HasColumnName("SKU");
            entity.Property(e => e.Startdate).HasColumnName("STARTDATE");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Strikedate).HasColumnName("STRIKEDATE");
            entity.Property(e => e.Todate).HasColumnName("todate");
            entity.Property(e => e.Trandate).HasColumnName("trandate");
            entity.Property(e => e.Type).HasColumnName("TYPE");
        });

        modelBuilder.Entity<TmpEdsorderedPartsOnContractsWithEventsImportGreenDay>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSOrderedPartsOnContractsWithEvents_Import_GreenDay");

            entity.Property(e => e.Action).HasColumnName("ACTION");
            entity.Property(e => e.Amount).HasColumnName("AMOUNT");
            entity.Property(e => e.Attribute).HasColumnName("ATTRIBUTE");
            entity.Property(e => e.Basecurrencyamount).HasColumnName("BASECURRENCYAMOUNT");
            entity.Property(e => e.Basecurrencydiscountamount).HasColumnName("BASECURRENCYDISCOUNTAMOUNT");
            entity.Property(e => e.Basecurrencyprice).HasColumnName("BASECURRENCYPRICE");
            entity.Property(e => e.Chargeenddate).HasColumnName("CHARGEENDDATE");
            entity.Property(e => e.Chargestartdate).HasColumnName("CHARGESTARTDATE");
            entity.Property(e => e.Conlineiid).HasColumnName("CONLINEIID");
            entity.Property(e => e.Contractiid).HasColumnName("CONTRACTIID");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.Discountamount).HasColumnName("DISCOUNTAMOUNT");
            entity.Property(e => e.Enddate).HasColumnName("ENDDATE");
            entity.Property(e => e.Entityno).HasColumnName("entityno");
            entity.Property(e => e.EstAmount)
                .HasColumnType("decimal(29, 0)")
                .HasColumnName("est_amount");
            entity.Property(e => e.EstQty).HasColumnName("est_qty");
            entity.Property(e => e.EstRevAmount)
                .HasColumnType("numeric(23, 2)")
                .HasColumnName("est_rev_amount");
            entity.Property(e => e.EstRevTotal)
                .HasColumnType("numeric(34, 2)")
                .HasColumnName("est_rev_total");
            entity.Property(e => e.EstUnitAmount)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("est_unit_amount");
            entity.Property(e => e.Expanded).HasColumnName("EXPANDED");
            entity.Property(e => e.Expcd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("expcd");
            entity.Property(e => e.Immediateparentconlineiid).HasColumnName("IMMEDIATEPARENTCONLINEIID");
            entity.Property(e => e.Inviid).HasColumnName("INVIID");
            entity.Property(e => e.Isdescriptionmodified).HasColumnName("ISDESCRIPTIONMODIFIED");
            entity.Property(e => e.Isfreight).HasColumnName("ISFREIGHT");
            entity.Property(e => e.Levelno).HasColumnName("LEVELNO");
            entity.Property(e => e.LineNo).HasColumnName("line_no");
            entity.Property(e => e.Lineno).HasColumnName("LINENO");
            entity.Property(e => e.Loadindate).HasColumnName("LOADINDATE");
            entity.Property(e => e.Mainparentconlineiid).HasColumnName("MAINPARENTCONLINEIID");
            entity.Property(e => e.Markup).HasColumnName("markup");
            entity.Property(e => e.MfgDesc).HasColumnName("mfg_desc");
            entity.Property(e => e.MfgNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("mfg_no");
            entity.Property(e => e.NoteInternal)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Partdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Pickupdate).HasColumnName("PICKUPDATE");
            entity.Property(e => e.Prepdate).HasColumnName("PREPDATE");
            entity.Property(e => e.Price).HasColumnName("PRICE");
            entity.Property(e => e.Quantity).HasColumnName("QUANTITY");
            entity.Property(e => e.Rehearsaldate).HasColumnName("REHEARSALDATE");
            entity.Property(e => e.Returndate).HasColumnName("RETURNDATE");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Shipdate).HasColumnName("SHIPDATE");
            entity.Property(e => e.Showenddate).HasColumnName("SHOWENDDATE");
            entity.Property(e => e.Showstartdate).HasColumnName("SHOWSTARTDATE");
            entity.Property(e => e.Sitecurrencyamount).HasColumnName("SITECURRENCYAMOUNT");
            entity.Property(e => e.Sitecurrencydiscountamount).HasColumnName("SITECURRENCYDISCOUNTAMOUNT");
            entity.Property(e => e.Sitecurrencyprice).HasColumnName("SITECURRENCYPRICE");
            entity.Property(e => e.Sku).HasColumnName("SKU");
            entity.Property(e => e.Startdate).HasColumnName("STARTDATE");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Strikedate).HasColumnName("STRIKEDATE");
            entity.Property(e => e.Todate).HasColumnName("todate");
            entity.Property(e => e.Trandate).HasColumnName("trandate");
            entity.Property(e => e.Type).HasColumnName("TYPE");
        });

        modelBuilder.Entity<TmpEdsorderedPartsOnContractsWithOnlyProjectsImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSOrderedPartsOnContractsWithOnlyProjects_Import");

            entity.Property(e => e.Action).HasColumnName("ACTION");
            entity.Property(e => e.Amount).HasColumnName("AMOUNT");
            entity.Property(e => e.Attribute).HasColumnName("ATTRIBUTE");
            entity.Property(e => e.Basecurrencyamount).HasColumnName("BASECURRENCYAMOUNT");
            entity.Property(e => e.Basecurrencydiscountamount).HasColumnName("BASECURRENCYDISCOUNTAMOUNT");
            entity.Property(e => e.Basecurrencyprice).HasColumnName("BASECURRENCYPRICE");
            entity.Property(e => e.Chargeenddate).HasColumnName("CHARGEENDDATE");
            entity.Property(e => e.Chargestartdate).HasColumnName("CHARGESTARTDATE");
            entity.Property(e => e.Conlineiid).HasColumnName("CONLINEIID");
            entity.Property(e => e.Contractiid).HasColumnName("CONTRACTIID");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.Discountamount).HasColumnName("DISCOUNTAMOUNT");
            entity.Property(e => e.Enddate).HasColumnName("ENDDATE");
            entity.Property(e => e.Entityno).HasColumnName("entityno");
            entity.Property(e => e.EstAmount)
                .HasColumnType("decimal(29, 0)")
                .HasColumnName("est_amount");
            entity.Property(e => e.EstQty).HasColumnName("est_qty");
            entity.Property(e => e.EstRevAmount)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("est_rev_amount");
            entity.Property(e => e.EstRevTotal)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("est_rev_total");
            entity.Property(e => e.EstUnitAmount)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("est_unit_amount");
            entity.Property(e => e.Expanded).HasColumnName("EXPANDED");
            entity.Property(e => e.Expcd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("expcd");
            entity.Property(e => e.Immediateparentconlineiid).HasColumnName("IMMEDIATEPARENTCONLINEIID");
            entity.Property(e => e.Inviid).HasColumnName("INVIID");
            entity.Property(e => e.Isdescriptionmodified).HasColumnName("ISDESCRIPTIONMODIFIED");
            entity.Property(e => e.Isfreight).HasColumnName("ISFREIGHT");
            entity.Property(e => e.Levelno).HasColumnName("LEVELNO");
            entity.Property(e => e.LineNo).HasColumnName("line_no");
            entity.Property(e => e.Lineno).HasColumnName("LINENO");
            entity.Property(e => e.Loadindate).HasColumnName("LOADINDATE");
            entity.Property(e => e.Mainparentconlineiid).HasColumnName("MAINPARENTCONLINEIID");
            entity.Property(e => e.Markup).HasColumnName("markup");
            entity.Property(e => e.MfgDesc).HasColumnName("mfg_desc");
            entity.Property(e => e.MfgNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("mfg_no");
            entity.Property(e => e.NoteInternal)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Partdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Pickupdate).HasColumnName("PICKUPDATE");
            entity.Property(e => e.Prepdate).HasColumnName("PREPDATE");
            entity.Property(e => e.Price).HasColumnName("PRICE");
            entity.Property(e => e.Quantity).HasColumnName("QUANTITY");
            entity.Property(e => e.Rehearsaldate).HasColumnName("REHEARSALDATE");
            entity.Property(e => e.Returndate).HasColumnName("RETURNDATE");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Shipdate).HasColumnName("SHIPDATE");
            entity.Property(e => e.Showenddate).HasColumnName("SHOWENDDATE");
            entity.Property(e => e.Showstartdate).HasColumnName("SHOWSTARTDATE");
            entity.Property(e => e.Sitecurrencyamount).HasColumnName("SITECURRENCYAMOUNT");
            entity.Property(e => e.Sitecurrencydiscountamount).HasColumnName("SITECURRENCYDISCOUNTAMOUNT");
            entity.Property(e => e.Sitecurrencyprice).HasColumnName("SITECURRENCYPRICE");
            entity.Property(e => e.Sku).HasColumnName("SKU");
            entity.Property(e => e.Startdate).HasColumnName("STARTDATE");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Strikedate).HasColumnName("STRIKEDATE");
            entity.Property(e => e.Todate).HasColumnName("todate");
            entity.Property(e => e.Trandate).HasColumnName("trandate");
            entity.Property(e => e.Type).HasColumnName("TYPE");
        });

        modelBuilder.Entity<TmpEdsorderedPartsOnContractsWithOnlyProjectsImportDumbProjectRecode>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSOrderedPartsOnContractsWithOnlyProjects_Import_DumbProjectRecodes");

            entity.Property(e => e.Action).HasColumnName("ACTION");
            entity.Property(e => e.Amount).HasColumnName("AMOUNT");
            entity.Property(e => e.Attribute).HasColumnName("ATTRIBUTE");
            entity.Property(e => e.Basecurrencyamount).HasColumnName("BASECURRENCYAMOUNT");
            entity.Property(e => e.Basecurrencydiscountamount).HasColumnName("BASECURRENCYDISCOUNTAMOUNT");
            entity.Property(e => e.Basecurrencyprice).HasColumnName("BASECURRENCYPRICE");
            entity.Property(e => e.Chargeenddate).HasColumnName("CHARGEENDDATE");
            entity.Property(e => e.Chargestartdate).HasColumnName("CHARGESTARTDATE");
            entity.Property(e => e.Conlineiid).HasColumnName("CONLINEIID");
            entity.Property(e => e.Contractiid).HasColumnName("CONTRACTIID");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.Discountamount).HasColumnName("DISCOUNTAMOUNT");
            entity.Property(e => e.Enddate).HasColumnName("ENDDATE");
            entity.Property(e => e.Entityno).HasColumnName("entityno");
            entity.Property(e => e.EstAmount)
                .HasColumnType("decimal(29, 0)")
                .HasColumnName("est_amount");
            entity.Property(e => e.EstQty).HasColumnName("est_qty");
            entity.Property(e => e.EstRevAmount)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("est_rev_amount");
            entity.Property(e => e.EstRevTotal)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("est_rev_total");
            entity.Property(e => e.EstUnitAmount)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("est_unit_amount");
            entity.Property(e => e.Expanded).HasColumnName("EXPANDED");
            entity.Property(e => e.Expcd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("expcd");
            entity.Property(e => e.Immediateparentconlineiid).HasColumnName("IMMEDIATEPARENTCONLINEIID");
            entity.Property(e => e.Inviid).HasColumnName("INVIID");
            entity.Property(e => e.Isdescriptionmodified).HasColumnName("ISDESCRIPTIONMODIFIED");
            entity.Property(e => e.Isfreight).HasColumnName("ISFREIGHT");
            entity.Property(e => e.Levelno).HasColumnName("LEVELNO");
            entity.Property(e => e.LineNo).HasColumnName("line_no");
            entity.Property(e => e.Lineno).HasColumnName("LINENO");
            entity.Property(e => e.Loadindate).HasColumnName("LOADINDATE");
            entity.Property(e => e.Mainparentconlineiid).HasColumnName("MAINPARENTCONLINEIID");
            entity.Property(e => e.Markup).HasColumnName("markup");
            entity.Property(e => e.MfgDesc).HasColumnName("mfg_desc");
            entity.Property(e => e.MfgNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("mfg_no");
            entity.Property(e => e.NoteInternal)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Partdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Pickupdate).HasColumnName("PICKUPDATE");
            entity.Property(e => e.Prepdate).HasColumnName("PREPDATE");
            entity.Property(e => e.Price).HasColumnName("PRICE");
            entity.Property(e => e.Quantity).HasColumnName("QUANTITY");
            entity.Property(e => e.Rehearsaldate).HasColumnName("REHEARSALDATE");
            entity.Property(e => e.Returndate).HasColumnName("RETURNDATE");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Shipdate).HasColumnName("SHIPDATE");
            entity.Property(e => e.Showenddate).HasColumnName("SHOWENDDATE");
            entity.Property(e => e.Showstartdate).HasColumnName("SHOWSTARTDATE");
            entity.Property(e => e.Sitecurrencyamount).HasColumnName("SITECURRENCYAMOUNT");
            entity.Property(e => e.Sitecurrencydiscountamount).HasColumnName("SITECURRENCYDISCOUNTAMOUNT");
            entity.Property(e => e.Sitecurrencyprice).HasColumnName("SITECURRENCYPRICE");
            entity.Property(e => e.Sku).HasColumnName("SKU");
            entity.Property(e => e.Startdate).HasColumnName("STARTDATE");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Strikedate).HasColumnName("STRIKEDATE");
            entity.Property(e => e.Todate).HasColumnName("todate");
            entity.Property(e => e.Trandate).HasColumnName("trandate");
            entity.Property(e => e.Type).HasColumnName("TYPE");
        });

        modelBuilder.Entity<TmpEdsorderedPartsOnContractsWithOnlyProjectsImportGreenDay>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSOrderedPartsOnContractsWithOnlyProjects_Import_GreenDay");

            entity.Property(e => e.Action).HasColumnName("ACTION");
            entity.Property(e => e.Amount).HasColumnName("AMOUNT");
            entity.Property(e => e.Attribute).HasColumnName("ATTRIBUTE");
            entity.Property(e => e.Basecurrencyamount).HasColumnName("BASECURRENCYAMOUNT");
            entity.Property(e => e.Basecurrencydiscountamount).HasColumnName("BASECURRENCYDISCOUNTAMOUNT");
            entity.Property(e => e.Basecurrencyprice).HasColumnName("BASECURRENCYPRICE");
            entity.Property(e => e.Chargeenddate).HasColumnName("CHARGEENDDATE");
            entity.Property(e => e.Chargestartdate).HasColumnName("CHARGESTARTDATE");
            entity.Property(e => e.Conlineiid).HasColumnName("CONLINEIID");
            entity.Property(e => e.Contractiid).HasColumnName("CONTRACTIID");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.Discountamount).HasColumnName("DISCOUNTAMOUNT");
            entity.Property(e => e.Enddate).HasColumnName("ENDDATE");
            entity.Property(e => e.Entityno).HasColumnName("entityno");
            entity.Property(e => e.EstAmount)
                .HasColumnType("decimal(29, 0)")
                .HasColumnName("est_amount");
            entity.Property(e => e.EstQty).HasColumnName("est_qty");
            entity.Property(e => e.EstRevAmount)
                .HasColumnType("numeric(23, 2)")
                .HasColumnName("est_rev_amount");
            entity.Property(e => e.EstRevTotal)
                .HasColumnType("numeric(34, 2)")
                .HasColumnName("est_rev_total");
            entity.Property(e => e.EstUnitAmount)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("est_unit_amount");
            entity.Property(e => e.Expanded).HasColumnName("EXPANDED");
            entity.Property(e => e.Expcd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("expcd");
            entity.Property(e => e.Immediateparentconlineiid).HasColumnName("IMMEDIATEPARENTCONLINEIID");
            entity.Property(e => e.Inviid).HasColumnName("INVIID");
            entity.Property(e => e.Isdescriptionmodified).HasColumnName("ISDESCRIPTIONMODIFIED");
            entity.Property(e => e.Isfreight).HasColumnName("ISFREIGHT");
            entity.Property(e => e.Levelno).HasColumnName("LEVELNO");
            entity.Property(e => e.LineNo).HasColumnName("line_no");
            entity.Property(e => e.Lineno).HasColumnName("LINENO");
            entity.Property(e => e.Loadindate).HasColumnName("LOADINDATE");
            entity.Property(e => e.Mainparentconlineiid).HasColumnName("MAINPARENTCONLINEIID");
            entity.Property(e => e.Markup).HasColumnName("markup");
            entity.Property(e => e.MfgDesc).HasColumnName("mfg_desc");
            entity.Property(e => e.MfgNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("mfg_no");
            entity.Property(e => e.NoteInternal)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Partdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Pickupdate).HasColumnName("PICKUPDATE");
            entity.Property(e => e.Prepdate).HasColumnName("PREPDATE");
            entity.Property(e => e.Price).HasColumnName("PRICE");
            entity.Property(e => e.Quantity).HasColumnName("QUANTITY");
            entity.Property(e => e.Rehearsaldate).HasColumnName("REHEARSALDATE");
            entity.Property(e => e.Returndate).HasColumnName("RETURNDATE");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Shipdate).HasColumnName("SHIPDATE");
            entity.Property(e => e.Showenddate).HasColumnName("SHOWENDDATE");
            entity.Property(e => e.Showstartdate).HasColumnName("SHOWSTARTDATE");
            entity.Property(e => e.Sitecurrencyamount).HasColumnName("SITECURRENCYAMOUNT");
            entity.Property(e => e.Sitecurrencydiscountamount).HasColumnName("SITECURRENCYDISCOUNTAMOUNT");
            entity.Property(e => e.Sitecurrencyprice).HasColumnName("SITECURRENCYPRICE");
            entity.Property(e => e.Sku).HasColumnName("SKU");
            entity.Property(e => e.Startdate).HasColumnName("STARTDATE");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Strikedate).HasColumnName("STRIKEDATE");
            entity.Property(e => e.Todate).HasColumnName("todate");
            entity.Property(e => e.Trandate).HasColumnName("trandate");
            entity.Property(e => e.Type).HasColumnName("TYPE");
        });

        modelBuilder.Entity<TmpEdsorderedPartsOnContractsWithoutEventsOrProjectsImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSOrderedPartsOnContractsWithoutEventsOrProjects_Import");

            entity.Property(e => e.Action).HasColumnName("ACTION");
            entity.Property(e => e.Amount).HasColumnName("AMOUNT");
            entity.Property(e => e.Attribute).HasColumnName("ATTRIBUTE");
            entity.Property(e => e.Basecurrencyamount).HasColumnName("BASECURRENCYAMOUNT");
            entity.Property(e => e.Basecurrencydiscountamount).HasColumnName("BASECURRENCYDISCOUNTAMOUNT");
            entity.Property(e => e.Basecurrencyprice).HasColumnName("BASECURRENCYPRICE");
            entity.Property(e => e.Chargeenddate).HasColumnName("CHARGEENDDATE");
            entity.Property(e => e.Chargestartdate).HasColumnName("CHARGESTARTDATE");
            entity.Property(e => e.Conlineiid).HasColumnName("CONLINEIID");
            entity.Property(e => e.Contractiid).HasColumnName("CONTRACTIID");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.Discountamount).HasColumnName("DISCOUNTAMOUNT");
            entity.Property(e => e.Enddate).HasColumnName("ENDDATE");
            entity.Property(e => e.Entityno).HasColumnName("entityno");
            entity.Property(e => e.EstAmount)
                .HasColumnType("decimal(29, 0)")
                .HasColumnName("est_amount");
            entity.Property(e => e.EstQty).HasColumnName("est_qty");
            entity.Property(e => e.EstRevAmount)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("est_rev_amount");
            entity.Property(e => e.EstRevTotal)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("est_rev_total");
            entity.Property(e => e.EstUnitAmount)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("est_unit_amount");
            entity.Property(e => e.Expanded).HasColumnName("EXPANDED");
            entity.Property(e => e.Expcd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("expcd");
            entity.Property(e => e.Immediateparentconlineiid).HasColumnName("IMMEDIATEPARENTCONLINEIID");
            entity.Property(e => e.Inviid).HasColumnName("INVIID");
            entity.Property(e => e.Isdescriptionmodified).HasColumnName("ISDESCRIPTIONMODIFIED");
            entity.Property(e => e.Isfreight).HasColumnName("ISFREIGHT");
            entity.Property(e => e.Levelno).HasColumnName("LEVELNO");
            entity.Property(e => e.LineNo).HasColumnName("line_no");
            entity.Property(e => e.Lineno).HasColumnName("LINENO");
            entity.Property(e => e.Loadindate).HasColumnName("LOADINDATE");
            entity.Property(e => e.Mainparentconlineiid).HasColumnName("MAINPARENTCONLINEIID");
            entity.Property(e => e.Markup).HasColumnName("markup");
            entity.Property(e => e.MfgDesc).HasColumnName("mfg_desc");
            entity.Property(e => e.MfgNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("mfg_no");
            entity.Property(e => e.NoteInternal)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Partdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Pickupdate).HasColumnName("PICKUPDATE");
            entity.Property(e => e.Prepdate).HasColumnName("PREPDATE");
            entity.Property(e => e.Price).HasColumnName("PRICE");
            entity.Property(e => e.Quantity).HasColumnName("QUANTITY");
            entity.Property(e => e.Rehearsaldate).HasColumnName("REHEARSALDATE");
            entity.Property(e => e.Returndate).HasColumnName("RETURNDATE");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Shipdate).HasColumnName("SHIPDATE");
            entity.Property(e => e.Showenddate).HasColumnName("SHOWENDDATE");
            entity.Property(e => e.Showstartdate).HasColumnName("SHOWSTARTDATE");
            entity.Property(e => e.Sitecurrencyamount).HasColumnName("SITECURRENCYAMOUNT");
            entity.Property(e => e.Sitecurrencydiscountamount).HasColumnName("SITECURRENCYDISCOUNTAMOUNT");
            entity.Property(e => e.Sitecurrencyprice).HasColumnName("SITECURRENCYPRICE");
            entity.Property(e => e.Sku).HasColumnName("SKU");
            entity.Property(e => e.Startdate).HasColumnName("STARTDATE");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Strikedate).HasColumnName("STRIKEDATE");
            entity.Property(e => e.Todate).HasColumnName("todate");
            entity.Property(e => e.Trandate).HasColumnName("trandate");
            entity.Property(e => e.Type).HasColumnName("TYPE");
        });

        modelBuilder.Entity<TmpEdsorderedPartsOnContractsWithoutEventsOrProjectsImportGreenDay>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSOrderedPartsOnContractsWithoutEventsOrProjects_Import_GreenDay");

            entity.Property(e => e.Action).HasColumnName("ACTION");
            entity.Property(e => e.Amount).HasColumnName("AMOUNT");
            entity.Property(e => e.Attribute).HasColumnName("ATTRIBUTE");
            entity.Property(e => e.Basecurrencyamount).HasColumnName("BASECURRENCYAMOUNT");
            entity.Property(e => e.Basecurrencydiscountamount).HasColumnName("BASECURRENCYDISCOUNTAMOUNT");
            entity.Property(e => e.Basecurrencyprice).HasColumnName("BASECURRENCYPRICE");
            entity.Property(e => e.Chargeenddate).HasColumnName("CHARGEENDDATE");
            entity.Property(e => e.Chargestartdate).HasColumnName("CHARGESTARTDATE");
            entity.Property(e => e.Conlineiid).HasColumnName("CONLINEIID");
            entity.Property(e => e.Contractiid).HasColumnName("CONTRACTIID");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.Discountamount).HasColumnName("DISCOUNTAMOUNT");
            entity.Property(e => e.Enddate).HasColumnName("ENDDATE");
            entity.Property(e => e.Entityno).HasColumnName("entityno");
            entity.Property(e => e.EstAmount)
                .HasColumnType("decimal(29, 0)")
                .HasColumnName("est_amount");
            entity.Property(e => e.EstQty).HasColumnName("est_qty");
            entity.Property(e => e.EstRevAmount)
                .HasColumnType("numeric(23, 2)")
                .HasColumnName("est_rev_amount");
            entity.Property(e => e.EstRevTotal)
                .HasColumnType("numeric(34, 2)")
                .HasColumnName("est_rev_total");
            entity.Property(e => e.EstUnitAmount)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("est_unit_amount");
            entity.Property(e => e.Expanded).HasColumnName("EXPANDED");
            entity.Property(e => e.Expcd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("expcd");
            entity.Property(e => e.Immediateparentconlineiid).HasColumnName("IMMEDIATEPARENTCONLINEIID");
            entity.Property(e => e.Inviid).HasColumnName("INVIID");
            entity.Property(e => e.Isdescriptionmodified).HasColumnName("ISDESCRIPTIONMODIFIED");
            entity.Property(e => e.Isfreight).HasColumnName("ISFREIGHT");
            entity.Property(e => e.Levelno).HasColumnName("LEVELNO");
            entity.Property(e => e.LineNo).HasColumnName("line_no");
            entity.Property(e => e.Lineno).HasColumnName("LINENO");
            entity.Property(e => e.Loadindate).HasColumnName("LOADINDATE");
            entity.Property(e => e.Mainparentconlineiid).HasColumnName("MAINPARENTCONLINEIID");
            entity.Property(e => e.Markup).HasColumnName("markup");
            entity.Property(e => e.MfgDesc).HasColumnName("mfg_desc");
            entity.Property(e => e.MfgNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("mfg_no");
            entity.Property(e => e.NoteInternal)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Partdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Pickupdate).HasColumnName("PICKUPDATE");
            entity.Property(e => e.Prepdate).HasColumnName("PREPDATE");
            entity.Property(e => e.Price).HasColumnName("PRICE");
            entity.Property(e => e.Quantity).HasColumnName("QUANTITY");
            entity.Property(e => e.Rehearsaldate).HasColumnName("REHEARSALDATE");
            entity.Property(e => e.Returndate).HasColumnName("RETURNDATE");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Shipdate).HasColumnName("SHIPDATE");
            entity.Property(e => e.Showenddate).HasColumnName("SHOWENDDATE");
            entity.Property(e => e.Showstartdate).HasColumnName("SHOWSTARTDATE");
            entity.Property(e => e.Sitecurrencyamount).HasColumnName("SITECURRENCYAMOUNT");
            entity.Property(e => e.Sitecurrencydiscountamount).HasColumnName("SITECURRENCYDISCOUNTAMOUNT");
            entity.Property(e => e.Sitecurrencyprice).HasColumnName("SITECURRENCYPRICE");
            entity.Property(e => e.Sku).HasColumnName("SKU");
            entity.Property(e => e.Startdate).HasColumnName("STARTDATE");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Strikedate).HasColumnName("STRIKEDATE");
            entity.Property(e => e.Todate).HasColumnName("todate");
            entity.Property(e => e.Trandate).HasColumnName("trandate");
            entity.Property(e => e.Type).HasColumnName("TYPE");
        });

        modelBuilder.Entity<TmpEdsparTypeMappingBak20201213>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSParType_Mapping_Bak20201213");

            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Sku)
                .HasMaxLength(255)
                .HasColumnName("SKU");
        });

        modelBuilder.Entity<TmpEdspartType>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSPartTypes");

            entity.Property(e => e.Accountsgroupiid).HasColumnName("ACCOUNTSGROUPIID");
            entity.Property(e => e.Accumdeprglcode).HasColumnName("ACCUMDEPRGLCODE");
            entity.Property(e => e.Active).HasColumnName("ACTIVE");
            entity.Property(e => e.Affectsavailability).HasColumnName("AFFECTSAVAILABILITY");
            entity.Property(e => e.Allowconsigned).HasColumnName("ALLOWCONSIGNED");
            entity.Property(e => e.Allowdiscout).HasColumnName("ALLOWDISCOUT");
            entity.Property(e => e.Allowsubrent).HasColumnName("ALLOWSUBRENT");
            entity.Property(e => e.Attrgroup).HasColumnName("ATTRGROUP");
            entity.Property(e => e.Autoseedcurrentnumber).HasColumnName("AUTOSEEDCURRENTNUMBER");
            entity.Property(e => e.Availgroup).HasColumnName("AVAILGROUP");
            entity.Property(e => e.Binnumber).HasColumnName("BINNUMBER");
            entity.Property(e => e.Bookdepreciationiid).HasColumnName("BOOKDEPRECIATIONIID");
            entity.Property(e => e.Canrent).HasColumnName("CANRENT");
            entity.Property(e => e.Cansell).HasColumnName("CANSELL");
            entity.Property(e => e.Cogsgroup).HasColumnName("COGSGROUP");
            entity.Property(e => e.Commgroup).HasColumnName("COMMGROUP");
            entity.Property(e => e.Consigned).HasColumnName("CONSIGNED");
            entity.Property(e => e.Consumable).HasColumnName("CONSUMABLE");
            entity.Property(e => e.Cost).HasColumnName("COST");
            entity.Property(e => e.Damagewaiver).HasColumnName("DAMAGEWAIVER");
            entity.Property(e => e.Dateadded).HasColumnName("DATEADDED");
            entity.Property(e => e.Deposittype).HasColumnName("DEPOSITTYPE");
            entity.Property(e => e.Depositvalue).HasColumnName("DEPOSITVALUE");
            entity.Property(e => e.Depreciationpercent).HasColumnName("DEPRECIATIONPERCENT");
            entity.Property(e => e.Depreciationtype).HasColumnName("DEPRECIATIONTYPE");
            entity.Property(e => e.Deprglcode).HasColumnName("DEPRGLCODE");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.Discountgroup).HasColumnName("DISCOUNTGROUP");
            entity.Property(e => e.Dthours).HasColumnName("DTHOURS");
            entity.Property(e => e.Exchangegroup).HasColumnName("EXCHANGEGROUP");
            entity.Property(e => e.Height).HasColumnName("HEIGHT");
            entity.Property(e => e.Inventorygroup).HasColumnName("INVENTORYGROUP");
            entity.Property(e => e.Inventorytype).HasColumnName("INVENTORYTYPE");
            entity.Property(e => e.Inviid).HasColumnName("INVIID");
            entity.Property(e => e.Invsubcategoryiid).HasColumnName("INVSUBCATEGORYIID");
            entity.Property(e => e.Isaccessory).HasColumnName("ISACCESSORY");
            entity.Property(e => e.Iscapitalizedcost).HasColumnName("ISCAPITALIZEDCOST");
            entity.Property(e => e.Isdepreciable).HasColumnName("ISDEPRECIABLE");
            entity.Property(e => e.Isfreight).HasColumnName("ISFREIGHT");
            entity.Property(e => e.Ismaintainstatistics).HasColumnName("ISMAINTAINSTATISTICS");
            entity.Property(e => e.Ismiscitem).HasColumnName("ISMISCITEM");
            entity.Property(e => e.Issearchable).HasColumnName("ISSEARCHABLE");
            entity.Property(e => e.Keywords).HasColumnName("KEYWORDS");
            entity.Property(e => e.Labortype).HasColumnName("LABORTYPE");
            entity.Property(e => e.Languageid).HasColumnName("LANGUAGEID");
            entity.Property(e => e.Length).HasColumnName("LENGTH");
            entity.Property(e => e.Life).HasColumnName("LIFE");
            entity.Property(e => e.Lifegroupid).HasColumnName("LIFEGROUPID");
            entity.Property(e => e.Lowestsellprice).HasColumnName("LOWESTSELLPRICE");
            entity.Property(e => e.Madein).HasColumnName("MADEIN");
            entity.Property(e => e.Maingroup).HasColumnName("MAINGROUP");
            entity.Property(e => e.Maintenancegroup).HasColumnName("MAINTENANCEGROUP");
            entity.Property(e => e.Manfcustomeriid).HasColumnName("MANFCUSTOMERIID");
            entity.Property(e => e.Manpartnum).HasColumnName("MANPARTNUM");
            entity.Property(e => e.Manufacturer).HasColumnName("MANUFACTURER");
            entity.Property(e => e.Matrixgroupiid).HasColumnName("MATRIXGROUPIID");
            entity.Property(e => e.Metergroup).HasColumnName("METERGROUP");
            entity.Property(e => e.Model).HasColumnName("MODEL");
            entity.Property(e => e.Msrp).HasColumnName("MSRP");
            entity.Property(e => e.Nswithassets).HasColumnName("NSWITHASSETS");
            entity.Property(e => e.Othours).HasColumnName("OTHOURS");
            entity.Property(e => e.Package).HasColumnName("PACKAGE");
            entity.Property(e => e.Pricinggroup).HasColumnName("PRICINGGROUP");
            entity.Property(e => e.Pricingmethod).HasColumnName("PRICINGMETHOD");
            entity.Property(e => e.Printonorder).HasColumnName("PRINTONORDER");
            entity.Property(e => e.Purchasecost).HasColumnName("PURCHASECOST");
            entity.Property(e => e.Qconreturn).HasColumnName("QCONRETURN");
            entity.Property(e => e.Qtyserial).HasColumnName("QTYSERIAL");
            entity.Property(e => e.Replacementcost).HasColumnName("REPLACEMENTCOST");
            entity.Property(e => e.Reportgroup).HasColumnName("REPORTGROUP");
            entity.Property(e => e.Revenuegroup).HasColumnName("REVENUEGROUP");
            entity.Property(e => e.Rthours).HasColumnName("RTHOURS");
            entity.Property(e => e.Salvagevalue).HasColumnName("SALVAGEVALUE");
            entity.Property(e => e.Sellglcode).HasColumnName("SELLGLCODE");
            entity.Property(e => e.Sellprice).HasColumnName("SELLPRICE");
            entity.Property(e => e.Servicecharge).HasColumnName("SERVICECHARGE");
            entity.Property(e => e.Shelflocation).HasColumnName("SHELFLOCATION");
            entity.Property(e => e.Sku).HasColumnName("SKU");
            entity.Property(e => e.Sortpriority).HasColumnName("SORTPRIORITY");
            entity.Property(e => e.Subrentalexpense).HasColumnName("SUBRENTALEXPENSE");
            entity.Property(e => e.Subrentglcode).HasColumnName("SUBRENTGLCODE");
            entity.Property(e => e.Taxdepreciationiid).HasColumnName("TAXDEPRECIATIONIID");
            entity.Property(e => e.Taxgroup).HasColumnName("TAXGROUP");
            entity.Property(e => e.Turnaroundtime).HasColumnName("TURNAROUNDTIME");
            entity.Property(e => e.Type).HasColumnName("TYPE");
            entity.Property(e => e.Ucdescription).HasColumnName("UCDESCRIPTION");
            entity.Property(e => e.Upc).HasColumnName("UPC");
            entity.Property(e => e.Url).HasColumnName("URL");
            entity.Property(e => e.Warrentyperiod).HasColumnName("WARRENTYPERIOD");
            entity.Property(e => e.Weight).HasColumnName("WEIGHT");
            entity.Property(e => e.Width).HasColumnName("WIDTH");
            entity.Property(e => e.Writeoffglcode).HasColumnName("WRITEOFFGLCODE");
        });

        modelBuilder.Entity<TmpEdspartTypeMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSPartType_Mapping");

            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Sku)
                .HasMaxLength(255)
                .HasColumnName("SKU");
        });

        modelBuilder.Entity<TmpEdspartTypes2020oct>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSPartTypes_2020OCT");

            entity.Property(e => e.Accountsgroupiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("ACCOUNTSGROUPIID");
            entity.Property(e => e.Accumdeprglcode).HasColumnName("ACCUMDEPRGLCODE");
            entity.Property(e => e.Active).HasColumnName("ACTIVE");
            entity.Property(e => e.Affectsavailability).HasColumnName("AFFECTSAVAILABILITY");
            entity.Property(e => e.Allowconsigned).HasColumnName("ALLOWCONSIGNED");
            entity.Property(e => e.Allowdiscout)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("ALLOWDISCOUT");
            entity.Property(e => e.Allowsubrent).HasColumnName("ALLOWSUBRENT");
            entity.Property(e => e.Attrgroup).HasColumnName("ATTRGROUP");
            entity.Property(e => e.Autoseedcurrentnumber)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("AUTOSEEDCURRENTNUMBER");
            entity.Property(e => e.Availgroup).HasColumnName("AVAILGROUP");
            entity.Property(e => e.Binnumber).HasColumnName("BINNUMBER");
            entity.Property(e => e.Bookdepreciationiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("BOOKDEPRECIATIONIID");
            entity.Property(e => e.Canrent).HasColumnName("CANRENT");
            entity.Property(e => e.Cansell).HasColumnName("CANSELL");
            entity.Property(e => e.Cogsgroup).HasColumnName("COGSGROUP");
            entity.Property(e => e.Commgroup).HasColumnName("COMMGROUP");
            entity.Property(e => e.Consigned).HasColumnName("CONSIGNED");
            entity.Property(e => e.Consumable).HasColumnName("CONSUMABLE");
            entity.Property(e => e.Cost)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("COST");
            entity.Property(e => e.Damagewaiver).HasColumnName("DAMAGEWAIVER");
            entity.Property(e => e.Dateadded).HasColumnName("DATEADDED");
            entity.Property(e => e.Deposittype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DEPOSITTYPE");
            entity.Property(e => e.Depositvalue)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DEPOSITVALUE");
            entity.Property(e => e.Depreciationpercent)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DEPRECIATIONPERCENT");
            entity.Property(e => e.Depreciationtype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DEPRECIATIONTYPE");
            entity.Property(e => e.Deprglcode).HasColumnName("DEPRGLCODE");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.Discountgroup).HasColumnName("DISCOUNTGROUP");
            entity.Property(e => e.Dthours)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("DTHOURS");
            entity.Property(e => e.Exchangegroup).HasColumnName("EXCHANGEGROUP");
            entity.Property(e => e.Height)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("HEIGHT");
            entity.Property(e => e.Inventorygroup).HasColumnName("INVENTORYGROUP");
            entity.Property(e => e.Inventorytype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("INVENTORYTYPE");
            entity.Property(e => e.Inviid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("INVIID");
            entity.Property(e => e.Invsubcategoryiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("INVSUBCATEGORYIID");
            entity.Property(e => e.Isaccessory).HasColumnName("ISACCESSORY");
            entity.Property(e => e.Iscapitalizedcost).HasColumnName("ISCAPITALIZEDCOST");
            entity.Property(e => e.Isdepreciable).HasColumnName("ISDEPRECIABLE");
            entity.Property(e => e.Isfreight).HasColumnName("ISFREIGHT");
            entity.Property(e => e.Ismaintainstatistics).HasColumnName("ISMAINTAINSTATISTICS");
            entity.Property(e => e.Ismiscitem).HasColumnName("ISMISCITEM");
            entity.Property(e => e.Issearchable).HasColumnName("ISSEARCHABLE");
            entity.Property(e => e.Keywords).HasColumnName("KEYWORDS");
            entity.Property(e => e.Labortype)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("LABORTYPE");
            entity.Property(e => e.Languageid).HasColumnName("LANGUAGEID");
            entity.Property(e => e.Length)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("LENGTH");
            entity.Property(e => e.Life)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("LIFE");
            entity.Property(e => e.Lifegroupid).HasColumnName("LIFEGROUPID");
            entity.Property(e => e.Lowestsellprice)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("LOWESTSELLPRICE");
            entity.Property(e => e.Madein).HasColumnName("MADEIN");
            entity.Property(e => e.Maingroup).HasColumnName("MAINGROUP");
            entity.Property(e => e.Maintenancegroup).HasColumnName("MAINTENANCEGROUP");
            entity.Property(e => e.Manfcustomeriid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("MANFCUSTOMERIID");
            entity.Property(e => e.Manpartnum).HasColumnName("MANPARTNUM");
            entity.Property(e => e.Manufacturer).HasColumnName("MANUFACTURER");
            entity.Property(e => e.Matrixgroupiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("MATRIXGROUPIID");
            entity.Property(e => e.Metergroup).HasColumnName("METERGROUP");
            entity.Property(e => e.Model).HasColumnName("MODEL");
            entity.Property(e => e.Msrp)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("MSRP");
            entity.Property(e => e.Nswithassets).HasColumnName("NSWITHASSETS");
            entity.Property(e => e.Othours)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("OTHOURS");
            entity.Property(e => e.Package).HasColumnName("PACKAGE");
            entity.Property(e => e.Pricinggroup).HasColumnName("PRICINGGROUP");
            entity.Property(e => e.Pricingmethod)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PRICINGMETHOD");
            entity.Property(e => e.Printonorder).HasColumnName("PRINTONORDER");
            entity.Property(e => e.Purchasecost)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PURCHASECOST");
            entity.Property(e => e.Qconreturn).HasColumnName("QCONRETURN");
            entity.Property(e => e.Qtyserial)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("QTYSERIAL");
            entity.Property(e => e.Replacementcost)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("REPLACEMENTCOST");
            entity.Property(e => e.Reportgroup).HasColumnName("REPORTGROUP");
            entity.Property(e => e.Revenuegroup).HasColumnName("REVENUEGROUP");
            entity.Property(e => e.Rthours)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("RTHOURS");
            entity.Property(e => e.Salvagevalue)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SALVAGEVALUE");
            entity.Property(e => e.Sellglcode).HasColumnName("SELLGLCODE");
            entity.Property(e => e.Sellprice)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SELLPRICE");
            entity.Property(e => e.Servicecharge).HasColumnName("SERVICECHARGE");
            entity.Property(e => e.Shelflocation).HasColumnName("SHELFLOCATION");
            entity.Property(e => e.Sku).HasColumnName("SKU");
            entity.Property(e => e.Sortpriority).HasColumnName("SORTPRIORITY");
            entity.Property(e => e.Subrentalexpense).HasColumnName("SUBRENTALEXPENSE");
            entity.Property(e => e.Subrentglcode).HasColumnName("SUBRENTGLCODE");
            entity.Property(e => e.Taxdepreciationiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TAXDEPRECIATIONIID");
            entity.Property(e => e.Taxgroup).HasColumnName("TAXGROUP");
            entity.Property(e => e.Turnaroundtime)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TURNAROUNDTIME");
            entity.Property(e => e.Type)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("TYPE");
            entity.Property(e => e.Ucdescription).HasColumnName("UCDESCRIPTION");
            entity.Property(e => e.Upc).HasColumnName("UPC");
            entity.Property(e => e.Url).HasColumnName("URL");
            entity.Property(e => e.Warrentyperiod)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("WARRENTYPERIOD");
            entity.Property(e => e.Weight)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("WEIGHT");
            entity.Property(e => e.Width)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("WIDTH");
            entity.Property(e => e.Writeoffglcode).HasColumnName("WRITEOFFGLCODE");
        });

        modelBuilder.Entity<TmpEdspartTypesImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSPartTypes_Import");

            entity.Property(e => e.Acctno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("acctno");
            entity.Property(e => e.AlternateDesc).HasColumnName("alternate_desc");
            entity.Property(e => e.Commodity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("commodity");
            entity.Property(e => e.Commodity2)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("commodity2");
            entity.Property(e => e.Cost).HasColumnName("cost");
            entity.Property(e => e.Createdtime).HasColumnName("createdtime");
            entity.Property(e => e.Height).HasColumnName("HEIGHT");
            entity.Property(e => e.IdManufacturer).HasColumnName("idManufacturer");
            entity.Property(e => e.Inviid).HasColumnName("INVIID");
            entity.Property(e => e.LeadSource)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("lead_source");
            entity.Property(e => e.Length).HasColumnName("LENGTH");
            entity.Property(e => e.Locationcd).HasColumnName("locationcd");
            entity.Property(e => e.Madein).HasColumnName("MADEIN");
            entity.Property(e => e.MaterialDesc).HasColumnName("material_desc");
            entity.Property(e => e.MaterialSpecs).HasColumnName("material_specs");
            entity.Property(e => e.Model).HasColumnName("MODEL");
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.Needcompletionreport)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("needcompletionreport");
            entity.Property(e => e.Needkanbancard)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("needkanbancard");
            entity.Property(e => e.Package)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("package");
            entity.Property(e => e.Partdesc).HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.PrimaryCategoryCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Projpercent).HasColumnName("projpercent");
            entity.Property(e => e.Replacementcost).HasColumnName("replacementcost");
            entity.Property(e => e.Ru).HasColumnName("RU");
            entity.Property(e => e.SecondaryCategoryCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Sku).HasColumnName("SKU");
            entity.Property(e => e.SkuFinesse).HasColumnName("SKU_Finesse");
            entity.Property(e => e.Soundchecksequence).HasColumnName("soundchecksequence");
            entity.Property(e => e.Type).HasColumnName("TYPE");
            entity.Property(e => e.Usercreated)
                .HasMaxLength(128)
                .HasColumnName("usercreated");
            entity.Property(e => e.Usermodified)
                .HasMaxLength(128)
                .HasColumnName("usermodified");
            entity.Property(e => e.Width).HasColumnName("WIDTH");
        });

        modelBuilder.Entity<TmpEdspiscan>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSPIScans");

            entity.Property(e => e.Barcode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Date)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DATE");
            entity.Property(e => e.Qty)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("qty");
            entity.Property(e => e.Scannedby)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SCANNEDBY");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<TmpEdsprojectImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSProject_Import");

            entity.Property(e => e.AcctExecEmpno).HasColumnName("acctExecEmpno");
            entity.Property(e => e.Actualdate).HasColumnName("ACTUALDATE");
            entity.Property(e => e.Agency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("agency");
            entity.Property(e => e.Basecurrencyiid).HasColumnName("BASECURRENCYIID");
            entity.Property(e => e.Bidmarkup)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("bidmarkup");
            entity.Property(e => e.Bidroot).HasColumnName("bidroot");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Companyiid).HasColumnName("COMPANYIID");
            entity.Property(e => e.Contactiid).HasColumnName("CONTACTIID");
            entity.Property(e => e.Country)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("country");
            entity.Property(e => e.Createdbyempiid).HasColumnName("CREATEDBYEMPIID");
            entity.Property(e => e.Createddate).HasColumnName("CREATEDDATE");
            entity.Property(e => e.Currency).HasColumnName("currency");
            entity.Property(e => e.Custno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("custno");
            entity.Property(e => e.Enddate).HasColumnName("ENDDATE");
            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("engactivecd");
            entity.Property(e => e.EngrEmpno).HasColumnName("engrEmpno");
            entity.Property(e => e.Entitydesc).HasColumnName("entitydesc");
            entity.Property(e => e.Entityno).HasColumnName("entityno");
            entity.Property(e => e.Entitytype)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("entitytype");
            entity.Property(e => e.Eventiid).HasColumnName("EVENTIID");
            entity.Property(e => e.Eventlociid).HasColumnName("EVENTLOCIID");
            entity.Property(e => e.Finactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("finactivecd");
            entity.Property(e => e.Industry)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("industry");
            entity.Property(e => e.InternalOrg)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("internal_org");
            entity.Property(e => e.Isactive).HasColumnName("ISACTIVE");
            entity.Property(e => e.Leadsource).HasColumnName("LEADSOURCE");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("locationcd");
            entity.Property(e => e.Modifiedbyempiid).HasColumnName("MODIFIEDBYEMPIID");
            entity.Property(e => e.Modifieddate).HasColumnName("MODIFIEDDATE");
            entity.Property(e => e.Opportunityclosedate).HasColumnName("OPPORTUNITYCLOSEDATE");
            entity.Property(e => e.Opportunitydescription).HasColumnName("OPPORTUNITYDESCRIPTION");
            entity.Property(e => e.Opportunityid).HasColumnName("OPPORTUNITYID");
            entity.Property(e => e.Opportunityiid).HasColumnName("OPPORTUNITYIID");
            entity.Property(e => e.Opportunitymargin).HasColumnName("OPPORTUNITYMARGIN");
            entity.Property(e => e.Opportunityname).HasColumnName("OPPORTUNITYNAME");
            entity.Property(e => e.Opportunitystage).HasColumnName("OPPORTUNITYSTAGE");
            entity.Property(e => e.Opportunitytype).HasColumnName("OPPORTUNITYTYPE");
            entity.Property(e => e.Opportunityvalue).HasColumnName("OPPORTUNITYVALUE");
            entity.Property(e => e.Opsmgr).HasColumnName("opsmgr");
            entity.Property(e => e.Ownerempiid).HasColumnName("OWNEREMPIID");
            entity.Property(e => e.Penddate).HasColumnName("penddate");
            entity.Property(e => e.Plactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("plactivecd");
            entity.Property(e => e.Prob).HasColumnName("prob");
            entity.Property(e => e.Probability).HasColumnName("PROBABILITY");
            entity.Property(e => e.Projectid).HasColumnName("PROJECTID");
            entity.Property(e => e.Propduedate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("propduedate");
            entity.Property(e => e.Proptype)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("proptype");
            entity.Property(e => e.Pstartdate).HasColumnName("pstartdate");
            entity.Property(e => e.Readytopack).HasColumnName("readytopack");
            entity.Property(e => e.Reasoncode).HasColumnName("REASONCODE");
            entity.Property(e => e.Reasoncomments).HasColumnName("REASONCOMMENTS");
            entity.Property(e => e.Respempno).HasColumnName("respempno");
            entity.Property(e => e.Salespersoniid1).HasColumnName("SALESPERSONIID1");
            entity.Property(e => e.Salespersoniid2).HasColumnName("SALESPERSONIID2");
            entity.Property(e => e.Salespersoniid3).HasColumnName("SALESPERSONIID3");
            entity.Property(e => e.Sfactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sfactivecd");
            entity.Property(e => e.Shipno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("shipno");
            entity.Property(e => e.Sitecurrencyiid).HasColumnName("SITECURRENCYIID");
            entity.Property(e => e.Siteiid).HasColumnName("SITEIID");
            entity.Property(e => e.Stagedate).HasColumnName("STAGEDATE");
            entity.Property(e => e.Startdate).HasColumnName("STARTDATE");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Subcontract)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("subcontract");
            entity.Property(e => e.Subno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("subno");
            entity.Property(e => e.Synchronizer2).HasColumnName("SYNCHRONIZER2");
            entity.Property(e => e.Totalvaluecurrencyiid).HasColumnName("TOTALVALUECURRENCYIID");
            entity.Property(e => e.Transactioncurrencyiid).HasColumnName("TRANSACTIONCURRENCYIID");
        });

        modelBuilder.Entity<TmpEdsprojectStatusMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSProjectStatus_Mapping");

            entity.Property(e => e.Lookupcode)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("LOOKUPCODE");
            entity.Property(e => e.Lookuptypedescription).HasColumnName("LOOKUPTYPEDESCRIPTION");
            entity.Property(e => e.StatusCode)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpEdsprojectsIgnoreProjectLevel>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSProjects_IgnoreProjectLevel");

            entity.Property(e => e.Entityno).HasColumnName("entityno");
        });

        modelBuilder.Entity<TmpEdsrebarcodedDevicesScanHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSRebarcodedDevices_ScanHistory");

            entity.Property(e => e.Barcode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ScannedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ScannedDate)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ScannedDateTime)
                .HasPrecision(0)
                .HasComputedColumnSql("(CONVERT([datetime2](0),stuff(stuff(stuff([scanneddate],(13),(0),':'),(11),(0),':'),(9),(0),' '),(112)))", false);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpEdsrebarcodedDevicesStatus>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSRebarcodedDevices_Status");

            entity.Property(e => e.Additionalassetid).HasColumnName("additionalassetid");
            entity.Property(e => e.Binnumber).HasColumnName("binnumber");
            entity.Property(e => e.Invseriid).HasColumnName("invseriid");
            entity.Property(e => e.Scandate)
                .HasColumnType("datetime")
                .HasColumnName("scandate");
            entity.Property(e => e.Serialnum).HasColumnName("serialnum");
            entity.Property(e => e.Verifiedby).HasColumnName("VERIFIEDBY");
        });

        modelBuilder.Entity<TmpEdsrebarcodedDevicesStatusSyd0220220909>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSRebarcodedDevices_Status_syd0220220909");

            entity.Property(e => e.Additionalassetid).HasColumnName("additionalassetid");
            entity.Property(e => e.Binnumber).HasColumnName("binnumber");
            entity.Property(e => e.Invseriid).HasColumnName("invseriid");
            entity.Property(e => e.Scandate)
                .HasColumnType("datetime")
                .HasColumnName("scandate");
            entity.Property(e => e.Serialnum).HasColumnName("serialnum");
            entity.Property(e => e.Verifiedby).HasColumnName("VERIFIEDBY");
        });

        modelBuilder.Entity<TmpEdsrebarcodedDevicesVerified>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSRebarcodedDevices_Verified");

            entity.Property(e => e.Additionalassetid).HasColumnName("additionalassetid");
            entity.Property(e => e.Binnumber).HasColumnName("binnumber");
            entity.Property(e => e.Invseriid).HasColumnName("invseriid");
            entity.Property(e => e.Serialnum).HasColumnName("serialnum");
        });

        modelBuilder.Entity<TmpEdsserialNumberTransfer>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSSerialNumber_Transfer");

            entity.Property(e => e.Action).HasColumnName("ACTION");
            entity.Property(e => e.Comments).HasColumnName("COMMENTS");
            entity.Property(e => e.Conlineiid).HasColumnName("CONLINEIID");
            entity.Property(e => e.Conlineserialiid).HasColumnName("CONLINESERIALIID");
            entity.Property(e => e.Containerid).HasColumnName("CONTAINERID");
            entity.Property(e => e.Contractiid).HasColumnName("CONTRACTIID");
            entity.Property(e => e.Departmentid).HasColumnName("DEPARTMENTID");
            entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
            entity.Property(e => e.Entityno).HasColumnName("entityno");
            entity.Property(e => e.Inviid).HasColumnName("INVIID");
            entity.Property(e => e.Keeporiginalitemdescription).HasColumnName("KEEPORIGINALITEMDESCRIPTION");
            entity.Property(e => e.Lineno).HasColumnName("LINENO");
            entity.Property(e => e.Linetype).HasColumnName("LINETYPE");
            entity.Property(e => e.Loadingbayid).HasColumnName("LOADINGBAYID");
            entity.Property(e => e.Orderedqty).HasColumnName("ORDEREDQTY");
            entity.Property(e => e.Quickturnaroundfor).HasColumnName("QUICKTURNAROUNDFOR");
            entity.Property(e => e.Returnedqty).HasColumnName("RETURNEDQTY");
            entity.Property(e => e.Secondarystatus).HasColumnName("SECONDARYSTATUS");
            entity.Property(e => e.Serialiid).HasColumnName("SERIALIID");
            entity.Property(e => e.Serialnumber).HasColumnName("SERIALNUMBER");
            entity.Property(e => e.Shippedqty).HasColumnName("SHIPPEDQTY");
            entity.Property(e => e.Shippingstatus).HasColumnName("SHIPPINGSTATUS");
            entity.Property(e => e.Sku).HasColumnName("SKU");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Statusdate).HasColumnName("STATUSDATE");
        });

        modelBuilder.Entity<TmpEdssitesMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSSites_Mapping");

            entity.Property(e => e.Siteiid)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SITEIID");
            entity.Property(e => e.WarehouseCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpEdsstatusLookup>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSStatusLookup");

            entity.Property(e => e.AssetStatus)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.AssetStatusDesc).HasMaxLength(50);
        });

        modelBuilder.Entity<TmpEdssubCategoryManufacturerPartGroupMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSSubCategoryManufacturerPartGroup_Mapping");

            entity.Property(e => e.ClairPrimaryCategory)
                .HasMaxLength(255)
                .HasColumnName("Clair Primary Category");
            entity.Property(e => e.ClairSubCategory)
                .HasMaxLength(255)
                .HasColumnName("Clair Sub-Category");
            entity.Property(e => e.EdsSubCategory)
                .HasMaxLength(255)
                .HasColumnName("EDS Sub-Category");
            entity.Property(e => e.Manufacturer).HasMaxLength(255);
            entity.Property(e => e.Notes).HasMaxLength(255);
            entity.Property(e => e.PartGroup)
                .HasMaxLength(255)
                .HasColumnName("Part Group");
        });

        modelBuilder.Entity<TmpEdssubcategoryMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSSubcategory_Mapping");

            entity.Property(e => e.Commodity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("commodity");
            entity.Property(e => e.Invsubcategorydesc)
                .IsUnicode(false)
                .HasColumnName("INVSUBCATEGORYDESC");
            entity.Property(e => e.Invsubcategoryid)
                .IsUnicode(false)
                .HasColumnName("INVSUBCATEGORYID");
            entity.Property(e => e.Manufacturer)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MergeSecondaryCategoryCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PartGroup)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.SecondaryCategoryCode)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpEdstemplate>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEDSTemplates");

            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Lineno).HasColumnName("lineno");
            entity.Property(e => e.Productid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRODUCTID");
            entity.Property(e => e.Quantity).HasColumnName("QUANTITY");
            entity.Property(e => e.Templateid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TEMPLATEID");
            entity.Property(e => e.Templatename)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TEMPLATENAME");
            entity.Property(e => e.Type)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("TYPE");
        });

        modelBuilder.Entity<TmpEgnyteDevices20240110>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEgnyteDevices20240110");

            entity.Property(e => e.DeviceModel).HasColumnName("Device Model");
            entity.Property(e => e.DeviceName).HasColumnName("Device Name");
            entity.Property(e => e.LastUpdate).HasColumnName("Last Update");
            entity.Property(e => e.UserName).HasColumnName("User Name");
        });

        modelBuilder.Entity<TmpEntitiesThatMightNeedToGetPutBack>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpEntitiesThatMightNeedToGetPutBack");

            entity.Property(e => e.AcctExecEmpno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("acctExecEmpno");
            entity.Property(e => e.Agency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("agency");
            entity.Property(e => e.Bidmarkup).HasColumnName("bidmarkup");
            entity.Property(e => e.Bidroot)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bidroot");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Country)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("country");
            entity.Property(e => e.CrewPrep).HasColumnType("smalldatetime");
            entity.Property(e => e.CrmleadUrl)
                .IsUnicode(false)
                .HasColumnName("CRMLeadURL");
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.Custno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("custno");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("engactivecd");
            entity.Property(e => e.EngrEmpno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("engrEmpno");
            entity.Property(e => e.Entitydesc)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("entitydesc");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Entitytype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("entitytype");
            entity.Property(e => e.ExchangeRateDate).HasColumnType("datetime");
            entity.Property(e => e.Finactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("finactivecd");
            entity.Property(e => e.FirstShow).HasColumnType("smalldatetime");
            entity.Property(e => e.Guid).HasColumnName("GUID");
            entity.Property(e => e.Industry)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("industry");
            entity.Property(e => e.InternalOrg)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("internal_org");
            entity.Property(e => e.LastShow).HasColumnType("smalldatetime");
            entity.Property(e => e.LeadTime)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("leadTime");
            entity.Property(e => e.LoadOut).HasColumnType("smalldatetime");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("locationcd");
            entity.Property(e => e.Matrixcd)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("matrixcd");
            entity.Property(e => e.OeOrderno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("oe_orderno");
            entity.Property(e => e.Opsmgr)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("opsmgr");
            entity.Property(e => e.Plactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("plactivecd");
            entity.Property(e => e.PollstarArtistId).HasColumnName("PollstarArtistID");
            entity.Property(e => e.Probability).HasColumnName("probability");
            entity.Property(e => e.Propduedate)
                .HasColumnType("datetime")
                .HasColumnName("propduedate");
            entity.Property(e => e.Proptype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("proptype");
            entity.Property(e => e.Readytopack).HasColumnName("readytopack");
            entity.Property(e => e.ReferralProgramId).HasColumnName("ReferralProgramID");
            entity.Property(e => e.Respempno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("respempno");
            entity.Property(e => e.Rfplempno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RFPLEmpno");
            entity.Property(e => e.RootEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("rootEntityno");
            entity.Property(e => e.Sfactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sfactivecd");
            entity.Property(e => e.Shipno)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("shipno");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.Subcontract)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("subcontract");
            entity.Property(e => e.Subno)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("subno");
            entity.Property(e => e.TaxCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tax_code");
            entity.Property(e => e.TaxTypeKey)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TruckingVendNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpGetWarehouseTransferValueForLastNWeeksResultsPreupdate>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_get_warehouse_transfer_value_for_last_N_weeks_results_preupdate");

            entity.Property(e => e.Ar).HasColumnName("AR");
            entity.Property(e => e.Bne).HasColumnName("BNE");
            entity.Property(e => e.Bslm).HasColumnName("BSLM");
            entity.Property(e => e.Cle8).HasColumnName("CLE8");
            entity.Property(e => e.Esp).HasColumnName("ESP");
            entity.Property(e => e.Lax).HasColumnName("LAX");
            entity.Property(e => e.Litz).HasColumnName("LITZ");
            entity.Property(e => e.Mel).HasColumnName("MEL");
            entity.Property(e => e.Mel8).HasColumnName("MEL8");
            entity.Property(e => e.Nash).HasColumnName("NASH");
            entity.Property(e => e.Nyc).HasColumnName("NYC");
            entity.Property(e => e.Syd).HasColumnName("SYD");
            entity.Property(e => e.Syd8).HasColumnName("SYD8");
            entity.Property(e => e.Uk).HasColumnName("UK");
            entity.Property(e => e.Uk8).HasColumnName("UK8");
            entity.Property(e => e.Usa).HasColumnName("USA");
        });

        modelBuilder.Entity<TmpGoldfishCommodityMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpGoldfishCommodityMapping");

            entity.Property(e => e.ClairCommodity)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ICategoryId).HasColumnName("iCategoryID");
            entity.Property(e => e.SCategoryName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sCategoryName");
        });

        modelBuilder.Entity<TmpGoldfishManufacturer>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpGoldfishManufacturers");

            entity.Property(e => e.DtLastMod)
                .HasColumnType("smalldatetime")
                .HasColumnName("dtLastMod");
            entity.Property(e => e.IMakeId).HasColumnName("iMakeID");
            entity.Property(e => e.SLastUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sLastUser");
            entity.Property(e => e.SMakeName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sMakeName");
        });

        modelBuilder.Entity<TmpGoldfishMappingCategory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpGoldfishMappingCategories");

            entity.Property(e => e.Acdistro)
                .HasMaxLength(50)
                .HasColumnName("ACDISTRO");
            entity.Property(e => e.ClairCategory)
                .HasMaxLength(50)
                .HasColumnName("Clair_Category");
            entity.Property(e => e.Column3)
                .HasMaxLength(50)
                .HasColumnName("column3");
            entity.Property(e => e.Column4)
                .HasMaxLength(1)
                .HasColumnName("column4");
            entity.Property(e => e.Column5)
                .HasMaxLength(1)
                .HasColumnName("column5");
            entity.Property(e => e.Column6)
                .HasMaxLength(1)
                .HasColumnName("column6");
            entity.Property(e => e.SiCategories)
                .HasMaxLength(50)
                .HasColumnName("SI_Categories");
        });

        modelBuilder.Entity<TmpGoldfishMappingCommodity>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpGoldfishMappingCommodities");

            entity.Property(e => e.CategoryId).HasColumnName("Category_ID");
            entity.Property(e => e.ClairCommodity)
                .HasMaxLength(50)
                .HasColumnName("Clair_Commodity");
            entity.Property(e => e.Column4)
                .HasMaxLength(1)
                .HasColumnName("column4");
            entity.Property(e => e.Column5)
                .HasMaxLength(1)
                .HasColumnName("column5");
            entity.Property(e => e.Column6)
                .HasMaxLength(1)
                .HasColumnName("column6");
            entity.Property(e => e.Commodity).HasMaxLength(50);
            entity.Property(e => e.ModelId).HasColumnName("ModelID");
            entity.Property(e => e.SiCategory)
                .HasMaxLength(50)
                .HasColumnName("SI_Category");
        });

        modelBuilder.Entity<TmpGoldfishMappingCountry>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpGoldfishMappingCountry");

            entity.Property(e => e.ClairCountry)
                .HasMaxLength(50)
                .HasColumnName("Clair_Country");
            entity.Property(e => e.SiCountry)
                .HasMaxLength(50)
                .HasColumnName("SI_Country");
        });

        modelBuilder.Entity<TmpGoldfishPartsView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("tmpGoldfishParts_View");

            entity.Property(e => e.FakePartNo)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpGoldfishPartsWithoutTheirPartNumber>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpGoldfishPartsWithoutTheirPartNumbers");

            entity.HasIndex(e => e.FakePartNo, "PK_tmpGoldfishPartsWithoutTheirPartNumbers")
                .IsUnique()
                .IsClustered();

            entity.Property(e => e.CheckComment)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("checkComment");
            entity.Property(e => e.CheckedBy)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("checkedBy");
            entity.Property(e => e.CheckedDate)
                .HasDefaultValueSql("(sysdatetimeoffset())")
                .HasColumnName("checkedDate");
            entity.Property(e => e.FakePartNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MappedPartno)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModelId).HasColumnName("ModelID");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");

            entity.HasOne(d => d.CheckedByNavigation).WithMany()
                .HasForeignKey(d => d.CheckedBy)
                .HasConstraintName("tmpGoldfishParts0_checkedBy_user");
        });

        modelBuilder.Entity<TmpGoldfishRemoveSiDupforClairMia20230805>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpGoldfishRemoveSI_DUPforClairMIA20230805");

            entity.HasIndex(e => e.OriginalClairBarcode, "PK_tmpGoldfishRemoveSI_DUPforClairMIA20230805")
                .IsUnique()
                .IsClustered();

            entity.Property(e => e.NewClairBarcode)
                .HasMaxLength(21)
                .IsUnicode(false);
            entity.Property(e => e.OriginalClairBarcode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OriginalDupeSibarcode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OriginalDupeSIBarcode");
        });

        modelBuilder.Entity<TmpGtobensalemNewPart>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpGTOBensalemNewParts");

            entity.Property(e => e.Commmodity)
                .HasMaxLength(255)
                .HasColumnName("commmodity");
            entity.Property(e => e.CreatePn)
                .HasMaxLength(255)
                .HasColumnName("CreatePN");
            entity.Property(e => e.FinessePartDesc).HasMaxLength(255);
            entity.Property(e => e.FinessePn)
                .HasMaxLength(55)
                .HasColumnName("FinessePN");
            entity.Property(e => e.H).HasMaxLength(255);
            entity.Property(e => e.L).HasMaxLength(255);
            entity.Property(e => e.LeadSource)
                .HasMaxLength(255)
                .HasColumnName("lead_source");
            entity.Property(e => e.MatDesc).HasMaxLength(255);
            entity.Property(e => e.MatSpec).HasMaxLength(255);
            entity.Property(e => e.Origin).HasMaxLength(255);
            entity.Property(e => e.PaidLvlmatcost1)
                .HasColumnType("money")
                .HasColumnName("paid_lvlmatcost1");
            entity.Property(e => e.Pkg).HasMaxLength(255);
            entity.Property(e => e.Totmatcost4)
                .HasColumnType("money")
                .HasColumnName("totmatcost4");
            entity.Property(e => e.W).HasMaxLength(255);
        });

        modelBuilder.Entity<TmpGtobensalemPartsInventory20110524>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpGTOBensalemPartsInventory_20110524");

            entity.Property(e => e.H)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("h");
            entity.Property(e => e.L)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("l");
            entity.Property(e => e.Origin)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("origin");
            entity.Property(e => e.Package)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("package");
            entity.Property(e => e.Partdesc)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Rentalvalue).HasColumnName("rentalvalue");
            entity.Property(e => e.W)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("w");
            entity.Property(e => e.Weight).HasColumnName("weight");
        });

        modelBuilder.Entity<TmpGtonybarcode>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpGTONYBarcodes");

            entity.Property(e => e.Barcode).HasMaxLength(255);
            entity.Property(e => e.FinessePartNo)
                .HasMaxLength(55)
                .IsUnicode(false)
                .HasColumnName("Finesse Part No");
            entity.Property(e => e.SerialNumber)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Serial Number");
        });

        modelBuilder.Entity<TmpGtonynewPart>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpGTONYNewParts");

            entity.Property(e => e.Commodity).HasMaxLength(255);
            entity.Property(e => e.Listcost)
                .HasColumnType("money")
                .HasColumnName("listcost");
            entity.Property(e => e.Mdesc)
                .HasMaxLength(255)
                .HasColumnName("mdesc");
            entity.Property(e => e.Mp)
                .HasMaxLength(255)
                .HasColumnName("mp");
            entity.Property(e => e.Mspec)
                .HasMaxLength(255)
                .HasColumnName("mspec");
            entity.Property(e => e.Pd)
                .HasMaxLength(255)
                .HasColumnName("pd");
            entity.Property(e => e.Pkg)
                .HasMaxLength(255)
                .HasColumnName("pkg");
            entity.Property(e => e.Pn)
                .HasMaxLength(55)
                .IsUnicode(false)
                .HasColumnName("pn");
            entity.Property(e => e.Source).HasMaxLength(255);
            entity.Property(e => e.Weight)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("weight");
        });

        modelBuilder.Entity<TmpHarmonizedCodesImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpHarmonizedCodesImport");

            entity.Property(e => e.CustomsUomcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CustomsUOMCode");
            entity.Property(e => e.HarmonizedTariff)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
        });

        modelBuilder.Entity<TmpHaywardBarcodeImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpHaywardBarcodeImport");

            entity.Property(e => e.Area)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("area");
            entity.Property(e => e.AssetNumber).HasColumnName("Asset Number");
            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.CurrentBalance).HasColumnName("Current Balance");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.Dup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dup");
            entity.Property(e => e.EffectiveDate).HasColumnName("Effective Date");
            entity.Property(e => e.ImageLinkUrl).HasColumnName("Image Link Url");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.OpeningBalance).HasColumnName("Opening Balance");
            entity.Property(e => e.Parentpartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("parentpartno");
            entity.Property(e => e.ParentserialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("parentserial_no");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.QuantityHeld).HasColumnName("Quantity Held");
            entity.Property(e => e.Receipt)
                .HasColumnType("datetime")
                .HasColumnName("receipt");
            entity.Property(e => e.Row)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.SerialNumber).HasColumnName("Serial Number");
            entity.Property(e => e.StockType).HasColumnName("Stock Type");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<TmpHaywardBarcodeImportWithSerialNo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpHaywardBarcodeImportWithSerialNo");

            entity.Property(e => e.AssetNumber).HasColumnName("Asset Number");
            entity.Property(e => e.CurrentBalance).HasColumnName("Current Balance");
            entity.Property(e => e.EffectiveDate).HasColumnName("Effective Date");
            entity.Property(e => e.ImageLinkUrl).HasColumnName("Image Link Url");
            entity.Property(e => e.OpeningBalance).HasColumnName("Opening Balance");
            entity.Property(e => e.QuantityHeld).HasColumnName("Quantity Held");
            entity.Property(e => e.SerialNumber).HasColumnName("Serial Number");
            entity.Property(e => e.StockType).HasColumnName("Stock Type");
        });

        modelBuilder.Entity<TmpHaywardBillingTermsMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpHaywardBillingTermsMapping");

            entity.Property(e => e.CurrentBillingTerms).HasColumnName("Current Billing Terms");
            entity.Property(e => e.FinessePayTermsCode).HasColumnName("Finesse Pay Terms Code");
        });

        modelBuilder.Entity<TmpHaywardCustomerImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpHaywardCustomerImport");

            entity.Property(e => e.AccountNumber).HasColumnName("Account Number");
            entity.Property(e => e.BillingAddressCity).HasColumnName("Billing Address City");
            entity.Property(e => e.BillingAddressCountry).HasColumnName("Billing Address Country");
            entity.Property(e => e.BillingAddressName).HasColumnName("Billing Address Name");
            entity.Property(e => e.BillingAddressState).HasColumnName("Billing Address State");
            entity.Property(e => e.BillingAddressStreet).HasColumnName("Billing Address Street");
            entity.Property(e => e.BillingAddressZipCode).HasColumnName("Billing Address Zip Code");
            entity.Property(e => e.BillingTerms).HasColumnName("Billing Terms");
            entity.Property(e => e.CashCustomer).HasColumnName("Cash Customer");
            entity.Property(e => e.CellTelephone).HasColumnName("Cell Telephone");
            entity.Property(e => e.Custno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("custno");
            entity.Property(e => e.DeliveryAddressCity).HasColumnName("Delivery Address City");
            entity.Property(e => e.DeliveryAddressCountry).HasColumnName("Delivery Address Country");
            entity.Property(e => e.DeliveryAddressName).HasColumnName("Delivery Address Name");
            entity.Property(e => e.DeliveryAddressState).HasColumnName("Delivery Address State");
            entity.Property(e => e.DeliveryAddressStreet).HasColumnName("Delivery Address Street");
            entity.Property(e => e.DeliveryAddressZipCode).HasColumnName("Delivery Address Zip Code");
            entity.Property(e => e.DiscountCategory).HasColumnName("Discount Category");
            entity.Property(e => e.FacebookWebLink).HasColumnName("Facebook Web Link");
            entity.Property(e => e.FaxTelephone).HasColumnName("Fax Telephone");
            entity.Property(e => e.HomeEmail).HasColumnName("Home Email");
            entity.Property(e => e.HomeTelephone).HasColumnName("Home Telephone");
            entity.Property(e => e.ImWebLink).HasColumnName("IM Web Link");
            entity.Property(e => e.InvoiceTermType).HasColumnName("Invoice Term Type");
            entity.Property(e => e.LegalBasisForProcessingData).HasColumnName("Legal basis for processing data");
            entity.Property(e => e.LinkedInWebLink).HasColumnName("LinkedIn Web Link");
            entity.Property(e => e.OnStop).HasColumnName("On Stop");
            entity.Property(e => e.PriceCategory).HasColumnName("Price Category");
            entity.Property(e => e.PurchaseTaxClass).HasColumnName("Purchase Tax Class");
            entity.Property(e => e.SaleTaxClass).HasColumnName("Sale Tax Class");
            entity.Property(e => e.SkypeTelephone).HasColumnName("Skype Telephone");
            entity.Property(e => e.TaxNumber).HasColumnName("Tax Number");
            entity.Property(e => e.TwitterWebLink).HasColumnName("Twitter Web Link");
            entity.Property(e => e.Vendno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("vendno");
            entity.Property(e => e.WebsiteWebLink).HasColumnName("Website Web Link");
            entity.Property(e => e.WorkEmail).HasColumnName("Work Email");
            entity.Property(e => e.WorkEmail2).HasColumnName("Work Email 2");
            entity.Property(e => e.WorkEmail3).HasColumnName("Work Email 3");
            entity.Property(e => e.WorkTelephone).HasColumnName("Work Telephone");
            entity.Property(e => e.WorkTelephone2).HasColumnName("Work Telephone 2");
            entity.Property(e => e.ZipCode).HasColumnName("Zip Code");
        });

        modelBuilder.Entity<TmpHaywardParentChildImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpHaywardParentChildImport");

            entity.Property(e => e.ComponentAssetNumber).HasColumnName("Component Asset Number");
            entity.Property(e => e.ContainerAssetNumber).HasColumnName("Container Asset Number");
        });

        modelBuilder.Entity<TmpHaywardPartCategoiresMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpHaywardPartCategoiresMapping");

            entity.Property(e => e.BnNotes).HasColumnName("BN Notes");
            entity.Property(e => e.Commodity).HasColumnName("commodity");
        });

        modelBuilder.Entity<TmpHaywardPartImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpHaywardPartImport");

            entity.Property(e => e.AccessoryOnly).HasColumnName("Accessory Only");
            entity.Property(e => e.AllowedStockType).HasColumnName("Allowed Stock Type");
            entity.Property(e => e.BufferPercentage).HasColumnName("Buffer Percentage");
            entity.Property(e => e.BulkQuantityStore).HasColumnName("Bulk Quantity Store");
            entity.Property(e => e.CountryOfOriginCode).HasColumnName("Country of Origin Code");
            entity.Property(e => e.ImageUrl).HasColumnName("Image Url");
            entity.Property(e => e.LawCost).HasColumnName("LAW Cost");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.PostRentUnavailability).HasColumnName("Post Rent Unavailability");
            entity.Property(e => e.ProductGroup).HasColumnName("Product Group");
            entity.Property(e => e.PurchaseCostGroup).HasColumnName("Purchase Cost Group");
            entity.Property(e => e.PurchasePrice).HasColumnName("Purchase Price");
            entity.Property(e => e.RentalBulkLocation).HasColumnName("Rental Bulk Location");
            entity.Property(e => e.RentalBulkQuantity).HasColumnName("Rental Bulk Quantity");
            entity.Property(e => e.RentalPrice).HasColumnName("Rental Price");
            entity.Property(e => e.RentalRateDefinition).HasColumnName("Rental Rate Definition");
            entity.Property(e => e.RentalRevenueGroup).HasColumnName("Rental Revenue Group");
            entity.Property(e => e.ReplacementCharge).HasColumnName("Replacement Charge");
            entity.Property(e => e.SaleBulkLocation).HasColumnName("Sale Bulk Location");
            entity.Property(e => e.SaleBulkQuantity).HasColumnName("Sale Bulk Quantity");
            entity.Property(e => e.SalePrice).HasColumnName("Sale Price");
            entity.Property(e => e.SaleRevenueGroup).HasColumnName("Sale Revenue Group");
            entity.Property(e => e.StockMethod).HasColumnName("Stock Method");
            entity.Property(e => e.SubRentalCostGroup).HasColumnName("Sub-Rental Cost Group");
            entity.Property(e => e.SubRentalPrice).HasColumnName("Sub-Rental Price");
            entity.Property(e => e.SubRentalRateDefinition).HasColumnName("Sub-Rental Rate Definition");
            entity.Property(e => e.TaxClass).HasColumnName("Tax Class");
            entity.Property(e => e.TestsInspections).HasColumnName("Tests & Inspections");
        });

        modelBuilder.Entity<TmpHaywardVenueImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpHaywardVenueImport");

            entity.Property(e => e.BookableResource).HasColumnName("Bookable Resource");
            entity.Property(e => e.CellTelephone).HasColumnName("Cell Telephone");
            entity.Property(e => e.DayCost).HasColumnName("Day Cost");
            entity.Property(e => e.DistanceCost).HasColumnName("Distance Cost");
            entity.Property(e => e.FacebookWebLink).HasColumnName("Facebook Web Link");
            entity.Property(e => e.FaxTelephone).HasColumnName("Fax Telephone");
            entity.Property(e => e.FlatCost).HasColumnName("Flat Cost");
            entity.Property(e => e.HomeEmail).HasColumnName("Home Email");
            entity.Property(e => e.HomeTelephone).HasColumnName("Home Telephone");
            entity.Property(e => e.HourCost).HasColumnName("Hour Cost");
            entity.Property(e => e.ImWebLink).HasColumnName("IM Web Link");
            entity.Property(e => e.LinkedInWebLink).HasColumnName("LinkedIn Web Link");
            entity.Property(e => e.PurchaseTaxClass).HasColumnName("Purchase Tax Class");
            entity.Property(e => e.ResourceLocation).HasColumnName("Resource Location");
            entity.Property(e => e.SkypeTelephone).HasColumnName("Skype Telephone");
            entity.Property(e => e.TwitterWebLink).HasColumnName("Twitter Web Link");
            entity.Property(e => e.WebsiteWebLink).HasColumnName("Website Web Link");
            entity.Property(e => e.WorkEmail).HasColumnName("Work Email");
            entity.Property(e => e.WorkTelephone).HasColumnName("Work Telephone");
            entity.Property(e => e.WorkTelephone2).HasColumnName("Work Telephone 2");
            entity.Property(e => e.ZipCode).HasColumnName("Zip Code");
        });

        modelBuilder.Entity<TmpHazelAutoSearchResult>(entity =>
        {
            entity.HasKey(e => new { e.ItemId, e.Partno });

            entity.ToTable("tmpHazelAutoSearchResults");

            entity.Property(e => e.ItemId)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Score).HasColumnName("score");
        });

        modelBuilder.Entity<TmpHazelPart>(entity =>
        {
            entity.HasKey(e => e.ItemId);

            entity.ToTable("tmpHazelParts");

            entity.HasIndex(e => e.FlexId, "UC_tmpHazelParts_FlexID").IsUnique();

            entity.Property(e => e.ItemId)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Categories).HasMaxLength(255);
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.FlexId).HasColumnName("FlexID");
            entity.Property(e => e.ItemSize).HasMaxLength(255);
            entity.Property(e => e.Qty).HasMaxLength(255);
            entity.Property(e => e.TotalGbp).HasColumnName("TotalGBP");
            entity.Property(e => e.UnitGbp).HasColumnName("UnitGBP");
        });

        modelBuilder.Entity<TmpHazelPartMapping>(entity =>
        {
            entity.HasKey(e => e.ItemId);

            entity.ToTable("tmpHazelPartMapping");

            entity.Property(e => e.ItemId)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CheckedBy)
                .HasMaxLength(128)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("checkedBy");
            entity.Property(e => e.CheckedDate)
                .HasDefaultValueSql("(sysdatetimeoffset())")
                .HasColumnName("checkedDate");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");

            entity.HasOne(d => d.Item).WithOne(p => p.TmpHazelPartMapping)
                .HasForeignKey<TmpHazelPartMapping>(d => d.ItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tmpHazelPartMapping_tmpHazelParts");
        });

        modelBuilder.Entity<TmpHazelParts241113>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpHazelParts241113");

            entity.Property(e => e.Categories).HasMaxLength(255);
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.ItemId).HasMaxLength(255);
            entity.Property(e => e.ItemSize).HasMaxLength(255);
            entity.Property(e => e.TotalGbp).HasColumnName("TotalGBP");
            entity.Property(e => e.UnitGbp).HasColumnName("UnitGBP");
        });

        modelBuilder.Entity<TmpHazelPartsView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("tmpHazelParts_View");

            entity.Property(e => e.Caption).HasMaxLength(255);
            entity.Property(e => e.Inventory).HasMaxLength(255);
            entity.Property(e => e.ItemId)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Manufacturer).HasMaxLength(255);
            entity.Property(e => e.TotalGbp).HasColumnName("TotalGBP");
        });

        modelBuilder.Entity<TmpHazelPlus4PartMapping20250307>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpHazelPlus4PartMapping20250307");

            entity.Property(e => e.ExistingFinesseCategory).HasColumnName("Existing Finesse Category");
            entity.Property(e => e.ExistingFinesseOpsPartDescription).HasColumnName("Existing Finesse Ops Part Description");
            entity.Property(e => e.ExistingFinessePart).HasColumnName("Existing Finesse Part #");
            entity.Property(e => e.FinesseManufacturer).HasColumnName("Finesse Manufacturer");
            entity.Property(e => e.FinesseNewOpsPartDescription).HasColumnName("Finesse New Ops Part Description");
            entity.Property(e => e.FinesseNewSalesPartDescription).HasColumnName("Finesse New Sales Part Description");
            entity.Property(e => e.FinesseSku).HasColumnName("Finesse SKU #");
            entity.Property(e => e.Import).HasColumnName("IMPORT?");
            entity.Property(e => e.P4Part).HasColumnName("P4 Part #");
            entity.Property(e => e.P4PartDescription).HasColumnName("P4 Part Description");
            entity.Property(e => e.TicItem).HasColumnName("Tic Item?");
        });

        modelBuilder.Entity<TmpHazelPlus4PartMappingPricing20250307>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpHazelPlus4PartMappingPricing20250307");

            entity.Property(e => e.IfK2IsBlankUseFlex).HasColumnName("If K2 is blank use Flex");
            entity.Property(e => e.PartDescription).HasColumnName("Part Description");
            entity.Property(e => e.PartNo).HasColumnName("Part No");
            entity.Property(e => e.TotalGbp).HasColumnName("TotalGBP");
            entity.Property(e => e.UnitValueGbp).HasColumnName("UnitValueGBP");
            entity.Property(e => e.UnitValueUsd).HasColumnName("Unit Value USD");
        });

        modelBuilder.Entity<TmpHiFrequencyVectorValue>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpHiFrequencyVectorValues");

            entity.Property(e => e.HiFftbinIndex).HasColumnName("HiFFTBinIndex");
            entity.Property(e => e.LoFftbinIndex).HasColumnName("LoFFTBinIndex");
        });

        modelBuilder.Entity<TmpIfspaymentTerms20250311>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpIFSPaymentTerms20250311");

            entity.Property(e => e.ApplyCashDiscountToFixedAssetsAcquisitionValues).HasColumnName("Apply Cash Discount to Fixed Assets Acquisition Values");
            entity.Property(e => e.BlockedDirectDebiting).HasColumnName("Blocked Direct Debiting");
            entity.Property(e => e.ConsiderPaymentVacationPeriods).HasColumnName("Consider Payment Vacation Periods");
            entity.Property(e => e.ExcludeFromCreditLimitControl).HasColumnName("Exclude From Credit Limit Control");
            entity.Property(e => e.PaymentTerms).HasColumnName("Payment Terms");
            entity.Property(e => e.PaymentTermsDescription).HasColumnName("Payment Terms Description");
            entity.Property(e => e.SuppressAmount).HasColumnName("Suppress Amount");
            entity.Property(e => e.TaxDistribution).HasColumnName("Tax Distribution");
            entity.Property(e => e.UseCommercialYear).HasColumnName("Use Commercial Year");
        });

        modelBuilder.Entity<TmpIfsprdperson>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpIFSPRDPersons");

            entity.Property(e => e.Alias).HasColumnName("ALIAS");
            entity.Property(e => e.AlternativeName).HasColumnName("ALTERNATIVE_NAME");
            entity.Property(e => e.BirthName).HasColumnName("BIRTH_NAME");
            entity.Property(e => e.BlockedForUse).HasColumnName("BLOCKED_FOR_USE");
            entity.Property(e => e.BlockedForUseSupplier).HasColumnName("BLOCKED_FOR_USE_SUPPLIER");
            entity.Property(e => e.Country).HasColumnName("COUNTRY");
            entity.Property(e => e.CreationDate).HasColumnName("CREATION_DATE");
            entity.Property(e => e.CustomerContact).HasColumnName("CUSTOMER_CONTACT");
            entity.Property(e => e.DefaultDomain).HasColumnName("DEFAULT_DOMAIN");
            entity.Property(e => e.DefaultLanguage).HasColumnName("DEFAULT_LANGUAGE");
            entity.Property(e => e.FirstName).HasColumnName("FIRST_NAME");
            entity.Property(e => e.Inactive).HasColumnName("INACTIVE");
            entity.Property(e => e.Initials).HasColumnName("INITIALS");
            entity.Property(e => e.JobTitle).HasColumnName("JOB_TITLE");
            entity.Property(e => e.LastName).HasColumnName("LAST_NAME");
            entity.Property(e => e.MiddleName).HasColumnName("MIDDLE_NAME");
            entity.Property(e => e.Name).HasColumnName("NAME");
            entity.Property(e => e.Party).HasColumnName("PARTY");
            entity.Property(e => e.PartyType).HasColumnName("PARTY_TYPE");
            entity.Property(e => e.PersonId).HasColumnName("PERSON_ID");
            entity.Property(e => e.PictureId)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PICTURE_ID");
            entity.Property(e => e.PictureThumbnailId)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("PICTURE_THUMBNAIL_ID");
            entity.Property(e => e.Prefix).HasColumnName("PREFIX");
            entity.Property(e => e.Protected).HasColumnName("PROTECTED");
            entity.Property(e => e.Rowkey).HasColumnName("ROWKEY");
            entity.Property(e => e.Rowstate).HasColumnName("ROWSTATE");
            entity.Property(e => e.Rowversion).HasColumnName("ROWVERSION");
            entity.Property(e => e.SupplierContact).HasColumnName("SUPPLIER_CONTACT");
            entity.Property(e => e.Title).HasColumnName("TITLE");
            entity.Property(e => e.UserId).HasColumnName("USER_ID");
            entity.Property(e => e.WarrantyRep).HasColumnName("WARRANTY_REP");
        });

        modelBuilder.Entity<TmpInitalIfsvoucherRowsLoad>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpInitalIFSVoucherRowsLoad");

            entity.Property(e => e.Account).HasColumnName("ACCOUNT");
            entity.Property(e => e.AccountDesc).HasColumnName("ACCOUNT_DESC");
            entity.Property(e => e.AccountingPeriod).HasColumnName("ACCOUNTING_PERIOD");
            entity.Property(e => e.AccountingYear).HasColumnName("ACCOUNTING_YEAR");
            entity.Property(e => e.ActivateCode).HasColumnName("ACTIVATE_CODE");
            entity.Property(e => e.AllocLineId).HasColumnName("ALLOC_LINE_ID");
            entity.Property(e => e.AllocationId).HasColumnName("ALLOCATION_ID");
            entity.Property(e => e.Amount).HasColumnName("AMOUNT");
            entity.Property(e => e.AutCodingParentRow).HasColumnName("AUT_CODING_PARENT_ROW");
            entity.Property(e => e.AutCodingRule).HasColumnName("AUT_CODING_RULE");
            entity.Property(e => e.AutCodingSeq).HasColumnName("AUT_CODING_SEQ");
            entity.Property(e => e.AutoTaxVouEntry).HasColumnName("AUTO_TAX_VOU_ENTRY");
            entity.Property(e => e.Autobook).HasColumnName("AUTOBOOK");
            entity.Property(e => e.AutomaticMatchingNo).HasColumnName("AUTOMATIC_MATCHING_NO");
            entity.Property(e => e.CodeB).HasColumnName("CODE_B");
            entity.Property(e => e.CodeBDesc).HasColumnName("CODE_B_DESC");
            entity.Property(e => e.CodeC).HasColumnName("CODE_C");
            entity.Property(e => e.CodeCDesc).HasColumnName("CODE_C_DESC");
            entity.Property(e => e.CodeD).HasColumnName("CODE_D");
            entity.Property(e => e.CodeDDesc).HasColumnName("CODE_D_DESC");
            entity.Property(e => e.CodeE).HasColumnName("CODE_E");
            entity.Property(e => e.CodeEDesc).HasColumnName("CODE_E_DESC");
            entity.Property(e => e.CodeF).HasColumnName("CODE_F");
            entity.Property(e => e.CodeFDesc).HasColumnName("CODE_F_DESC");
            entity.Property(e => e.CodeG).HasColumnName("CODE_G");
            entity.Property(e => e.CodeGDesc).HasColumnName("CODE_G_DESC");
            entity.Property(e => e.CodeH).HasColumnName("CODE_H");
            entity.Property(e => e.CodeHDesc).HasColumnName("CODE_H_DESC");
            entity.Property(e => e.CodeI).HasColumnName("CODE_I");
            entity.Property(e => e.CodeIDesc).HasColumnName("CODE_I_DESC");
            entity.Property(e => e.CodeJ).HasColumnName("CODE_J");
            entity.Property(e => e.CodeJDesc).HasColumnName("CODE_J_DESC");
            entity.Property(e => e.Company).HasColumnName("COMPANY");
            entity.Property(e => e.ConversionFactor).HasColumnName("CONVERSION_FACTOR");
            entity.Property(e => e.Corrected).HasColumnName("CORRECTED");
            entity.Property(e => e.Correction).HasColumnName("CORRECTION");
            entity.Property(e => e.CounterAccount).HasColumnName("COUNTER_ACCOUNT");
            entity.Property(e => e.CreatorDesc).HasColumnName("CREATOR_DESC");
            entity.Property(e => e.CreditAmount).HasColumnName("CREDIT_AMOUNT");
            entity.Property(e => e.CurrAccounting).HasColumnName("CURR_ACCOUNTING");
            entity.Property(e => e.CurrAccountingDb).HasColumnName("CURR_ACCOUNTING_DB");
            entity.Property(e => e.CurrencyAmount).HasColumnName("CURRENCY_AMOUNT");
            entity.Property(e => e.CurrencyCode).HasColumnName("CURRENCY_CODE");
            entity.Property(e => e.CurrencyCreditAmount).HasColumnName("CURRENCY_CREDIT_AMOUNT");
            entity.Property(e => e.CurrencyDebetAmount).HasColumnName("CURRENCY_DEBET_AMOUNT");
            entity.Property(e => e.CurrencyRate).HasColumnName("CURRENCY_RATE");
            entity.Property(e => e.DebetAmount).HasColumnName("DEBET_AMOUNT");
            entity.Property(e => e.DelivTypeId).HasColumnName("DELIV_TYPE_ID");
            entity.Property(e => e.ExcludePeriodicalCap).HasColumnName("EXCLUDE_PERIODICAL_CAP");
            entity.Property(e => e.HeaderCorrection).HasColumnName("HEADER_CORRECTION");
            entity.Property(e => e.InternalAccounting).HasColumnName("INTERNAL_ACCOUNTING");
            entity.Property(e => e.InternalSeqNumber).HasColumnName("INTERNAL_SEQ_NUMBER");
            entity.Property(e => e.IsMultiCompanyVoucher).HasColumnName("IS_MULTI_COMPANY_VOUCHER");
            entity.Property(e => e.JournalId).HasColumnName("JOURNAL_ID");
            entity.Property(e => e.LedgerCountAcc).HasColumnName("LEDGER_COUNT_ACC");
            entity.Property(e => e.MatchingDate).HasColumnName("MATCHING_DATE");
            entity.Property(e => e.MatchingInfo).HasColumnName("MATCHING_INFO");
            entity.Property(e => e.MatchingNo).HasColumnName("MATCHING_NO");
            entity.Property(e => e.MatchingPeriod).HasColumnName("MATCHING_PERIOD");
            entity.Property(e => e.MatchingYear).HasColumnName("MATCHING_YEAR");
            entity.Property(e => e.MpccomAccountingId).HasColumnName("MPCCOM_ACCOUNTING_ID");
            entity.Property(e => e.MultiCompanyAccYear).HasColumnName("MULTI_COMPANY_ACC_YEAR");
            entity.Property(e => e.MultiCompanyId).HasColumnName("MULTI_COMPANY_ID");
            entity.Property(e => e.MultiCompanyRowNo).HasColumnName("MULTI_COMPANY_ROW_NO");
            entity.Property(e => e.MultiCompanyVoucherNo).HasColumnName("MULTI_COMPANY_VOUCHER_NO");
            entity.Property(e => e.MultiCompanyVoucherType).HasColumnName("MULTI_COMPANY_VOUCHER_TYPE");
            entity.Property(e => e.NcfSettlementDate).HasColumnName("NCF_SETTLEMENT_DATE");
            entity.Property(e => e.ObjectId).HasColumnName("OBJECT_ID");
            entity.Property(e => e.OldPeriod).HasColumnName("OLD_PERIOD");
            entity.Property(e => e.OldRowNo).HasColumnName("OLD_ROW_NO");
            entity.Property(e => e.OptionalCode).HasColumnName("OPTIONAL_CODE");
            entity.Property(e => e.OrgParentRow).HasColumnName("ORG_PARENT_ROW");
            entity.Property(e => e.ParallelConversionFactor).HasColumnName("PARALLEL_CONVERSION_FACTOR");
            entity.Property(e => e.ParallelCurrencyRate).HasColumnName("PARALLEL_CURRENCY_RATE");
            entity.Property(e => e.ParentRow).HasColumnName("PARENT_ROW");
            entity.Property(e => e.PartyType).HasColumnName("PARTY_TYPE");
            entity.Property(e => e.PartyTypeId).HasColumnName("PARTY_TYPE_ID");
            entity.Property(e => e.PeriodAllocation).HasColumnName("PERIOD_ALLOCATION");
            entity.Property(e => e.PostingCombinationId).HasColumnName("POSTING_COMBINATION_ID");
            entity.Property(e => e.ProcessCode).HasColumnName("PROCESS_CODE");
            entity.Property(e => e.ProjectAccounting).HasColumnName("PROJECT_ACCOUNTING");
            entity.Property(e => e.ProjectAccountingDb).HasColumnName("PROJECT_ACCOUNTING_DB");
            entity.Property(e => e.ProjectActivityId).HasColumnName("PROJECT_ACTIVITY_ID");
            entity.Property(e => e.ProjectId).HasColumnName("PROJECT_ID");
            entity.Property(e => e.Quantity).HasColumnName("QUANTITY");
            entity.Property(e => e.ReferenceNumber).HasColumnName("REFERENCE_NUMBER");
            entity.Property(e => e.ReferenceRowNo).HasColumnName("REFERENCE_ROW_NO");
            entity.Property(e => e.ReferenceSerie).HasColumnName("REFERENCE_SERIE");
            entity.Property(e => e.RowGroupId).HasColumnName("ROW_GROUP_ID");
            entity.Property(e => e.RowNo).HasColumnName("ROW_NO");
            entity.Property(e => e.SequenceNo).HasColumnName("SEQUENCE_NO");
            entity.Property(e => e.SeveralCountAcc).HasColumnName("SEVERAL_COUNT_ACC");
            entity.Property(e => e.Summerized).HasColumnName("SUMMERIZED");
            entity.Property(e => e.SummerizedDb).HasColumnName("SUMMERIZED_DB");
            entity.Property(e => e.TaxBookId).HasColumnName("TAX_BOOK_ID");
            entity.Property(e => e.TaxSeriesId).HasColumnName("TAX_SERIES_ID");
            entity.Property(e => e.TaxSeriesNo).HasColumnName("TAX_SERIES_NO");
            entity.Property(e => e.Text).HasColumnName("TEXT");
            entity.Property(e => e.ThirdCurrencyAmount).HasColumnName("THIRD_CURRENCY_AMOUNT");
            entity.Property(e => e.ThirdCurrencyCreditAmount).HasColumnName("THIRD_CURRENCY_CREDIT_AMOUNT");
            entity.Property(e => e.ThirdCurrencyDebitAmount).HasColumnName("THIRD_CURRENCY_DEBIT_AMOUNT");
            entity.Property(e => e.TransCode).HasColumnName("TRANS_CODE");
            entity.Property(e => e.TransferId).HasColumnName("TRANSFER_ID");
            entity.Property(e => e.VoucherDate).HasColumnName("VOUCHER_DATE");
            entity.Property(e => e.VoucherNo).HasColumnName("VOUCHER_NO");
            entity.Property(e => e.VoucherType).HasColumnName("VOUCHER_TYPE");
            entity.Property(e => e.YearPeriod).HasColumnName("YEAR_PERIOD");
            entity.Property(e => e.YearPeriodKey).HasColumnName("YEAR_PERIOD_KEY");
        });

        modelBuilder.Entity<TmpInlineTrue1PartNoFlag2024>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpInlineTrue1PartNoFlag2024");

            entity.Property(e => e.Commmodity).HasColumnName("commmodity");
            entity.Property(e => e.Partdesc).HasColumnName("partdesc");
            entity.Property(e => e.Partno).HasColumnName("partno");
        });

        modelBuilder.Entity<TmpInpsubPjqtyVw>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("tmp_inpsub_pjqty_vw");

            entity.Property(e => e.Batchno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Partentityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partentityno");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Partrev)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("partrev");
            entity.Property(e => e.TotOnhand).HasColumnName("tot_onhand");
        });

        modelBuilder.Entity<TmpInpsubvw>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("tmp_inpsubvw");

            entity.Property(e => e.Partentityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partentityno");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Partrev)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("partrev");
            entity.Property(e => e.TotOnhand).HasColumnName("tot_onhand");
        });

        modelBuilder.Entity<TmpInterCompanyShipping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpInterCompanyShipping");

            entity.Property(e => e.AverageOfRentalValueUsd).HasColumnName("Average of RentalValueUSD ");
            entity.Property(e => e.AverageOfWeightLbs).HasColumnName("Average of weight (lbs)");
            entity.Property(e => e.CostOfGroundFrieght).HasColumnName("Cost Of Ground Frieght");
            entity.Property(e => e.CostOfUnitOnAirFreight).HasColumnName("Cost Of Unit On Air Freight ");
            entity.Property(e => e.CostOfUnitOnSeaCan).HasColumnName("Cost Of Unit On Sea Can ");
            entity.Property(e => e.PartDescription).HasColumnName("part description");
            entity.Property(e => e.Partno).HasColumnName("partno");
            entity.Property(e => e.SumOfQty).HasColumnName("Sum of Qty");
            entity.Property(e => e.TotalValueShipped).HasColumnName("Total Value Shipped");
            entity.Property(e => e.TotalWeightShipped).HasColumnName("Total Weight Shipped");
        });

        modelBuilder.Entity<TmpInterCompanyShippingFedExpart>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpInterCompanyShippingFedEXParts");

            entity.Property(e => e.AverageOfRentalValueUsd).HasColumnName("Average of RentalValueUSD ");
            entity.Property(e => e.AverageOfWeightLbs).HasColumnName("Average of weight (lbs)");
            entity.Property(e => e.FedexInt).HasColumnName("Fedex Int");
            entity.Property(e => e.FedexPriorityOvernight).HasColumnName("Fedex Priority Overnight");
            entity.Property(e => e.PartDescription).HasColumnName("part description");
            entity.Property(e => e.Partno).HasColumnName("partno");
            entity.Property(e => e.SumOfQty).HasColumnName("Sum of Qty");
            entity.Property(e => e.TotalValueShipped).HasColumnName("Total Value Shipped ");
            entity.Property(e => e.TotalWeightShipped).HasColumnName("Total Weight Shipped");
        });

        modelBuilder.Entity<TmpIsolvedActiveEmployeeDatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpIsolvedActiveEmployeeData");

            entity.Property(e => e.EmailAddress).HasColumnName("emailAddress");
            entity.Property(e => e.EmployeeNumber).HasColumnName("employeeNumber");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.LegalCode).HasColumnName("legalCode");
            entity.Property(e => e.PayGroup).HasColumnName("payGroup");
        });

        modelBuilder.Entity<TmpJobTypes20220105>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpJobTypes20220105");

            entity.Property(e => e.Avgamt).HasColumnName("avgamt");
            entity.Property(e => e.Hours).HasColumnName("hours");
            entity.Property(e => e.IsActive).HasColumnName("isActive");
            entity.Property(e => e.IsEngineerInCharge).HasColumnName("isEngineerInCharge");
            entity.Property(e => e.IsGigMe).HasColumnName("isGigMe");
            entity.Property(e => e.IsQualification).HasColumnName("is_qualification");
            entity.Property(e => e.Jobdesc).HasColumnName("jobdesc");
            entity.Property(e => e.Jobtype).HasColumnName("jobtype");
        });

        modelBuilder.Entity<TmpJpjBarcodeConflictsTestData20161223>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TmpJpj_BarcodeConflictsTestData20161223");

            entity.Property(e => e.Barcode)
                .HasMaxLength(255)
                .HasColumnName("barcode");
            entity.Property(e => e.Ejowner)
                .HasMaxLength(255)
                .HasColumnName("EJOwner");
            entity.Property(e => e.EjparentBarcode)
                .HasMaxLength(255)
                .HasColumnName("EJParentBarcode");
            entity.Property(e => e.EjparentPartNo)
                .HasMaxLength(255)
                .HasColumnName("EJParentPartNo");
            entity.Property(e => e.EjpartDesc)
                .HasMaxLength(255)
                .HasColumnName("EJPartDesc");
            entity.Property(e => e.EjpartNo)
                .HasMaxLength(255)
                .HasColumnName("EJPartNo");
            entity.Property(e => e.Ejproject)
                .HasMaxLength(255)
                .HasColumnName("EJProject");
            entity.Property(e => e.Ejreceipt)
                .HasMaxLength(255)
                .HasColumnName("EJReceipt");
            entity.Property(e => e.EjserialNo)
                .HasMaxLength(255)
                .HasColumnName("EJSerialNo");
            entity.Property(e => e.Ejwarehouse)
                .HasMaxLength(255)
                .HasColumnName("EJWarehouse");
            entity.Property(e => e.Ejworkshop).HasColumnName("EJWorkshop");
            entity.Property(e => e.Fbld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FBld");
            entity.Property(e => e.Flease)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FLease");
            entity.Property(e => e.Fowner)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FOwner");
            entity.Property(e => e.FparentBarcode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FParentBarcode");
            entity.Property(e => e.FparentPartNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FParentPartNo");
            entity.Property(e => e.FpartDesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("FPartDesc");
            entity.Property(e => e.Fpartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FPartno");
            entity.Property(e => e.Fproject)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FProject");
            entity.Property(e => e.Freceipt)
                .HasColumnType("datetime")
                .HasColumnName("FReceipt");
            entity.Property(e => e.Frev)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FRev");
            entity.Property(e => e.FserialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("FSerialNo");
            entity.Property(e => e.InventoryNo)
                .HasMaxLength(255)
                .HasColumnName("Inventory No#");
            entity.Property(e => e.Qty).HasColumnName("qty");
        });

        modelBuilder.Entity<TmpJpjCategoriesMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TmpJpj_Categories_Mapping");

            entity.Property(e => e.Category)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CommodityCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpJpjClairDevice>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TmpJpj_ClairDevices");

            entity.Property(e => e.Barcode).HasMaxLength(255);
            entity.Property(e => e.Comments).HasMaxLength(255);
            entity.Property(e => e.DeviceNo)
                .HasMaxLength(255)
                .HasColumnName("Device No#");
            entity.Property(e => e.InventoryNo)
                .HasMaxLength(255)
                .HasColumnName("Inventory No#");
            entity.Property(e => e.ItemName)
                .HasMaxLength(255)
                .HasColumnName("Item Name");
            entity.Property(e => e.ItemNo)
                .HasMaxLength(255)
                .HasColumnName("Item No#");
            entity.Property(e => e.JobNo)
                .HasMaxLength(255)
                .HasColumnName("Job No#");
            entity.Property(e => e.NonDevice)
                .HasMaxLength(255)
                .HasColumnName("Non Device");
            entity.Property(e => e.Owner).HasMaxLength(255);
            entity.Property(e => e.ParentBarcode)
                .HasMaxLength(255)
                .HasColumnName("Parent Barcode");
            entity.Property(e => e.ParentDeviceNo)
                .HasMaxLength(255)
                .HasColumnName("Parent Device No#");
            entity.Property(e => e.ParentItemNo)
                .HasMaxLength(255)
                .HasColumnName("Parent Item No#");
            entity.Property(e => e.PurchaseDate)
                .HasMaxLength(255)
                .HasColumnName("Purchase Date");
            entity.Property(e => e.PurchasePrice)
                .HasColumnType("money")
                .HasColumnName("Purchase Price");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(255)
                .HasColumnName("Serial No#");
            entity.Property(e => e.Site).HasMaxLength(255);
            entity.Property(e => e.WorkshopNo)
                .HasMaxLength(255)
                .HasColumnName("Workshop No#");
        });

        modelBuilder.Entity<TmpJpjCustomer>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TmpJpj_Customers");

            entity.Property(e => e.Accountno)
                .HasMaxLength(255)
                .HasColumnName("accountno");
            entity.Property(e => e.Activeind)
                .HasMaxLength(255)
                .HasColumnName("activeind");
            entity.Property(e => e.Activeind1)
                .HasMaxLength(255)
                .HasColumnName("activeind1");
            entity.Property(e => e.Addr1)
                .HasMaxLength(255)
                .HasColumnName("addr1");
            entity.Property(e => e.Addr2)
                .HasMaxLength(255)
                .HasColumnName("addr2");
            entity.Property(e => e.Addr3)
                .HasMaxLength(255)
                .HasColumnName("addr3");
            entity.Property(e => e.AddressId).HasColumnName("addressID");
            entity.Property(e => e.Attention)
                .HasMaxLength(255)
                .HasColumnName("attention");
            entity.Property(e => e.BillToName)
                .HasMaxLength(255)
                .HasColumnName("bill_to_name");
            entity.Property(e => e.Cellphone)
                .HasMaxLength(255)
                .HasColumnName("cellphone");
            entity.Property(e => e.City)
                .HasMaxLength(255)
                .HasColumnName("city");
            entity.Property(e => e.Contact)
                .HasMaxLength(255)
                .HasColumnName("contact");
            entity.Property(e => e.Country)
                .HasMaxLength(255)
                .HasColumnName("country");
            entity.Property(e => e.County)
                .HasMaxLength(255)
                .HasColumnName("county");
            entity.Property(e => e.Currencycd)
                .HasMaxLength(255)
                .HasColumnName("currencycd");
            entity.Property(e => e.CustName)
                .HasMaxLength(255)
                .HasColumnName("cust_name");
            entity.Property(e => e.Custno).HasColumnName("custno");
            entity.Property(e => e.Email)
                .HasMaxLength(255)
                .HasColumnName("email");
            entity.Property(e => e.Email2)
                .HasMaxLength(255)
                .HasColumnName("email2");
            entity.Property(e => e.Enterdate)
                .HasMaxLength(255)
                .HasColumnName("enterdate");
            entity.Property(e => e.Ext)
                .HasMaxLength(255)
                .HasColumnName("ext");
            entity.Property(e => e.F31).HasMaxLength(255);
            entity.Property(e => e.F32).HasMaxLength(255);
            entity.Property(e => e.F33).HasMaxLength(255);
            entity.Property(e => e.F34).HasMaxLength(255);
            entity.Property(e => e.F35).HasMaxLength(255);
            entity.Property(e => e.F36).HasMaxLength(255);
            entity.Property(e => e.F37).HasMaxLength(255);
            entity.Property(e => e.F38).HasMaxLength(255);
            entity.Property(e => e.F39).HasMaxLength(255);
            entity.Property(e => e.F40).HasMaxLength(255);
            entity.Property(e => e.F41).HasMaxLength(255);
            entity.Property(e => e.F42).HasMaxLength(255);
            entity.Property(e => e.F43).HasMaxLength(255);
            entity.Property(e => e.F44).HasMaxLength(255);
            entity.Property(e => e.F45).HasMaxLength(255);
            entity.Property(e => e.Fax)
                .HasMaxLength(255)
                .HasColumnName("fax");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("notes");
            entity.Property(e => e.Officephone)
                .HasMaxLength(255)
                .HasColumnName("officephone");
            entity.Property(e => e.Paytermscd)
                .HasMaxLength(255)
                .HasColumnName("paytermscd");
            entity.Property(e => e.State)
                .HasMaxLength(255)
                .HasColumnName("state");
            entity.Property(e => e.Taxexempt)
                .HasMaxLength(255)
                .HasColumnName("taxexempt");
            entity.Property(e => e.TaxexemptNo)
                .HasMaxLength(255)
                .HasColumnName("taxexempt_no");
            entity.Property(e => e.Type).HasMaxLength(255);
            entity.Property(e => e.Zip).HasColumnName("zip");
        });

        modelBuilder.Entity<TmpJpjCustomerImport20170828>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TmpJpjCustomerImport20170828");

            entity.Property(e => e.Addr1)
                .HasMaxLength(255)
                .HasColumnName("addr1");
            entity.Property(e => e.Addr2)
                .HasMaxLength(255)
                .HasColumnName("addr2");
            entity.Property(e => e.Addr3)
                .HasMaxLength(255)
                .HasColumnName("addr3");
            entity.Property(e => e.AddressId).HasColumnName("addressID");
            entity.Property(e => e.Attention)
                .HasMaxLength(255)
                .HasColumnName("attention");
            entity.Property(e => e.BillToName)
                .HasMaxLength(255)
                .HasColumnName("bill_to_name");
            entity.Property(e => e.Cellphone)
                .HasMaxLength(255)
                .HasColumnName("cellphone");
            entity.Property(e => e.City)
                .HasMaxLength(255)
                .HasColumnName("city");
            entity.Property(e => e.Contact)
                .HasMaxLength(255)
                .HasColumnName("contact");
            entity.Property(e => e.Country)
                .HasMaxLength(255)
                .HasColumnName("country");
            entity.Property(e => e.Currencycd)
                .HasMaxLength(255)
                .HasColumnName("currencycd");
            entity.Property(e => e.CustName)
                .HasMaxLength(255)
                .HasColumnName("cust_name");
            entity.Property(e => e.Custno).HasColumnName("custno");
            entity.Property(e => e.Email)
                .HasMaxLength(255)
                .HasColumnName("email");
            entity.Property(e => e.Email2)
                .HasMaxLength(255)
                .HasColumnName("email2");
            entity.Property(e => e.Paytermscd)
                .HasMaxLength(255)
                .HasColumnName("paytermscd");
            entity.Property(e => e.State)
                .HasMaxLength(255)
                .HasColumnName("state");
            entity.Property(e => e.Type).HasMaxLength(255);
            entity.Property(e => e.Zip).HasColumnName("zip");
        });

        modelBuilder.Entity<TmpJpjCustomerName>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpJpjCustomerNames");

            entity.Property(e => e.Customer)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Reference)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpJpjDailyPriceOverride>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TmpJpj_Daily_Price_Override");

            entity.Property(e => e.Dailyprice).HasColumnName("dailyprice");
            entity.Property(e => e.Partdesc)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
        });

        modelBuilder.Entity<TmpJpjDevice>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TmpJpj_Devices");

            entity.Property(e => e.Barcode)
                .HasMaxLength(255)
                .HasColumnName("barcode");
            entity.Property(e => e.InventoryNo)
                .HasMaxLength(255)
                .HasColumnName("Inventory No#");
            entity.Property(e => e.ItemName)
                .HasMaxLength(255)
                .HasColumnName("Item Name");
            entity.Property(e => e.Owner)
                .HasMaxLength(255)
                .HasColumnName("owner");
            entity.Property(e => e.ParentBarcode)
                .HasMaxLength(255)
                .HasColumnName("parent_barcode");
            entity.Property(e => e.ParentPartno)
                .HasMaxLength(255)
                .HasColumnName("parent_partno");
            entity.Property(e => e.Partno)
                .HasMaxLength(255)
                .HasColumnName("partno");
            entity.Property(e => e.Projectno)
                .HasMaxLength(255)
                .HasColumnName("projectno");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.ReceiptDate)
                .HasMaxLength(255)
                .HasColumnName("receipt_date");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(255)
                .HasColumnName("serial_no");
            entity.Property(e => e.Warehouse)
                .HasMaxLength(255)
                .HasColumnName("warehouse");
            entity.Property(e => e.WorkshopNo).HasColumnName("Workshop No#");
        });

        modelBuilder.Entity<TmpJpjEquipmentLocationsMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TmpJpj_EquipmentLocations_Mapping");

            entity.Property(e => e.EquipmentLocations)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.IdStoragelocation).HasColumnName("id_storagelocation");
        });

        modelBuilder.Entity<TmpJpjInventoryImported>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TmpJpj_InventoryImported");

            entity.Property(e => e.Area)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("area");
            entity.Property(e => e.Batchno)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(255)
                .HasColumnName("dept");
            entity.Property(e => e.Heldinwarehouse).HasColumnName("heldinwarehouse");
            entity.Property(e => e.ImportPartNo).HasMaxLength(4000);
            entity.Property(e => e.Parentpartno)
                .HasMaxLength(4000)
                .HasColumnName("parentpartno");
            entity.Property(e => e.ParentserialNo)
                .HasMaxLength(255)
                .HasColumnName("parentserial_no");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(255)
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.ReceiptDate).HasColumnName("receipt_date");
            entity.Property(e => e.Row)
                .HasMaxLength(20)
                .HasColumnName("_row");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(255)
                .HasColumnName("serial_no");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(255)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<TmpJpjInventoryImportedLeftsRight>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TmpJpj_InventoryImportedLeftsRights");

            entity.Property(e => e.Area)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("area");
            entity.Property(e => e.Batchno)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(255)
                .HasColumnName("dept");
            entity.Property(e => e.Heldinwarehouse).HasColumnName("heldinwarehouse");
            entity.Property(e => e.ImportPartNo).HasMaxLength(4000);
            entity.Property(e => e.Parentpartno)
                .HasMaxLength(4000)
                .HasColumnName("parentpartno");
            entity.Property(e => e.ParentserialNo)
                .HasMaxLength(255)
                .HasColumnName("parentserial_no");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(255)
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.ReceiptDate).HasColumnName("receipt_date");
            entity.Property(e => e.Row)
                .HasMaxLength(20)
                .HasColumnName("_row");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(255)
                .HasColumnName("serial_no");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(255)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<TmpJpjInventoryImportedMium>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TmpJpj_InventoryImported_MIA");

            entity.Property(e => e.Area)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("area");
            entity.Property(e => e.Batchno)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(255)
                .HasColumnName("dept");
            entity.Property(e => e.Heldinwarehouse).HasColumnName("heldinwarehouse");
            entity.Property(e => e.ImportPartNo).HasMaxLength(4000);
            entity.Property(e => e.Parentpartno)
                .HasMaxLength(4000)
                .HasColumnName("parentpartno");
            entity.Property(e => e.ParentserialNo)
                .HasMaxLength(255)
                .HasColumnName("parentserial_no");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(255)
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.ReceiptDate).HasColumnName("receipt_date");
            entity.Property(e => e.Row)
                .HasMaxLength(20)
                .HasColumnName("_row");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(255)
                .HasColumnName("serial_no");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(255)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<TmpJpjItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TmpJpj_Items");

            entity.Property(e => e.AdditionalTechnicalSpecificationsNotes)
                .HasMaxLength(255)
                .HasColumnName("Additional Technical Specifications / Notes");
            entity.Property(e => e.Category).HasMaxLength(255);
            entity.Property(e => e.Country).HasMaxLength(255);
            entity.Property(e => e.DailyPrice).HasColumnName("Daily Price");
            entity.Property(e => e.LocationCode).HasMaxLength(255);
            entity.Property(e => e.Package).HasMaxLength(255);
            entity.Property(e => e.PartImageFilePath).HasMaxLength(255);
            entity.Property(e => e.Partno)
                .HasMaxLength(255)
                .HasColumnName("partno");
            entity.Property(e => e.RackBays)
                .HasMaxLength(255)
                .HasColumnName("rack_bays");
            entity.Property(e => e.RackUnits)
                .HasMaxLength(255)
                .HasColumnName("rack_units");
            entity.Property(e => e.SalesDescription).HasMaxLength(255);
            entity.Property(e => e.SubCategory)
                .HasMaxLength(255)
                .HasColumnName("Sub Category");
            entity.Property(e => e.UnitValue).HasColumnType("money");
            entity.Property(e => e.WeeklyPrice).HasColumnName("Weekly Price");
            entity.Property(e => e.Weight).HasColumnName("weight");
        });

        modelBuilder.Entity<TmpJpjItemsMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TmpJpj_Items_Mapping");

            entity.Property(e => e.Ejpartno)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("EJpartno");
            entity.Property(e => e.Fpartno)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpJpjJfmdevice>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TmpJpj_JFMDevices");

            entity.Property(e => e.Barcode)
                .HasMaxLength(255)
                .HasColumnName("barcode");
            entity.Property(e => e.InventoryNo)
                .HasMaxLength(255)
                .HasColumnName("Inventory No#");
            entity.Property(e => e.Owner)
                .HasMaxLength(255)
                .HasColumnName("owner");
            entity.Property(e => e.ParentBarcode)
                .HasMaxLength(255)
                .HasColumnName("parent_barcode");
            entity.Property(e => e.ParentPartno)
                .HasMaxLength(255)
                .HasColumnName("parent_partno");
            entity.Property(e => e.Partno)
                .HasMaxLength(255)
                .HasColumnName("partno");
            entity.Property(e => e.Projectno)
                .HasMaxLength(255)
                .HasColumnName("projectno");
            entity.Property(e => e.Qty)
                .HasMaxLength(255)
                .HasColumnName("qty");
            entity.Property(e => e.ReceiptDate)
                .HasMaxLength(255)
                .HasColumnName("receipt_date");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(255)
                .HasColumnName("serial_no");
            entity.Property(e => e.Warehouse)
                .HasMaxLength(255)
                .HasColumnName("warehouse");
            entity.Property(e => e.WorkshopNo)
                .HasMaxLength(255)
                .HasColumnName("Workshop No#");
        });

        modelBuilder.Entity<TmpJpjJfmitem>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TmpJpj_JFMItems");

            entity.Property(e => e.AdditionalTechnicalSpecificationsNotes).HasColumnName("Additional Technical Specifications / Notes");
            entity.Property(e => e.Category).HasMaxLength(255);
            entity.Property(e => e.Country).HasMaxLength(255);
            entity.Property(e => e.DailyPrice1).HasColumnName("Daily Price");
            entity.Property(e => e.Height).HasMaxLength(255);
            entity.Property(e => e.Length).HasMaxLength(255);
            entity.Property(e => e.LocationCode).HasMaxLength(255);
            entity.Property(e => e.Package).HasMaxLength(255);
            entity.Property(e => e.ParentPart).HasMaxLength(255);
            entity.Property(e => e.Partno)
                .HasMaxLength(255)
                .HasColumnName("partno");
            entity.Property(e => e.RackBays)
                .HasMaxLength(255)
                .HasColumnName("rack_bays");
            entity.Property(e => e.RackUnits)
                .HasMaxLength(255)
                .HasColumnName("rack_units");
            entity.Property(e => e.SalesDescription).HasMaxLength(255);
            entity.Property(e => e.SubCategory)
                .HasMaxLength(255)
                .HasColumnName("Sub Category");
            entity.Property(e => e.WeeklyPrice).HasColumnName("Weekly Price");
            entity.Property(e => e.Weight).HasColumnName("weight");
            entity.Property(e => e.Width).HasMaxLength(255);
        });

        modelBuilder.Entity<TmpJpjJob>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TmpJpj_Jobs");

            entity.Property(e => e.AcctMgr).HasMaxLength(255);
            entity.Property(e => e.Calender).HasMaxLength(255);
            entity.Property(e => e.Currency).HasMaxLength(255);
            entity.Property(e => e.CustomerNo).HasMaxLength(255);
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.LegName)
                .HasMaxLength(255)
                .HasColumnName("Leg Name");
            entity.Property(e => e.LegNumber)
                .HasMaxLength(255)
                .HasColumnName("Leg Number");
            entity.Property(e => e.Notes).HasMaxLength(255);
            entity.Property(e => e.OpsMgr).HasMaxLength(255);
            entity.Property(e => e.ProjectDesc).HasMaxLength(255);
            entity.Property(e => e.ProjectNo).HasMaxLength(255);
            entity.Property(e => e.ProjectType)
                .HasMaxLength(255)
                .HasColumnName("Project Type");
            entity.Property(e => e.ReturnWarehouse).HasMaxLength(255);
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.StatusCode).HasMaxLength(255);
            entity.Property(e => e.Warehouse).HasMaxLength(255);
        });

        modelBuilder.Entity<TmpJpjJobStatusMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TmpJpj_JobStatus_Mapping");

            entity.Property(e => e.StatusCode)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.StatusCodeKey)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpJpjJobTypeMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TmpJpj_JobType_Mapping");

            entity.Property(e => e.EjjobDesc)
                .HasMaxLength(50)
                .HasColumnName("EJJobDesc");
            entity.Property(e => e.FjobType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FJobType");
        });

        modelBuilder.Entity<TmpJpjJobs20161228>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TmpJpj_Jobs20161228");

            entity.Property(e => e.AcctMgr).HasMaxLength(255);
            entity.Property(e => e.Calender).HasMaxLength(255);
            entity.Property(e => e.Currency).HasMaxLength(255);
            entity.Property(e => e.CustomerNo).HasMaxLength(255);
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.LegName)
                .HasMaxLength(255)
                .HasColumnName("Leg Name");
            entity.Property(e => e.LegNumber)
                .HasMaxLength(255)
                .HasColumnName("Leg Number");
            entity.Property(e => e.Notes).HasMaxLength(255);
            entity.Property(e => e.OpsMgr).HasMaxLength(255);
            entity.Property(e => e.ProjectDesc).HasMaxLength(255);
            entity.Property(e => e.ProjectNo).HasMaxLength(255);
            entity.Property(e => e.ProjectType)
                .HasMaxLength(255)
                .HasColumnName("Project Type");
            entity.Property(e => e.ReturnWarehouse).HasMaxLength(255);
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.StatusCode).HasMaxLength(255);
            entity.Property(e => e.Warehouse).HasMaxLength(255);
        });

        modelBuilder.Entity<TmpJpjJobsBad>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TmpJpj_Jobs_BAD");

            entity.Property(e => e.AcctMgr).HasMaxLength(255);
            entity.Property(e => e.Calender).HasMaxLength(255);
            entity.Property(e => e.Currency).HasMaxLength(255);
            entity.Property(e => e.CustomerNo).HasMaxLength(255);
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.LegName)
                .HasMaxLength(255)
                .HasColumnName("Leg Name");
            entity.Property(e => e.LegNumber)
                .HasMaxLength(255)
                .HasColumnName("Leg Number");
            entity.Property(e => e.Notes).HasMaxLength(255);
            entity.Property(e => e.OpsMgr).HasMaxLength(255);
            entity.Property(e => e.ProjectDesc).HasMaxLength(255);
            entity.Property(e => e.ProjectNo).HasMaxLength(255);
            entity.Property(e => e.ProjectType)
                .HasMaxLength(255)
                .HasColumnName("Project Type");
            entity.Property(e => e.ReturnWarehouse).HasMaxLength(255);
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.StatusCode).HasMaxLength(255);
            entity.Property(e => e.Warehouse).HasMaxLength(255);
        });

        modelBuilder.Entity<TmpJpjLinkedInventoryToMoveToStagingArea>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TmpJpj_Linked_InventoryToMoveToStagingArea");

            entity.Property(e => e.Childpartdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("childpartdesc");
            entity.Property(e => e.Childpartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("childpartno");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.ParentQty).HasColumnName("parentQty");
            entity.Property(e => e.Parentpartdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("parentpartdesc");
            entity.Property(e => e.Parentpartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("parentpartno");
            entity.Property(e => e.QtyToMove).HasColumnName("qtyToMove");
            entity.Property(e => e.Warehouse)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpJpjLinkedPartsImported>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpJpj_Linked_Parts_Imported");

            entity.Property(e => e.CPartNumber)
                .HasMaxLength(4000)
                .HasColumnName("cPartNumber");
            entity.Property(e => e.Factor).HasColumnType("numeric(18, 8)");
            entity.Property(e => e.IdRefernceType).HasColumnName("id_RefernceType");
            entity.Property(e => e.PPartNumber)
                .HasMaxLength(4000)
                .HasColumnName("pPartNumber");
        });

        modelBuilder.Entity<TmpJpjMoveNonbarcodedLinkedPart>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpJpjMoveNonbarcodedLinkedParts");

            entity.Property(e => e.ChildPartNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ParentPartNo)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpJpjPartsListDataFromAvgChildBarcodeQty>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpJpj_PartsList_Data_From_Avg_Child_Barcode_Qtys");

            entity.Property(e => e.ChildPartDesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("childPartDesc");
            entity.Property(e => e.EjavgFactor).HasColumnName("EJAvgFactor");
            entity.Property(e => e.FcurrentFactor).HasColumnName("FCurrentFactor");
            entity.Property(e => e.ParentPartDesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("parentPartDesc");
            entity.Property(e => e.Parentpartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("parentpartno");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
        });

        modelBuilder.Entity<TmpJpjProposalTypeMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TmpJpj_ProposalType_Mapping");

            entity.Property(e => e.FpropType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FPropType");
            entity.Property(e => e.ProjectType)
                .HasMaxLength(255)
                .HasColumnName("Project Type");
        });

        modelBuilder.Entity<TmpJpjStaff>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TmpJpj_Staff");

            entity.Property(e => e.Addr1)
                .HasMaxLength(255)
                .HasColumnName("addr1");
            entity.Property(e => e.Addr2)
                .HasMaxLength(255)
                .HasColumnName("addr2");
            entity.Property(e => e.Addr3)
                .HasMaxLength(255)
                .HasColumnName("addr3");
            entity.Property(e => e.Airport)
                .HasMaxLength(255)
                .HasColumnName("airport");
            entity.Property(e => e.AlienExpiredate)
                .HasMaxLength(255)
                .HasColumnName("alien_expiredate");
            entity.Property(e => e.Alienno)
                .HasMaxLength(255)
                .HasColumnName("alienno");
            entity.Property(e => e.Birthdate)
                .HasColumnType("datetime")
                .HasColumnName("birthdate");
            entity.Property(e => e.Birthplace)
                .HasMaxLength(255)
                .HasColumnName("birthplace");
            entity.Property(e => e.Cellphone)
                .HasMaxLength(255)
                .HasColumnName("cellphone");
            entity.Property(e => e.City)
                .HasMaxLength(255)
                .HasColumnName("city");
            entity.Property(e => e.Countrycode)
                .HasMaxLength(255)
                .HasColumnName("countrycode");
            entity.Property(e => e.Dietary)
                .HasMaxLength(255)
                .HasColumnName("dietary");
            entity.Property(e => e.DriversLicense).HasMaxLength(255);
            entity.Property(e => e.DriversLicenseExpire).HasMaxLength(255);
            entity.Property(e => e.DriversLicenseState).HasMaxLength(255);
            entity.Property(e => e.Email)
                .HasMaxLength(255)
                .HasColumnName("email");
            entity.Property(e => e.EmergencyName)
                .HasMaxLength(255)
                .HasColumnName("emergency_name");
            entity.Property(e => e.EmergencyPhone1)
                .HasMaxLength(255)
                .HasColumnName("emergency_phone1");
            entity.Property(e => e.EmergencyPhone2)
                .HasMaxLength(255)
                .HasColumnName("emergency_phone2");
            entity.Property(e => e.EmergencyRelation)
                .HasMaxLength(255)
                .HasColumnName("emergency_relation");
            entity.Property(e => e.EmpDriversLicenseScan)
                .HasMaxLength(255)
                .HasColumnName("empDriversLicenseScan");
            entity.Property(e => e.EmpHeadShotFilePath)
                .HasMaxLength(255)
                .HasColumnName("empHeadShotFilePath");
            entity.Property(e => e.EmpPassportScanFilePath)
                .HasMaxLength(255)
                .HasColumnName("empPassportScanFilePath");
            entity.Property(e => e.Empdivision)
                .HasMaxLength(255)
                .HasColumnName("empdivision");
            entity.Property(e => e.Empno).HasColumnName("empno");
            entity.Property(e => e.Empstatus)
                .HasMaxLength(255)
                .HasColumnName("empstatus");
            entity.Property(e => e.ExpireDate)
                .HasMaxLength(255)
                .HasColumnName("expire_date");
            entity.Property(e => e.Fax)
                .HasMaxLength(255)
                .HasColumnName("fax");
            entity.Property(e => e.Firstname)
                .HasMaxLength(255)
                .HasColumnName("firstname");
            entity.Property(e => e.Hiredate)
                .HasColumnType("datetime")
                .HasColumnName("hiredate");
            entity.Property(e => e.Homephone)
                .HasMaxLength(255)
                .HasColumnName("homephone");
            entity.Property(e => e.Issuecountry)
                .HasMaxLength(255)
                .HasColumnName("issuecountry");
            entity.Property(e => e.Issuedate)
                .HasMaxLength(255)
                .HasColumnName("issuedate");
            entity.Property(e => e.Issueplace)
                .HasMaxLength(255)
                .HasColumnName("issueplace");
            entity.Property(e => e.Jobtype)
                .HasMaxLength(255)
                .HasColumnName("jobtype");
            entity.Property(e => e.LastPayRaiseDate).HasMaxLength(255);
            entity.Property(e => e.Lastname)
                .HasMaxLength(255)
                .HasColumnName("lastname");
            entity.Property(e => e.Married).HasMaxLength(255);
            entity.Property(e => e.Midname)
                .HasMaxLength(255)
                .HasColumnName("midname");
            entity.Property(e => e.Nationality)
                .HasMaxLength(255)
                .HasColumnName("nationality");
            entity.Property(e => e.Nickname)
                .HasMaxLength(255)
                .HasColumnName("nickname");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("notes");
            entity.Property(e => e.OfficeDirectPhone).HasMaxLength(255);
            entity.Property(e => e.OtherEcontact)
                .HasMaxLength(255)
                .HasColumnName("OtherEContact");
            entity.Property(e => e.Passportno)
                .HasMaxLength(255)
                .HasColumnName("passportno");
            entity.Property(e => e.Ref4)
                .HasMaxLength(255)
                .HasColumnName("ref4");
            entity.Property(e => e.Smoker)
                .HasMaxLength(255)
                .HasColumnName("smoker");
            entity.Property(e => e.Spouse)
                .HasMaxLength(255)
                .HasColumnName("spouse");
            entity.Property(e => e.State)
                .HasMaxLength(255)
                .HasColumnName("state");
            entity.Property(e => e.Termdate)
                .HasMaxLength(255)
                .HasColumnName("termdate");
            entity.Property(e => e.Travelrestrictions)
                .HasMaxLength(255)
                .HasColumnName("travelrestrictions");
            entity.Property(e => e.UserName)
                .HasMaxLength(255)
                .HasColumnName("user_name");
            entity.Property(e => e.WarehouseCode).HasMaxLength(255);
            entity.Property(e => e.Zip).HasColumnName("zip");
        });

        modelBuilder.Entity<TmpJpjSupplierName>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpJpjSupplierNames");

            entity.Property(e => e.Reference)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Supplier)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpJpjUserPhoneExt>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TmpJpj_User_PhoneExt");

            entity.Property(e => e.Ext)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ext");
            entity.Property(e => e.Username)
                .HasMaxLength(55)
                .IsUnicode(false)
                .HasColumnName("username");
        });

        modelBuilder.Entity<TmpJpjVendor>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TmpJpj_Vendors");

            entity.Property(e => e.Accountno)
                .HasMaxLength(255)
                .HasColumnName("accountno");
            entity.Property(e => e.Activeind)
                .HasMaxLength(255)
                .HasColumnName("activeind");
            entity.Property(e => e.Activeind1)
                .HasMaxLength(255)
                .HasColumnName("activeind1");
            entity.Property(e => e.Addr1)
                .HasMaxLength(255)
                .HasColumnName("addr1");
            entity.Property(e => e.Addr2)
                .HasMaxLength(255)
                .HasColumnName("addr2");
            entity.Property(e => e.Addr3)
                .HasMaxLength(255)
                .HasColumnName("addr3");
            entity.Property(e => e.AddressId).HasColumnName("addressID");
            entity.Property(e => e.Attention)
                .HasMaxLength(255)
                .HasColumnName("attention");
            entity.Property(e => e.BillToName)
                .HasMaxLength(255)
                .HasColumnName("bill_to_name");
            entity.Property(e => e.Cellphone)
                .HasMaxLength(255)
                .HasColumnName("cellphone");
            entity.Property(e => e.City)
                .HasMaxLength(255)
                .HasColumnName("city");
            entity.Property(e => e.Contact)
                .HasMaxLength(255)
                .HasColumnName("contact");
            entity.Property(e => e.Country)
                .HasMaxLength(255)
                .HasColumnName("country");
            entity.Property(e => e.County)
                .HasMaxLength(255)
                .HasColumnName("county");
            entity.Property(e => e.Currencycd)
                .HasMaxLength(255)
                .HasColumnName("currencycd");
            entity.Property(e => e.CustName)
                .HasMaxLength(255)
                .HasColumnName("cust_name");
            entity.Property(e => e.Custno).HasColumnName("custno");
            entity.Property(e => e.Email)
                .HasMaxLength(255)
                .HasColumnName("email");
            entity.Property(e => e.Email2)
                .HasMaxLength(255)
                .HasColumnName("email2");
            entity.Property(e => e.Enterdate)
                .HasMaxLength(255)
                .HasColumnName("enterdate");
            entity.Property(e => e.Ext)
                .HasMaxLength(255)
                .HasColumnName("ext");
            entity.Property(e => e.F31).HasMaxLength(255);
            entity.Property(e => e.F32).HasMaxLength(255);
            entity.Property(e => e.F33).HasMaxLength(255);
            entity.Property(e => e.F34).HasMaxLength(255);
            entity.Property(e => e.F35).HasMaxLength(255);
            entity.Property(e => e.F36).HasMaxLength(255);
            entity.Property(e => e.F37).HasMaxLength(255);
            entity.Property(e => e.F38).HasMaxLength(255);
            entity.Property(e => e.F39).HasMaxLength(255);
            entity.Property(e => e.F40).HasMaxLength(255);
            entity.Property(e => e.F41).HasMaxLength(255);
            entity.Property(e => e.F42).HasMaxLength(255);
            entity.Property(e => e.F43).HasMaxLength(255);
            entity.Property(e => e.F44).HasMaxLength(255);
            entity.Property(e => e.Fax)
                .HasMaxLength(255)
                .HasColumnName("fax");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .HasColumnName("notes");
            entity.Property(e => e.Officephone)
                .HasMaxLength(255)
                .HasColumnName("officephone");
            entity.Property(e => e.Paytermscd)
                .HasMaxLength(255)
                .HasColumnName("paytermscd");
            entity.Property(e => e.State)
                .HasMaxLength(255)
                .HasColumnName("state");
            entity.Property(e => e.Taxexempt)
                .HasMaxLength(255)
                .HasColumnName("taxexempt");
            entity.Property(e => e.TaxexemptNo)
                .HasMaxLength(255)
                .HasColumnName("taxexempt_no");
            entity.Property(e => e.Type).HasMaxLength(255);
            entity.Property(e => e.Zip).HasColumnName("zip");
        });

        modelBuilder.Entity<TmpJpjinventoryAndPurchasePrice>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpJPJInventoryAndPurchasePrice");

            entity.Property(e => e.JpjarticleNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("JPJArticleNo");
            entity.Property(e => e.PurchasePriceAus)
                .HasColumnType("money")
                .HasColumnName("PurchasePriceAUS");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpJpjinventoryRawDatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpJPJInventoryRawData");

            entity.Property(e => e.DeviceArticleNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PartArticleNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PartDescOrSn)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("PartDescOrSN");
            entity.Property(e => e.ValueAus)
                .HasColumnType("money")
                .HasColumnName("ValueAUS");
        });

        modelBuilder.Entity<TmpJpjpartNumber>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpJPJPartNumbers");

            entity.Property(e => e.AvgPurchasePriceAus)
                .HasColumnType("money")
                .HasColumnName("AvgPurchasePriceAUS");
            entity.Property(e => e.FinessePartNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.JpjarticleNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("JPJArticleNo");
            entity.Property(e => e.PartDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Qty).HasColumnName("qty");
        });

        modelBuilder.Entity<TmpJpspartsValues20150915>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpJPSPartsValues20150915");

            entity.Property(e => e.FinessePartNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.JpjpartDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("JPJPartDesc");
            entity.Property(e => e.Jpjunit)
                .HasColumnType("money")
                .HasColumnName("JPJUnit");
            entity.Property(e => e.LikePartNo)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpLdsystemsAutoSearchResult>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.Partno, e.SearchSource });

            entity.ToTable("tmpLDSystemsAutoSearchResults");

            entity.Property(e => e.Id)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.SearchSource)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Score).HasColumnName("score");

            entity.HasOne(d => d.PartnoNavigation).WithMany(p => p.TmpLdsystemsAutoSearchResults)
                .HasForeignKey(d => d.Partno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tmpLDSystemsAutoSearchParts_inpart");
        });

        modelBuilder.Entity<TmpLdsystemsClaudeChosenPart>(entity =>
        {
            entity.ToTable("tmpLDSystemsClaudeChosenParts");

            entity.Property(e => e.Id)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id");
            entity.Property(e => e.Confidence).HasColumnName("confidence");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");

            entity.HasOne(d => d.PartnoNavigation).WithMany(p => p.TmpLdsystemsClaudeChosenParts)
                .HasForeignKey(d => d.Partno)
                .HasConstraintName("FK_tmpLDSystemsClaudeChosenParts");
        });

        modelBuilder.Entity<TmpLdsystemsClaudeName>(entity =>
        {
            entity.ToTable("tmpLDSystemsClaudeNames");

            entity.Property(e => e.Id)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id");
            entity.Property(e => e.ClaudeConfidence)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClaudeDescription).HasMaxLength(150);
            entity.Property(e => e.Iteration)
                .HasDefaultValue((byte)0)
                .HasColumnName("iteration");
        });

        modelBuilder.Entity<TmpLdsystemsPart>(entity =>
        {
            entity.ToTable("tmpLDSystemsParts");

            entity.Property(e => e.Id)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id");
            entity.Property(e => e.Categories)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.ContentsAvailable).HasColumnName("contents_available");
            entity.Property(e => e.ContentsPermanent).HasColumnName("contents_permanent");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("created_by");
            entity.Property(e => e.CreatedByDate)
                .HasPrecision(0)
                .HasColumnName("created_by_date");
            entity.Property(e => e.DisplayString)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("display_string");
            entity.Property(e => e.Expendable).HasColumnName("expendable");
            entity.Property(e => e.Height).HasColumnName("height");
            entity.Property(e => e.IsContainer).HasColumnName("is_container");
            entity.Property(e => e.IsDiscontinued).HasColumnName("is_discontinued");
            entity.Property(e => e.IsPickContainer).HasColumnName("is_pick_container");
            entity.Property(e => e.ItemSize)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("item_size");
            entity.Property(e => e.IvtNotes)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("ivt_notes");
            entity.Property(e => e.LastEditDate)
                .HasPrecision(0)
                .HasColumnName("last_edit_date");
            entity.Property(e => e.ManufactureCountry)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("manufacture_country");
            entity.Property(e => e.Manufacturer)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("manufacturer");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("modified_by");
            entity.Property(e => e.NarrativeDescription)
                .IsUnicode(false)
                .HasColumnName("narrative_description");
            entity.Property(e => e.PartNoIfNeeded)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PartNumber)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("part_number");
            entity.Property(e => e.PurchaseCost).HasColumnName("purchase_cost");
            entity.Property(e => e.RcNumber)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("rc_number");
            entity.Property(e => e.ReplacementCost).HasColumnName("replacement_cost");
            entity.Property(e => e.ResourceName)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("resource_name");
            entity.Property(e => e.ResourceShortName)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("resource_short_name");
            entity.Property(e => e.SerializedContents).HasColumnName("serialized_contents");
            entity.Property(e => e.ShortHand)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("short_hand");
            entity.Property(e => e.Sku)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("sku");
            entity.Property(e => e.TrackedBySn).HasColumnName("tracked_by_sn");
            entity.Property(e => e.UnitOfLength)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("unit_of_length");
            entity.Property(e => e.UnitOfWeight)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("unit_of_weight");
            entity.Property(e => e.VirtualItem).HasColumnName("virtual_item");
            entity.Property(e => e.Weight).HasColumnName("weight");
            entity.Property(e => e.Width).HasColumnName("width");
        });

        modelBuilder.Entity<TmpLdsystemsPartsMapping>(entity =>
        {
            entity.ToTable("tmpLDSystemsPartsMapping");

            entity.Property(e => e.Id)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id");
            entity.Property(e => e.CheckedBy)
                .HasMaxLength(128)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("checkedBy");
            entity.Property(e => e.CheckedDate)
                .HasDefaultValueSql("(sysdatetimeoffset())")
                .HasColumnName("checkedDate");
            entity.Property(e => e.MappedPartno)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NewCommmodity)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.NewCountryCode)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.NewModelNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NewPackage)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NewPartDesc)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.NewRentalValueUsd).HasColumnName("NewRentalValueUSD");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("notes");

            entity.HasOne(d => d.NewCommmodityNavigation).WithMany(p => p.TmpLdsystemsPartsMappings)
                .HasForeignKey(d => d.NewCommmodity)
                .HasConstraintName("FK_tmpLDSystemsPartsMapping_incommodity");

            entity.HasOne(d => d.NewCountryCodeNavigation).WithMany(p => p.TmpLdsystemsPartsMappings)
                .HasForeignKey(d => d.NewCountryCode)
                .HasConstraintName("FK__tmpLDSyst__NewCo__0D3B565A");

            entity.HasOne(d => d.NewIdManufacturerNavigation).WithMany(p => p.TmpLdsystemsPartsMappings)
                .HasForeignKey(d => d.NewIdManufacturer)
                .HasConstraintName("FK_tmpLDSystemsPartsMapping_manufacturer");
        });

        modelBuilder.Entity<TmpLdsystemsPartsView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("tmpLDSystemsParts_View");

            entity.Property(e => e.Categories)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.ClaudeConfidence)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClaudeDescription).HasMaxLength(150);
            entity.Property(e => e.ClaudeSuggestedPartno)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContentsAvailable).HasColumnName("contents_available");
            entity.Property(e => e.ContentsPermanent).HasColumnName("contents_permanent");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("created_by");
            entity.Property(e => e.CreatedByDate)
                .HasPrecision(0)
                .HasColumnName("created_by_date");
            entity.Property(e => e.Description)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.DisplayString)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("display_string");
            entity.Property(e => e.Expendable).HasColumnName("expendable");
            entity.Property(e => e.Height).HasColumnName("height");
            entity.Property(e => e.Id)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id");
            entity.Property(e => e.IsContainer).HasColumnName("is_container");
            entity.Property(e => e.IsDiscontinued).HasColumnName("is_discontinued");
            entity.Property(e => e.IsPickContainer).HasColumnName("is_pick_container");
            entity.Property(e => e.ItemSize)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("item_size");
            entity.Property(e => e.IvtNotes)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("ivt_notes");
            entity.Property(e => e.LastEditDate)
                .HasPrecision(0)
                .HasColumnName("last_edit_date");
            entity.Property(e => e.ManufactureCountry)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("manufacture_country");
            entity.Property(e => e.Manufacturer)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("manufacturer");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("modified_by");
            entity.Property(e => e.NarrativeDescription)
                .IsUnicode(false)
                .HasColumnName("narrative_description");
            entity.Property(e => e.PartNoIfNeeded)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PartNumber)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("part_number");
            entity.Property(e => e.PurchaseCost).HasColumnName("purchase_cost");
            entity.Property(e => e.RcNumber)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("rc_number");
            entity.Property(e => e.ReplacementCost).HasColumnName("replacement_cost");
            entity.Property(e => e.ResourceShortName)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("resource_short_name");
            entity.Property(e => e.SerializedContents).HasColumnName("serialized_contents");
            entity.Property(e => e.ShortHand)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("short_hand");
            entity.Property(e => e.Sku)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("sku");
            entity.Property(e => e.SourceSystem)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.TrackedBySn).HasColumnName("tracked_by_sn");
            entity.Property(e => e.UnitOfLength)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("unit_of_length");
            entity.Property(e => e.UnitOfWeight)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("unit_of_weight");
            entity.Property(e => e.VirtualItem).HasColumnName("virtual_item");
            entity.Property(e => e.Weight).HasColumnName("weight");
            entity.Property(e => e.Width).HasColumnName("width");
        });

        modelBuilder.Entity<TmpLegacyLimitConversionFactor>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpLegacyLimitConversionFactors");

            entity.Property(e => e.CsvFilePath).HasColumnName("CSV_FilePath");
            entity.Property(e => e.LegacyLimitId).HasColumnName("LegacyLimitID");
            entity.Property(e => e.ReferenceSetId).HasColumnName("ReferenceSetID");
            entity.Property(e => e.Zap2rst).HasColumnName("ZAP2RST");
        });

        modelBuilder.Entity<TmpLegacyLimitDiff>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpLegacyLimitDiffs");

            entity.Property(e => e.LegacyLimitId).HasColumnName("LegacyLimitID");
            entity.Property(e => e.ReferenceSetId).HasColumnName("ReferenceSetID");
        });

        modelBuilder.Entity<TmpLoFrequencyVectorValue>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpLoFrequencyVectorValues");

            entity.Property(e => e.HiFftbinIndex).HasColumnName("HiFFTBinIndex");
            entity.Property(e => e.LoFftbinIndex).HasColumnName("LoFFTBinIndex");
        });

        modelBuilder.Entity<TmpLoudSpeakerImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpLoudSpeakerImport");

            entity.Property(e => e.Msrpprice).HasColumnName("MSRPPrice");
            entity.Property(e => e.Partno).HasColumnName("partno");
        });

        modelBuilder.Entity<TmpMfgbuilds2024>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpMFGBuilds2024");

            entity.Property(e => e.MfgfinPtNo).HasColumnName("MFGFinPtNo");
        });

        modelBuilder.Entity<TmpMfgbuilds24>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpMFGBuilds24");

            entity.Property(e => e._15261).HasColumnName("15261");
        });

        modelBuilder.Entity<TmpMiSysPartnoDeGackMap>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpMiSysPartnoDeGackMap");

            entity.Property(e => e.New).HasColumnName("new");
            entity.Property(e => e.Old).HasColumnName("old");
        });

        modelBuilder.Entity<TmpMicFrequencyVectorValue>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpMicFrequencyVectorValues");

            entity.Property(e => e.HiFftbinIndex).HasColumnName("HiFFTBinIndex");
            entity.Property(e => e.LoFftbinIndex).HasColumnName("LoFFTBinIndex");
        });

        modelBuilder.Entity<TmpOnstagePart>(entity =>
        {
            entity.ToTable("tmpOnstageParts");

            entity.Property(e => e.Id)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id");
            entity.Property(e => e.Categories)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.ContentsAvailable).HasColumnName("contents_available");
            entity.Property(e => e.ContentsPermanent).HasColumnName("contents_permanent");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("created_by");
            entity.Property(e => e.CreatedByDate)
                .HasPrecision(0)
                .HasColumnName("created_by_date");
            entity.Property(e => e.DisplayString)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("display_string");
            entity.Property(e => e.Expendable).HasColumnName("expendable");
            entity.Property(e => e.Height).HasColumnName("height");
            entity.Property(e => e.IsContainer).HasColumnName("is_container");
            entity.Property(e => e.IsDiscontinued).HasColumnName("is_discontinued");
            entity.Property(e => e.IsPickContainer).HasColumnName("is_pick_container");
            entity.Property(e => e.ItemSize)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("item_size");
            entity.Property(e => e.IvtNotes)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("ivt_notes");
            entity.Property(e => e.LastEditDate)
                .HasPrecision(0)
                .HasColumnName("last_edit_date");
            entity.Property(e => e.ManufactureCountry)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("manufacture_country");
            entity.Property(e => e.Manufacturer)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("manufacturer");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("modified_by");
            entity.Property(e => e.NarrativeDescription)
                .IsUnicode(false)
                .HasColumnName("narrative_description");
            entity.Property(e => e.PartNoIfNeeded)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PartNumber)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("part_number");
            entity.Property(e => e.PurchaseCost).HasColumnName("purchase_cost");
            entity.Property(e => e.RcNumber)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("rc_number");
            entity.Property(e => e.ReplacementCost).HasColumnName("replacement_cost");
            entity.Property(e => e.ResourceName)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("resource_name");
            entity.Property(e => e.ResourceShortName)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("resource_short_name");
            entity.Property(e => e.SerializedContents).HasColumnName("serialized_contents");
            entity.Property(e => e.ShortHand)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("short_hand");
            entity.Property(e => e.Sku)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("sku");
            entity.Property(e => e.TrackedBySn).HasColumnName("tracked_by_sn");
            entity.Property(e => e.UnitOfLength)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("unit_of_length");
            entity.Property(e => e.UnitOfWeight)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("unit_of_weight");
            entity.Property(e => e.VirtualItem).HasColumnName("virtual_item");
            entity.Property(e => e.Weight).HasColumnName("weight");
            entity.Property(e => e.Width).HasColumnName("width");
        });

        modelBuilder.Entity<TmpOnstagePartExport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpOnstagePartExports");

            entity.Property(e => e.CostOne).HasColumnName("COST_ONE");
            entity.Property(e => e.CostThree).HasColumnName("COST_THREE");
            entity.Property(e => e.CostTwo).HasColumnName("COST_TWO");
            entity.Property(e => e.DepreciationPeriod).HasColumnName("DEPRECIATION_PERIOD");
            entity.Property(e => e.Group).HasColumnName("GROUP");
            entity.Property(e => e.Group2).HasColumnName("GROUP2");
            entity.Property(e => e.Group3).HasColumnName("GROUP3");
            entity.Property(e => e.Group4).HasColumnName("GROUP4");
            entity.Property(e => e.Height).HasColumnName("HEIGHT");
            entity.Property(e => e.IsContainer).HasColumnName("IS_CONTAINER");
            entity.Property(e => e.IsContentsAvailable).HasColumnName("IS_CONTENTS_AVAILABLE");
            entity.Property(e => e.IsExpendable).HasColumnName("IS_EXPENDABLE");
            entity.Property(e => e.IsFreePickContainer).HasColumnName("IS_FREE_PICK_CONTAINER");
            entity.Property(e => e.IsNoteMuteByDefault).HasColumnName("IS_NOTE_MUTE_BY_DEFAULT");
            entity.Property(e => e.IsUnitContainer).HasColumnName("IS_UNIT_CONTAINER");
            entity.Property(e => e.IsVirtualItem).HasColumnName("IS_VIRTUAL_ITEM");
            entity.Property(e => e.ItemBarcode).HasColumnName("ITEM_BARCODE");
            entity.Property(e => e.ItemName).HasColumnName("ITEM_NAME");
            entity.Property(e => e.ItemPurchaseCost).HasColumnName("ITEM_PURCHASE_COST");
            entity.Property(e => e.ItemReplacementCost).HasColumnName("ITEM_REPLACEMENT_COST");
            entity.Property(e => e.Length).HasColumnName("LENGTH");
            entity.Property(e => e.LinearUnit).HasColumnName("LINEAR_UNIT");
            entity.Property(e => e.Manufacturer).HasColumnName("MANUFACTURER");
            entity.Property(e => e.ManufacturerCountry).HasColumnName("MANUFACTURER_COUNTRY");
            entity.Property(e => e.NarrativeDesc).HasColumnName("NARRATIVE_DESC");
            entity.Property(e => e.Notes).HasColumnName("NOTES");
            entity.Property(e => e.PartNumber).HasColumnName("PART_NUMBER");
            entity.Property(e => e.PriceOne).HasColumnName("PRICE_ONE");
            entity.Property(e => e.PriceThree).HasColumnName("PRICE_THREE");
            entity.Property(e => e.PriceTwo).HasColumnName("PRICE_TWO");
            entity.Property(e => e.QtyOwned).HasColumnName("QTY_OWNED");
            entity.Property(e => e.SalvageValue).HasColumnName("SALVAGE_VALUE");
            entity.Property(e => e.ShortHand).HasColumnName("SHORT_HAND");
            entity.Property(e => e.ShortName).HasColumnName("SHORT_NAME");
            entity.Property(e => e.Size).HasColumnName("SIZE");
            entity.Property(e => e.StorageAisle).HasColumnName("STORAGE_AISLE");
            entity.Property(e => e.StorageBin).HasColumnName("STORAGE_BIN");
            entity.Property(e => e.StorageSection).HasColumnName("STORAGE_SECTION");
            entity.Property(e => e.StorageShelf).HasColumnName("STORAGE_SHELF");
            entity.Property(e => e.TrackedBySerial).HasColumnName("TRACKED_BY_SERIAL");
            entity.Property(e => e.Weight).HasColumnName("WEIGHT");
            entity.Property(e => e.WeightUnit).HasColumnName("WEIGHT_UNIT");
            entity.Property(e => e.Width).HasColumnName("WIDTH");
        });

        modelBuilder.Entity<TmpPacificoBarcode>(entity =>
        {
            entity.HasKey(e => e.UniqueNo);

            entity.ToTable("tmpPacificoBarcodes");

            entity.Property(e => e.UniqueNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.Notes)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("notes");
        });

        modelBuilder.Entity<TmpPacificoCostAnalysisJbo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpPacificoCostAnalysisJBo");

            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Manufacturer)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Model)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Total).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.Unit).HasColumnType("decimal(18, 0)");
        });

        modelBuilder.Entity<TmpPacificoCostAnalysisJf>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpPacificoCostAnalysisJF");

            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Manufacturer)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Model)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Total).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.Unit).HasColumnType("decimal(18, 0)");
        });

        modelBuilder.Entity<TmpPartDescImport20161010Subcategory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_PartDescImport20161010_Subcategories");

            entity.Property(e => e.IdCategory).HasColumnName("idCategory");
            entity.Property(e => e.IdSubcategory).HasColumnName("idSubcategory");
            entity.Property(e => e.Subcategory).IsUnicode(false);
        });

        modelBuilder.Entity<TmpPartMaintenancePermissionsImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpPartMaintenancePermissionsImport");

            entity.Property(e => e.CompanyDesc).HasColumnName("Company Desc");
            entity.Property(e => e.EmployeeName).HasColumnName("Employee Name");
            entity.Property(e => e.NewPermissionLevel).HasColumnName("New Permission Level");
            entity.Property(e => e.PartMergingPermission).HasColumnName("Part merging permission");
            entity.Property(e => e.UserName).HasColumnName("User Name");
            entity.Property(e => e.UserWarehouse).HasColumnName("User Warehouse");
        });

        modelBuilder.Entity<TmpPartOperatingVoltage>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_part_operating_voltages");

            entity.Property(e => e.OperatingVa).HasColumnName("operating_va");
            entity.Property(e => e.OperatingVacMax)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("operating_vac_max");
            entity.Property(e => e.OperatingVacMin)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("operating_vac_min");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
        });

        modelBuilder.Entity<TmpPartPricingUpdate20250214>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpPartPricingUpdate20250214");

            entity.Property(e => e.Part).HasColumnName("Part #");
            entity.Property(e => e.PersonAssigned).HasColumnName("Person Assigned ");
            entity.Property(e => e.RentalValueUsd).HasColumnName("RentalValueUSD");
        });

        modelBuilder.Entity<TmpPartSecondaryCategoriesImportFromClairTourTest>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpPartSecondaryCategoriesImport_FromClairTourTest");

            entity.Property(e => e.OriginalCategory).HasColumnName("Original Category");
            entity.Property(e => e.Partno).HasColumnName("partno");
        });

        modelBuilder.Entity<TmpPartValueUpdate>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpPartValueUpdate");

            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Value).HasColumnName("value");
        });

        modelBuilder.Entity<TmpPartdescImport20161010>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_PartdescImport20161010");

            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.IdCategory).HasColumnName("idCategory");
            entity.Property(e => e.IdPart)
                .IsUnicode(false)
                .HasColumnName("idPart");
            entity.Property(e => e.IdPartVarchar)
                .IsUnicode(false)
                .HasColumnName("idPart_varchar");
            entity.Property(e => e.IdSubcategory).HasColumnName("idSubcategory");
        });

        modelBuilder.Entity<TmpPartdescImport20161010Category>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_PartdescImport20161010_Categories");

            entity.Property(e => e.Category).IsUnicode(false);
            entity.Property(e => e.IdCategory).HasColumnName("idCategory");
        });

        modelBuilder.Entity<TmpPartdescImport20161010Mapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_PartdescImport20161010_Mapping");

            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.IdPart)
                .IsUnicode(false)
                .HasColumnName("idPart");
            entity.Property(e => e.PartNoMatch)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PartNo_Match");
            entity.Property(e => e.PartNoSimilar)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PartNo_Similar");
        });

        modelBuilder.Entity<TmpPartdescImport20161010V>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("tmp_PartdescImport20161010_v");

            entity.Property(e => e.Category).IsUnicode(false);
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.IdPart).HasColumnName("idPart");
            entity.Property(e => e.Subcategory).IsUnicode(false);
        });

        modelBuilder.Entity<TmpPayTermsCodeUpdate20150701>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpPayTermsCodeUpdate20150701");

            entity.Property(e => e.Custno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("custno");
            entity.Property(e => e.Paytermscd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("paytermscd");
            entity.Property(e => e.Subno)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("subno");
        });

        modelBuilder.Entity<TmpPePayPeriodsWeekly>(entity =>
        {
            entity.HasKey(e => e.StartDate);

            entity.ToTable("tmp_pePayPeriods_weekly");

            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.HasOne(d => d.EndDateNavigation).WithMany(p => p.TmpPePayPeriodsWeeklyEndDateNavigations)
                .HasForeignKey(d => d.EndDate)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tmp_pePayPeriods_weekly_Dates_EndDate");

            entity.HasOne(d => d.StartDateNavigation).WithOne(p => p.TmpPePayPeriodsWeeklyStartDateNavigation)
                .HasForeignKey<TmpPePayPeriodsWeekly>(d => d.StartDate)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tmp_pePayPeriods_weekly_Dates_StartDate");
        });

        modelBuilder.Entity<TmpPePayrollRunDataWeekly>(entity =>
        {
            entity.HasKey(e => new { e.ValidFrom, e.PeriodStart, e.Empno, e.Entityno, e.Jobtype, e.StartDate, e.PayMultiplier }).IsClustered(false);

            entity.ToTable("tmp_pePayrollRunData_weekly");

            entity.HasIndex(e => e.ValidFrom, "IX_ValidFrom");

            entity.HasIndex(e => e.ValidTo, "IX_ValidTo");

            entity.HasIndex(e => new { e.ValidTo, e.PeriodStart, e.Empno }, "IX_pePayrollRunData").IsClustered();

            entity.HasIndex(e => new { e.ValidTo, e.Entityno }, "IX_project");

            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
            entity.Property(e => e.PeriodStart).HasColumnType("datetime");
            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("jobtype");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.Payamt).HasColumnName("payamt");
            entity.Property(e => e.Payrate).HasColumnName("payrate");
            entity.Property(e => e.Paytype)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("paytype");
            entity.Property(e => e.ValidTo).HasColumnType("datetime");

            entity.HasOne(d => d.PeriodStartNavigation).WithMany(p => p.TmpPePayrollRunDataWeeklies)
                .HasForeignKey(d => d.PeriodStart)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tmp_pePayrollRunData_weekly_pePayPeriods");

            entity.HasOne(d => d.ValidFromNavigation).WithMany(p => p.TmpPePayrollRunDataWeeklyValidFromNavigations)
                .HasForeignKey(d => d.ValidFrom)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tmp_pePayrollRunData_weekly_pePayrollRuns__ValidFrom");

            entity.HasOne(d => d.ValidToNavigation).WithMany(p => p.TmpPePayrollRunDataWeeklyValidToNavigations)
                .HasForeignKey(d => d.ValidTo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tmp_pePayrollRunData_weekly_pePayrollRuns__ValidTo");
        });

        modelBuilder.Entity<TmpPePayrollRunsWeekly>(entity =>
        {
            entity.HasKey(e => e.PayrollRunDate);

            entity.ToTable("tmp_pePayrollRuns_weekly");

            entity.Property(e => e.PayrollRunDate).HasColumnType("datetime");
            entity.Property(e => e.Userid)
                .HasMaxLength(128)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("userid");
        });

        modelBuilder.Entity<TmpPjjobChkqtyVw>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("tmp_pjjob_chkqty_vw");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Partentityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partentityno");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Partrev)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("partrev");
            entity.Property(e => e.TotLineNo).HasColumnName("tot_line_no");
        });

        modelBuilder.Entity<TmpPlus4AccountExecMapping>(entity =>
        {
            entity.HasKey(e => new { e.PersonResponsibleId, e.FinesseEmpno });

            entity.ToTable("tmpPlus4AccountExecMapping");

            entity.Property(e => e.PersonResponsibleId)
                .HasMaxLength(36)
                .HasColumnName("person_responsible_id");
            entity.Property(e => e.FinesseEmpno).HasMaxLength(50);
            entity.Property(e => e.DisplayString)
                .HasMaxLength(150)
                .HasColumnName("display_string");
            entity.Property(e => e.ResourceName)
                .HasMaxLength(150)
                .HasColumnName("resource_name");
        });

        modelBuilder.Entity<TmpPlus4DocumentPhaseMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpPlus4DocumentPhaseMapping");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Id)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id");
        });

        modelBuilder.Entity<TmpPlus4PackagePart>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpPlus4PackageParts");

            entity.Property(e => e.Package).HasColumnName("package");
            entity.Property(e => e.Part).HasColumnName("Part #");
        });

        modelBuilder.Entity<TmpPlus4ProjectsMapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Plus4ProjectsMapping");

            entity.ToTable("tmpPlus4ProjectsMapping");

            entity.HasIndex(e => new { e.Id, e.Entityno }, "UC_Plus4ProjectsMapping_project_element_only_corresponds_to_one_finesse_phase").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.LegEntityno)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.P4phaseType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("P4PhaseType");
            entity.Property(e => e.RootEntityno)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RootId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("root_id");
        });

        modelBuilder.Entity<TmpPlus4StatusMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpPlus4StatusMapping");

            entity.Property(e => e.StatusCode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StatusId).HasColumnName("status_id");
        });

        modelBuilder.Entity<TmpPolaritySyntheticFailures20230209>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpPolaritySyntheticFailures_20230209");

            entity.Property(e => e.Description)
                .HasMaxLength(260)
                .IsUnicode(false);
            entity.Property(e => e.FailCurveId).HasColumnName("FailCurveID");
            entity.Property(e => e.FakeCurveId).HasColumnName("FakeCurveID");
            entity.Property(e => e.PassCurveId).HasColumnName("PassCurveID");
            entity.Property(e => e.ReferenceSetId).HasColumnName("ReferenceSetID");
        });

        modelBuilder.Entity<TmpPolaritySyntheticFailuresCo1020230419>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpPolaritySyntheticFailures_CO10_20230419");

            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FailCurveId1).HasColumnName("FailCurveID1");
            entity.Property(e => e.FailCurveId2).HasColumnName("FailCurveID2");
            entity.Property(e => e.FailCurveId3).HasColumnName("FailCurveID3");
            entity.Property(e => e.FailCurveId4).HasColumnName("FailCurveID4");
            entity.Property(e => e.FakeCurveId).HasColumnName("FakeCurveID");
            entity.Property(e => e.PassCurveId1).HasColumnName("PassCurveID1");
            entity.Property(e => e.PassCurveId2).HasColumnName("PassCurveID2");
            entity.Property(e => e.PassCurveId3).HasColumnName("PassCurveID3");
            entity.Property(e => e.PassCurveId4).HasColumnName("PassCurveID4");
            entity.Property(e => e.ReferenceSetId).HasColumnName("ReferenceSetID");
        });

        modelBuilder.Entity<TmpPolaritySyntheticFailuresCo1220230419>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpPolaritySyntheticFailures_CO12_20230419");

            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FailCurveId1).HasColumnName("FailCurveID1");
            entity.Property(e => e.FailCurveId2).HasColumnName("FailCurveID2");
            entity.Property(e => e.FailCurveId3).HasColumnName("FailCurveID3");
            entity.Property(e => e.FailCurveId4).HasColumnName("FailCurveID4");
            entity.Property(e => e.FakeCurveId).HasColumnName("FakeCurveID");
            entity.Property(e => e.PassCurveId1).HasColumnName("PassCurveID1");
            entity.Property(e => e.PassCurveId2).HasColumnName("PassCurveID2");
            entity.Property(e => e.ReferenceSetId).HasColumnName("ReferenceSetID");
        });

        modelBuilder.Entity<TmpPpeinstallations20150406>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpPPEInstallations20150406");

            entity.Property(e => e.Partdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Total).HasColumnName("total");
            entity.Property(e => e.Unit).HasColumnName("unit");
        });

        modelBuilder.Entity<TmpPpelxinstalls20150406>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpPPELXInstalls20150406");

            entity.Property(e => e.Partdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Total).HasColumnName("total");
            entity.Property(e => e.Unit).HasColumnName("unit");
        });

        modelBuilder.Entity<TmpPpewarehouse20150406>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpPPEWarehouse20150406");

            entity.Property(e => e.Partdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Total).HasColumnName("total");
            entity.Property(e => e.Unit).HasColumnName("unit");
        });

        modelBuilder.Entity<TmpPpewarehouseInstallProjects20150406>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpPPEWarehouseInstallProjects20150406");

            entity.Property(e => e.Partdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Total).HasColumnName("total");
            entity.Property(e => e.Unit).HasColumnName("unit");
        });

        modelBuilder.Entity<TmpRecInterfacesByShopin2023>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpRecInterfacesByShopin2023");
        });

        modelBuilder.Entity<TmpRegionFromArtistAndDate>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpRegionFromArtistAndDate");

            entity.Property(e => e.ArtistId).HasColumnName("ArtistID");
            entity.Property(e => e.DeltaDaysFromNext).HasColumnName("deltaDaysFromNext");
            entity.Property(e => e.DeltaDaysFromPrev).HasColumnName("deltaDaysFromPrev");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.MaxDdn).HasColumnName("maxDDN");
            entity.Property(e => e.MaxDdp).HasColumnName("maxDDP");
            entity.Property(e => e.PlayDate).HasColumnType("datetime");
            entity.Property(e => e.Region)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("region");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpRfideletedForExpediencyThatMightNeedToBePutBack>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpRFIDeletedForExpediencyThatMightNeedToBePutBack");

            entity.Property(e => e.Acctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("acctcd");
            entity.Property(e => e.AeApproved)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ae_approved");
            entity.Property(e => e.AmApproved)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("am_approved");
            entity.Property(e => e.Billschedule)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("billschedule");
            entity.Property(e => e.ChangeNo).HasColumnName("change_no");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(128)
                .HasColumnName("createdBy");
            entity.Property(e => e.DateCreated)
                .HasColumnType("datetime")
                .HasColumnName("dateCreated");
            entity.Property(e => e.DateModified)
                .HasColumnType("datetime")
                .HasColumnName("dateModified");
            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("description");
            entity.Property(e => e.Displayind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("displayind");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.InvEntityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("inv_entityno");
            entity.Property(e => e.InvoiceTemplateGroupId).HasColumnName("InvoiceTemplateGroupID");
            entity.Property(e => e.InvoiceTemplateId).HasColumnName("InvoiceTemplateID");
            entity.Property(e => e.InvoicedThrough).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(128)
                .HasColumnName("modifiedBy");
            entity.Property(e => e.Note)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("note");
            entity.Property(e => e.Numdays).HasColumnName("numdays");
            entity.Property(e => e.Postind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("postind");
            entity.Property(e => e.Rate)
                .HasColumnType("money")
                .HasColumnName("rate");
            entity.Property(e => e.Ratetype)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ratetype");
            entity.Property(e => e.RevenueCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.TemplateModifiedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TemplateModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Total).HasColumnName("total");
        });

        modelBuilder.Entity<TmpRoadApandSwitch>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpRoadAPAndSwitches");

            entity.Property(e => e.CbaBarcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CBA Barcode");
            entity.Property(e => e.DantePriIp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Dante Pri IP");
            entity.Property(e => e.DanteSecIp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Dante Sec IP");
            entity.Property(e => e.MacAddress)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MAC Address");
            entity.Property(e => e.SN)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("S N");
            entity.Property(e => e.StandardIp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Standard IP");
            entity.Property(e => e.UnitType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Unit Type");
        });

        modelBuilder.Entity<TmpRockfishPart>(entity =>
        {
            entity.HasKey(e => new { e.Category, e.Description });

            entity.ToTable("tmpRockfishParts");

            entity.Property(e => e.Category).HasMaxLength(30);
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.CheckComment)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("checkComment");
            entity.Property(e => e.CheckedBy)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("checkedBy");
            entity.Property(e => e.CheckedDate).HasColumnName("checkedDate");
            entity.Property(e => e.PartId).HasColumnName("PartID");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
        });

        modelBuilder.Entity<TmpRootProjectEquipmentHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpRootProjectEquipmentHistory");

            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Rootproject)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("rootproject");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
        });

        modelBuilder.Entity<TmpRootProjectEquipmentValueByDay>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpRootProjectEquipmentValueByDay");

            entity.Property(e => e.Dt)
                .HasColumnType("datetime")
                .HasColumnName("dt");
            entity.Property(e => e.Pct).HasColumnName("pct");
            entity.Property(e => e.Rootproject)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("rootproject");
            entity.Property(e => e.Value).HasColumnName("value");
        });

        modelBuilder.Entity<TmpRootProjectUsaequipmentHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpRootProjectUSAEquipmentHistory");

            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Rootproject)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("rootproject");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
        });

        modelBuilder.Entity<TmpRootProjectUsaequipmentValueByDay>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpRootProjectUSAEquipmentValueByDay");

            entity.Property(e => e.Dt)
                .HasColumnType("datetime")
                .HasColumnName("dt");
            entity.Property(e => e.Pct).HasColumnName("pct");
            entity.Property(e => e.Rootproject)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("rootproject");
            entity.Property(e => e.Value).HasColumnName("value");
        });

        modelBuilder.Entity<TmpRootProjectsWithOpenRfis20250307>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpRootProjectsWithOpenRFIs20250307");

            entity.HasIndex(e => e.Entityno, "PK_tmpRootProjectsWithOpenRFIs20250307")
                .IsUnique()
                .IsClustered();

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
        });

        modelBuilder.Entity<TmpShippingCommodityCodeImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpShippingCommodityCodeImport");

            entity.Property(e => e.CommodityCode)
                .HasMaxLength(255)
                .HasColumnName("Commodity Code");
            entity.Property(e => e.CountryOfMfg)
                .HasMaxLength(255)
                .HasColumnName("Country of MFG");
            entity.Property(e => e.CurrencyCode).HasMaxLength(255);
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.HmnzdCode).HasMaxLength(255);
            entity.Property(e => e.MarkNum).HasMaxLength(255);
            entity.Property(e => e.PartNum).HasMaxLength(255);
            entity.Property(e => e.SkuItemUpc)
                .HasMaxLength(255)
                .HasColumnName("SKU_Item_UPC");
            entity.Property(e => e.UnitOfMeasure).HasMaxLength(255);
        });

        modelBuilder.Entity<TmpSiassetDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpSIAssetDetails");

            entity.Property(e => e.BookCost).HasColumnType("decimal(38, 5)");
            entity.Property(e => e.ModelId).HasColumnName("ModelID");
        });

        modelBuilder.Entity<TmpSidataImportMergedPart>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpSIDataImportMergedParts");

            entity.Property(e => e.IsStockOfSiPartInFinesse0).HasColumnName("Is Stock of SI Part in Finesse > 0");
            entity.Property(e => e.PartDescription).HasColumnName("Part Description");
            entity.Property(e => e.PartNumber).HasColumnName("Part Number");
            entity.Property(e => e.PartQtyImported).HasColumnName("Part Qty Imported");
            entity.Property(e => e.RentalValueUsd).HasColumnName("Rental Value USD");
            entity.Property(e => e.TotalPartValueAdded).HasColumnName("Total Part Value Added");
        });

        modelBuilder.Entity<TmpSipartValueUpdate>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpSIPartValueUpdate");

            entity.Property(e => e.Commmodity).HasColumnName("commmodity");
            entity.Property(e => e.MergeRemainderCanidate).HasColumnName("MergeRemainder/Canidate");
            entity.Property(e => e.NewProposedSiparentValue).HasColumnName("NewProposedSIParentValue");
            entity.Property(e => e.Partdesc).HasColumnName("partdesc");
            entity.Property(e => e.RentalValueUsd).HasColumnName("RentalValueUSD");
            entity.Property(e => e.SourceOfNewProposedSiValue).HasColumnName("Source of New Proposed SI Value");
        });

        modelBuilder.Entity<TmpSkanAssets20220712>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpSkanAssets20220712");

            entity.Property(e => e.AssetManagerCategory)
                .HasMaxLength(255)
                .HasColumnName("Asset Manager category");
            entity.Property(e => e.BarCode)
                .HasMaxLength(255)
                .HasColumnName("Bar Code");
            entity.Property(e => e.BookValue)
                .HasMaxLength(255)
                .HasColumnName("Book Value");
            entity.Property(e => e.BrpRecPrice)
                .HasMaxLength(255)
                .HasColumnName("BRP rec price");
            entity.Property(e => e.Depr).HasMaxLength(255);
            entity.Property(e => e.DepreciationPeriod)
                .HasMaxLength(255)
                .HasColumnName("Depreciation Period ");
            entity.Property(e => e.DepreciationRate)
                .HasMaxLength(255)
                .HasColumnName("Depreciation Rate ");
            entity.Property(e => e.F1).HasMaxLength(255);
            entity.Property(e => e.F11).HasMaxLength(255);
            entity.Property(e => e.F13).HasMaxLength(255);
            entity.Property(e => e.F16).HasMaxLength(255);
            entity.Property(e => e.F26).HasMaxLength(255);
            entity.Property(e => e.F28).HasMaxLength(255);
            entity.Property(e => e.F31).HasMaxLength(255);
            entity.Property(e => e.F34).HasMaxLength(255);
            entity.Property(e => e.F35).HasMaxLength(255);
            entity.Property(e => e.F36).HasMaxLength(255);
            entity.Property(e => e.F8).HasMaxLength(255);
            entity.Property(e => e.FinessePartNumber)
                .HasMaxLength(255)
                .HasColumnName("Finesse part number");
            entity.Property(e => e.Group).HasMaxLength(255);
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .HasColumnName("ITEM#");
            entity.Property(e => e.ItemAge)
                .HasMaxLength(255)
                .HasColumnName("Item Age ");
            entity.Property(e => e.ItemName)
                .HasMaxLength(255)
                .HasColumnName("Item Name");
            entity.Property(e => e.Location).HasMaxLength(255);
            entity.Property(e => e.Nbv).HasColumnName("NBV");
            entity.Property(e => e.Po).HasColumnName("PO#");
            entity.Property(e => e.PurchaseCost).HasColumnName("Purchase Cost");
            entity.Property(e => e.PurchaseDate)
                .HasMaxLength(255)
                .HasColumnName("Purchase Date");
            entity.Property(e => e.PurchaseMonth).HasColumnName("Purchase Month");
            entity.Property(e => e.PurchaseYear).HasColumnName("Purchase Year");
            entity.Property(e => e.Quantity).HasMaxLength(255);
            entity.Property(e => e.Reconciled).HasMaxLength(255);
            entity.Property(e => e.SalvageValue)
                .HasMaxLength(255)
                .HasColumnName("Salvage Value");
            entity.Property(e => e.Serial).HasMaxLength(255);
            entity.Property(e => e.Size).HasMaxLength(255);
            entity.Property(e => e.SupplierManufacturer)
                .HasMaxLength(255)
                .HasColumnName("Supplier/Manufacturer");
            entity.Property(e => e.TotalDepreciat)
                .HasMaxLength(255)
                .HasColumnName("Total Depreciat");
            entity.Property(e => e.WriteOff)
                .HasMaxLength(255)
                .HasColumnName("Write off???");
        });

        modelBuilder.Entity<TmpSkanBarcodesCheckOutImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpSkanBarcodesCheckOutImport");

            entity.Property(e => e.BarCodeId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("bar_code_id");
            entity.Property(e => e.Id)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id");
            entity.Property(e => e.ItemId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("item_id");
            entity.Property(e => e.LineItemId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("line_item_id");
            entity.Property(e => e.Partno)
                .HasMaxLength(66)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.SerialNumber)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("serial_number");
            entity.Property(e => e.SerialNumberId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("serial_number_id");
        });

        modelBuilder.Entity<TmpSkanBarcodesToImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpSkanBarcodesToImport");

            entity.Property(e => e.Acctno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("acctno");
            entity.Property(e => e.AvailableDate)
                .HasPrecision(0)
                .HasColumnName("available_date");
            entity.Property(e => e.BarCodeId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("bar_code_id");
            entity.Property(e => e.BarCodeLabel)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("bar_code_label");
            entity.Property(e => e.Batchno)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.ColorCode)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("color_code");
            entity.Property(e => e.ContainerId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("container_id");
            entity.Property(e => e.CreatedByDate)
                .HasPrecision(0)
                .HasColumnName("created_by_date");
            entity.Property(e => e.CreatedByUser)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("created_by_user");
            entity.Property(e => e.CreditAcctId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("credit_acct_id");
            entity.Property(e => e.CurrentValue).HasColumnName("current_value");
            entity.Property(e => e.DatePurchased)
                .HasPrecision(0)
                .HasColumnName("date_purchased");
            entity.Property(e => e.DebitAcctId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("debit_acct_id");
            entity.Property(e => e.DecommissionedByUser)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("decommissioned_by_user");
            entity.Property(e => e.DecommissionedDate)
                .HasPrecision(0)
                .HasColumnName("decommissioned_date");
            entity.Property(e => e.DeletedByDate)
                .HasPrecision(0)
                .HasColumnName("deleted_by_date");
            entity.Property(e => e.DeletedByUserId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("deleted_by_user_id");
            entity.Property(e => e.DepreciationPeriod)
                .HasColumnType("decimal(6, 2)")
                .HasColumnName("depreciation_period");
            entity.Property(e => e.Dept)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.DiscontinueDate)
                .HasPrecision(0)
                .HasColumnName("discontinue_date");
            entity.Property(e => e.Discountable).HasColumnName("discountable");
            entity.Property(e => e.DisplayString)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("display_string");
            entity.Property(e => e.ExternalNumber)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("external_number");
            entity.Property(e => e.HomebaseLocationId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("homebase_location_id");
            entity.Property(e => e.Id)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id");
            entity.Property(e => e.IsCatItem).HasColumnName("is_cat_item");
            entity.Property(e => e.IsDecommissioned).HasColumnName("is_decommissioned");
            entity.Property(e => e.IsDeleted).HasColumnName("is_deleted");
            entity.Property(e => e.IsDirtyStorageContainer).HasColumnName("is_dirty_storage_container");
            entity.Property(e => e.IsPermanentMember).HasColumnName("is_permanent_member");
            entity.Property(e => e.IsPubCatItem).HasColumnName("is_pub_cat_item");
            entity.Property(e => e.IsRemoved).HasColumnName("is_removed");
            entity.Property(e => e.IsSold).HasColumnName("is_sold");
            entity.Property(e => e.IsStorageContainerReady).HasColumnName("is_storage_container_ready");
            entity.Property(e => e.ItemId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("item_id");
            entity.Property(e => e.LastEditDate)
                .HasPrecision(0)
                .HasColumnName("last_edit_date");
            entity.Property(e => e.LastEditUser)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("last_edit_user");
            entity.Property(e => e.LastScanId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("last_scan_id");
            entity.Property(e => e.LineMuteByDefault).HasColumnName("line_mute_by_default");
            entity.Property(e => e.LiteralTokens)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("literal_tokens");
            entity.Property(e => e.MaxDiscount).HasColumnName("max_discount");
            entity.Property(e => e.ModelNumber)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("model_number");
            entity.Property(e => e.NarrativeDescription)
                .IsUnicode(false)
                .HasColumnName("narrative_description");
            entity.Property(e => e.NoteMuteByDefault).HasColumnName("note_mute_by_default");
            entity.Property(e => e.NoteText)
                .IsUnicode(false)
                .HasColumnName("note_text");
            entity.Property(e => e.Onhand)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("onhand");
            entity.Property(e => e.Ooc).HasColumnName("ooc");
            entity.Property(e => e.Partno)
                .HasMaxLength(66)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.PhoneticTokens)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("phonetic_tokens");
            entity.Property(e => e.Ponumber)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("PONumber");
            entity.Property(e => e.PresumedMissing).HasColumnName("presumed_missing");
            entity.Property(e => e.PurchaseCost).HasColumnName("purchase_cost");
            entity.Property(e => e.PurchaseCurrencyId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("purchase_currency_id");
            entity.Property(e => e.PurchaseOrderId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("purchase_order_id");
            entity.Property(e => e.PurchaseOrderNumber)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("purchase_order_number");
            entity.Property(e => e.RcCode)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("rc_code");
            entity.Property(e => e.RcNumber)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("rc_number");
            entity.Property(e => e.RcNumberSeq).HasColumnName("rc_number_seq");
            entity.Property(e => e.Ref4)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("ref5");
            entity.Property(e => e.ReplacementCost).HasColumnName("replacement_cost");
            entity.Property(e => e.ResourceName)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("resource_name");
            entity.Property(e => e.ResourceShortName)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("resource_short_name");
            entity.Property(e => e.RfidTag)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("rfid_tag");
            entity.Property(e => e.Row)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.SalvageValue)
                .HasColumnType("decimal(14, 2)")
                .HasColumnName("salvage_value");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.SerialNumber)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("serial_number");
            entity.Property(e => e.SerialNumberId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("serial_number_id");
            entity.Property(e => e.SnIsDeleted).HasColumnName("sn_is_deleted");
            entity.Property(e => e.SoldCost).HasColumnName("sold_cost");
            entity.Property(e => e.SoldDate)
                .HasPrecision(0)
                .HasColumnName("sold_date");
            entity.Property(e => e.SoldRecordId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("sold_record_id");
            entity.Property(e => e.Stencil)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("stencil");
            entity.Property(e => e.StorageLocationId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("storage_location_id");
            entity.Property(e => e.SubrentalVendorId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("subrental_vendor_id");
            entity.Property(e => e.TimeAcctId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("time_acct_id");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.UserFieldEight)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("user_field_eight");
            entity.Property(e => e.UserFieldFive)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("user_field_five");
            entity.Property(e => e.UserFieldFour)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("user_field_four");
            entity.Property(e => e.UserFieldNine)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("user_field_nine");
            entity.Property(e => e.UserFieldOne)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("user_field_one");
            entity.Property(e => e.UserFieldSeven)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("user_field_seven");
            entity.Property(e => e.UserFieldSix)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("user_field_six");
            entity.Property(e => e.UserFieldTen)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("user_field_ten");
            entity.Property(e => e.UserFieldThree)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("user_field_three");
            entity.Property(e => e.UserFieldTwo)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("user_field_two");
        });

        modelBuilder.Entity<TmpSkanDevicePropertiesBulkUpdate>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpSkanDevicePropertiesBulkUpdate");

            entity.Property(e => e.Barcode).HasMaxLength(255);
            entity.Property(e => e.ConfigFile).HasMaxLength(255);
            entity.Property(e => e.DanteVersion).HasMaxLength(255);
            entity.Property(e => e.FirmwareVersion).HasMaxLength(255);
            entity.Property(e => e.Login).HasMaxLength(255);
            entity.Property(e => e.Password).HasMaxLength(255);
            entity.Property(e => e.PrimaryIp)
                .HasMaxLength(255)
                .HasColumnName("PrimaryIP");
            entity.Property(e => e.Rev).HasMaxLength(255);
            entity.Property(e => e.SecondaryIp)
                .HasMaxLength(255)
                .HasColumnName("SecondaryIP");
            entity.Property(e => e.SoftwareVersion).HasMaxLength(255);
        });

        modelBuilder.Entity<TmpSkanEmployeesImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpSkanEmployeesImport");

            entity.Property(e => e.Acctid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("acctid");
            entity.Property(e => e.Addr1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("addr1");
            entity.Property(e => e.Addr2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("addr2");
            entity.Property(e => e.Addr3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("addr3");
            entity.Property(e => e.Airport)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("airport");
            entity.Property(e => e.AlienExpiredate)
                .HasColumnType("datetime")
                .HasColumnName("alien_expiredate");
            entity.Property(e => e.Alienno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("alienno");
            entity.Property(e => e.Autodeposit)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("autodeposit");
            entity.Property(e => e.Bankid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("bankid");
            entity.Property(e => e.Billgoal).HasColumnName("billgoal");
            entity.Property(e => e.Birthdate)
                .HasColumnType("datetime")
                .HasColumnName("birthdate");
            entity.Property(e => e.Birthplace)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("birthplace");
            entity.Property(e => e.Cellphone)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("cellphone");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("city");
            entity.Property(e => e.Countrycode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("countrycode");
            entity.Property(e => e.CovidvaccineStatusCode).HasColumnName("COVIDVaccineStatusCode");
            entity.Property(e => e.DefaultGroupid)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("default_groupid");
            entity.Property(e => e.Dietary)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dietary");
            entity.Property(e => e.DriversLicense)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DriversLicenseExpire).HasColumnType("datetime");
            entity.Property(e => e.DriversLicenseState)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.Emailaddress)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("emailaddress");
            entity.Property(e => e.EmergencyName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("emergency_name");
            entity.Property(e => e.EmergencyPhone1)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("emergency_phone1");
            entity.Property(e => e.EmergencyPhone2)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("emergency_phone2");
            entity.Property(e => e.EmergencyRelation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("emergency_relation");
            entity.Property(e => e.EmpDriversLicenseScan)
                .IsUnicode(false)
                .HasColumnName("empDriversLicenseScan");
            entity.Property(e => e.EmpHeadShotFilePath)
                .IsUnicode(false)
                .HasColumnName("empHeadShotFilePath");
            entity.Property(e => e.EmpPassportScanFilePath)
                .IsUnicode(false)
                .HasColumnName("empPassportScanFilePath");
            entity.Property(e => e.Empcompanyno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empcompanyno");
            entity.Property(e => e.Empno).HasColumnName("empno");
            entity.Property(e => e.Empstatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("empstatus");
            entity.Property(e => e.Exemptions).HasColumnName("exemptions");
            entity.Property(e => e.ExpireDate)
                .HasColumnType("datetime")
                .HasColumnName("expire_date");
            entity.Property(e => e.Fax)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("fax");
            entity.Property(e => e.Filestat)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("filestat");
            entity.Property(e => e.Firstname)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("firstname");
            entity.Property(e => e.FlexUserNotes)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Flex_user_notes");
            entity.Property(e => e.Frioff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("frioff");
            entity.Property(e => e.FullName)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.Gradecd)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("gradecd");
            entity.Property(e => e.GroupDescription)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("group_description");
            entity.Property(e => e.GroupName)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("group_name");
            entity.Property(e => e.Groupno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("groupno");
            entity.Property(e => e.Hiredate)
                .HasColumnType("datetime")
                .HasColumnName("hiredate");
            entity.Property(e => e.ISolvedId).HasColumnName("iSolvedID");
            entity.Property(e => e.Issuecountry)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("issuecountry");
            entity.Property(e => e.Issuedate)
                .HasColumnType("datetime")
                .HasColumnName("issuedate");
            entity.Property(e => e.Issueplace)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("issueplace");
            entity.Property(e => e.JobTitle)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LastPayRaiseDate).HasColumnType("datetime");
            entity.Property(e => e.Lastgross)
                .HasColumnType("money")
                .HasColumnName("lastgross");
            entity.Property(e => e.Lastname)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("lastname");
            entity.Property(e => e.Lastnet)
                .HasColumnType("money")
                .HasColumnName("lastnet");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("locationcd");
            entity.Property(e => e.Midname)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("midname");
            entity.Property(e => e.Monoff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("monoff");
            entity.Property(e => e.Nationality)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nationality");
            entity.Property(e => e.Nickname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("nickname");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("notes");
            entity.Property(e => e.OfficeDirectPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OtherEcontact)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OtherEContact");
            entity.Property(e => e.Passportno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("passportno");
            entity.Property(e => e.Phone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("phone");
            entity.Property(e => e.Prev1lastgross)
                .HasColumnType("money")
                .HasColumnName("prev1lastgross");
            entity.Property(e => e.Prev1lastnet)
                .HasColumnType("money")
                .HasColumnName("prev1lastnet");
            entity.Property(e => e.Prev1ptdgross)
                .HasColumnType("money")
                .HasColumnName("prev1ptdgross");
            entity.Property(e => e.Prev1ptdnet)
                .HasColumnType("money")
                .HasColumnName("prev1ptdnet");
            entity.Property(e => e.Prev1qtdgross)
                .HasColumnType("money")
                .HasColumnName("prev1qtdgross");
            entity.Property(e => e.Prev1qtdnet)
                .HasColumnType("money")
                .HasColumnName("prev1qtdnet");
            entity.Property(e => e.Prev1ytdgross)
                .HasColumnType("money")
                .HasColumnName("prev1ytdgross");
            entity.Property(e => e.Prev1ytdnet)
                .HasColumnType("money")
                .HasColumnName("prev1ytdnet");
            entity.Property(e => e.Prev2lastgross)
                .HasColumnType("money")
                .HasColumnName("prev2lastgross");
            entity.Property(e => e.Prev2lastnet)
                .HasColumnType("money")
                .HasColumnName("prev2lastnet");
            entity.Property(e => e.Prev2ptdgross)
                .HasColumnType("money")
                .HasColumnName("prev2ptdgross");
            entity.Property(e => e.Prev2ptdnet)
                .HasColumnType("money")
                .HasColumnName("prev2ptdnet");
            entity.Property(e => e.Prev2qtdgross)
                .HasColumnType("money")
                .HasColumnName("prev2qtdgross");
            entity.Property(e => e.Prev2qtdnet)
                .HasColumnType("money")
                .HasColumnName("prev2qtdnet");
            entity.Property(e => e.Prev2ytdgross)
                .HasColumnType("money")
                .HasColumnName("prev2ytdgross");
            entity.Property(e => e.Prev2ytdnet)
                .HasColumnType("money")
                .HasColumnName("prev2ytdnet");
            entity.Property(e => e.Prev3lastgross)
                .HasColumnType("money")
                .HasColumnName("prev3lastgross");
            entity.Property(e => e.Prev3lastnet)
                .HasColumnType("money")
                .HasColumnName("prev3lastnet");
            entity.Property(e => e.Prev3ptdgross)
                .HasColumnType("money")
                .HasColumnName("prev3ptdgross");
            entity.Property(e => e.Prev3ptdnet)
                .HasColumnType("money")
                .HasColumnName("prev3ptdnet");
            entity.Property(e => e.Prev3qtdgross)
                .HasColumnType("money")
                .HasColumnName("prev3qtdgross");
            entity.Property(e => e.Prev3qtdnet)
                .HasColumnType("money")
                .HasColumnName("prev3qtdnet");
            entity.Property(e => e.Prev3ytdgross)
                .HasColumnType("money")
                .HasColumnName("prev3ytdgross");
            entity.Property(e => e.Prev3ytdnet)
                .HasColumnType("money")
                .HasColumnName("prev3ytdnet");
            entity.Property(e => e.Prev4lastgross)
                .HasColumnType("money")
                .HasColumnName("prev4lastgross");
            entity.Property(e => e.Prev4lastnet)
                .HasColumnType("money")
                .HasColumnName("prev4lastnet");
            entity.Property(e => e.Prev4ptdgross)
                .HasColumnType("money")
                .HasColumnName("prev4ptdgross");
            entity.Property(e => e.Prev4ptdnet)
                .HasColumnType("money")
                .HasColumnName("prev4ptdnet");
            entity.Property(e => e.Prev4qtdgross)
                .HasColumnType("money")
                .HasColumnName("prev4qtdgross");
            entity.Property(e => e.Prev4qtdnet)
                .HasColumnType("money")
                .HasColumnName("prev4qtdnet");
            entity.Property(e => e.Prev4ytdgross)
                .HasColumnType("money")
                .HasColumnName("prev4ytdgross");
            entity.Property(e => e.Prev4ytdnet)
                .HasColumnType("money")
                .HasColumnName("prev4ytdnet");
            entity.Property(e => e.Prev5lastgross)
                .HasColumnType("money")
                .HasColumnName("prev5lastgross");
            entity.Property(e => e.Prev5lastnet)
                .HasColumnType("money")
                .HasColumnName("prev5lastnet");
            entity.Property(e => e.Prev5ptdgross)
                .HasColumnType("money")
                .HasColumnName("prev5ptdgross");
            entity.Property(e => e.Prev5ptdnet)
                .HasColumnType("money")
                .HasColumnName("prev5ptdnet");
            entity.Property(e => e.Prev5qtdgross)
                .HasColumnType("money")
                .HasColumnName("prev5qtdgross");
            entity.Property(e => e.Prev5qtdnet)
                .HasColumnType("money")
                .HasColumnName("prev5qtdnet");
            entity.Property(e => e.Prev5ytdgross)
                .HasColumnType("money")
                .HasColumnName("prev5ytdgross");
            entity.Property(e => e.Prev5ytdnet)
                .HasColumnType("money")
                .HasColumnName("prev5ytdnet");
            entity.Property(e => e.Ptdgross)
                .HasColumnType("money")
                .HasColumnName("ptdgross");
            entity.Property(e => e.Ptdnet)
                .HasColumnType("money")
                .HasColumnName("ptdnet");
            entity.Property(e => e.Qtdgross)
                .HasColumnType("money")
                .HasColumnName("qtdgross");
            entity.Property(e => e.Qtdnet)
                .HasColumnType("money")
                .HasColumnName("qtdnet");
            entity.Property(e => e.Ref1)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ref1");
            entity.Property(e => e.Ref2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ref2");
            entity.Property(e => e.Ref3)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ref3");
            entity.Property(e => e.Ref4)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ref5");
            entity.Property(e => e.Satoff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("satoff");
            entity.Property(e => e.Shiftno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("shiftno");
            entity.Property(e => e.SignatureFilename)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("signature_filename");
            entity.Property(e => e.Smoker)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("smoker");
            entity.Property(e => e.Spouse)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("spouse");
            entity.Property(e => e.Ssn)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ssn");
            entity.Property(e => e.State)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("state");
            entity.Property(e => e.Sunoff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sunoff");
            entity.Property(e => e.Termcode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("termcode");
            entity.Property(e => e.Termdate)
                .HasColumnType("datetime")
                .HasColumnName("termdate");
            entity.Property(e => e.Thuroff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("thuroff");
            entity.Property(e => e.Travelrestrictions)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("travelrestrictions");
            entity.Property(e => e.Tueoff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("tueoff");
            entity.Property(e => e.UserName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("user_name");
            entity.Property(e => e.Userprofileid)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("userprofileid");
            entity.Property(e => e.Wedoff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("wedoff");
            entity.Property(e => e.Ytdgross)
                .HasColumnType("money")
                .HasColumnName("ytdgross");
            entity.Property(e => e.Ytdnet)
                .HasColumnType("money")
                .HasColumnName("ytdnet");
            entity.Property(e => e.Zip)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("zip");
        });

        modelBuilder.Entity<TmpSkanNonBarcodedInventoryToImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpSkanNonBarcodedInventoryToImport");

            entity.Property(e => e.FlexPartDesc)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.Id)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id");
            entity.Property(e => e.ItemId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("item_id");
            entity.Property(e => e.Partdesc)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(66)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.ResourceName)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("resource_name");
            entity.Property(e => e.StockTypeId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("stock_type_id");
        });

        modelBuilder.Entity<TmpSkanNonBarcodesCheckOutImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpSkanNonBarcodesCheckOutImport");

            entity.Property(e => e.BarCodeId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("bar_code_id");
            entity.Property(e => e.Entitydesc)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("entitydesc");
            entity.Property(e => e.Entityno)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Partdesc)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(66)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.ResourceName)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("resource_name");
            entity.Property(e => e.ScanTimestamp)
                .HasPrecision(0)
                .HasColumnName("scan_timestamp");
        });

        modelBuilder.Entity<TmpSkanParentChildBarcodesImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpSkanParentChildBarcodesImport");

            entity.Property(e => e.ChildBarcode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ChildPartno)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ParentBarcode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ParentPartno)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ParentSerialNo)
                .HasMaxLength(35)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpSkanPartCategoryMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpSkanPartCategoryMapping");

            entity.Property(e => e.Commomdity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("commomdity");
            entity.Property(e => e.GroupName)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("group_name");
            entity.Property(e => e.Id)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id");
        });

        modelBuilder.Entity<TmpSkanPartMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpSkanPartMapping");

            entity.Property(e => e.Id)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
        });

        modelBuilder.Entity<TmpSkanPartNumbersToImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpSkanPartNumbersToImport");

            entity.Property(e => e.BarCodeId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("bar_code_id");
            entity.Property(e => e.BarCodeLabel)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("bar_code_label");
            entity.Property(e => e.Commmodity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("commmodity");
            entity.Property(e => e.Commodity2)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("commodity2");
            entity.Property(e => e.ContentsAvailable).HasColumnName("contents_available");
            entity.Property(e => e.ContentsPermanent).HasColumnName("contents_permanent");
            entity.Property(e => e.CreatedByDate)
                .HasPrecision(0)
                .HasColumnName("created_by_date");
            entity.Property(e => e.CreatedByUser)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("created_by_user");
            entity.Property(e => e.CreatedTime).HasPrecision(0);
            entity.Property(e => e.DepthUom).HasColumnName("depth_uom");
            entity.Property(e => e.DisplayString)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("display_string");
            entity.Property(e => e.FinessePartno)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FullDisplayString)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("full_display_string");
            entity.Property(e => e.GroupName)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("group_name");
            entity.Property(e => e.Height).HasColumnName("height");
            entity.Property(e => e.Id)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id");
            entity.Property(e => e.IdManufacturer).HasColumnName("idManufacturer");
            entity.Property(e => e.IsContainer).HasColumnName("is_container");
            entity.Property(e => e.IsPickContainer).HasColumnName("is_pick_container");
            entity.Property(e => e.ItemId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("item_id");
            entity.Property(e => e.IvtNotes)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("ivt_notes");
            entity.Property(e => e.LeadSource)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("lead_source");
            entity.Property(e => e.Length).HasColumnName("length");
            entity.Property(e => e.LengthUom).HasColumnName("length_uom");
            entity.Property(e => e.Locationcd).HasColumnName("locationcd");
            entity.Property(e => e.ManufactureCountry)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("manufacture_country");
            entity.Property(e => e.Manufacturer)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("manufacturer");
            entity.Property(e => e.MaterialDesc)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("material_desc");
            entity.Property(e => e.MaterialSpec)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("material_spec");
            entity.Property(e => e.ModelNo)
                .HasMaxLength(64)
                .IsUnicode(false);
            entity.Property(e => e.NarrativeDescription)
                .IsUnicode(false)
                .HasColumnName("narrative_description");
            entity.Property(e => e.Package)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("package");
            entity.Property(e => e.Partdesc)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(66)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Projpercent).HasColumnName("projpercent");
            entity.Property(e => e.PurchaseCost).HasColumnName("purchase_cost");
            entity.Property(e => e.RentalValueUsd).HasColumnName("RentalValueUSD");
            entity.Property(e => e.ReplacementCost).HasColumnName("replacement_cost");
            entity.Property(e => e.ResourceName)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("resource_name");
            entity.Property(e => e.ResourceShortName)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("resource_short_name");
            entity.Property(e => e.SerializedContents).HasColumnName("serialized_contents");
            entity.Property(e => e.ShortHand)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("short_hand");
            entity.Property(e => e.Sku)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("SKU");
            entity.Property(e => e.Source)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("source");
            entity.Property(e => e.Totmatcost1).HasColumnName("totmatcost1");
            entity.Property(e => e.UserCreated)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Weight).HasColumnName("weight");
            entity.Property(e => e.Width).HasColumnName("width");
            entity.Property(e => e.WidthUom).HasColumnName("width_uom");
        });

        modelBuilder.Entity<TmpSkanPartNumbersView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("tmpSkanPartNumbers_View");

            entity.Property(e => e.BarCodeId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("bar_code_id");
            entity.Property(e => e.BarCodeLabel)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("bar_code_label");
            entity.Property(e => e.ContentsAvailable).HasColumnName("contents_available");
            entity.Property(e => e.ContentsPermanent).HasColumnName("contents_permanent");
            entity.Property(e => e.CreatedByDate)
                .HasPrecision(0)
                .HasColumnName("created_by_date");
            entity.Property(e => e.CreatedByUser)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("created_by_user");
            entity.Property(e => e.Description)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.DisplayString)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("display_string");
            entity.Property(e => e.Height).HasColumnName("height");
            entity.Property(e => e.Id)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id");
            entity.Property(e => e.IsContainer).HasColumnName("is_container");
            entity.Property(e => e.IsPickContainer).HasColumnName("is_pick_container");
            entity.Property(e => e.IvtNotes)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("ivt_notes");
            entity.Property(e => e.Length).HasColumnName("length");
            entity.Property(e => e.ManufactureCountry)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("manufacture_country");
            entity.Property(e => e.Manufacturer)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.NarrativeDescription)
                .IsUnicode(false)
                .HasColumnName("narrative_description");
            entity.Property(e => e.ReplacementCost).HasColumnName("replacement_cost");
            entity.Property(e => e.ResourceShortName)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("resource_short_name");
            entity.Property(e => e.SerializedContents).HasColumnName("serialized_contents");
            entity.Property(e => e.ShortHand)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("short_hand");
            entity.Property(e => e.Sku)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("sku");
            entity.Property(e => e.Weight).HasColumnName("weight");
            entity.Property(e => e.Width).HasColumnName("width");
        });

        modelBuilder.Entity<TmpSkanPartsOnProjectsToImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpSkanPartsOnProjectsToImport");

            entity.Property(e => e.ElementType)
                .HasMaxLength(64)
                .IsUnicode(false);
            entity.Property(e => e.Entityno)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.EqlistId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("eqlist_id");
            entity.Property(e => e.Id)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id");
            entity.Property(e => e.NoteText)
                .IsUnicode(false)
                .HasColumnName("note_text");
            entity.Property(e => e.OpsSubcaption)
                .IsUnicode(false)
                .HasColumnName("ops_subcaption");
            entity.Property(e => e.OpsSubphase)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ops_subphase");
            entity.Property(e => e.ParentItemId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("parent_item_id");
            entity.Property(e => e.Partdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(66)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.PickupDate)
                .HasPrecision(0)
                .HasColumnName("pickup_date");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.QtySubrented).HasColumnName("qty_subrented");
            entity.Property(e => e.QuoteSubcaption)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("quote_subcaption");
            entity.Property(e => e.QuoteSubphase)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("quote_subphase");
            entity.Property(e => e.ReturnDate)
                .HasPrecision(0)
                .HasColumnName("return_date");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.UpstreamLineItemId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("upstream_line_item_id");
        });

        modelBuilder.Entity<TmpSkanPartsOnProjectsToImportReseq>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpSkanPartsOnProjectsToImportReseq");

            entity.Property(e => e.ElementType)
                .HasMaxLength(64)
                .IsUnicode(false);
            entity.Property(e => e.Entityno)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.EqlistId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("eqlist_id");
            entity.Property(e => e.Id)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id");
            entity.Property(e => e.NoteText)
                .IsUnicode(false)
                .HasColumnName("note_text");
            entity.Property(e => e.OpsSubcaption)
                .IsUnicode(false)
                .HasColumnName("ops_subcaption");
            entity.Property(e => e.OpsSubphase)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ops_subphase");
            entity.Property(e => e.ParentItemId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("parent_item_id");
            entity.Property(e => e.ParentLineId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("parent_line_id");
            entity.Property(e => e.Partdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(66)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.PickupDate)
                .HasPrecision(0)
                .HasColumnName("pickup_date");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.QtySubrented).HasColumnName("qty_subrented");
            entity.Property(e => e.QuoteSubcaption)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("quote_subcaption");
            entity.Property(e => e.QuoteSubphase)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("quote_subphase");
            entity.Property(e => e.ReturnDate)
                .HasPrecision(0)
                .HasColumnName("return_date");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.UpstreamLineItemId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("upstream_line_item_id");
        });

        modelBuilder.Entity<TmpSkanPartsOnProjectsToImportStaging>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpSkanPartsOnProjectsToImportStaging");

            entity.Property(e => e.Entityno)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.EqlistId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("eqlist_id");
            entity.Property(e => e.Id)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id");
            entity.Property(e => e.MfgDesc)
                .IsUnicode(false)
                .HasColumnName("mfg_desc");
            entity.Property(e => e.Partdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(66)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.PickupDate)
                .HasPrecision(0)
                .HasColumnName("pickup_date");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.QtySubrented).HasColumnName("qty_subrented");
            entity.Property(e => e.ReturnDate)
                .HasPrecision(0)
                .HasColumnName("return_date");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
        });

        modelBuilder.Entity<TmpSkanProjectBidSubphasesImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpSkanProjectBidSubphasesImport");

            entity.Property(e => e.Agency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("agency");
            entity.Property(e => e.Bidmarkup).HasColumnName("bidmarkup");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CrewPrep).HasColumnType("smalldatetime");
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("engactivecd");
            entity.Property(e => e.Entitytype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("entitytype");
            entity.Property(e => e.ExchangeRateDate).HasColumnType("datetime");
            entity.Property(e => e.Finactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("finactivecd");
            entity.Property(e => e.FirstShow).HasColumnType("smalldatetime");
            entity.Property(e => e.LastShow).HasColumnType("smalldatetime");
            entity.Property(e => e.LoadOut).HasColumnType("smalldatetime");
            entity.Property(e => e.Opsmgr)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("opsmgr");
            entity.Property(e => e.Plactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("plactivecd");
            entity.Property(e => e.Probability).HasColumnName("probability");
            entity.Property(e => e.Proptype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("proptype");
            entity.Property(e => e.Respempno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("respempno");
            entity.Property(e => e.SecondaryOpsEmpno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("secondaryOpsEmpno");
            entity.Property(e => e.Sfactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sfactivecd");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.Subphase)
                .HasMaxLength(54)
                .IsUnicode(false)
                .HasColumnName("subphase");
            entity.Property(e => e.Subphasedesc)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("subphasedesc");
        });

        modelBuilder.Entity<TmpSkanProjectSubphasesImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpSkanProjectSubphasesImport");

            entity.Property(e => e.Agency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("agency");
            entity.Property(e => e.Bidmarkup).HasColumnName("bidmarkup");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CrewPrep).HasColumnType("smalldatetime");
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("engactivecd");
            entity.Property(e => e.Entitytype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("entitytype");
            entity.Property(e => e.ExchangeRateDate).HasColumnType("datetime");
            entity.Property(e => e.Finactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("finactivecd");
            entity.Property(e => e.FirstShow).HasColumnType("smalldatetime");
            entity.Property(e => e.LastShow).HasColumnType("smalldatetime");
            entity.Property(e => e.LoadOut).HasColumnType("smalldatetime");
            entity.Property(e => e.Opsmgr)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("opsmgr");
            entity.Property(e => e.Plactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("plactivecd");
            entity.Property(e => e.Probability).HasColumnName("probability");
            entity.Property(e => e.Proptype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("proptype");
            entity.Property(e => e.Respempno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("respempno");
            entity.Property(e => e.SecondaryOpsEmpno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("secondaryOpsEmpno");
            entity.Property(e => e.Sfactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sfactivecd");
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.Subphase)
                .HasMaxLength(54)
                .IsUnicode(false)
                .HasColumnName("subphase");
            entity.Property(e => e.Subphasedesc)
                .IsUnicode(false)
                .HasColumnName("subphasedesc");
        });

        modelBuilder.Entity<TmpSkanProjectsL7>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpSkanProjectsL7");

            entity.Property(e => e.CalcEnddate).HasColumnName("calc_enddate");
            entity.Property(e => e.CalcStartdate).HasColumnName("calc_startdate");
            entity.Property(e => e.Currencycd)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("currencycd");
            entity.Property(e => e.ElementType)
                .HasMaxLength(64)
                .IsUnicode(false);
            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("engactivecd");
            entity.Property(e => e.Entitydesc)
                .HasMaxLength(163)
                .IsUnicode(false)
                .HasColumnName("entitydesc");
            entity.Property(e => e.Entityno)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Id)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id");
            entity.Property(e => e.IsOpen).HasColumnName("is_open");
            entity.Property(e => e.Ordinal).HasColumnName("ordinal");
            entity.Property(e => e.ParentId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("parent_id");
            entity.Property(e => e.PlanEnddate).HasColumnName("plan_enddate");
            entity.Property(e => e.PlanStartdate).HasColumnName("plan_startdate");
            entity.Property(e => e.Probability)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ProjectStatus)
                .HasMaxLength(32)
                .IsUnicode(false);
            entity.Property(e => e.WorkflowState)
                .HasMaxLength(128)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpSkanProjectsToImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpSkanProjectsToImport");

            entity.Property(e => e.Agency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("agency");
            entity.Property(e => e.Bidmarkup)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("bidmarkup");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Currency)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.ElementType)
                .HasMaxLength(64)
                .IsUnicode(false);
            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("engactivecd");
            entity.Property(e => e.Entitydesc)
                .HasMaxLength(163)
                .IsUnicode(false)
                .HasColumnName("entitydesc");
            entity.Property(e => e.Entityno)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Entitytype)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("entitytype");
            entity.Property(e => e.Finactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("finactivecd");
            entity.Property(e => e.Id)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id");
            entity.Property(e => e.IsOpen).HasColumnName("is_open");
            entity.Property(e => e.Opsmgr)
                .IsUnicode(false)
                .HasColumnName("opsmgr");
            entity.Property(e => e.Ordinal).HasColumnName("ordinal");
            entity.Property(e => e.ParentId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("parent_id");
            entity.Property(e => e.Plactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("plactivecd");
            entity.Property(e => e.PlanEnddate).HasColumnName("plan_enddate");
            entity.Property(e => e.PlanStartdate).HasColumnName("plan_startdate");
            entity.Property(e => e.Probability)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ProjectStatus)
                .HasMaxLength(32)
                .IsUnicode(false);
            entity.Property(e => e.Proptype)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("proptype");
            entity.Property(e => e.Respemno)
                .IsUnicode(false)
                .HasColumnName("respemno");
            entity.Property(e => e.Sfactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sfactivecd");
            entity.Property(e => e.WorkflowState)
                .HasMaxLength(128)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpSkanRepairActivitiesClosedImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpSkanRepairActivitiesClosedImport");

            entity.Property(e => e.Id)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id");
            entity.Property(e => e.IdActivity).HasColumnName("id_activity");
            entity.Property(e => e.IdTicket).HasColumnName("id_ticket");
            entity.Property(e => e.ResolvedDate)
                .HasPrecision(0)
                .HasColumnName("resolved_date");
            entity.Property(e => e.UserName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("user_name");
        });

        modelBuilder.Entity<TmpSkanRepairActivitiesOpenedImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpSkanRepairActivitiesOpenedImport");

            entity.Property(e => e.CreatedByDate)
                .HasPrecision(0)
                .HasColumnName("created_by_date");
            entity.Property(e => e.Id)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id");
            entity.Property(e => e.IdActivity).HasColumnName("id_activity");
            entity.Property(e => e.IdTicket).HasColumnName("id_ticket");
            entity.Property(e => e.Reason)
                .IsUnicode(false)
                .HasColumnName("reason");
            entity.Property(e => e.UserName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("user_name");
        });

        modelBuilder.Entity<TmpSkanRepairTicketsImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpSkanRepairTicketsImport");

            entity.Property(e => e.BarCodeId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("bar_code_id");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Id)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id");
            entity.Property(e => e.IdTicket).HasColumnName("id_ticket");
        });

        modelBuilder.Entity<TmpSkanTransactionsToImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpSkanTransactionsToImport");

            entity.Property(e => e.Area)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("area");
            entity.Property(e => e.Batchno)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.EnterDateUtc)
                .HasPrecision(0)
                .HasColumnName("EnterDateUTC");
            entity.Property(e => e.Enterdate)
                .HasPrecision(0)
                .HasColumnName("enterdate");
            entity.Property(e => e.HiwmoveQty).HasColumnName("HIWMoveQty");
            entity.Property(e => e.LineItemId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("line_item_id");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.Orderno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("orderno");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("parentunique_no");
            entity.Property(e => e.PartNoImportId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("partNoImport_id");
            entity.Property(e => e.Partno)
                .HasMaxLength(66)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Ref3)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ref3");
            entity.Property(e => e.Ref4)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("ref5");
            entity.Property(e => e.Row)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.ScanMode)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("scan_mode");
            entity.Property(e => e.SerialId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("serial_id");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.Trandate).HasColumnName("trandate");
            entity.Property(e => e.Trantype)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("trantype");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.Userid)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("userid");
        });

        modelBuilder.Entity<TmpSkanTruckRackUpdate>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpSkanTruckRackUpdates");

            entity.Property(e => e.Partno)
                .HasMaxLength(255)
                .HasColumnName("partno");
            entity.Property(e => e.RackBays)
                .HasMaxLength(255)
                .HasColumnName("rack_bays");
            entity.Property(e => e.RackUnits).HasColumnName("rack_units");
            entity.Property(e => e.Truck)
                .HasMaxLength(255)
                .HasColumnName("truck");
        });

        modelBuilder.Entity<TmpSkanUser>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpSkanUsers");

            entity.Property(e => e.DefaultGroupid)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("default_groupid");
            entity.Property(e => e.Emailaddress)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("emailaddress");
            entity.Property(e => e.FinesseUserName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Finesse_user_name");
            entity.Property(e => e.FullName)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.GroupDescription)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("group_description");
            entity.Property(e => e.GroupName)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("group_name");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("notes");
            entity.Property(e => e.Userprofileid)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("userprofileid");
        });

        modelBuilder.Entity<TmpSkanUsersMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpSkanUsersMapping");

            entity.Property(e => e.ApiId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("api_id");
            entity.Property(e => e.CreatedByDate)
                .HasPrecision(0)
                .HasColumnName("created_by_date");
            entity.Property(e => e.CreatedByUser)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("created_by_user");
            entity.Property(e => e.DefAccordCompHeight).HasColumnName("def_accord_comp_height");
            entity.Property(e => e.DefAccordCompId)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("def_accord_comp_id");
            entity.Property(e => e.DefaultGroupid)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("default_groupid");
            entity.Property(e => e.DirectLoginCode)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("direct_login_code");
            entity.Property(e => e.Emailaddress)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("emailaddress");
            entity.Property(e => e.ExtAuthenticatorId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ext_authenticator_id");
            entity.Property(e => e.FkSecretQ)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("fk_secret_q");
            entity.Property(e => e.Initiallogindate)
                .HasPrecision(0)
                .HasColumnName("initiallogindate");
            entity.Property(e => e.IsDeleted).HasColumnName("is_deleted");
            entity.Property(e => e.IsLocked).HasColumnName("is_locked");
            entity.Property(e => e.IsSystemUser).HasColumnName("is_system_user");
            entity.Property(e => e.LastEditDate)
                .HasPrecision(0)
                .HasColumnName("last_edit_date");
            entity.Property(e => e.LastEditUser)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("last_edit_user");
            entity.Property(e => e.LocaleId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("locale_id");
            entity.Property(e => e.MobilePinCode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("mobile_pin_code");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Nickname)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("nickname");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("notes");
            entity.Property(e => e.PasswordChangeRequired).HasColumnName("password_change_required");
            entity.Property(e => e.PasswordNeverExpires).HasColumnName("password_never_expires");
            entity.Property(e => e.Passwordhash)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("passwordhash");
            entity.Property(e => e.Registrationdate)
                .HasPrecision(0)
                .HasColumnName("registrationdate");
            entity.Property(e => e.SecretKey)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("secret_key");
            entity.Property(e => e.SecretQAns)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("secret_q_ans");
            entity.Property(e => e.SecurityPolicyId)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("security_policy_id");
            entity.Property(e => e.UserName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("user_name");
            entity.Property(e => e.Useragreedate)
                .HasPrecision(0)
                .HasColumnName("useragreedate");
            entity.Property(e => e.Userprofileid)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("userprofileid");
        });

        modelBuilder.Entity<TmpSolutionsProjectExpense>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpSolutionsProjectExpenses");

            entity.Property(e => e.Dollars).HasColumnName("dollars");
            entity.Property(e => e.Entitydesc).HasColumnName("entitydesc");
            entity.Property(e => e.Entityno).HasColumnName("entityno");
        });

        modelBuilder.Entity<TmpSoundImagePartMappingHey>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpSoundImagePartMappingHEY");

            entity.Property(e => e.CheckComment)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("checkComment");
            entity.Property(e => e.CheckedBy)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("checkedBy");
            entity.Property(e => e.CheckedDate).HasColumnName("checkedDate");
            entity.Property(e => e.IdManufacturer).HasColumnName("idManufacturer");
            entity.Property(e => e.PartId).HasColumnName("PartID");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
        });

        modelBuilder.Entity<TmpSoundImageProjectsImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpSoundImageProjectsImport");

            entity.Property(e => e.EndDate).HasColumnName("End Date");
            entity.Property(e => e.LastModified).HasColumnName("Last Modified");
            entity.Property(e => e.LastModifiedDate).HasColumnName("Last Modified Date");
            entity.Property(e => e.StartDate).HasColumnName("Start Date");
            entity.Property(e => e.TourDesc).HasColumnName("Tour Desc");
            entity.Property(e => e.TourId).HasColumnName("TourID");
        });

        modelBuilder.Entity<TmpSpeakerComponentFailureDatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpSpeakerComponentFailureData");

            entity.Property(e => e.CurveId).HasColumnName("CurveID");
            entity.Property(e => e.StackTestId).HasColumnName("StackTestID");
        });

        modelBuilder.Entity<TmpSpeakerComponentImpedanceDatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpSpeakerComponentImpedanceData");

            entity.Property(e => e.CurveId).HasColumnName("CurveID");
            entity.Property(e => e.StackTestId).HasColumnName("StackTestID");
        });

        modelBuilder.Entity<TmpSpeakerTestConfigurationsFromXml20210723>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpSpeakerTestConfigurationsFromXML20210723");

            entity.Property(e => e.StackTestId).HasColumnName("StackTestID");
        });

        modelBuilder.Entity<TmpSubUnique>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("tmp_sub_unique");

            entity.Property(e => e.Partentityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partentityno");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Partrev)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("partrev");
            entity.Property(e => e.TotOnhand).HasColumnName("tot_onhand");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<TmpSurfhireInventory20190423>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpSurfhireInventory20190423");

            entity.Property(e => e.Category).HasMaxLength(255);
            entity.Property(e => e.DepPeriod).HasMaxLength(255);
            entity.Property(e => e.DepRate).HasMaxLength(255);
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.FinessePartNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Height).HasMaxLength(255);
            entity.Property(e => e.Length).HasMaxLength(255);
            entity.Property(e => e.Location).HasMaxLength(255);
            entity.Property(e => e.Manufacturer).HasMaxLength(255);
            entity.Property(e => e.Model).HasMaxLength(255);
            entity.Property(e => e.PartNo).HasMaxLength(255);
            entity.Property(e => e.PurchDate).HasMaxLength(255);
            entity.Property(e => e.Qty).HasMaxLength(255);
            entity.Property(e => e.SerialNo).HasMaxLength(255);
            entity.Property(e => e.Width).HasMaxLength(255);
        });

        modelBuilder.Entity<TmpSysproAvailabilityTransaction>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpSysproAvailabilityTransactions");

            entity.Property(e => e.Bld)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.SourceKey)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_BIN");
            entity.Property(e => e.SourceType)
                .HasMaxLength(25)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpSysproConflictMove20250122>(entity =>
        {
            entity.HasKey(e => e.OldPartNo);

            entity.ToTable("tmpSysproConflictMove20250122");

            entity.Property(e => e.OldPartNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NewPartNo)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpTdaAccountExecsCreated>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdaAccountExecsCreated");

            entity.Property(e => e.Addr1)
                .HasMaxLength(100)
                .HasColumnName("addr1");
            entity.Property(e => e.Birthdate).HasColumnType("datetime");
            entity.Property(e => e.Birthplace).HasMaxLength(50);
            entity.Property(e => e.Cellphone).HasMaxLength(50);
            entity.Property(e => e.City).HasMaxLength(50);
            entity.Property(e => e.DisplayName).HasMaxLength(100);
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.EmergencyPhone2)
                .HasMaxLength(25)
                .HasColumnName("Emergency_phone2");
            entity.Property(e => e.Empno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.Empstatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("empstatus");
            entity.Property(e => e.Fax).HasMaxLength(50);
            entity.Property(e => e.FirstName).HasMaxLength(50);
            entity.Property(e => e.Gradecd)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("gradecd");
            entity.Property(e => e.Groupno)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("groupno");
            entity.Property(e => e.Handle).HasMaxLength(50);
            entity.Property(e => e.IdUserArranger).HasColumnName("IdUser_Arranger");
            entity.Property(e => e.Isocode)
                .HasMaxLength(50)
                .HasColumnName("ISOCode");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("locationcd");
            entity.Property(e => e.Notes).HasMaxLength(1406);
            entity.Property(e => e.PassportNo).HasMaxLength(50);
            entity.Property(e => e.Phone).HasMaxLength(50);
            entity.Property(e => e.PhoneCompany).HasMaxLength(50);
            entity.Property(e => e.Surname).HasMaxLength(50);
            entity.Property(e => e.UserName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("user_name");
            entity.Property(e => e.Zip).HasMaxLength(10);
        });

        modelBuilder.Entity<TmpTdaBarcodesCheckedOutToJob>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdaBarcodesCheckedOutToJobs");

            entity.Property(e => e.Barcode).HasMaxLength(50);
            entity.Property(e => e.CheckInDate).HasColumnType("smalldatetime");
            entity.Property(e => e.CheckOutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.DayTimeIn).HasColumnType("smalldatetime");
            entity.Property(e => e.DayTimeOut).HasColumnType("smalldatetime");
            entity.Property(e => e.EntityNo)
                .HasMaxLength(4000)
                .HasColumnName("entityNo");
            entity.Property(e => e.FinalCheckOutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.IdStockItem2JobParent).HasColumnName("IdStockItem2Job_Parent");
            entity.Property(e => e.JobAe)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("JobAE");
            entity.Property(e => e.JobDesc).HasMaxLength(100);
            entity.Property(e => e.JobNo).HasMaxLength(50);
            entity.Property(e => e.JobState).HasMaxLength(50);
            entity.Property(e => e.ProjAe)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ProjAE");
            entity.Property(e => e.ProjectDesc).HasMaxLength(100);
            entity.Property(e => e.ProjectNo).HasMaxLength(50);
        });

        modelBuilder.Entity<TmpTdaBarcodesToConvertToNonbarcode>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdaBarcodesToConvertToNonbarcodes");

            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Category)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.Partdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<TmpTdaBidSubphasesCreated>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdaBidSubphasesCreated");

            entity.Property(e => e.Agency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("agency");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.CrewPrep)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.DayTimeIn).HasColumnType("smalldatetime");
            entity.Property(e => e.DayTimeOut).HasColumnType("smalldatetime");
            entity.Property(e => e.Entitydesc)
                .HasMaxLength(145)
                .HasColumnName("entitydesc");
            entity.Property(e => e.Entityno)
                .HasMaxLength(4000)
                .HasColumnName("entityno");
            entity.Property(e => e.Entitytype)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("entitytype");
            entity.Property(e => e.ExchangeRateDate).HasColumnType("smalldatetime");
            entity.Property(e => e.Finactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("finactivecd");
            entity.Property(e => e.FinesseUser).HasMaxLength(51);
            entity.Property(e => e.FirstShow)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.InternalOrg)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("internal_org");
            entity.Property(e => e.JobEngActiveCd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.LastShow)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LoadOut)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Opsmgr)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("opsmgr");
            entity.Property(e => e.Plactive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("plactive");
            entity.Property(e => e.Probability)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("probability");
            entity.Property(e => e.ProjNumber).HasMaxLength(50);
            entity.Property(e => e.ProjRentalSumPrice).HasColumnType("money");
            entity.Property(e => e.ProjType)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ProjectStatusCode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Proptype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("proptype");
            entity.Property(e => e.Respempno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("respempno");
            entity.Property(e => e.SecondaryOpsEmpno).HasColumnName("secondaryOpsEmpno");
            entity.Property(e => e.Sfactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sfactivecd");
        });

        modelBuilder.Entity<TmpTdaCountryMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdaCountryMapping");

            entity.Property(e => e.CallingCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Caption).HasMaxLength(50);
            entity.Property(e => e.CaptionLng2).HasMaxLength(50);
            entity.Property(e => e.CaptionLng3).HasMaxLength(50);
            entity.Property(e => e.CaptionLng4).HasMaxLength(50);
            entity.Property(e => e.CaptionLng5).HasMaxLength(50);
            entity.Property(e => e.CaptionLng6).HasMaxLength(50);
            entity.Property(e => e.Countrycode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("countrycode");
            entity.Property(e => e.Countrydesc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("countrydesc");
            entity.Property(e => e.InnerEu).HasColumnName("InnerEU");
            entity.Property(e => e.Isocode)
                .HasMaxLength(4000)
                .HasColumnName("ISOCode");
            entity.Property(e => e.PhonePrefix).HasMaxLength(10);
            entity.Property(e => e.Region)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpTdaCrewOrderedOnFinesseProject>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdaCrewOrderedOnFinesseProjects");

            entity.Property(e => e.DaysInAction).HasColumnType("numeric(16, 2)");
            entity.Property(e => e.EmplineNo).HasColumnName("empline_no");
            entity.Property(e => e.Entityno)
                .HasMaxLength(4000)
                .HasColumnName("entityno");
            entity.Property(e => e.EstHours).HasColumnName("est_hours");
            entity.Property(e => e.EstRate).HasColumnName("est_rate");
            entity.Property(e => e.EstRevRate).HasColumnName("est_rev_rate");
            entity.Property(e => e.EstRevTotal)
                .HasColumnType("money")
                .HasColumnName("est_rev_total");
            entity.Property(e => e.Fromdate).HasColumnName("fromdate");
            entity.Property(e => e.Jobdesc)
                .HasMaxLength(100)
                .HasColumnName("jobdesc");
            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("jobtype");
            entity.Property(e => e.ResourceType).HasMaxLength(50);
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.Todate).HasColumnName("todate");
            entity.Property(e => e.TotalPrice).HasColumnType("money");
        });

        modelBuilder.Entity<TmpTdaDeletedPayRatesFromTodayOnward20230321>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdaDeletedPayRatesFromTodayOnward20230321");

            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.Firstname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("firstname");
            entity.Property(e => e.JobType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Lastname)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("lastname");
            entity.Property(e => e.Note)
                .HasMaxLength(1000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpTdaDguvBarcodesMovedFromJobsToInstock>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdaDguvBarcodesMovedFromJobsToInstock");

            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.FinessePartNo).HasMaxLength(4000);
            entity.Property(e => e.FromArea)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fromArea");
            entity.Property(e => e.FromBld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fromBld");
            entity.Property(e => e.FromDept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fromDept");
            entity.Property(e => e.Onhand).HasColumnName("onhand");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Pieces).HasColumnName("pieces");
            entity.Property(e => e.Row)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.SessionId).HasColumnName("session_id");
            entity.Property(e => e.ToArea)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("toArea");
            entity.Property(e => e.ToBatchNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("toBatchNo");
            entity.Property(e => e.ToBld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("toBld");
            entity.Property(e => e.ToDept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("toDept");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<TmpTdaEquipmentCheckOut>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdaEquipmentCheckOut");

            entity.Property(e => e.EntityNo)
                .HasMaxLength(4000)
                .HasColumnName("entityNo");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
        });

        modelBuilder.Entity<TmpTdaJobStateMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdaJobStateMapping");

            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("engactivecd");
            entity.Property(e => e.JobState).HasMaxLength(50);
            entity.Property(e => e.JobStateEn)
                .HasMaxLength(50)
                .HasColumnName("JobStateEN");
            entity.Property(e => e.JobType).HasMaxLength(50);
            entity.Property(e => e.JobTypeEn)
                .HasMaxLength(50)
                .HasColumnName("JobTypeEN");
            entity.Property(e => e.Proptype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("proptype");
        });

        modelBuilder.Entity<TmpTdaNextEntitynoForImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdaNextEntitynoForImport");

            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
        });

        modelBuilder.Entity<TmpTdaNonBarcodedDguvItemsToCheckOutToJob>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdaNonBarcodedDguvItemsToCheckOutToJobs");

            entity.Property(e => e.FinessePartNo).HasMaxLength(4000);
            entity.Property(e => e.FromArea)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fromArea");
            entity.Property(e => e.FromBatchNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("fromBatchNo");
            entity.Property(e => e.FromBld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fromBld");
            entity.Property(e => e.FromDept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("fromDept");
            entity.Property(e => e.ParentuniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("parentunique_no");
            entity.Property(e => e.Pieces).HasColumnName("pieces");
            entity.Property(e => e.Row)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.SessionId).HasColumnName("session_id");
            entity.Property(e => e.TfrQty).HasColumnName("tfrQty");
            entity.Property(e => e.ToArea)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("toArea");
            entity.Property(e => e.ToBatchNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("toBatchNo");
            entity.Property(e => e.ToBld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("toBld");
            entity.Property(e => e.ToDept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("toDept");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<TmpTdaNonBarcodedInventoryToAdd>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdaNonBarcodedInventoryToAdd");

            entity.Property(e => e.Acctno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("acctno");
            entity.Property(e => e.Batchno)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Caption).HasMaxLength(255);
            entity.Property(e => e.Dept)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.FinessePartNo).HasMaxLength(4000);
            entity.Property(e => e.Number).HasMaxLength(15);
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Ponumber)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PONumber");
            entity.Property(e => e.Ref4)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("ref5");
            entity.Property(e => e.Row)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("row");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("serial_no");
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("unique_no");
        });

        modelBuilder.Entity<TmpTdaPackagesList>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdaPackagesLists");

            entity.Property(e => e.Caption).HasMaxLength(250);
            entity.Property(e => e.FinessePartNo).HasMaxLength(4000);
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Price).HasColumnType("numeric(12, 4)");
            entity.Property(e => e.StockDesc).HasMaxLength(255);
            entity.Property(e => e.StockNumber).HasMaxLength(15);
        });

        modelBuilder.Entity<TmpTdaPartMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdaPartMapping");

            entity.Property(e => e.Ejpartno)
                .HasMaxLength(15)
                .HasColumnName("EJPartno");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
        });

        modelBuilder.Entity<TmpTdaPartNumber>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdaPartNumbers");

            entity.Property(e => e.ApparentPower).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.Barcode).HasMaxLength(50);
            entity.Property(e => e.BookingWarning).HasMaxLength(255);
            entity.Property(e => e.Caption).HasMaxLength(255);
            entity.Property(e => e.Category).HasMaxLength(50);
            entity.Property(e => e.Comment).HasMaxLength(512);
            entity.Property(e => e.CreationTime).HasColumnType("smalldatetime");
            entity.Property(e => e.CustomNumber).HasMaxLength(50);
            entity.Property(e => e.Depth).HasColumnType("numeric(18, 6)");
            entity.Property(e => e.DepthNet).HasColumnType("numeric(18, 6)");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.EconomicLife).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.EjpartNo)
                .HasMaxLength(15)
                .HasColumnName("EJPartNo");
            entity.Property(e => e.Height).HasColumnType("numeric(18, 6)");
            entity.Property(e => e.HeightNet).HasColumnType("numeric(18, 6)");
            entity.Property(e => e.IdAddressManufacturer).HasColumnName("IdAddress_Manufacturer");
            entity.Property(e => e.IdCountryManufacturer).HasColumnName("IdCountry_Manufacturer");
            entity.Property(e => e.Manufacturer).HasMaxLength(100);
            entity.Property(e => e.Number).HasMaxLength(15);
            entity.Property(e => e.PirealCosts)
                .HasColumnType("money")
                .HasColumnName("PIRealCosts");
            entity.Property(e => e.PolicyComment).HasMaxLength(255);
            entity.Property(e => e.PowerConnection).HasMaxLength(50);
            entity.Property(e => e.Purchase).HasColumnType("money");
            entity.Property(e => e.RateOfDutyNumber).HasMaxLength(50);
            entity.Property(e => e.RealPower).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.RentalsPerYear).HasColumnType("numeric(12, 4)");
            entity.Property(e => e.RmBizPublish).HasColumnName("rmBizPublish");
            entity.Property(e => e.RmautoLicenceUpdate).HasColumnName("RMAutoLicenceUpdate");
            entity.Property(e => e.SubCategory).HasMaxLength(255);
            entity.Property(e => e.UpdateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.Usage).HasColumnType("numeric(12, 8)");
            entity.Property(e => e.UtilisationPlan).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.Volume).HasColumnType("numeric(18, 6)");
            entity.Property(e => e.VolumeNet).HasColumnType("numeric(18, 6)");
            entity.Property(e => e.Weight).HasColumnType("numeric(18, 6)");
            entity.Property(e => e.WeightNet).HasColumnType("numeric(18, 6)");
            entity.Property(e => e.Width).HasColumnType("numeric(18, 6)");
            entity.Property(e => e.WidthNet).HasColumnType("numeric(18, 6)");
        });

        modelBuilder.Entity<TmpTdaPartNumberFixesPostImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdaPartNumberFixesPostImport");

            entity.Property(e => e.Caption).HasMaxLength(255);
            entity.Property(e => e.Category)
                .HasMaxLength(255)
                .HasColumnName("category");
            entity.Property(e => e.Category2)
                .HasMaxLength(255)
                .HasColumnName("category2");
            entity.Property(e => e.Country)
                .HasMaxLength(255)
                .HasColumnName("country");
            entity.Property(e => e.Country3)
                .HasMaxLength(255)
                .HasColumnName("country3");
            entity.Property(e => e.Number).HasMaxLength(255);
            entity.Property(e => e.Partdesc)
                .HasMaxLength(255)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(255)
                .HasColumnName("partno");
            entity.Property(e => e.Question)
                .HasMaxLength(255)
                .HasColumnName("question");
            entity.Property(e => e.Reason)
                .HasMaxLength(255)
                .HasColumnName("reason");
            entity.Property(e => e.RenamePartDescription)
                .HasMaxLength(255)
                .HasColumnName("rename part description");
            entity.Property(e => e.Tag)
                .HasMaxLength(255)
                .HasColumnName("tag");
            entity.Property(e => e.Unmap)
                .HasMaxLength(255)
                .HasColumnName("unmap");
        });

        modelBuilder.Entity<TmpTdaPartNumbersCreated>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdaPartNumbersCreated");

            entity.Property(e => e.Acctno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("acctno");
            entity.Property(e => e.BidValueUsd)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("bid_value_USD");
            entity.Property(e => e.Commodity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("commodity");
            entity.Property(e => e.Height).HasColumnName("height");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Length).HasColumnName("length");
            entity.Property(e => e.Locationcd).HasColumnName("locationcd");
            entity.Property(e => e.MakePurchase)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("make_purchase");
            entity.Property(e => e.MaterialDesc)
                .HasMaxLength(150)
                .HasColumnName("material_desc");
            entity.Property(e => e.NewIdStockTypeCategory).HasColumnName("newIdStockTypeCategory");
            entity.Property(e => e.Number).HasMaxLength(15);
            entity.Property(e => e.Origin)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("origin");
            entity.Property(e => e.Package)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("package");
            entity.Property(e => e.Parent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("parent");
            entity.Property(e => e.Partdesc)
                .HasMaxLength(4000)
                .HasColumnName("partdesc");
            entity.Property(e => e.PartdescSales)
                .HasMaxLength(4000)
                .HasColumnName("partdesc_sales");
            entity.Property(e => e.Partno)
                .HasMaxLength(4000)
                .HasColumnName("partno");
            entity.Property(e => e.RentalValueUsd).HasColumnName("rental_value_USD");
            entity.Property(e => e.SessionId).HasColumnName("session_id");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.Updatetime)
                .HasColumnType("smalldatetime")
                .HasColumnName("updatetime");
            entity.Property(e => e.Weight).HasColumnName("weight");
            entity.Property(e => e.Width).HasColumnName("width");
        });

        modelBuilder.Entity<TmpTdaPartNumbersForDguvTesting>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdaPartNumbersForDguvTesting");

            entity.Property(e => e.Acctno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("acctno");
            entity.Property(e => e.Barcode).HasMaxLength(50);
            entity.Property(e => e.Bidvalue)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("bidvalue");
            entity.Property(e => e.Category)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("category");
            entity.Property(e => e.FinessePartNo).HasMaxLength(4000);
            entity.Property(e => e.Height)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("height");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Length)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("length");
            entity.Property(e => e.Locationncd).HasColumnName("locationncd");
            entity.Property(e => e.MakePurchase)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("make_purchase");
            entity.Property(e => e.MaterialDesc)
                .HasMaxLength(150)
                .HasColumnName("material_desc");
            entity.Property(e => e.Number).HasMaxLength(15);
            entity.Property(e => e.Origin)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("origin");
            entity.Property(e => e.Package)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("package");
            entity.Property(e => e.Parent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("parent");
            entity.Property(e => e.Partdesc)
                .HasMaxLength(275)
                .HasColumnName("partdesc");
            entity.Property(e => e.PartdescSales)
                .HasMaxLength(255)
                .HasColumnName("partdesc_sales");
            entity.Property(e => e.Partno)
                .HasMaxLength(4000)
                .HasColumnName("partno");
            entity.Property(e => e.Rentalvalue)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("rentalvalue");
            entity.Property(e => e.Secondarycategory).HasColumnName("secondarycategory");
            entity.Property(e => e.SessionId).HasColumnName("session_id");
            entity.Property(e => e.Updatetime)
                .HasColumnType("smalldatetime")
                .HasColumnName("updatetime");
            entity.Property(e => e.Weight)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("weight");
            entity.Property(e => e.Width)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("width");
        });

        modelBuilder.Entity<TmpTdaPartNumbersView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("tmpTdaPartNumbers_View");

            entity.Property(e => e.Barcode).HasMaxLength(50);
            entity.Property(e => e.Category).HasMaxLength(50);
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.EjpartNo)
                .HasMaxLength(15)
                .HasColumnName("EJPartNo");
            entity.Property(e => e.Manufacturer).HasMaxLength(100);
            entity.Property(e => e.Purchase).HasColumnType("money");
            entity.Property(e => e.SubCategory).HasMaxLength(255);
        });

        modelBuilder.Entity<TmpTdaPartsList>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdaPartsList");

            entity.Property(e => e.Factor).HasColumnType("numeric(18, 8)");
            entity.Property(e => e.IdReferenctype).HasColumnName("id_referenctype");
            entity.Property(e => e.Parentpartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("parentpartno");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
        });

        modelBuilder.Entity<TmpTdaPartsList1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdaPartsLists");

            entity.Property(e => e.CaptionEn)
                .HasMaxLength(50)
                .HasColumnName("CaptionEN");
            entity.Property(e => e.ChildDesc).HasMaxLength(255);
            entity.Property(e => e.ChildNumber).HasMaxLength(15);
            entity.Property(e => e.Factor).HasColumnType("numeric(18, 8)");
            entity.Property(e => e.FinesseChild).HasMaxLength(4000);
            entity.Property(e => e.FinesseParent).HasMaxLength(4000);
            entity.Property(e => e.IdStockTypeParent).HasColumnName("IdStockType_Parent");
            entity.Property(e => e.ParentNumber).HasMaxLength(15);
            entity.Property(e => e.PartDesc).HasMaxLength(255);
        });

        modelBuilder.Entity<TmpTdaPartsOnOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdaPartsOnOrder");

            entity.Property(e => e.BasePrice).HasColumnType("numeric(20, 6)");
            entity.Property(e => e.Caption).HasMaxLength(250);
            entity.Property(e => e.CaptionEn)
                .HasMaxLength(50)
                .HasColumnName("CaptionEN");
            entity.Property(e => e.Custom1).HasMaxLength(250);
            entity.Property(e => e.Custom2).HasMaxLength(250);
            entity.Property(e => e.DayTimeIn).HasColumnType("smalldatetime");
            entity.Property(e => e.DayTimeOut).HasColumnType("smalldatetime");
            entity.Property(e => e.FinalSortOrder).HasColumnType("numeric(21, 11)");
            entity.Property(e => e.IdStockType2JobParent).HasColumnName("IdStockType2Job_Parent");
            entity.Property(e => e.ItemPriceNoDiscount).HasColumnType("money");
            entity.Property(e => e.JobCommitDays).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.JobDesc).HasMaxLength(100);
            entity.Property(e => e.JobEngActiveCd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.JobGroupDesc).HasMaxLength(250);
            entity.Property(e => e.JobGroupEnd).HasColumnType("smalldatetime");
            entity.Property(e => e.JobGroupStart).HasColumnType("smalldatetime");
            entity.Property(e => e.JobNumber).HasMaxLength(50);
            entity.Property(e => e.JobPropType)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.JobStateEn)
                .HasMaxLength(50)
                .HasColumnName("JobStateEN");
            entity.Property(e => e.ProjEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.ProjName).HasMaxLength(100);
            entity.Property(e => e.ProjNumber).HasMaxLength(50);
            entity.Property(e => e.ProjRentalSumPrice).HasColumnType("money");
            entity.Property(e => e.ProjStartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.ProjType)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ProjectStatusCode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.RentalPrice).HasColumnType("numeric(20, 6)");
            entity.Property(e => e.RentalPriceSum).HasColumnType("money");
            entity.Property(e => e.SortOrder).HasColumnType("numeric(18, 10)");
            entity.Property(e => e.StockTypeDesc).HasMaxLength(255);
            entity.Property(e => e.StockTypeNumber).HasMaxLength(15);
            entity.Property(e => e.TimeFactor).HasColumnType("numeric(18, 8)");
        });

        modelBuilder.Entity<TmpTdaPartsOnOrderFixMismappedPart>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdaPartsOnOrderFixMismappedParts");

            entity.Property(e => e.BasePrice).HasColumnType("numeric(20, 6)");
            entity.Property(e => e.Caption).HasMaxLength(250);
            entity.Property(e => e.CaptionEn)
                .HasMaxLength(50)
                .HasColumnName("CaptionEN");
            entity.Property(e => e.Custom1).HasMaxLength(250);
            entity.Property(e => e.Custom2).HasMaxLength(250);
            entity.Property(e => e.DayTimeIn).HasColumnType("smalldatetime");
            entity.Property(e => e.DayTimeOut).HasColumnType("smalldatetime");
            entity.Property(e => e.FinalSortOrder).HasColumnType("numeric(21, 11)");
            entity.Property(e => e.IdStockType2JobParent).HasColumnName("IdStockType2Job_Parent");
            entity.Property(e => e.ItemPriceNoDiscount).HasColumnType("money");
            entity.Property(e => e.JobCommitDays).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.JobDesc).HasMaxLength(100);
            entity.Property(e => e.JobEngActiveCd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.JobGroupDesc).HasMaxLength(250);
            entity.Property(e => e.JobGroupEnd).HasColumnType("smalldatetime");
            entity.Property(e => e.JobGroupStart).HasColumnType("smalldatetime");
            entity.Property(e => e.JobNumber).HasMaxLength(50);
            entity.Property(e => e.JobPropType)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.JobStateEn)
                .HasMaxLength(50)
                .HasColumnName("JobStateEN");
            entity.Property(e => e.ProjEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.ProjName).HasMaxLength(100);
            entity.Property(e => e.ProjNumber).HasMaxLength(50);
            entity.Property(e => e.ProjRentalSumPrice).HasColumnType("money");
            entity.Property(e => e.ProjStartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.ProjType)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ProjectStatusCode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.RentalPrice).HasColumnType("numeric(20, 6)");
            entity.Property(e => e.RentalPriceSum).HasColumnType("money");
            entity.Property(e => e.SortOrder).HasColumnType("numeric(18, 10)");
            entity.Property(e => e.StockTypeDesc).HasMaxLength(255);
            entity.Property(e => e.StockTypeNumber).HasMaxLength(15);
            entity.Property(e => e.TimeFactor).HasColumnType("numeric(18, 8)");
        });

        modelBuilder.Entity<TmpTdaPhaseHeadersCreated>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdaPhaseHeadersCreated");

            entity.Property(e => e.Agency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("agency");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.CrewPrep)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.DayTimeIn).HasColumnType("smalldatetime");
            entity.Property(e => e.DayTimeOut).HasColumnType("smalldatetime");
            entity.Property(e => e.Entitydesc)
                .HasMaxLength(80)
                .HasColumnName("entitydesc");
            entity.Property(e => e.Entityno)
                .HasMaxLength(4000)
                .HasColumnName("entityno");
            entity.Property(e => e.Entitytype)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("entitytype");
            entity.Property(e => e.ExchangeRateDate).HasColumnType("smalldatetime");
            entity.Property(e => e.Finactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("finactivecd");
            entity.Property(e => e.FinesseUser).HasMaxLength(51);
            entity.Property(e => e.FirstShow)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.InternalOrg)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("internal_org");
            entity.Property(e => e.JobEngActiveCd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.LastShow)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LoadOut)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Opsmgr)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("opsmgr");
            entity.Property(e => e.Plactive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("plactive");
            entity.Property(e => e.Probability)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("probability");
            entity.Property(e => e.ProjNumber).HasMaxLength(50);
            entity.Property(e => e.ProjRentalSumPrice).HasColumnType("money");
            entity.Property(e => e.ProjType)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ProjectStatusCode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Proptype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("proptype");
            entity.Property(e => e.Respempno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("respempno");
            entity.Property(e => e.SecondaryOpsEmpno).HasColumnName("secondaryOpsEmpno");
            entity.Property(e => e.Sfactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sfactivecd");
        });

        modelBuilder.Entity<TmpTdaProjectBidsCreated>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdaProjectBidsCreated");

            entity.Property(e => e.Agency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("agency");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.CrewPrep)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.DayTimeIn).HasColumnType("smalldatetime");
            entity.Property(e => e.DayTimeOut).HasColumnType("smalldatetime");
            entity.Property(e => e.Entitydesc)
                .HasMaxLength(80)
                .HasColumnName("entitydesc");
            entity.Property(e => e.Entityno)
                .HasMaxLength(4000)
                .HasColumnName("entityno");
            entity.Property(e => e.Entitytype)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("entitytype");
            entity.Property(e => e.ExchangeRateDate).HasColumnType("smalldatetime");
            entity.Property(e => e.Finactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("finactivecd");
            entity.Property(e => e.FinesseUser).HasMaxLength(51);
            entity.Property(e => e.FirstShow)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.InternalOrg)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("internal_org");
            entity.Property(e => e.JobEngActiveCd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.LastShow)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LoadOut)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Opsmgr)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("opsmgr");
            entity.Property(e => e.Plactive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("plactive");
            entity.Property(e => e.Probability)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("probability");
            entity.Property(e => e.ProjNumber).HasMaxLength(50);
            entity.Property(e => e.ProjRentalSumPrice).HasColumnType("money");
            entity.Property(e => e.ProjType)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ProjectStatusCode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Proptype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("proptype");
            entity.Property(e => e.Respempno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("respempno");
            entity.Property(e => e.SecondaryOpsEmpno).HasColumnName("secondaryOpsEmpno");
            entity.Property(e => e.Sfactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sfactivecd");
        });

        modelBuilder.Entity<TmpTdaProjectLegsCreated>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdaProjectLegsCreated");

            entity.Property(e => e.Agency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("agency");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.CrewPrep)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.DayTimeIn).HasColumnType("smalldatetime");
            entity.Property(e => e.DayTimeOut).HasColumnType("smalldatetime");
            entity.Property(e => e.Entitydesc)
                .HasMaxLength(80)
                .HasColumnName("entitydesc");
            entity.Property(e => e.Entityno)
                .HasMaxLength(4000)
                .HasColumnName("entityno");
            entity.Property(e => e.Entitytype)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("entitytype");
            entity.Property(e => e.ExchangeRateDate).HasColumnType("smalldatetime");
            entity.Property(e => e.Finactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("finactivecd");
            entity.Property(e => e.FinesseUser).HasMaxLength(51);
            entity.Property(e => e.FirstShow)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.InternalOrg)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("internal_org");
            entity.Property(e => e.JobEngActiveCd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.LastShow)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LoadOut)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Opsmgr)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("opsmgr");
            entity.Property(e => e.Plactive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("plactive");
            entity.Property(e => e.Probability)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("probability");
            entity.Property(e => e.ProjNumber).HasMaxLength(50);
            entity.Property(e => e.ProjRentalSumPrice).HasColumnType("money");
            entity.Property(e => e.ProjType)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ProjectStatusCode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Proptype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("proptype");
            entity.Property(e => e.Respempno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("respempno");
            entity.Property(e => e.SecondaryOpsEmpno).HasColumnName("secondaryOpsEmpno");
            entity.Property(e => e.Sfactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sfactivecd");
        });

        modelBuilder.Entity<TmpTdaProjectPhasesCreated>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdaProjectPhasesCreated");

            entity.Property(e => e.Agency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("agency");
            entity.Property(e => e.BillingCompany)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.CrewPrep)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.DayTimeIn).HasColumnType("smalldatetime");
            entity.Property(e => e.DayTimeOut).HasColumnType("smalldatetime");
            entity.Property(e => e.Entitydesc)
                .HasMaxLength(141)
                .HasColumnName("entitydesc");
            entity.Property(e => e.Entityno)
                .HasMaxLength(4000)
                .HasColumnName("entityno");
            entity.Property(e => e.Entitytype)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("entitytype");
            entity.Property(e => e.ExchangeRateDate).HasColumnType("smalldatetime");
            entity.Property(e => e.Finactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("finactivecd");
            entity.Property(e => e.FinesseUser).HasMaxLength(51);
            entity.Property(e => e.FirstShow)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.InternalOrg)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("internal_org");
            entity.Property(e => e.JobEngActiveCd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.LastShow)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LoadOut)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Opsmgr)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("opsmgr");
            entity.Property(e => e.Plactive)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("plactive");
            entity.Property(e => e.Probability)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("probability");
            entity.Property(e => e.ProjNumber).HasMaxLength(50);
            entity.Property(e => e.ProjRentalSumPrice).HasColumnType("money");
            entity.Property(e => e.ProjType)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ProjectStatusCode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Proptype)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("proptype");
            entity.Property(e => e.Respempno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("respempno");
            entity.Property(e => e.SecondaryOpsEmpno).HasColumnName("secondaryOpsEmpno");
            entity.Property(e => e.Sfactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sfactivecd");
        });

        modelBuilder.Entity<TmpTdaProjectStateMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdaProjectStateMapping");

            entity.Property(e => e.Caption).HasMaxLength(50);
            entity.Property(e => e.CaptionCu)
                .HasMaxLength(50)
                .HasColumnName("CaptionCU");
            entity.Property(e => e.CaptionDe)
                .HasMaxLength(50)
                .HasColumnName("CaptionDE");
            entity.Property(e => e.CaptionEn)
                .HasMaxLength(50)
                .HasColumnName("CaptionEN");
            entity.Property(e => e.CaptionFr)
                .HasMaxLength(50)
                .HasColumnName("CaptionFR");
            entity.Property(e => e.ProjectStatusCode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Type).HasMaxLength(50);
        });

        modelBuilder.Entity<TmpTdaRackConfigUpdate>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdaRackConfigUpdates");

            entity.Property(e => e.Partno)
                .HasMaxLength(255)
                .HasColumnName("partno");
        });

        modelBuilder.Entity<TmpTdaResourceAllocation>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdaResourceAllocations");

            entity.Property(e => e.Addr1)
                .HasMaxLength(100)
                .HasColumnName("addr1");
            entity.Property(e => e.Birthdate).HasColumnType("datetime");
            entity.Property(e => e.Birthplace).HasMaxLength(50);
            entity.Property(e => e.Cellphone).HasMaxLength(50);
            entity.Property(e => e.City).HasMaxLength(50);
            entity.Property(e => e.Country).HasMaxLength(50);
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .HasColumnName("EMail");
            entity.Property(e => e.EmergencyPhone2)
                .HasMaxLength(25)
                .HasColumnName("Emergency_phone2");
            entity.Property(e => e.Empno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.Empstatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("empstatus");
            entity.Property(e => e.Fax).HasMaxLength(50);
            entity.Property(e => e.Firstname)
                .HasMaxLength(100)
                .HasColumnName("firstname");
            entity.Property(e => e.Gradecd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("gradecd");
            entity.Property(e => e.Groupno)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("groupno");
            entity.Property(e => e.Issuecountry)
                .HasMaxLength(100)
                .HasColumnName("issuecountry");
            entity.Property(e => e.JobTitle).HasMaxLength(50);
            entity.Property(e => e.Lastname)
                .HasMaxLength(50)
                .HasColumnName("lastname");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("locationcd");
            entity.Property(e => e.Notes).HasMaxLength(1513);
            entity.Property(e => e.PassportIssueDate).HasColumnType("smalldatetime");
            entity.Property(e => e.PassportIssuePlace).HasMaxLength(100);
            entity.Property(e => e.PassportNumber).HasMaxLength(50);
            entity.Property(e => e.PassportValidTo).HasColumnType("smalldatetime");
            entity.Property(e => e.Phone).HasMaxLength(50);
            entity.Property(e => e.PhoneCompany).HasMaxLength(50);
            entity.Property(e => e.ResourceType).HasMaxLength(50);
            entity.Property(e => e.UserName)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("user_name");
            entity.Property(e => e.Zip).HasMaxLength(10);
        });

        modelBuilder.Entity<TmpTdaResourceAllocationStateMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdaResourceAllocationStateMapping");

            entity.Property(e => e.Caption).HasMaxLength(50);
            entity.Property(e => e.CaptionCu)
                .HasMaxLength(50)
                .HasColumnName("CaptionCU");
            entity.Property(e => e.CaptionDe)
                .HasMaxLength(50)
                .HasColumnName("CaptionDE");
            entity.Property(e => e.CaptionEn)
                .HasMaxLength(50)
                .HasColumnName("CaptionEN");
            entity.Property(e => e.CaptionFr)
                .HasMaxLength(50)
                .HasColumnName("CaptionFR");
            entity.Property(e => e.StatusCode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Type).HasMaxLength(50);
        });

        modelBuilder.Entity<TmpTdaResourceFunctionMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdaResourceFunctionMapping");

            entity.Property(e => e.Caption).HasMaxLength(100);
            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("jobtype");
            entity.Property(e => e.Type).HasMaxLength(50);
        });

        modelBuilder.Entity<TmpTdaStockTypeCategoryMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdaStockTypeCategoryMapping");

            entity.Property(e => e.Caption).HasMaxLength(255);
            entity.Property(e => e.Commodity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("commodity");
            entity.Property(e => e.NewIdStockTypeCategory).HasColumnName("newIdStockTypeCategory");
        });

        modelBuilder.Entity<TmpTdaStockTypeCategoryParentMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdaStockTypeCategoryParentMapping");

            entity.Property(e => e.Caption).HasMaxLength(50);
            entity.Property(e => e.CaptionLng2).HasMaxLength(50);
            entity.Property(e => e.CaptionLng3).HasMaxLength(50);
            entity.Property(e => e.CaptionLng4).HasMaxLength(50);
            entity.Property(e => e.CaptionLng5).HasMaxLength(50);
            entity.Property(e => e.CaptionLng6).HasMaxLength(50);
            entity.Property(e => e.Commodity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("commodity");
            entity.Property(e => e.IdRmbranch).HasColumnName("idRMBranch");
            entity.Property(e => e.IdStockTypeCategoryParent).ValueGeneratedOnAdd();
            entity.Property(e => e.Rmcaption)
                .HasMaxLength(50)
                .HasColumnName("RMCaption");
        });

        modelBuilder.Entity<TmpTdaSubhirePart>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdaSubhireParts");

            entity.Property(e => e.AdressId)
                .HasMaxLength(255)
                .HasColumnName("Adress ID");
            entity.Property(e => e.Caption).HasMaxLength(255);
            entity.Property(e => e.City).HasMaxLength(50);
            entity.Property(e => e.Comment).HasMaxLength(200);
            entity.Property(e => e.CommercialRegisterNumber).HasMaxLength(50);
            entity.Property(e => e.Company).HasMaxLength(100);
            entity.Property(e => e.CreationTime).HasColumnType("smalldatetime");
            entity.Property(e => e.CustomNumber).HasMaxLength(50);
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .HasColumnName("EMail");
            entity.Property(e => e.Fax).HasMaxLength(50);
            entity.Property(e => e.FinessePartNo).HasMaxLength(4000);
            entity.Property(e => e.FirstName).HasMaxLength(50);
            entity.Property(e => e.InvoiceInfo).HasMaxLength(255);
            entity.Property(e => e.Name2).HasMaxLength(100);
            entity.Property(e => e.Number).HasMaxLength(15);
            entity.Property(e => e.Phone).HasMaxLength(50);
            entity.Property(e => e.PhoneCompany).HasMaxLength(50);
            entity.Property(e => e.PhoneMobile).HasMaxLength(50);
            entity.Property(e => e.PhonePrivate).HasMaxLength(50);
            entity.Property(e => e.Price).HasColumnType("money");
            entity.Property(e => e.State).HasMaxLength(50);
            entity.Property(e => e.Street).HasMaxLength(100);
            entity.Property(e => e.SupplierNumber).HasMaxLength(50);
            entity.Property(e => e.Surname).HasMaxLength(50);
            entity.Property(e => e.UpdateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.VatId).HasMaxLength(50);
            entity.Property(e => e.VendorCode)
                .HasMaxLength(255)
                .HasColumnName("Vendor Code");
            entity.Property(e => e.Wwwadress)
                .HasMaxLength(100)
                .HasColumnName("WWWAdress");
            entity.Property(e => e.Zip).HasMaxLength(10);
        });

        modelBuilder.Entity<TmpTdaSubhireVendor>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdaSubhireVendors");

            entity.Property(e => e.City).HasMaxLength(50);
            entity.Property(e => e.Comment).HasMaxLength(200);
            entity.Property(e => e.CommercialRegisterNumber).HasMaxLength(50);
            entity.Property(e => e.Company).HasMaxLength(100);
            entity.Property(e => e.CreationTime).HasColumnType("smalldatetime");
            entity.Property(e => e.CustomNumber).HasMaxLength(50);
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .HasColumnName("EMail");
            entity.Property(e => e.Fax).HasMaxLength(50);
            entity.Property(e => e.FirstName).HasMaxLength(50);
            entity.Property(e => e.InvoiceInfo).HasMaxLength(255);
            entity.Property(e => e.Name2).HasMaxLength(100);
            entity.Property(e => e.Phone).HasMaxLength(50);
            entity.Property(e => e.PhoneCompany).HasMaxLength(50);
            entity.Property(e => e.PhoneMobile).HasMaxLength(50);
            entity.Property(e => e.PhonePrivate).HasMaxLength(50);
            entity.Property(e => e.Siteno).HasColumnName("siteno");
            entity.Property(e => e.State).HasMaxLength(50);
            entity.Property(e => e.Street).HasMaxLength(100);
            entity.Property(e => e.Surname).HasMaxLength(50);
            entity.Property(e => e.UpdateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.VatId).HasMaxLength(50);
            entity.Property(e => e.VendorCode).HasMaxLength(10);
            entity.Property(e => e.Wwwadress)
                .HasMaxLength(100)
                .HasColumnName("WWWAdress");
            entity.Property(e => e.Zip).HasMaxLength(10);
        });

        modelBuilder.Entity<TmpTdaSubhireVendorAddress>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdaSubhireVendorAddresses");

            entity.Property(e => e.Abnnumber)
                .HasMaxLength(20)
                .HasColumnName("ABNNumber");
            entity.Property(e => e.Activeind).HasColumnName("activeind");
            entity.Property(e => e.Add2)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("add2");
            entity.Property(e => e.Add3)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("add3");
            entity.Property(e => e.Adddress1)
                .HasMaxLength(50)
                .HasColumnName("adddress1");
            entity.Property(e => e.City).HasMaxLength(50);
            entity.Property(e => e.Contact)
                .HasMaxLength(30)
                .HasColumnName("contact");
            entity.Property(e => e.Ext)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ext");
            entity.Property(e => e.Fax)
                .HasMaxLength(20)
                .HasColumnName("fax");
            entity.Property(e => e.IdLanguage).HasColumnName("id_language");
            entity.Property(e => e.Isocode)
                .HasMaxLength(50)
                .HasColumnName("ISOCode");
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .HasColumnName("phone");
            entity.Property(e => e.R).HasColumnName("r");
            entity.Property(e => e.Siteno).HasColumnName("siteno");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .HasColumnName("state");
            entity.Property(e => e.Telex)
                .HasMaxLength(20)
                .HasColumnName("telex");
            entity.Property(e => e.Usenet)
                .HasMaxLength(50)
                .HasColumnName("usenet");
            entity.Property(e => e.VatId).HasMaxLength(20);
            entity.Property(e => e.VatStatus)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.VendorCode).HasMaxLength(10);
            entity.Property(e => e.Voicemail)
                .HasMaxLength(20)
                .HasColumnName("voicemail");
            entity.Property(e => e.Zip).HasMaxLength(10);
        });

        modelBuilder.Entity<TmpTdaSubhireVendorMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdaSubhireVendorMapping");

            entity.Property(e => e.AdressId)
                .HasMaxLength(255)
                .HasColumnName("Adress ID");
            entity.Property(e => e.VendorCode)
                .HasMaxLength(255)
                .HasColumnName("Vendor Code");
        });

        modelBuilder.Entity<TmpTdaTruckPackItemUpdate>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdaTruckPackItemUpdates");

            entity.Property(e => e.F3).HasMaxLength(255);
            entity.Property(e => e.Partno)
                .HasMaxLength(255)
                .HasColumnName("partno");
            entity.Property(e => e.TruckPack).HasMaxLength(255);
        });

        modelBuilder.Entity<TmpTdaVehicleAllocation>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdaVehicleAllocations");

            entity.Property(e => e.City).HasMaxLength(50);
            entity.Property(e => e.Costs).HasColumnType("money");
            entity.Property(e => e.CountryCode).HasMaxLength(50);
            entity.Property(e => e.Custom1).HasMaxLength(500);
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .HasColumnName("EMail");
            entity.Property(e => e.Empno)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.Fax).HasMaxLength(50);
            entity.Property(e => e.Firstname)
                .HasMaxLength(201)
                .HasColumnName("firstname");
            entity.Property(e => e.Gradecd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("gradecd");
            entity.Property(e => e.Groupno)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("groupno");
            entity.Property(e => e.Lastname)
                .HasMaxLength(50)
                .HasColumnName("lastname");
            entity.Property(e => e.Locationcde)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("locationcde");
            entity.Property(e => e.Notes).HasMaxLength(551);
            entity.Property(e => e.Phone).HasMaxLength(50);
            entity.Property(e => e.PhoneCompany).HasMaxLength(50);
            entity.Property(e => e.PhoneMobile).HasMaxLength(50);
            entity.Property(e => e.PirealCosts)
                .HasColumnType("money")
                .HasColumnName("PIRealCosts");
            entity.Property(e => e.Street).HasMaxLength(100);
            entity.Property(e => e.Zip).HasMaxLength(10);
        });

        modelBuilder.Entity<TmpTdacrewDemand>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdacrewDemands");

            entity.Property(e => e.Caption).HasMaxLength(100);
            entity.Property(e => e.Custom1).HasMaxLength(4000);
            entity.Property(e => e.Custom2).HasMaxLength(250);
            entity.Property(e => e.DateEnd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateStart).HasColumnType("smalldatetime");
            entity.Property(e => e.DayPayment).HasColumnType("money");
            entity.Property(e => e.DaysInAction).HasColumnType("numeric(16, 2)");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.FinesseProjNo).HasMaxLength(4000);
            entity.Property(e => e.HourPayment).HasColumnType("money");
            entity.Property(e => e.JobStateEn)
                .HasMaxLength(50)
                .HasColumnName("JobStateEN");
            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("jobtype");
            entity.Property(e => e.Number).HasMaxLength(50);
            entity.Property(e => e.ResourceType).HasMaxLength(50);
            entity.Property(e => e.TotalCosts).HasColumnType("money");
            entity.Property(e => e.TotalPrice).HasColumnType("money");
        });

        modelBuilder.Entity<TmpTdacrewDemandsBak>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTdacrewDemands_bak");

            entity.Property(e => e.Caption).HasMaxLength(100);
            entity.Property(e => e.Custom1).HasMaxLength(4000);
            entity.Property(e => e.Custom2).HasMaxLength(250);
            entity.Property(e => e.DateEnd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateStart).HasColumnType("smalldatetime");
            entity.Property(e => e.DayPayment).HasColumnType("money");
            entity.Property(e => e.DaysInAction).HasColumnType("numeric(16, 2)");
            entity.Property(e => e.FinesseProjNo).HasMaxLength(4000);
            entity.Property(e => e.HourPayment).HasColumnType("money");
            entity.Property(e => e.JobStateEn)
                .HasMaxLength(50)
                .HasColumnName("JobStateEN");
            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("jobtype");
            entity.Property(e => e.Number).HasMaxLength(50);
            entity.Property(e => e.ResourceType).HasMaxLength(50);
            entity.Property(e => e.TotalCosts).HasColumnType("money");
            entity.Property(e => e.TotalPrice).HasColumnType("money");
        });

        modelBuilder.Entity<TmpTdaopenAp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTDAOpenAP");

            entity.Property(e => e.BatchNo).HasColumnName("Batch No.");
            entity.Property(e => e.Bl).HasColumnName("BL");
            entity.Property(e => e.Bsnr).HasColumnName("BSNr.");
            entity.Property(e => e.CityLocation).HasColumnName("City / Location");
            entity.Property(e => e.CompanyPurpose).HasColumnName("Company Purpose");
            entity.Property(e => e.ContextIssue).HasColumnName("Context / Issue");
            entity.Property(e => e.CostCenter1).HasColumnName("Cost Center 1");
            entity.Property(e => e.CostCenter2).HasColumnName("Cost Center 2");
            entity.Property(e => e.CounterAccount)
                .IsUnicode(false)
                .HasColumnName("Counter Account");
            entity.Property(e => e.CreditAmount).HasColumnName("Credit Amount");
            entity.Property(e => e.CreditLimit).HasColumnName("Credit Limit");
            entity.Property(e => e.CustomerSupplierNo).HasColumnName("Customer/Supplier No.");
            entity.Property(e => e.DebitAmount).HasColumnName("Debit Amount");
            entity.Property(e => e.DebitCreditBalance).HasColumnName("Debit/Credit Balance");
            entity.Property(e => e.DocumentField2).HasColumnName("Document Field 2");
            entity.Property(e => e.DueDate).HasColumnName("Due Date");
            entity.Property(e => e.ExternalSystemNumber).HasColumnName("External System Number");
            entity.Property(e => e.GpBank).HasColumnName("GP-Bank");
            entity.Property(e => e.InterestBlock).HasColumnName("Interest Block");
            entity.Property(e => e.InvoiceNo).HasColumnName("Invoice No.");
            entity.Property(e => e.MdtBank).HasColumnName("Mdt-Bank");
            entity.Property(e => e.PaymentTerms).HasColumnName("Payment Terms");
            entity.Property(e => e.PostalCode).HasColumnName("Postal Code");
            entity.Property(e => e.PostingText).HasColumnName("Posting Text");
            entity.Property(e => e.SepaMandateReference).HasColumnName("SEPA Mandate Reference");
            entity.Property(e => e.ShortDescription).HasColumnName("Short Description");
            entity.Property(e => e.VariousAddress).HasColumnName("Various Address");
            entity.Property(e => e.Vat)
                .IsUnicode(false)
                .HasColumnName("VAT %");
            entity.Property(e => e.Zi).HasColumnName("ZI");
        });

        modelBuilder.Entity<TmpTdaopenAr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTDAOpenAR");

            entity.Property(e => e.Ausgl).HasColumnName("Ausgl.");
            entity.Property(e => e.Belegfeld2).HasColumnName("Belegfeld 2");
            entity.Property(e => e.BetragHaben).HasColumnName("Betrag Haben");
            entity.Property(e => e.BetragSoll).HasColumnName("Betrag Soll");
            entity.Property(e => e.Bsnr).HasColumnName("BSNr.");
            entity.Property(e => e.Fallig).HasColumnName("fallig");
            entity.Property(e => e.Kost1).HasColumnName("KOST1");
            entity.Property(e => e.Kost2).HasColumnName("KOST2");
            entity.Property(e => e.RechnungsNr).HasColumnName("Rechnungs-Nr.");
            entity.Property(e => e.SHSaldo).HasColumnName("S/H Saldo");
            entity.Property(e => e.StapelNr).HasColumnName("Stapel-Nr.");
            entity.Property(e => e.Ust).HasColumnName("USt%");
        });

        modelBuilder.Entity<TmpTransferOrderMatrix>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTransferOrderMatrix");

            entity.Property(e => e.Ar).HasColumnName("AR");
            entity.Property(e => e.Ba).HasColumnName("BA");
            entity.Property(e => e.Ber).HasColumnName("BER");
            entity.Property(e => e.BillingCompany).HasColumnName("billingCompany");
            entity.Property(e => e.Bne).HasColumnName("BNE");
            entity.Property(e => e.Bot).HasColumnName("BOT");
            entity.Property(e => e.Cle8).HasColumnName("CLE8");
            entity.Property(e => e.Dxb).HasColumnName("DXB");
            entity.Property(e => e.Eph).HasColumnName("EPH");
            entity.Property(e => e.Esp).HasColumnName("ESP");
            entity.Property(e => e.Ksa).HasColumnName("KSA");
            entity.Property(e => e.Lax).HasColumnName("LAX");
            entity.Property(e => e.Litz).HasColumnName("LITZ");
            entity.Property(e => e.Mel).HasColumnName("MEL");
            entity.Property(e => e.Mex).HasColumnName("MEX");
            entity.Property(e => e.Mfg).HasColumnName("MFG");
            entity.Property(e => e.Nash).HasColumnName("NASH");
            entity.Property(e => e.Nashsi).HasColumnName("NASHSI");
            entity.Property(e => e.New).HasColumnName("NEW");
            entity.Property(e => e.Phx).HasColumnName("PHX");
            entity.Property(e => e.Pod2).HasColumnName("POD2");
            entity.Property(e => e.San).HasColumnName("SAN");
            entity.Property(e => e.Sfo).HasColumnName("SFO");
            entity.Property(e => e.Sub).HasColumnName("SUB");
            entity.Property(e => e.Syd).HasColumnName("SYD");
            entity.Property(e => e.Tokyo).HasColumnName("TOKYO");
            entity.Property(e => e.TrningLtz).HasColumnName("TRNING LTZ");
            entity.Property(e => e.Uk).HasColumnName("UK");
            entity.Property(e => e.Uk8).HasColumnName("UK8");
            entity.Property(e => e.Uks).HasColumnName("UKS");
            entity.Property(e => e.Val).HasColumnName("VAL");
        });

        modelBuilder.Entity<TmpTransferorderCoreTeam>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTransferorderCoreTeam");

            entity.Property(e => e.AccountExec).HasColumnName("Account Exec");
            entity.Property(e => e.PrimaryOps).HasColumnName("Primary Ops");
            entity.Property(e => e.SecondaryOps).HasColumnName("Secondary Ops");
        });

        modelBuilder.Entity<TmpTsctoCbaownershipChange20150127>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpTSCtoCBAOwnershipChange20150127");

            entity.Property(e => e.Barcode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("barcode");
            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("batchno");
            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.Dept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dept");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Revision)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("revision");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("serial_no");
        });

        modelBuilder.Entity<TmpUpdateDeviceProperty>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpUpdateDeviceProperties");

            entity.Property(e => e.Barcode)
                .IsUnicode(false)
                .HasColumnName("barcode");
            entity.Property(e => e.Property1)
                .IsUnicode(false)
                .HasColumnName("property1");
            entity.Property(e => e.Property2)
                .IsUnicode(false)
                .HasColumnName("property2");
        });

        modelBuilder.Entity<TmpVersacomPartTypeMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpVersacomPartType_Mapping");

            entity.Property(e => e.Number).HasMaxLength(15);
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
        });

        modelBuilder.Entity<TmpVersacomPartTypes20211004>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpVersacomPartTypes20211004");

            entity.Property(e => e.ApparentPower).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.Barcode).HasMaxLength(50);
            entity.Property(e => e.Caption).HasMaxLength(255);
            entity.Property(e => e.Comment).HasMaxLength(255);
            entity.Property(e => e.CreationTime).HasColumnType("smalldatetime");
            entity.Property(e => e.CustomNumber).HasMaxLength(50);
            entity.Property(e => e.CustomsTariffNumber).HasMaxLength(50);
            entity.Property(e => e.Depth).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.EconomicLife).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.FactoryNumber).HasMaxLength(25);
            entity.Property(e => e.Gusn).HasColumnName("GUSN");
            entity.Property(e => e.Height).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.IdCountryManufacturer).HasColumnName("IdCountry_Manufacturer");
            entity.Property(e => e.IdStockType).ValueGeneratedOnAdd();
            entity.Property(e => e.ImputedPrice).HasColumnType("money");
            entity.Property(e => e.LeasePrice).HasColumnType("money");
            entity.Property(e => e.Number).HasMaxLength(15);
            entity.Property(e => e.PackingInstruction).HasMaxLength(250);
            entity.Property(e => e.PirealCosts)
                .HasColumnType("money")
                .HasColumnName("PIRealCosts");
            entity.Property(e => e.PurchasePrice).HasColumnType("money");
            entity.Property(e => e.RealPower).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.RmBizPublish).HasColumnName("rmBizPublish");
            entity.Property(e => e.RmautoLicenceUpdate).HasColumnName("RMAutoLicenceUpdate");
            entity.Property(e => e.SalesPrice).HasColumnType("money");
            entity.Property(e => e.StorageLocation).HasMaxLength(250);
            entity.Property(e => e.SubhirePrice).HasColumnType("money");
            entity.Property(e => e.Type).HasMaxLength(50);
            entity.Property(e => e.UpdateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.UtilisationPlan).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.Weight).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.Width).HasColumnType("numeric(18, 4)");
        });

        modelBuilder.Entity<TmpVideoCapEx20140414>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpVideoCapEx20140414");

            entity.Property(e => e.Account)
                .HasMaxLength(255)
                .HasColumnName("account");
            entity.Property(e => e.Extendedamt).HasColumnName("extendedamt");
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.Orderno)
                .HasMaxLength(255)
                .HasColumnName("orderno");
            entity.Property(e => e.Partdesc)
                .HasMaxLength(255)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partentityno)
                .HasMaxLength(255)
                .HasColumnName("partentityno");
            entity.Property(e => e.Partno)
                .HasMaxLength(255)
                .HasColumnName("partno");
            entity.Property(e => e.QtyOkAsIs).HasColumnName("qty_ok_as_is");
            entity.Property(e => e.ReceiveDate)
                .HasColumnType("datetime")
                .HasColumnName("receive_date");
            entity.Property(e => e.RowNo).HasColumnName("row_no");
            entity.Property(e => e.Statuscd)
                .HasMaxLength(255)
                .HasColumnName("statuscd");
            entity.Property(e => e.Uom)
                .HasMaxLength(255)
                .HasColumnName("UOM");
            entity.Property(e => e.UpricePd).HasColumnName("uprice_pd");
            entity.Property(e => e.Vendno)
                .HasMaxLength(255)
                .HasColumnName("vendno");
        });

        modelBuilder.Entity<TmpWarehouseTransVolume>(entity =>
        {
            entity.HasKey(e => new { e.TransactionDate, e.WarehouseCode });

            entity.ToTable("tmpWarehouseTransVolume");

            entity.Property(e => e.WarehouseCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CheckinCount).HasColumnType("decimal(30, 0)");
            entity.Property(e => e.CheckinValueUsd)
                .HasColumnType("decimal(30, 0)")
                .HasColumnName("CheckinValueUSD");
            entity.Property(e => e.CheckoutCount).HasColumnType("decimal(10, 0)");
            entity.Property(e => e.CheckoutValueUsd)
                .HasColumnType("decimal(10, 0)")
                .HasColumnName("CheckoutValueUSD");
        });

        modelBuilder.Entity<TmpWexlerBarcodesRentedByClair>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpWexlerBarcodesRentedByClair");

            entity.Property(e => e.Barcode)
                .IsUnicode(false)
                .HasColumnName("barcode");
            entity.Property(e => e.CompanyName).IsUnicode(false);
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.JobDesc).IsUnicode(false);
            entity.Property(e => e.JobNo).IsUnicode(false);
            entity.Property(e => e.PartDesc).IsUnicode(false);
            entity.Property(e => e.PartNo).IsUnicode(false);
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.WorkOrderDesc).IsUnicode(false);
            entity.Property(e => e.WorkOrderNo).IsUnicode(false);
        });

        modelBuilder.Entity<TmpWexlerBarcodesRentedByClair20121030>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpWexlerBarcodesRentedByClair20121030");

            entity.Property(e => e.Barcode)
                .IsUnicode(false)
                .HasColumnName("barcode");
            entity.Property(e => e.CompanyName).IsUnicode(false);
            entity.Property(e => e.Enddate)
                .HasColumnType("datetime")
                .HasColumnName("enddate");
            entity.Property(e => e.JobDesc).IsUnicode(false);
            entity.Property(e => e.JobNo).IsUnicode(false);
            entity.Property(e => e.PartDesc).IsUnicode(false);
            entity.Property(e => e.PartNo).IsUnicode(false);
            entity.Property(e => e.Startdate)
                .HasColumnType("datetime")
                .HasColumnName("startdate");
            entity.Property(e => e.WorkOrderDesc).IsUnicode(false);
            entity.Property(e => e.WorkOrderNo).IsUnicode(false);
        });

        modelBuilder.Entity<TmpWexlerClairAcqAssetsOnRent20121030>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpWexlerClairAcqAssetsOnRent20121030");

            entity.Property(e => e.Barcode)
                .IsUnicode(false)
                .HasColumnName("barcode");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasColumnName("description");
            entity.Property(e => e.Manufacturer).IsUnicode(false);
            entity.Property(e => e.Olv).HasColumnName("OLV");
            entity.Property(e => e.SerialNo)
                .IsUnicode(false)
                .HasColumnName("serialNo");
            entity.Property(e => e.Type)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.TypeNo).IsUnicode(false);
        });

        modelBuilder.Entity<TmpWexlerFinessePartNoMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpWexlerFinessePartNoMapping");

            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasColumnName("description");
            entity.Property(e => e.FinessePartNo).IsUnicode(false);
            entity.Property(e => e.Make).IsUnicode(false);
            entity.Property(e => e.NewPartno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("newPartno");
            entity.Property(e => e.PartNo)
                .IsUnicode(false)
                .HasComputedColumnSql("(coalesce([FinessePartNo],[newPartno]))", false);
            entity.Property(e => e.WexlerPartNo).IsUnicode(false);
        });

        modelBuilder.Entity<TmpWexlerInventory20121018>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpWexlerInventory20121018");

            entity.Property(e => e.Barcode)
                .IsUnicode(false)
                .HasColumnName("barcode");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasColumnName("description");
            entity.Property(e => e.Manufacturer)
                .IsUnicode(false)
                .HasColumnName("manufacturer");
            entity.Property(e => e.Owner)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("owner");
            entity.Property(e => e.PartNo)
                .IsUnicode(false)
                .HasColumnName("partNo");
            entity.Property(e => e.SerialNo)
                .IsUnicode(false)
                .HasColumnName("serialNo");
        });

        modelBuilder.Entity<TmpWexlerInventoryOnKitchen20121119>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpWexlerInventoryOnKitchen20121119");

            entity.Property(e => e.Barcode)
                .IsUnicode(false)
                .HasColumnName("barcode");
            entity.Property(e => e.CompanyName).IsUnicode(false);
            entity.Property(e => e.JobDesc).IsUnicode(false);
            entity.Property(e => e.JobNo).IsUnicode(false);
            entity.Property(e => e.PartNo).IsUnicode(false);
            entity.Property(e => e.ResourceTypeDesc).IsUnicode(false);
            entity.Property(e => e.Wodesc)
                .IsUnicode(false)
                .HasColumnName("WODesc");
            entity.Property(e => e.WoendDate)
                .HasColumnType("datetime")
                .HasColumnName("WOEndDate");
            entity.Property(e => e.WorkOrderNo).IsUnicode(false);
            entity.Property(e => e.WostartDate)
                .HasColumnType("datetime")
                .HasColumnName("WOStartDate");
        });

        modelBuilder.Entity<TmpWexlerInventoryOnRace20121112>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpWexlerInventoryOnRace20121112");

            entity.Property(e => e.Barcode)
                .IsUnicode(false)
                .HasColumnName("barcode");
            entity.Property(e => e.CompanyName).IsUnicode(false);
            entity.Property(e => e.JobDesc).IsUnicode(false);
            entity.Property(e => e.JobNo).IsUnicode(false);
            entity.Property(e => e.PartNo).IsUnicode(false);
            entity.Property(e => e.ResourceTypeDesc).IsUnicode(false);
            entity.Property(e => e.Wodesc)
                .IsUnicode(false)
                .HasColumnName("WODesc");
            entity.Property(e => e.WoendDate)
                .HasColumnType("datetime")
                .HasColumnName("WOEndDate");
            entity.Property(e => e.WorkOrderNo).IsUnicode(false);
            entity.Property(e => e.WostartDate)
                .HasColumnType("datetime")
                .HasColumnName("WOStartDate");
        });

        modelBuilder.Entity<TmpWexlerNonSalesClaim>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpWexlerNonSalesClaim");

            entity.Property(e => e.Barcode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("barcode");
            entity.Property(e => e.Item)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("item");
        });

        modelBuilder.Entity<TmpWexlerPart>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpWexlerParts");

            entity.Property(e => e.Category).IsUnicode(false);
            entity.Property(e => e.CurrentValue).HasColumnName("currentValue");
            entity.Property(e => e.PartDescriptionOperational).IsUnicode(false);
            entity.Property(e => e.PartDescriptionSales).IsUnicode(false);
            entity.Property(e => e.PartNo)
                .IsUnicode(false)
                .HasColumnName("partNo");
        });

        modelBuilder.Entity<TmpWexlerPostAssetsToRemove>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpWexlerPostAssetsToRemove");

            entity.Property(e => e.ClairOlv).HasColumnName("ClairOLV");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasColumnName("description");
            entity.Property(e => e.Partno)
                .IsUnicode(false)
                .HasColumnName("partno");
        });

        modelBuilder.Entity<TmpWexlerSanfordFinal>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpWexlerSanfordFinal");

            entity.Property(e => e.Barcode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinessePartNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InWexWh).HasColumnName("InWexWH");
            entity.Property(e => e.LastKnownLocation)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Tbd).HasColumnName("TBD");
            entity.Property(e => e.UnitOlv).HasColumnName("UnitOLV");
            entity.Property(e => e.WexlerPartNo)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpWexlerSanfordFinalCheeseEdit>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpWexlerSanfordFinalCheeseEdit");

            entity.Property(e => e.Barcode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinessePartNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InWexWh).HasColumnName("InWexWH");
            entity.Property(e => e.LastKnownLocation)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.RowId).HasColumnName("rowID");
            entity.Property(e => e.Tbd).HasColumnName("TBD");
            entity.Property(e => e.UnitOlv).HasColumnName("UnitOLV");
            entity.Property(e => e.WexlerPartNo)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpWexlerVideoAssetListValuation>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpWexlerVideoAssetListValuation");

            entity.Property(e => e.Cat).HasColumnName("cat");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasColumnName("description");
            entity.Property(e => e.EquipNo)
                .IsUnicode(false)
                .HasColumnName("equipNo");
            entity.Property(e => e.ItemNo).HasColumnName("itemNo");
            entity.Property(e => e.Make)
                .IsUnicode(false)
                .HasColumnName("make");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.UnitFmv)
                .HasComputedColumnSql("([FairMarketValueE]/[qty])", false)
                .HasColumnName("unitFMV");
            entity.Property(e => e.UnitOlv)
                .HasComputedColumnSql("([OrderlyLiquidationValue]/[qty])", false)
                .HasColumnName("unitOLV");
        });

        modelBuilder.Entity<TmpWexlerXytechExitScans20121214>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpWexlerXytechExitScans20121214");

            entity.Property(e => e.Barcode)
                .IsUnicode(false)
                .HasColumnName("barcode");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasColumnName("description");
            entity.Property(e => e.Partno)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.UnitOlv).HasColumnName("unitOLV");
        });

        modelBuilder.Entity<TmpWipeMeOut>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_wipe_me_out");

            entity.Property(e => e.Id)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("ID");
            entity.Property(e => e.NameValue)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpWirelessFirstBarcode>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpWirelessFirstBarcodes");

            entity.Property(e => e.Bc)
                .HasMaxLength(255)
                .HasColumnName("BC");
            entity.Property(e => e.OldPartDesc).HasMaxLength(255);
            entity.Property(e => e.Sn)
                .HasMaxLength(255)
                .HasColumnName("SN");
        });

        modelBuilder.Entity<TmpWirelessFirstNewPart>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpWirelessFirstNewParts");

            entity.Property(e => e.Category).HasMaxLength(255);
            entity.Property(e => e.CheeseDesc).HasMaxLength(255);
            entity.Property(e => e.Commodity).HasMaxLength(255);
            entity.Property(e => e.H).HasMaxLength(255);
            entity.Property(e => e.L).HasMaxLength(255);
            entity.Property(e => e.MasterCategory).HasMaxLength(255);
            entity.Property(e => e.NewPartDesc).HasMaxLength(255);
            entity.Property(e => e.Orig).HasMaxLength(255);
            entity.Property(e => e.Pckg).HasMaxLength(255);
            entity.Property(e => e.Pn)
                .HasMaxLength(20)
                .HasColumnName("pn");
            entity.Property(e => e.W).HasMaxLength(255);
            entity.Property(e => e.Wfdesc)
                .HasMaxLength(255)
                .HasColumnName("WFDesc");
            entity.Property(e => e.Wfqty).HasColumnName("WFqty");
            entity.Property(e => e.Who).HasMaxLength(255);
        });

        modelBuilder.Entity<TmpWirelessFirstNonBarcode>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpWirelessFirstNonBarcodes");

            entity.Property(e => e.NonBar).HasColumnName("NON-BAR");
            entity.Property(e => e.OriginalDescription)
                .HasMaxLength(255)
                .HasColumnName("Original Description");
        });

        modelBuilder.Entity<TmpZtesterDropPacketMetric>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmpZTesterDropPacketMetrics");

            entity.Property(e => e.Barcode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Cabinet)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CabinetNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Component)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Configuration)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CurveId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CurveID");
            entity.Property(e => e.FilePath)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.InputNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StackTestId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StackTestID");
            entity.Property(e => e.Station)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TodayInTimeZone>(entity =>
        {
            entity.HasKey(e => e.EstoffsetHours);

            entity.ToTable("TodayInTimeZone");

            entity.Property(e => e.EstoffsetHours)
                .ValueGeneratedNever()
                .HasColumnName("ESTOffsetHours");
            entity.Property(e => e.Today).HasColumnType("datetime");
        });

        modelBuilder.Entity<TodayTable>(entity =>
        {
            entity.HasKey(e => e.Today);

            entity.ToTable("TodayTable", tb => tb.HasTrigger("TR_Today_Fix_Availability"));

            entity.Property(e => e.Today).HasColumnType("datetime");
        });

        modelBuilder.Entity<TouringRevenueGroup>(entity =>
        {
            entity.HasKey(e => e.TouringRevenueGroup1);

            entity.ToTable("TouringRevenueGroup");

            entity.Property(e => e.TouringRevenueGroup1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("TouringRevenueGroup");
            entity.Property(e => e.TouringRevenueGroupDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TrainingTopicsUser>(entity =>
        {
            entity.HasKey(e => new { e.UserName, e.Topic });

            entity.Property(e => e.UserName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("user_name");
            entity.Property(e => e.Topic)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("topic");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(128)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(128)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Note)
                .IsUnicode(false)
                .HasColumnName("note");
            entity.Property(e => e.StartDate).HasColumnType("datetime");

            entity.HasOne(d => d.TopicNavigation).WithMany(p => p.TrainingTopicsUsers)
                .HasForeignKey(d => d.Topic)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TrainingTopicsUsers_peTrainingTopics");

            entity.HasOne(d => d.UserNameNavigation).WithMany(p => p.TrainingTopicsUsers)
                .HasForeignKey(d => d.UserName)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TrainingTopicsUsers_pjtfrusr");
        });

        modelBuilder.Entity<TransferOrderWarehouseToAndFrom>(entity =>
        {
            entity.HasKey(e => new { e.FromWarehouseCode, e.ToWarehouseCode });

            entity.ToTable("TransferOrderWarehouseToAndFrom");

            entity.Property(e => e.FromWarehouseCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ToWarehouseCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Active).HasDefaultValue(true);
            entity.Property(e => e.OnCalendar).HasDefaultValue(true);

            entity.HasOne(d => d.FromWarehouseCodeNavigation).WithMany(p => p.TransferOrderWarehouseToAndFromFromWarehouseCodeNavigations)
                .HasForeignKey(d => d.FromWarehouseCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TransferOrderWarehouseToAndFrom_Warehouse_From");

            entity.HasOne(d => d.ToWarehouseCodeNavigation).WithMany(p => p.TransferOrderWarehouseToAndFromToWarehouseCodeNavigations)
                .HasForeignKey(d => d.ToWarehouseCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TransferOrderWarehouseToAndFrom_Warehouse_To");
        });

        modelBuilder.Entity<TransferToolsGetPart>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("TransferTools_GetParts");

            entity.Property(e => e.Avail).HasColumnName("avail");
            entity.Property(e => e.Checkoutqty).HasColumnName("checkoutqty");
            entity.Property(e => e.Commodity)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Difference).HasColumnName("difference");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("engactivecd");
            entity.Property(e => e.Entitydesc)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("entitydesc");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.MfgDesc)
                .HasMaxLength(250)
                .HasColumnName("mfg_desc");
            entity.Property(e => e.Package)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("package");
            entity.Property(e => e.Partdesc)
                .HasMaxLength(250)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.PhaseWarehouse)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TransferToolsGetPartsRealTime>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("TransferTools_GetParts_RealTime");

            entity.Property(e => e.Avail).HasColumnName("avail");
            entity.Property(e => e.Checkoutqty).HasColumnName("checkoutqty");
            entity.Property(e => e.Difference).HasColumnName("difference");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.Engactivecd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("engactivecd");
            entity.Property(e => e.Entitydesc)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("entitydesc");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.MfgDesc)
                .HasMaxLength(250)
                .HasColumnName("mfg_desc");
            entity.Property(e => e.Package)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("package");
            entity.Property(e => e.Partdesc)
                .HasMaxLength(250)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.PhaseWarehouse)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Seqno).HasColumnName("seqno");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TransferToolsMobileCheckInOutLog>(entity =>
        {
            entity.HasKey(e => new { e.UserName, e.DateStamp, e.InOutType }).IsClustered(false);

            entity.ToTable("TransferToolsMobileCheckInOutLog");

            entity.Property(e => e.UserName)
                .HasMaxLength(128)
                .HasDefaultValueSql("(original_login())")
                .HasColumnName("user_name");
            entity.Property(e => e.DateStamp)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.InOutType)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TransferToolsMobileDisplayMode>(entity =>
        {
            entity.HasKey(e => e.DisplayCode);

            entity.ToTable("TransferToolsMobileDisplayMode");

            entity.Property(e => e.DisplayCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.DisplayName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e._242x322SizeOption).HasColumnName("242x322SizeOption");
            entity.Property(e => e._480x640SizeOption).HasColumnName("480x640SizeOption");
        });

        modelBuilder.Entity<TransferToolsMobileLoginLog>(entity =>
        {
            entity.HasKey(e => new { e.UserName, e.DateStamp }).IsClustered(false);

            entity.ToTable("TransferToolsMobileLoginLog");

            entity.Property(e => e.UserName)
                .HasMaxLength(128)
                .HasDefaultValueSql("(original_login())")
                .HasColumnName("user_name");
            entity.Property(e => e.DateStamp)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<TransferToolsPhase>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("TransferTools_Phases");

            entity.Property(e => e.Agency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("agency");
            entity.Property(e => e.Entitydesc)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("entitydesc");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.Operationsmanager)
                .HasMaxLength(51)
                .IsUnicode(false)
                .HasColumnName("operationsmanager");
        });

        modelBuilder.Entity<Transport>(entity =>
        {
            entity.HasKey(e => e.Method).HasName("PK_transport");

            entity.ToTable("Transport");

            entity.Property(e => e.Method)
                .HasMaxLength(55)
                .IsUnicode(false)
                .HasColumnName("method");
            entity.Property(e => e.IdLanguage).HasColumnName("id_language");
            entity.Property(e => e.Sortorder).HasColumnName("sortorder");

            entity.HasOne(d => d.IdLanguageNavigation).WithMany(p => p.Transports)
                .HasForeignKey(d => d.IdLanguage)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Transport_id_language");
        });

        modelBuilder.Entity<TruckingCompany>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Trucking_Companies");

            entity.Property(e => e.Address1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("address_1");
            entity.Property(e => e.Address2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("address_2");
            entity.Property(e => e.Address3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("address_3");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("city");
            entity.Property(e => e.Contact)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("contact");
            entity.Property(e => e.Country)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("country");
            entity.Property(e => e.Currencycd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("currencycd");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.Email2)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("email2");
            entity.Property(e => e.Mobile)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("mobile");
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("phone");
            entity.Property(e => e.SiteNo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("site_no");
            entity.Property(e => e.State)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("state");
            entity.Property(e => e.Taxid)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("taxid");
            entity.Property(e => e.Telex)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("telex");
            entity.Property(e => e.VatidentificationNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VATIdentificationNumber");
            entity.Property(e => e.Vendno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("vendno");
            entity.Property(e => e.VendorName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vendor_name");
            entity.Property(e => e.Zipcode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("zipcode");
        });

        modelBuilder.Entity<TruckingCompany1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("TruckingCompany");

            entity.Property(e => e.Vendno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("vendno");
            entity.Property(e => e.VendorName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vendor_name");
        });

        modelBuilder.Entity<U1572969290>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("u1572969290");

            entity.Property(e => e.Addr1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("addr1");
            entity.Property(e => e.Addr2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("addr2");
            entity.Property(e => e.Addr3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("addr3");
            entity.Property(e => e.AltDesc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("alt_desc");
            entity.Property(e => e.AltUcost).HasColumnName("alt_ucost");
            entity.Property(e => e.AltUprice).HasColumnName("alt_uprice");
            entity.Property(e => e.Arcreate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("arcreate");
            entity.Property(e => e.Baltucost).HasColumnName("baltucost");
            entity.Property(e => e.Baltuprice).HasColumnName("baltuprice");
            entity.Property(e => e.Batchno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("batchno");
            entity.Property(e => e.Bqty).HasColumnName("bqty");
            entity.Property(e => e.Catalogno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("catalogno");
            entity.Property(e => e.Cname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("cname");
            entity.Property(e => e.Cost).HasColumnName("cost");
            entity.Property(e => e.Costacctcr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("costacctcr");
            entity.Property(e => e.Costacctdb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("costacctdb");
            entity.Property(e => e.Costgl)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("costgl");
            entity.Property(e => e.Currencycd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("currencycd");
            entity.Property(e => e.Custno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("custno");
            entity.Property(e => e.Custpart)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("custpart");
            entity.Property(e => e.Custpo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("custpo");
            entity.Property(e => e.Custpodate)
                .HasDefaultValueSql("(' ')")
                .HasColumnType("datetime")
                .HasColumnName("custpodate");
            entity.Property(e => e.Datetime)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("datetime");
            entity.Property(e => e.Discacctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("discacctcd");
            entity.Property(e => e.Discamt).HasColumnName("discamt");
            entity.Property(e => e.Discdate)
                .HasDefaultValueSql("(' ')")
                .HasColumnType("datetime")
                .HasColumnName("discdate");
            entity.Property(e => e.Duedate)
                .HasDefaultValueSql("(' ')")
                .HasColumnType("datetime")
                .HasColumnName("duedate");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("entityno");
            entity.Property(e => e.Fcacctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("fcacctcd");
            entity.Property(e => e.Funct)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("funct");
            entity.Property(e => e.Invdate)
                .HasDefaultValueSql("(' ')")
                .HasColumnType("datetime")
                .HasColumnName("invdate");
            entity.Property(e => e.Invno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("invno");
            entity.Property(e => e.Item).HasColumnName("item");
            entity.Property(e => e.Lname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("lname");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("locationcd");
            entity.Property(e => e.Matrixcd)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("matrixcd");
            entity.Property(e => e.Memotype)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("memotype");
            entity.Property(e => e.Okind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("okind");
            entity.Property(e => e.Optdate)
                .HasDefaultValueSql("(' ')")
                .HasColumnType("datetime")
                .HasColumnName("optdate");
            entity.Property(e => e.OrderCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("order_code");
            entity.Property(e => e.Orderitem).HasColumnName("orderitem");
            entity.Property(e => e.Orderno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("orderno");
            entity.Property(e => e.OrigAltUcost).HasColumnName("orig_alt_ucost");
            entity.Property(e => e.OrigAltUprice).HasColumnName("orig_alt_uprice");
            entity.Property(e => e.OrigCost).HasColumnName("orig_cost");
            entity.Property(e => e.OrigDiscamt).HasColumnName("orig_discamt");
            entity.Property(e => e.OrigPrice).HasColumnName("orig_price");
            entity.Property(e => e.Paytermscd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("paytermscd");
            entity.Property(e => e.Pdesc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("pdesc");
            entity.Property(e => e.Pid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("pid");
            entity.Property(e => e.Price).HasColumnName("price");
            entity.Property(e => e.Printyn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("printyn");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Reason)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("reason");
            entity.Property(e => e.Ref1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("ref1");
            entity.Property(e => e.Ref10)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("ref10");
            entity.Property(e => e.Ref11)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("ref11");
            entity.Property(e => e.Ref2)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("ref2");
            entity.Property(e => e.Ref3)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("ref3");
            entity.Property(e => e.Ref4)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("ref4");
            entity.Property(e => e.Ref5)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("ref5");
            entity.Property(e => e.Ref6)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("ref6");
            entity.Property(e => e.Ref7)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("ref7");
            entity.Property(e => e.Ref8)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("ref8");
            entity.Property(e => e.Ref9)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("ref9");
            entity.Property(e => e.RtrnConc)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("rtrn_conc");
            entity.Property(e => e.Saleacctcr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("saleacctcr");
            entity.Property(e => e.Saleacctdb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("saleacctdb");
            entity.Property(e => e.Salegl)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("salegl");
            entity.Property(e => e.Saleind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("saleind");
            entity.Property(e => e.Salesman)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("salesman");
            entity.Property(e => e.Shipno)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("shipno");
            entity.Property(e => e.Shippart)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("shippart");
            entity.Property(e => e.Sname)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("sname");
            entity.Property(e => e.Subcustno)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("subcustno");
            entity.Property(e => e.Subno)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("subno");
            entity.Property(e => e.Subpart)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("subpart");
            entity.Property(e => e.Tax1).HasColumnName("tax1");
            entity.Property(e => e.Tax2).HasColumnName("tax2");
            entity.Property(e => e.Tax3).HasColumnName("tax3");
            entity.Property(e => e.Tax4).HasColumnName("tax4");
            entity.Property(e => e.Taxcode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("taxcode");
            entity.Property(e => e.Taxdesc1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("taxdesc1");
            entity.Property(e => e.Taxdesc2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("taxdesc2");
            entity.Property(e => e.Taxdesc3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("taxdesc3");
            entity.Property(e => e.Taxdesc4)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("taxdesc4");
            entity.Property(e => e.Taxline)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("taxline");
            entity.Property(e => e.Taxmatrix1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("taxmatrix1");
            entity.Property(e => e.Taxmatrix2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("taxmatrix2");
            entity.Property(e => e.Taxmatrix3)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("taxmatrix3");
            entity.Property(e => e.Taxmatrix4)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("taxmatrix4");
            entity.Property(e => e.Taxyn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("taxyn");
            entity.Property(e => e.Tid)
                .ValueGeneratedOnAdd()
                .HasColumnName("tid");
            entity.Property(e => e.Tidp).HasColumnName("tidp");
            entity.Property(e => e.Uom)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("uom");
            entity.Property(e => e.Updated)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("updated");
            entity.Property(e => e.Wrkqty).HasColumnName("wrkqty");
        });

        modelBuilder.Entity<UnifiedAddress>(entity =>
        {
            entity.HasKey(e => new { e.UnifiedContactId, e.Source, e.Type }).HasName("PK_Unified_Address");

            entity.ToTable("UnifiedAddress", "Contact");

            entity.Property(e => e.UnifiedContactId).HasColumnName("UnifiedContactID");
            entity.Property(e => e.Source)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.AddressLine1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.AddressLine2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.AddressLine3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.AddressLine4)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.City)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Country)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.PostalCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.StateProvince)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");

            entity.HasOne(d => d.UnifiedContact).WithMany(p => p.UnifiedAddresses)
                .HasForeignKey(d => d.UnifiedContactId)
                .HasConstraintName("FK_Unified_Address_Contact");

            entity.HasOne(d => d.AddressDataSourceFieldMap).WithMany(p => p.UnifiedAddresses)
                .HasForeignKey(d => new { d.Source, d.Type })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Unified_Address_Source");
        });

        modelBuilder.Entity<UnifiedContact>(entity =>
        {
            entity.ToTable("UnifiedContact", "Contact", tb => tb.HasTrigger("TR_Contact_refresh_type_flags"));

            entity.HasIndex(e => e.CustomerId, "UC_UnifiedContact_CustomerID")
                .IsUnique()
                .HasFilter("([CustomerID] IS NOT NULL)");

            entity.HasIndex(e => e.EmployeeId, "UC_UnifiedContact_EmployeeID")
                .IsUnique()
                .HasFilter("([EmployeeID] IS NOT NULL)");

            entity.HasIndex(e => e.PaylocityId, "UC_UnifiedContact_PaylocityID")
                .IsUnique()
                .HasFilter("([PaylocityID] IS NOT NULL)");

            entity.HasIndex(e => e.PodioId, "UC_UnifiedContact_PodioID")
                .IsUnique()
                .HasFilter("([PodioID] IS NOT NULL)");

            entity.HasIndex(e => e.VendorId, "UC_UnifiedContact_VendorID")
                .IsUnique()
                .HasFilter("([VendorID] IS NOT NULL)");

            entity.HasIndex(e => e.ISolvedId, "UC_UnifiedContact_iSolvedID")
                .IsUnique()
                .HasFilter("([iSolvedID] IS NOT NULL)");

            entity.Property(e => e.UnifiedContactId)
                .ValueGeneratedNever()
                .HasColumnName("UnifiedContactID");
            entity.Property(e => e.ActiveDirectoryId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ActiveDirectoryID");
            entity.Property(e => e.CustomerId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CustomerID");
            entity.Property(e => e.Department)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EmployeeID");
            entity.Property(e => e.ISolvedId).HasColumnName("iSolvedID");
            entity.Property(e => e.Location)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Organization)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PaylocityId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PaylocityID");
            entity.Property(e => e.PictureFilePath).IsUnicode(false);
            entity.Property(e => e.PodioId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PodioID");
            entity.Property(e => e.Status)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Title)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.VendorId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VendorID");

            entity.HasOne(d => d.StatusNavigation).WithMany(p => p.UnifiedContacts)
                .HasForeignKey(d => d.Status)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Unified_Status");
        });

        modelBuilder.Entity<UnifiedContactBrokerExecutionError>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UnifiedContactBrokerExecutionErrors", "Contact");

            entity.Property(e => e.ExecutionRequest).HasColumnType("xml");
            entity.Property(e => e.RequestType)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<UnifiedContactBrokerExecutionLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UnifiedContactBrokerExecutionLog", "Contact");

            entity.Property(e => e.ExecutionRequest).HasColumnType("xml");
            entity.Property(e => e.RequestType)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<UnifiedContactum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UnifiedContactA", "Contact");

            entity.Property(e => e.ActiveDirectoryId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ActiveDirectoryID");
            entity.Property(e => e.CustomerId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CustomerID");
            entity.Property(e => e.Department)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EmployeeID");
            entity.Property(e => e.ISolvedId).HasColumnName("iSolvedID");
            entity.Property(e => e.Location)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Organization)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PaylocityId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PaylocityID");
            entity.Property(e => e.PictureFilePath).IsUnicode(false);
            entity.Property(e => e.PodioId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PodioID");
            entity.Property(e => e.Status)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Title)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.UnifiedContactId).HasColumnName("UnifiedContactID");
            entity.Property(e => e.VendorId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VendorID");
        });

        modelBuilder.Entity<UnifiedEmail>(entity =>
        {
            entity.HasKey(e => new { e.UnifiedContactId, e.Source, e.EmailAddress, e.Type }).HasName("PK_Unified_Email");

            entity.ToTable("UnifiedEmail", "Contact");

            entity.Property(e => e.UnifiedContactId).HasColumnName("UnifiedContactID");
            entity.Property(e => e.Source)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmailAddress)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");

            entity.HasOne(d => d.UnifiedContact).WithMany(p => p.UnifiedEmails)
                .HasForeignKey(d => d.UnifiedContactId)
                .HasConstraintName("FK_Unified_Email_Contact");

            entity.HasOne(d => d.EmailDataSourceFieldMap).WithMany(p => p.UnifiedEmails)
                .HasForeignKey(d => new { d.Source, d.Type })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Unified_Email_Source");
        });

        modelBuilder.Entity<UnifiedPhone>(entity =>
        {
            entity.HasKey(e => new { e.UnifiedContactId, e.Source, e.PhoneNumber, e.Type }).HasName("PK_Unified_Phone");

            entity.ToTable("UnifiedPhone", "Contact");

            entity.Property(e => e.UnifiedContactId).HasColumnName("UnifiedContactID");
            entity.Property(e => e.Source)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.UnifiedContact).WithMany(p => p.UnifiedPhones)
                .HasForeignKey(d => d.UnifiedContactId)
                .HasConstraintName("FK_Unified_Phone_Contact");

            entity.HasOne(d => d.PhoneDataSourceFieldMap).WithMany(p => p.UnifiedPhones)
                .HasForeignKey(d => new { d.Source, d.Type })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Unified_Phone_Source");
        });

        modelBuilder.Entity<UnplannedTransfersStagingArea>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UnplannedTransfersStagingArea");

            entity.Property(e => e.Barcodes).IsUnicode(false);
            entity.Property(e => e.CheckinWh)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("checkinWH");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.Empname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("empname");
            entity.Property(e => e.FromEntityDesc)
                .IsUnicode(false)
                .HasColumnName("fromEntityDesc");
            entity.Property(e => e.FromEntityNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fromEntityNo");
            entity.Property(e => e.Partdesc)
                .IsUnicode(false)
                .HasColumnName("partdesc");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.R).HasColumnName("r");
            entity.Property(e => e.ReturnWh)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("returnWH");
            entity.Property(e => e.ToEntityDesc)
                .IsUnicode(false)
                .HasColumnName("toEntityDesc");
            entity.Property(e => e.ToEntityNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("toEntityNo");
            entity.Property(e => e.Transtype)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("transtype");
        });

        modelBuilder.Entity<UseLogger>(entity =>
        {
            entity.HasKey(e => e.Name);

            entity.ToTable("UseLogger");

            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastAccess).HasColumnType("datetime");
            entity.Property(e => e.LastAccessBy)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.LoggingStartDate).HasColumnType("datetime");
            entity.Property(e => e.PreviousLastAccess).HasColumnType("datetime");
            entity.Property(e => e.PreviousLastAccessBy)
                .HasMaxLength(128)
                .IsUnicode(false);
        });

        modelBuilder.Entity<UsedEquipmentSalesRevenueAccount>(entity =>
        {
            entity.HasKey(e => e.Acctcd);

            entity.Property(e => e.Acctcd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("acctcd");

            entity.HasOne(d => d.AcctcdNavigation).WithOne(p => p.UsedEquipmentSalesRevenueAccount)
                .HasPrincipalKey<Glaccount>(p => p.Acctcd)
                .HasForeignKey<UsedEquipmentSalesRevenueAccount>(d => d.Acctcd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UsedEquipmentSalesRevenueAccounts_glaccounts");
        });

        modelBuilder.Entity<UsedGearSalesCollection>(entity =>
        {
            entity.HasKey(e => e.ShopifyCollectionId);

            entity.Property(e => e.ShopifyCollectionId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ShopifyCollectionID");
            entity.Property(e => e.Commodity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("commodity");
            entity.Property(e => e.CompanyCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ShopifyCollectionDescription)
                .IsUnicode(false)
                .HasDefaultValue("");

            entity.HasOne(d => d.CompanyCodeNavigation).WithMany(p => p.UsedGearSalesCollections)
                .HasForeignKey(d => d.CompanyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UsedGearSalesCollections_Company");
        });

        modelBuilder.Entity<UsedGearSalesPartCollection>(entity =>
        {
            entity.HasKey(e => new { e.Partno, e.CompanyCode, e.ShopifyCollectionId });

            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("partno");
            entity.Property(e => e.CompanyCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ShopifyCollectionId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ShopifyCollectionID");

            entity.HasOne(d => d.CompanyCodeNavigation).WithMany(p => p.UsedGearSalesPartCollections)
                .HasForeignKey(d => d.CompanyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UsedGearSalesPartCollections_Company");

            entity.HasOne(d => d.PartnoNavigation).WithMany(p => p.UsedGearSalesPartCollections)
                .HasForeignKey(d => d.Partno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UsedGearSalesPartCollections_inpart");

            entity.HasOne(d => d.ShopifyCollection).WithMany(p => p.UsedGearSalesPartCollections)
                .HasForeignKey(d => d.ShopifyCollectionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UsedGearSalesPartCollections_UsedGearSalesCollections");
        });

        modelBuilder.Entity<UsedGearSalesPartCollectionsBulkSave>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UsedGearSalesPartCollectionsBulkSave");

            entity.Property(e => e.CompanyCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("partno");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.ShopifyCollectionId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ShopifyCollectionID");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<UsedGearSalesSelectedGearImage>(entity =>
        {
            entity.HasKey(e => new { e.Partno, e.CompanyCode, e.ImagePath });

            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("partno");
            entity.Property(e => e.CompanyCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ImagePath)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ImageSeo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ImageSEO");
        });

        modelBuilder.Entity<UsedGearSalesSelectedGearImagesBulkSave>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UsedGearSalesSelectedGearImagesBulkSave");

            entity.Property(e => e.CompanyCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ImagePath)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ImageSeo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ImageSEO");
            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("partno");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
        });

        modelBuilder.Entity<UsedGearSalesStatusType>(entity =>
        {
            entity.HasKey(e => e.UsedGearSalesStatusTypeCode)
                .HasName("PK_UsedGearSalesSalesStatusTypes")
                .IsClustered(false);

            entity.Property(e => e.UsedGearSalesStatusTypeCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.UsedGearSalesStatusTypeDesc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<UserMenuInclusion>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("user_menu_inclusions");

            entity.Property(e => e.Cmndsel)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cmndsel");
            entity.Property(e => e.Menuname)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("menuname");
            entity.Property(e => e.Packagecd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("packagecd");
        });

        modelBuilder.Entity<UserPermission>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("UserPermissions");

            entity.Property(e => e.Role)
                .HasMaxLength(128)
                .HasColumnName("role");
            entity.Property(e => e.RoleId).HasColumnName("roleID");
            entity.Property(e => e.UId).HasColumnName("uID");
            entity.Property(e => e.Username)
                .HasMaxLength(128)
                .HasColumnName("username");
        });

        modelBuilder.Entity<UserPreference>(entity =>
        {
            entity.HasKey(e => new { e.UserName, e.Tag });

            entity.Property(e => e.UserName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("user_name");
            entity.Property(e => e.Tag)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Value)
                .HasColumnType("sql_variant")
                .HasColumnName("value");

            entity.HasOne(d => d.UserNameNavigation).WithMany(p => p.UserPreferences)
                .HasForeignKey(d => d.UserName)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserPreferences_pjtfrusr");
        });

        modelBuilder.Entity<UserRole>(entity =>
        {
            entity.HasKey(e => new { e.PermissionName, e.Username });

            entity.ToTable("UserRoles", "ApiGateway");

            entity.Property(e => e.PermissionName)
                .HasMaxLength(100)
                .HasColumnName("permission_name");
            entity.Property(e => e.Username).HasMaxLength(128);
        });

        modelBuilder.Entity<UserWarehouseGroup>(entity =>
        {
            entity.HasKey(e => new { e.WarehouseGroup, e.UserName });

            entity.Property(e => e.WarehouseGroup)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.UserName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("user_name");

            entity.HasOne(d => d.UserNameNavigation).WithMany(p => p.UserWarehouseGroups)
                .HasForeignKey(d => d.UserName)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserWarehouseGroups_pjtfrusr");
        });

        modelBuilder.Entity<UserWarehouseGroupsBulkSave>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UserWarehouseGroupsBulkSave");

            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
            entity.Property(e => e.WarehouseGroupNew)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("WarehouseGroup_new");
            entity.Property(e => e.WarehouseGroupOld)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("WarehouseGroup_old");
        });

        modelBuilder.Entity<UserWarehouseGroupsWarehouse>(entity =>
        {
            entity.HasKey(e => new { e.WarehouseGroup, e.UserName, e.WarehouseCode });

            entity.ToTable("userWarehouseGroupsWarehouses");

            entity.Property(e => e.WarehouseGroup)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.UserName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("user_name");
            entity.Property(e => e.WarehouseCode)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.UserNameNavigation).WithMany(p => p.UserWarehouseGroupsWarehouses)
                .HasForeignKey(d => d.UserName)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_userWarehouseGroupsWarehouses_pjtfrusr");

            entity.HasOne(d => d.WarehouseCodeNavigation).WithMany(p => p.UserWarehouseGroupsWarehouses)
                .HasForeignKey(d => d.WarehouseCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_userWarehouseGroupsWarehouses_Warehouse");

            entity.HasOne(d => d.UserWarehouseGroup).WithMany(p => p.UserWarehouseGroupsWarehouses)
                .HasForeignKey(d => new { d.WarehouseGroup, d.UserName })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_userWarehouseGroupsWarehouses_UserWarehouseGroups");
        });

        modelBuilder.Entity<UserWarehouseGroupsWarehousesBulkSave>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("userWarehouseGroupsWarehousesBulkSave");

            entity.Property(e => e.IsDelete).HasColumnName("is_delete");
            entity.Property(e => e.IsInsert).HasColumnName("is_insert");
            entity.Property(e => e.IsUpdate).HasColumnName("is_update");
            entity.Property(e => e.SessionId)
                .HasDefaultValueSql("(@@spid)")
                .HasColumnName("session_id");
            entity.Property(e => e.UpdateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_time");
            entity.Property(e => e.WarehouseCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseGroupNew)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("WarehouseGroup_new");
            entity.Property(e => e.WarehouseGroupOld)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("WarehouseGroup_old");
        });

        modelBuilder.Entity<UsrPurchActivityTemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("usr_PurchActivityTemp");

            entity.Property(e => e.Glcode).HasColumnName("GLCode");
            entity.Property(e => e.MlastReceiptDat).HasColumnName("MLastReceiptDat");
            entity.Property(e => e.MlatestDueDate).HasColumnName("MLatestDueDate");
            entity.Property(e => e.Mprice).HasColumnName("MPrice");
            entity.Property(e => e.MsalesOrder).HasColumnName("MSalesOrder");
            entity.Property(e => e.MstockCode).HasColumnName("MStockCode");
            entity.Property(e => e.MstockDes).HasColumnName("MStockDes");
            entity.Property(e => e.Pocurrency).HasColumnName("POCurrency");
            entity.Property(e => e.UsditemPrice).HasColumnName("USDItemPrice");
        });

        modelBuilder.Entity<VPollstarEventsWithSongkickLink>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vPollstarEventsWithSongkickLinks");

            entity.Property(e => e.ActCode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.EventType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.MetroAreaId).HasColumnName("MetroAreaID");
            entity.Property(e => e.PollstarArtistId).HasColumnName("PollstarArtistID");
            entity.Property(e => e.PollstarVenueId).HasColumnName("PollstarVenueID");
            entity.Property(e => e.SongkickArtistId).HasColumnName("SongkickArtistID");
            entity.Property(e => e.SongkickVenueId).HasColumnName("SongkickVenueID");
            entity.Property(e => e.Source)
                .HasMaxLength(17)
                .IsUnicode(false);
            entity.Property(e => e.StateId).HasColumnName("StateID");
        });

        modelBuilder.Entity<VPollstarSongkickEvent>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vPollstarSongkickEvents");

            entity.Property(e => e.ActCode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.EventType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.MetroAreaId).HasColumnName("MetroAreaID");
            entity.Property(e => e.PollstarArtistId).HasColumnName("PollstarArtistID");
            entity.Property(e => e.PollstarVenueId).HasColumnName("PollstarVenueID");
            entity.Property(e => e.SongkickArtistId).HasColumnName("SongkickArtistID");
            entity.Property(e => e.SongkickVenueId).HasColumnName("SongkickVenueID");
            entity.Property(e => e.Source)
                .HasMaxLength(17)
                .IsUnicode(false);
            entity.Property(e => e.StateId).HasColumnName("StateID");
            entity.Property(e => e.VenueCode)
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VPollstarSongkickLinkedEvent>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vPollstarSongkickLinkedEvents");

            entity.Property(e => e.ActCode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.EventType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.PollstarArtistId).HasColumnName("PollstarArtistID");
            entity.Property(e => e.PollstarVenueId).HasColumnName("PollstarVenueID");
            entity.Property(e => e.SongkickArtistId).HasColumnName("SongkickArtistID");
            entity.Property(e => e.SongkickVenueId).HasColumnName("SongkickVenueID");
            entity.Property(e => e.Source)
                .HasMaxLength(17)
                .IsUnicode(false);
            entity.Property(e => e.StateId).HasColumnName("StateID");
        });

        modelBuilder.Entity<VSongkickEventsWithPollstarLink>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vSongkickEventsWithPollstarLinks");

            entity.Property(e => e.ActCode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.EventType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.MetroAreaId).HasColumnName("MetroAreaID");
            entity.Property(e => e.PollstarArtistId).HasColumnName("PollstarArtistID");
            entity.Property(e => e.PollstarVenueId).HasColumnName("PollstarVenueID");
            entity.Property(e => e.SongkickArtistId).HasColumnName("SongkickArtistID");
            entity.Property(e => e.SongkickVenueId).HasColumnName("SongkickVenueID");
            entity.Property(e => e.Source)
                .HasMaxLength(17)
                .IsUnicode(false);
            entity.Property(e => e.StateId).HasColumnName("StateID");
        });

        modelBuilder.Entity<Vatstatus>(entity =>
        {
            entity.HasKey(e => e.StatusCode);

            entity.ToTable("VATStatus");

            entity.Property(e => e.StatusCode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.DefaultTaxTypeKey)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.StatusDesc)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Vehicle>(entity =>
        {
            entity.HasKey(e => e.IdVehicle).HasName("PK_vehicle");

            entity.ToTable("Vehicle");

            entity.Property(e => e.AvgSpeed).HasColumnType("numeric(18, 8)");
            entity.Property(e => e.Caption).HasMaxLength(50);
            entity.Property(e => e.ChassisNumber).HasMaxLength(20);
            entity.Property(e => e.Comment).HasMaxLength(255);
            entity.Property(e => e.EmissionCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.Gvw).HasColumnName("GVW");
            entity.Property(e => e.Jobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("jobtype");
            entity.Property(e => e.LastInspection).HasColumnType("datetime");
            entity.Property(e => e.Manufacturer).HasMaxLength(50);
            entity.Property(e => e.ModelYear).HasMaxLength(50);
            entity.Property(e => e.NetVolume).HasColumnType("numeric(18, 8)");
            entity.Property(e => e.NetWeight).HasColumnType("numeric(18, 8)");
            entity.Property(e => e.NextMaintenance).HasColumnType("datetime");
            entity.Property(e => e.NumberSign).HasMaxLength(50);
            entity.Property(e => e.Owner)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("owner");
            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.TyreSize).HasMaxLength(20);
            entity.Property(e => e.VehicleType).HasMaxLength(50);
            entity.Property(e => e.Warehouse)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("warehouse");

            entity.HasOne(d => d.OwnerNavigation).WithMany(p => p.Vehicles)
                .HasForeignKey(d => d.Owner)
                .HasConstraintName("FK_Vehicle_EquipmentOwner");

            entity.HasOne(d => d.StatusNavigation).WithMany(p => p.Vehicles)
                .HasForeignKey(d => d.Status)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_vehicle_status");

            entity.HasOne(d => d.WarehouseNavigation).WithMany(p => p.Vehicles)
                .HasForeignKey(d => d.Warehouse)
                .HasConstraintName("FK_vehicle_warehouse");
        });

        modelBuilder.Entity<Vendor>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vendor");

            entity.Property(e => e.Activeind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("activeind");
            entity.Property(e => e.Cellphone)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("cellphone");
            entity.Property(e => e.Contact)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("contact");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.FileStorageGuid).HasColumnName("FileStorageGUID");
            entity.Property(e => e.Lastactivity)
                .HasColumnType("datetime")
                .HasColumnName("lastactivity");
            entity.Property(e => e.Parent)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("parent");
            entity.Property(e => e.SiteNo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("site_no");
            entity.Property(e => e.ToName)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("to_name");
            entity.Property(e => e.Vendno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("vendno");
            entity.Property(e => e.VendorName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vendor_name");
        });

        modelBuilder.Entity<VendorAddress>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VendorAddress", "Contact");

            entity.Property(e => e.AddressLine1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AddressLine2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AddressLine3)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AddressLine4)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Country)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.PostalCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.StateProvince)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.VendorId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VendorID");
        });

        modelBuilder.Entity<VendorAddress1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VendorAddresses");

            entity.Property(e => e.Abnnumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ABNNumber");
            entity.Property(e => e.AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Activeind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("activeind");
            entity.Property(e => e.Address1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("address_1");
            entity.Property(e => e.Address2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("address_2");
            entity.Property(e => e.Address3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("address_3");
            entity.Property(e => e.Ap1099Ind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ap1099_ind");
            entity.Property(e => e.Bank)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("bank");
            entity.Property(e => e.BuyerCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("buyer_code");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("city");
            entity.Property(e => e.Contact)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("contact");
            entity.Property(e => e.Country)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("country");
            entity.Property(e => e.Currencycd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("currencycd");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.Email2)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("email2");
            entity.Property(e => e.Extension)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("extension");
            entity.Property(e => e.Fax)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("fax");
            entity.Property(e => e.Lastactivity)
                .HasColumnType("datetime")
                .HasColumnName("lastactivity");
            entity.Property(e => e.Mobile)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("mobile");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("notes");
            entity.Property(e => e.Paytermscd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("paytermscd");
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("phone");
            entity.Property(e => e.SearchString)
                .HasMaxLength(133)
                .IsUnicode(false)
                .HasColumnName("search_string");
            entity.Property(e => e.SiteNo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("site_no");
            entity.Property(e => e.State)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("state");
            entity.Property(e => e.Taxid)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("taxid");
            entity.Property(e => e.VatidentificationNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VATIdentificationNumber");
            entity.Property(e => e.Vatstatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("VATStatus");
            entity.Property(e => e.VendCustno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("vend_custno");
            entity.Property(e => e.Vendno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("vendno");
            entity.Property(e => e.VendorName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vendor_name");
            entity.Property(e => e.Zipcode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("zipcode");
        });

        modelBuilder.Entity<VendorContact>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VendorContact", "Contact");

            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Organization)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SiteNum)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.VendorId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("VendorID");
            entity.Property(e => e.VendorNum)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VendorEmail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VendorEmail", "Contact");

            entity.Property(e => e.EmailAddress)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.VendorId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("VendorID");
        });

        modelBuilder.Entity<VendorPhone>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VendorPhone", "Contact");

            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.VendorId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("VendorID");
        });

        modelBuilder.Entity<VenueType>(entity =>
        {
            entity.HasKey(e => e.VenueCode);

            entity.ToTable("VenueType");

            entity.Property(e => e.VenueCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.OarevOpPerShowHigh)
                .HasColumnType("money")
                .HasColumnName("OARevOpPerShowHigh");
            entity.Property(e => e.OarevOpPerShowLow)
                .HasColumnType("money")
                .HasColumnName("OARevOpPerShowLow");
            entity.Property(e => e.RevOpPerShowHigh).HasColumnType("money");
            entity.Property(e => e.RevOpPerShowLow).HasColumnType("money");
            entity.Property(e => e.ShortName)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.VenueDesc)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VenuesAndShippingDestination>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Venues_And_Shipping_Destinations");

            entity.Property(e => e.DisplayMember)
                .HasMaxLength(307)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LocationName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Phone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SourceData)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ValueMember)
                .HasMaxLength(156)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Warehouse>(entity =>
        {
            entity.HasKey(e => e.WarehouseCode);

            entity.ToTable("Warehouse");

            entity.Property(e => e.WarehouseCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.AvailabilityEstoffsetHours).HasColumnName("AvailabilityESTOffsetHours");
            entity.Property(e => e.BidProjectChangeRecipients).IsUnicode(false);
            entity.Property(e => e.CompanyCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CycleCountRecipients).IsUnicode(false);
            entity.Property(e => e.DoUtilization).HasColumnName("doUtilization");
            entity.Property(e => e.FirstDayOfWeek)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasDefaultValue("Sunday");
            entity.Property(e => e.IncludeInCrewTools)
                .HasDefaultValue(true)
                .HasColumnName("includeInCrewTools");
            entity.Property(e => e.IsVisible)
                .HasDefaultValue(true)
                .HasColumnName("isVisible");
            entity.Property(e => e.LateReturnsRecipients).IsUnicode(false);
            entity.Property(e => e.Latitude).HasColumnType("decimal(11, 7)");
            entity.Property(e => e.Locationcd)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("locationcd");
            entity.Property(e => e.Longitude).HasColumnType("decimal(12, 7)");
            entity.Property(e => e.Region)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SalesForecastGroup)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TimezoneName).HasMaxLength(128);
            entity.Property(e => e.TransferOrderAcctExec)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TransferOrderBillingCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransferOrderOpsManager)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TransferOrderSecondaryOpsManager)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseDesc)
                .HasMaxLength(70)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseLocalTime).HasComputedColumnSql("((sysdatetimeoffset() AT TIME ZONE [TimezoneName]))", false);

            entity.HasOne(d => d.AvailabilityEstoffsetHoursNavigation).WithMany(p => p.Warehouses)
                .HasForeignKey(d => d.AvailabilityEstoffsetHours)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Warehouse_TodayInTimeZone");

            entity.HasOne(d => d.CompanyCodeNavigation).WithMany(p => p.Warehouses)
                .HasForeignKey(d => d.CompanyCode)
                .HasConstraintName("FK_Warehouse_Company");

            entity.HasOne(d => d.LocationcdNavigation).WithMany(p => p.Warehouses)
                .HasPrincipalKey(p => p.Locationcd)
                .HasForeignKey(d => d.Locationcd)
                .HasConstraintName("FK_Warehouse__locationcd");

            entity.HasOne(d => d.RegionNavigation).WithMany(p => p.Warehouses)
                .HasForeignKey(d => d.Region)
                .HasConstraintName("FK_Warehouse_GeographicalRegion");

            entity.HasOne(d => d.SalesForecastGroupNavigation).WithMany(p => p.Warehouses)
                .HasForeignKey(d => d.SalesForecastGroup)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Warehouse_SalesForecastGroup");

            entity.HasMany(d => d.IdLanguages).WithMany(p => p.IdLocations)
                .UsingEntity<Dictionary<string, object>>(
                    "XlatDefault",
                    r => r.HasOne<XlatLanguage>().WithMany()
                        .HasForeignKey("IdLanguage")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_xlat_defaults_id_language"),
                    l => l.HasOne<Warehouse>().WithMany()
                        .HasForeignKey("IdLocation")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_xlat_defaults_id_location"),
                    j =>
                    {
                        j.HasKey("IdLocation", "IdLanguage");
                        j.ToTable("xlat_defaults");
                        j.IndexerProperty<string>("IdLocation")
                            .HasMaxLength(10)
                            .IsUnicode(false)
                            .HasColumnName("id_location");
                        j.IndexerProperty<int>("IdLanguage").HasColumnName("id_language");
                    });
        });

        modelBuilder.Entity<Warehouse1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("warehouses");

            entity.Property(e => e.IsDefault).HasColumnName("is_default");
            entity.Property(e => e.SalesForecastGroup)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("warehouse_code");
            entity.Property(e => e.WarehouseDescription)
                .HasMaxLength(70)
                .IsUnicode(false)
                .HasColumnName("warehouse_description");
        });

        modelBuilder.Entity<WarehouseCycleCount>(entity =>
        {
            entity.HasKey(e => new { e.Warehouse, e.Partno, e.Lastcount });

            entity.Property(e => e.Warehouse)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("warehouse");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.Lastcount)
                .HasColumnType("datetime")
                .HasColumnName("lastcount");
            entity.Property(e => e.Username)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("username");

            entity.HasOne(d => d.PartnoNavigation).WithMany(p => p.WarehouseCycleCounts)
                .HasForeignKey(d => d.Partno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WarehouseCycleCounts_inpart");

            entity.HasOne(d => d.WarehouseNavigation).WithMany(p => p.WarehouseCycleCounts)
                .HasForeignKey(d => d.Warehouse)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WarehouseCycleCounts_warehouses");
        });

        modelBuilder.Entity<WarehouseCycleCountsV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("WarehouseCycleCounts_v");

            entity.Property(e => e.Lastcount)
                .HasColumnType("datetime")
                .HasColumnName("lastcount");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.R).HasColumnName("r");
            entity.Property(e => e.Username)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("username");
            entity.Property(e => e.Warehouse)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("warehouse");
        });

        modelBuilder.Entity<WarehouseHoliday>(entity =>
        {
            entity.HasKey(e => new { e.WarehouseCode, e.Date });

            entity.ToTable("WarehouseHoliday");

            entity.Property(e => e.WarehouseCode)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.WarehouseCodeNavigation).WithMany(p => p.WarehouseHolidays)
                .HasForeignKey(d => d.WarehouseCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WarehouseHoliday_Warehouse");
        });

        modelBuilder.Entity<WarehouseLateReturnsLastNotification>(entity =>
        {
            entity.HasKey(e => e.WarehouseCode);

            entity.ToTable("WarehouseLateReturnsLastNotification");

            entity.Property(e => e.WarehouseCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.NotificationTimeUtc)
                .HasPrecision(0)
                .HasColumnName("NotificationTimeUTC");

            entity.HasOne(d => d.WarehouseCodeNavigation).WithOne(p => p.WarehouseLateReturnsLastNotification)
                .HasForeignKey<WarehouseLateReturnsLastNotification>(d => d.WarehouseCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WarehouseLateReturnsLastNotification_Warehouse");
        });

        modelBuilder.Entity<WarehousePartQty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("warehouse_part_qty");

            entity.Property(e => e.Bld)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bld");
            entity.Property(e => e.CBig).HasColumnName("cBig");
            entity.Property(e => e.InstockQty).HasColumnName("instockQty");
            entity.Property(e => e.Partno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("partno");
            entity.Property(e => e.RepairQty).HasColumnName("repairQty");
            entity.Property(e => e.TotalQty).HasColumnName("totalQty");
        });

        modelBuilder.Entity<WarehouseTransVolume>(entity =>
        {
            entity.HasKey(e => new { e.TransactionDate, e.WarehouseCode });

            entity.ToTable("WarehouseTransVolume");

            entity.HasIndex(e => e.TransactionDate, "IX_WarehouseTransVolume_TransactionDate");

            entity.HasIndex(e => e.WarehouseCode, "IX_WarehouseTransVolume_WarehouseCode");

            entity.Property(e => e.WarehouseCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CheckinCount).HasColumnType("decimal(30, 0)");
            entity.Property(e => e.CheckinValueUsd)
                .HasColumnType("decimal(30, 0)")
                .HasColumnName("CheckinValueUSD");
            entity.Property(e => e.CheckoutCount).HasColumnType("decimal(10, 0)");
            entity.Property(e => e.CheckoutValueUsd)
                .HasColumnType("decimal(10, 0)")
                .HasColumnName("CheckoutValueUSD");
        });

        modelBuilder.Entity<WarehouseTransactionVolume>(entity =>
        {
            entity.HasKey(e => new { e.TransactionDate, e.WarehouseCode });

            entity.ToTable("WarehouseTransactionVolume");

            entity.HasIndex(e => e.TransactionDate, "IX_WarehouseTransactionVolume_TransactionDate");

            entity.HasIndex(e => e.WarehouseCode, "IX_WarehouseTransactionVolume_WarehouseCode");

            entity.Property(e => e.WarehouseCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CheckinCount).HasColumnType("decimal(30, 0)");
            entity.Property(e => e.CheckinValueUsd)
                .HasColumnType("decimal(30, 0)")
                .HasColumnName("CheckinValueUSD");
            entity.Property(e => e.CheckoutCount).HasColumnType("decimal(10, 0)");
            entity.Property(e => e.CheckoutValueUsd)
                .HasColumnType("decimal(10, 0)")
                .HasColumnName("CheckoutValueUSD");
        });

        modelBuilder.Entity<WarehouseTransferShipment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Warehouse_Transfer_Shipments");

            entity.Property(e => e.CompanyDesc)
                .HasMaxLength(70)
                .IsUnicode(false);
            entity.Property(e => e.DestinationName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DestinationWh)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DestinationWH");
            entity.Property(e => e.Entitydesc)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("entitydesc");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
            entity.Property(e => e.EntitynoRef)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entitynoRef");
            entity.Property(e => e.RecipientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SenderUsername)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ServiceTypeDisplayName)
                .HasMaxLength(105)
                .IsUnicode(false);
            entity.Property(e => e.ShipDate).HasColumnType("datetime");
            entity.Property(e => e.SourceWh)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SourceWH");
            entity.Property(e => e.SpecialAttention)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Warehouseregion>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("warehouseregions", "varko");

            entity.Property(e => e.Region)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Warehousedesc)
                .HasMaxLength(70)
                .IsUnicode(false)
                .HasColumnName("warehousedesc");
        });

        modelBuilder.Entity<WavStat>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("WavStats", "SpeakerTest");

            entity.HasIndex(e => new { e.WavType, e.ShortName, e.Test, e.Configuration, e.InputNumber, e.CabinetPosition }, "IX_WavStats");

            entity.HasIndex(e => new { e.WavType, e.ResultCurveId }, "IX_WavStats_CurveIDAndType")
                .IsUnique()
                .IsClustered();

            entity.Property(e => e.Configuration)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HasSoxstats).HasColumnName("HasSOXStats");
            entity.Property(e => e.LengthSeconds).HasColumnName("Length (seconds)");
            entity.Property(e => e.ResultCurveId).HasColumnName("ResultCurveID");
            entity.Property(e => e.Rmsamplitude).HasColumnName("RMSAmplitude");
            entity.Property(e => e.Rmsdelta).HasColumnName("RMSDelta");
            entity.Property(e => e.ShortName)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.StackTestId).HasColumnName("StackTestID");
            entity.Property(e => e.StationDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Test)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UniqueNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("unique_no");
            entity.Property(e => e.WavPath).HasMaxLength(255);
            entity.Property(e => e.WavType)
                .HasMaxLength(3)
                .IsUnicode(false);
        });

        modelBuilder.Entity<WeekendCrewPrep>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("weekend_crew_prep");

            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.Empname)
                .HasMaxLength(51)
                .IsUnicode(false)
                .HasColumnName("empname");
            entity.Property(e => e.Empno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empno");
            entity.Property(e => e.Entitydesc)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("entitydesc");
            entity.Property(e => e.Entityno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("entityno");
        });

        modelBuilder.Entity<WhiteListedUrl>(entity =>
        {
            entity.ToTable("WhiteListedUrl", "ApiGateway");

            entity.HasIndex(e => e.Url, "IX_WhiteListedDomain_WhiteListedUrl");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("id");
            entity.Property(e => e.ApiKey)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("api_key");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasColumnName("is_active");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updated_at");
            entity.Property(e => e.Url)
                .HasMaxLength(255)
                .HasColumnName("url");

            entity.HasOne(d => d.ApiKeyNavigation).WithMany(p => p.WhiteListedUrls)
                .HasForeignKey(d => d.ApiKey)
                .HasConstraintName("FK_ApiKeys_WhiteListedUrl");
        });

        modelBuilder.Entity<XlatLanguage>(entity =>
        {
            entity.HasKey(e => e.IdLanguage);

            entity.ToTable("xlat_languages");

            entity.Property(e => e.IdLanguage).HasColumnName("id_language");
            entity.Property(e => e.AltIdLanguage).HasColumnName("alt_id_language");
            entity.Property(e => e.IncludeInQuoteReport).HasDefaultValue(false);
            entity.Property(e => e.Language)
                .HasMaxLength(50)
                .HasColumnName("language");
        });

        modelBuilder.Entity<ZebraPrinter>(entity =>
        {
            entity.HasKey(e => e.Ipaddress);

            entity.HasIndex(e => e.PrinterName, "UC_ZebraPrinters_PrinterName").IsUnique();

            entity.Property(e => e.Ipaddress)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("IPAddress");
            entity.Property(e => e.LocationDefault)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Macaddress)
                .HasMaxLength(12)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("MACAddress");
            entity.Property(e => e.PrinterName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.LocationDefaultNavigation).WithMany(p => p.ZebraPrinters)
                .HasForeignKey(d => d.LocationDefault)
                .HasConstraintName("FK_ZebraPrinters_Warehouse");
        });

        modelBuilder.Entity<ZipCode>(entity =>
        {
            entity.HasKey(e => e.Zip).HasName("PK__ZipCode__D8F67F7E75D13AAE");

            entity.ToTable("ZipCode");

            entity.Property(e => e.Zip)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.City)
                .HasMaxLength(64)
                .IsUnicode(false);
            entity.Property(e => e.Dst).HasColumnName("DST");
            entity.Property(e => e.Gmtoffset).HasColumnName("GMTOffset");
            entity.Property(e => e.Latitude).HasColumnType("decimal(9, 7)");
            entity.Property(e => e.Longitude).HasColumnType("decimal(10, 7)");
            entity.Property(e => e.State)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
